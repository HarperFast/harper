name: 'Container Security Scanning'
description: 'Scan a container'

inputs:
  containerTarball:
    required: false
    description: 'name of tarball artifact to download and test. defaults to none'
    default: 'none'
  containerImage:
    description: 'image container. defaults to harperdb/harperdb'
    default: 'harperdb/harperdb'
    required: false
  containerTag:
    description: "tag for image. use 'none' for the github sha. defaults to none"
    default: 'none'
    required: false
  GITHUB_TOKEN:
    description: 'GITHUB_TOKEN for posting issues. defaults to none to skip posting'
    default: 'none'
    required: false

runs:
  using: 'composite'
  steps:
    - name: checkout repo
      uses: actions/checkout@v4

###############
# Get Tarball #
###############
    - uses: actions/download-artifact@v4
      if: inputs.containerTarball != 'none'
      with:
        name: ${{ inputs.containerTarball }}

###################
# Actual Scanning #
###################
    - name: Run Trivy vulnerability scanner on ${{ inputs.containerTarball }}
      if: inputs.containerTarball != 'none'
      uses: aquasecurity/trivy-action@0.30.0
      with:
        input: ${{ inputs.containerTarball }}
        format: 'table'
        exit-code: '0'
        hide-progress: true
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        output: trivy.txt

    - name: Run Trivy vulnerability scanner on ${{ inputs.containerImage }}:${{ inputs.containerTag }}
      if: inputs.containerTarball == 'none'
      uses: aquasecurity/trivy-action@0.30.0
      with:
        image-ref: ${{ inputs.containerImage }}:${{ inputs.containerTag }}
        format: 'table'
        exit-code: '0'
        hide-progress: true
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        output: trivy.txt

#######################
# handle trivy output #
#######################
    - name: Create Trivy Summary Output
      id: trivy_summary
      env:
        file: trivy.txt
      shell: bash
      run: |
        #!/usr/bin/env bash
        # set imageName 
        [[ "${file##*/}" == "Dockerfile" ]] && echo "imageName=harperdb" >> "${GITHUB_OUTPUT}"
        [[ "${file##*/}" == "Dockerfile-"* ]] && echo "imageName=harperdb-${file##*-}" >> "${GITHUB_OUTPUT}"
        
        delimiter="$(openssl rand -hex 8)"
        cat <<EOF >> "${GITHUB_OUTPUT}"
        summary<<${delimiter}
        ### Security Output
        
        \`\`\`
        $(cat trivy.txt)
        \`\`\`
        
        ${delimiter}
        EOF

    - name: Post Trivy Step Summary
      env:
        SUMMARY: ${{ steps.trivy_summary.outputs.summary }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        delimiter="$(openssl rand -hex 8)"
        cat <<EOF >> "${GITHUB_STEP_SUMMARY}"
        summary<<${delimiter}
        ### Security Output
        <details><summary>Click to expand</summary>
        
        \`\`\`
        $(cat trivy.txt)
        \`\`\`
        </details>
        ${delimiter}
        EOF

    # If changes are detected, create a new issue
    - name: Manage Container Image Security Issue
      if: inputs.GITHUB_TOKEN != 'none'
      id: post_trivy_issue
      uses: actions/github-script@v7
      env:
        SUMMARY: '${{ steps.trivy_summary.outputs.summary }}'
        CONTAINER: '${{ inputs.container }}'
        PLATFORMS: '${{ inputs.platforms }}'
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const body = `${process.env.SUMMARY}`;
          const title = '${{ steps.trivy_summary.outputs.imageName }} ${{ inputs.platforms }} Security Scan';
          const creator = 'github-actions[bot]'
          
          // Look to see if there is an existing issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            creator: creator,
            title: title
          })
          
          // the search sucks, or maybe titles are too similar. Either way, we grab whatever is first and matches the title
          const issue = issues.data.find( o => o.title === title)
          
          if( issue !== undefined ) {
            if ( issue.body == body ) {
              console.log('Security Scan: Found matching issue with duplicate content')
              core.setOutput('issue_url', issue.html_url.toString());
              core.setOutput('issue_status', 'Issue Exists');
          
            } else {
              console.log('Security Scan: Found matching issue, updating body')
              const result = await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: body
              })
              core.setOutput('issue_url', result.data.html_url.toString());
              core.setOutput('issue_status', 'Updating Issue');
            } 
          
          } else {
            console.log('Creating new issue')
            const result = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body
            })
            core.setOutput('issue_url', result.data.html_url.toString());
            core.setOutput('issue_status', 'Creating Issue');
          }
