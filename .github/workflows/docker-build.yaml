name: "Docker Build"

#################################################################################################################################
# Prerequisites
#---------------
# Artifacts:
#  harperdb-${{ inputs.harperdbVersion }}.tgz  -- harperdb tarball from build.yaml or NPM
#
#  licenses                                    -- 'licenses' artifact generated from build.yaml
#
# Outputs
#---------------
# Artifact for container == 'tar'
#   docker-harperdb_${{ inputs.harperdbVersion }}-<standard|openshift>-<amd64|arm64>-${{ github.run_number }}.tar
#   ex: docker-harperdb_4.3.0-beta.4-standard-amd64-934.tar
#
#################################################################################################################################

on:
  workflow_call:
    inputs:
      harperdbVersion:
        required: true
        type: string
      container:
        description: 'Which container to build, harperdb/private, harperdb/harperdb, harperdb/fabric, harperdb/openshift, tar, or public for both harperdb and openshift'
        default: 'tar'
        required: false
        type: string
      file:
        description: 'Which dockerfile to use for this build. ignored except when harperdb/private, or tar.'
        default: 'utility/Docker/Dockerfile'
        required: false
        type: string
      latest:
        description: 'tag this build as latest in registry'
        default: false
        required: false
        type: boolean
      platforms:
        description: 'Which platform(s) to build for: linux/amd64 and/or linux/arm64'
        default: "linux/amd64"
        required: false
        type: string
      push:
        description: 'push the resultant image to dockerhub. ignored when tar'
        default: false
        required: false
        type: boolean
      containerTarball:
        description: 'override name for tarball created when container is tar: "default" tries to create a good name'
        default: 'default'
        type: string

    secrets:
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false

jobs:
  ##########################
  #  Build Container Images
  ##########################
  build_container:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: "Setup Docker buildx"
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: inputs.container != 'tar' || inputs.push == true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: actions/download-artifact@v4
        with:
          name: harperdb-${{ inputs.harperdbVersion }}.tgz
          path: ./

      - uses: actions/download-artifact@v4
        with:
          name: "licenses"
          path: "utility/Docker/licenses/"

      # generate tags for containers
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ${{ inputs.container == 'tar' && 'harperdb/harperdb' || inputs.container }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,enable=${{ inputs.container != 'harperdb/private'}},value=${{ inputs.harperdbVersion }}
            type=raw,enable=${{ inputs.container == 'harperdb/private'}},value=${{ inputs.harperdbVersion }}-${{ github.run_number }}
            type=raw,enable=${{ inputs.container == 'tar'}},value=${{ inputs.harperdbVersion }}-${{ github.run_number }}
            type=raw,value=latest,enable=${{ inputs.latest }}
            type=raw,value=${{ github.sha }}

      # build containers
      - name: "Build ${{ inputs.container }}:${{ inputs.harperdbVersion }}"
        if: inputs.container != 'tar'
        id: build-image
        timeout-minutes: 30
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.file }}
          load: true
          platforms: ${{ inputs.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            HARPERDB_VERSION=${{ inputs.harperdbVersion }}
            HARPERDB_TARBALL=harperdb-${{ inputs.harperdbVersion }}.tgz
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T`
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Security scan for container
      - name: Run Trivy vulnerability scanner
        if: inputs.container != 'tar'
        id: scan-image
        uses: aquasecurity/trivy-action@master
        with:
          format: 'github'
          image-ref: ${{ inputs.container == 'tar' && 'harperdb/harperdb' || inputs.container }}:${{ github.sha }}
          severity: 'CRITICAL,HIGH'

      # publish containers
      - name: "Build ${{ inputs.container }}:${{ inputs.harperdbVersion }}"
        if: inputs.container != 'tar' && inputs.push == true
        id: publish-image
        timeout-minutes: 30
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.file }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            HARPERDB_VERSION=${{ inputs.harperdbVersion }}
            HARPERDB_TARBALL=harperdb-${{ inputs.harperdbVersion }}.tgz
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T`
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Set tar name'
        id: set-tar-name
        if: inputs.container == 'tar'
        env:
          harperdbVersion: ${{ inputs.harperdbVersion }}
          runNumber: ${{ github.run_number }}
          containerFile: ${{ inputs.file }}
          platform: ${{ inputs.platforms }}
          containerTarball: ${{ inputs.containerTarball }}
        run: |
          #!/usr/bin/env bash
          if [[ "${containerTarball}" == "default" ]]; then
            base="docker-harperdb_${harperdbVersion}-"
            [[ "${containerFile}" == *"-openshift" ]] && flavor='-openshift' || flavor=''
            arch="-${platform##*/}"
            echo "tarName=${base}${runNumber}${flavor}${arch}.tar" >> "${GITHUB_OUTPUT}"
          else
            echo "tarName=${containerTarball}" >> "${GITHUB_OUTPUT}"
          fi

      - name: "Create container tarball"
        id: build-image-tar
        if: inputs.container == 'tar'
        timeout-minutes: 30
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.file }}
          platforms: ${{ inputs.platforms }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=${{ steps.set-tar-name.outputs.tarName }}
          build-args: |
            HARPERDB_VERSION=${{ inputs.harperdbVersion }}
            HARPERDB_TARBALL=harperdb-${{ inputs.harperdbVersion }}.tgz
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T`
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        if: inputs.container == 'tar'
        id: scan-image-tar
        uses: aquasecurity/trivy-action@master
        with:
          #format: 'table'
          hide-progress: true
          input: ${{ steps.set-tar-name.outputs.tarName }}
          output: trivy.txt
          severity: 'CRITICAL,HIGH'

      - name: Publish Trivy Output to Summary
        if: inputs.container == 'tar'
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```terraform'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

      - name: 'Upload Artifact'
        if: inputs.container == 'tar'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-tar-name.outputs.tarName }}
          path: ${{ steps.set-tar-name.outputs.tarName }}
          retention-days: 1
