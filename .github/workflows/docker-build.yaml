name: "Docker Build"

#################################################################################################################################
# Prerequisites
#---------------
# Artifacts:
#  harperdb-${{ inputs.harperdbVersion }}.tgz  -- harperdb tarball from build.yaml or NPM
#
#  licenses                                    -- either built from HarperDB/harperdb_open_source_license_generator.git
#                                                 or setting 'get_dummy_licenses' to 'true'
#################################################################################################################################

on:
  workflow_call:
    inputs:
      harperdbVersion:
        required: true
        type: string
      nodeVersion:
        required: true
        type: string
      container:
        description: 'Which container to build, harperdb/private, harperdb/harperdb, harperdb/fabric, harperdb/openshift, tar, or public for both harperdb and openshift'
        default: 'tar'
        required: false
        type: string
      file:
        description: 'Which dockerfile to use for this build. ignored except when harperdb/private, or tar.'
        default: 'utility/Docker/Dockerfile'
        required: false
        type: string
      latest:
        description: 'tag this build as latest in registry'
        default: false
        required: false
        type: boolean
      platforms:
        description: 'Which platform(s) to build for: linux/amd64 and/or linux/arm64'
        default: "linux/amd64"
        required: false
        type: string
      push:
        description: 'push the resultant image to dockerhub. ignored when tar'
        default: false
        required: false
        type: boolean
      get_dummy_licenses:
        description: 'create dummy license dir -- do not use with dockerhub'
        default: false
        required: false
        type: boolean
    secrets:
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false

jobs:
  ###########################
  #  Generate dummy licenses
  ###########################
  getDummyLicenses:
    if: inputs.get_dummy_licenses
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
      - name: "Generate dummy license file"
        run: |
          #!/usr/bin/env bash
          mkdir -p utility/Docker/licenses/
          echo "[terms-of-use](https://www.harperdb.io/legal/terms-of-use)" > utility/Docker/licenses/terms-of-use.md
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: "licenses"
          path: "utility/Docker/licenses/"
          retention-days: 1


  ##########################
  #  Build Container Images
  ##########################
  build_container:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: "Setup Docker buildx"
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: inputs.container != 'tar' || inputs.push == true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: actions/download-artifact@v4
        with:
          name: harperdb-${{ inputs.harperdbVersion }}.tgz
          path: ./
      - uses: actions/download-artifact@v4
        with:
          name: "licenses"
          path: "utility/Docker/licenses/"

      # generate tags for containers
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ${{ inputs.container }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,enable=${{ inputs.container != 'harperdb/private'}},value=${{ inputs.harperdbVersion }}
            type=raw,enable=${{ inputs.container == 'harperdb/private'}},value=${{ inputs.harperdbVersion }}-${{ github.run_number }}
            type=raw,value=latest,enable=${{ inputs.latest }}

      # build and publish containers
      - name: "Publish ${{ inputs.container }}:${{ inputs.harperdbVersion }}"
        if: inputs.container != 'tar'
        id: build-image
        timeout-minutes: 30
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.file }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NODE_VERSION=${{ inputs.nodeVersion }}
            HARPERDB_VERSION=${{ inputs.harperdbVersion }}
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Create container tarball"
        id: build-image-tar
        if: inputs.container == 'tar'
        timeout-minutes: 30
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.file }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=docker-harperdb-${{ inputs.harperdbVersion }}-${{ github.run_number }}.tar
          build-args: |
            NODE_VERSION=${{ inputs.nodeVersion }}
            HARPERDB_VERSION=${{ inputs.harperdbVersion }}
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Upload Artifact'
        if: inputs.container == 'tar'
        uses: actions/upload-artifact@v4
        with:
          name: docker-harperdb-${{ inputs.harperdbVersion }}-${{ github.run_number }}.tar
          path: docker-harperdb-${{ inputs.harperdbVersion }}-${{ github.run_number }}.tar
          retention-days: 1
