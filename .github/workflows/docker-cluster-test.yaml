name: "Docker Cluster Test Template"

on:
  workflow_call:
    inputs:
      harperdbVersion:
        required: true
        type: string
      file:
        description: 'Which dockerfile to use for this build. ignored except when harperdb/private, or tar.'
        default: 'utility/Docker/Dockerfile'
        required: false
        type: string
      platform:
        description: 'Which platform(s) to build for: linux/amd64 or linux/arm64'
        default: "linux/amd64"
        required: false
        type: string
      clusterTest:
        description: 'Path to cluster test to run'
        default: 'test/ci-tests/docker-cluster-test-a.sh'
        type: string

jobs:
  #################################
  #  Generate suffix for artifacts
  #################################
  getValues:
    runs-on: ubuntu-latest
    outputs:
      suffix: ${{ steps.get-values.outputs.suffix }}
      instanceType: ${{ steps.get-values.outputs.instanceType }}
    steps:
      - name: 'Get values'
        id: get-values
        env:
          harperdbVersion: ${{ inputs.harperdbVersion }}
          runNumber: ${{ github.run_number }}
          containerFile: ${{ inputs.file }}
          platform: ${{ inputs.platform }}
        run: |
          #!/usr/bin/env bash
          [[ "${containerFile}" == *"-openshift" ]] && flavor='-openshift' || flavor=''
          arch="-${platform##*/}"
          echo "suffix=${runNumber}${flavor}${arch}-$(uuidgen | cut -c1-8).tar" >> $GITHUB_OUTPUT
          if [[ "${platform##*/}" == "amd64" ]]; then
            echo "instanceType=c7i.2xlarge" >> $GITHUB_OUTPUT
          elif [[ "${platform##*/}" == "arm64" ]]; then
            echo "instanceType=c7gn.2xlarge" >> $GITHUB_OUTPUT
          fi

  ##########################
  #  Build Container Image
  ##########################
  dockerBuild:
    needs: getValues
    uses: ./.github/workflows/docker-build.yaml
    with:
      harperdbVersion: ${{ inputs.harperdbVersion }}
      container: 'tar'
      containerTarball: docker-harperdb_${{ inputs.harperdbVersion }}-${{ needs.getValues.outputs.suffix }}
      file: ${{ inputs.file }}
      platforms: ${{ inputs.platform }}
      get_dummy_licenses: true

  ##############################
  #  Create Instances for tests
  ##############################
  createInstances:
    needs:
      - dockerBuild
      - getValues
    uses: ./.github/workflows/create-instances.yaml
    with:
      instanceCount: "1"
      harperdbVersion: ${{ inputs.harperdbVersion }}
      installType: "docker"
      callingWorkflow: ${{ github.workflow }}
      instanceType: ${{ needs.getValues.outputs.instanceType }}
      tfstateArtifactName: "tfstate-${{ needs.getValues.outputs.suffix }}"
      containerTarball: docker-harperdb_${{ inputs.harperdbVersion }}-${{ needs.getValues.outputs.suffix }}
    secrets: inherit

  #############
  #  Run Tests
  ############
  runTests:
    runs-on: ubuntu-latest
    needs:
      - dockerBuild
      - createInstances
      - getValues
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: docker-harperdb_${{ inputs.harperdbVersion }}-${{ needs.getValues.outputs.suffix }}
        path: utility/Docker
    - name: Run Tests
      env:
        CI_INSTANCES_PRIVATE_KEY: ${{ secrets.CI_INSTANCES_PRIVATE_KEY }}
        CONTAINER_TARBALL: docker-harperdb_${{ inputs.harperdbVersion }}-${{ needs.getValues.outputs.suffix }}
      run: |
        #!/bin/bash
        echo "$CI_INSTANCES_PRIVATE_KEY" > private_key && chmod 600 private_key
        public_dns_names=${{ needs.createInstances.outputs.publicDnsNames }}
        public_dns_names=($public_dns_names)
        public_dns_name="${public_dns_names[0]}"
        
        mkdir logs-artifact

        ssh -i private_key -o ServerAliveInterval=60 -o TCPKeepAlive=no -o ConnectionAttempts=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ubuntu@$public_dns_name \
          "sudo chmod +x /home/ubuntu/harperdb/${{ inputs.clusterTest }} && CONTAINER_TARBALL="${CONTAINER_TARBALL}" /home/ubuntu/harperdb/${{ inputs.clusterTest }} ${{ inputs.harperdbVersion }}"
    - name: 'Download Logs'
      if: always()
      run: |
        #!/bin/bash
        public_dns_names=${{ needs.createInstances.outputs.publicDnsNames }}
        public_dns_names=($public_dns_names)
        public_dns_name="${public_dns_names[0]}"
        scp -r -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "ubuntu@$public_dns_name:/home/ubuntu/harperdb/artifact" "logs-artifact/"
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: logs-artifact-${{ needs.getValues.outputs.suffix }}
        path: logs-artifact
        retention-days: 1

  ###############################
  #  Cleanup (destroy instances)
  ###############################
  destroyInstances:
    if: always()
    needs:
      - runTests
      - getValues
    uses: ./.github/workflows/destroy-instances.yaml
    with:
      instanceCount: "1"
      callingWorkflow: ${{ github.workflow }}
      instanceType: ${{ needs.getValues.outputs.instanceType }}
      tfstateArtifactName: "tfstate-${{ needs.getValues.outputs.suffix }}"
    secrets: inherit
