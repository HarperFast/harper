name: 'Docker Cluster Test Template'

on:
  workflow_call:
    inputs:
      harperdbVersion:
        required: true
        type: string
      clusterTest:
        description: 'Path to cluster test to run'
        default: 'test/ci-tests/docker-cluster-test-a.sh'
        type: string
      dockerArtifactSuffix:
        description: 'suffix to avoid artifact conflicts (i.e. standard-amd64-<github.run_number>)'
        default: ''
        type: string
      tfArtifactSuffix:
        description: 'additional suffix for tfstate. needed specifically for scheduled docker cluster tests'
        default: ''
        type: string

jobs:
  #################################
  #  Generate suffix for artifacts
  #################################
  getValues:
    runs-on: ubuntu-latest
    outputs:
      instanceType: ${{ steps.get-values.outputs.instanceType }}
    steps:
      - name: 'Get values'
        id: get-values
        env:
          dockerArtifactSuffix: ${{ inputs.dockerArtifactSuffix }}
        run: |
          #!/usr/bin/env bash
          if [[ "${dockerArtifactSuffix}" == *"amd64"* ]];then
            echo "instanceType=c7i.2xlarge" >> $GITHUB_OUTPUT
          elif [[ "${dockerArtifactSuffix}" == *"arm64"* ]]; then
            echo "instanceType=c7gn.2xlarge" >> $GITHUB_OUTPUT
          else
            exit 1
          fi

  ##############################
  #  Create Instances for tests
  ##############################
  createInstances:
    needs:
      - getValues
    uses: ./.github/workflows/create-instances.yaml
    with:
      instanceCount: '1'
      harperdbVersion: ${{ inputs.harperdbVersion }}
      installType: 'docker'
      callingWorkflow: ${{ github.workflow }}
      instanceType: ${{ needs.getValues.outputs.instanceType }}
      tfstateArtifactName: 'tfstate-${{ inputs.dockerArtifactSuffix }}${{ inputs.tfArtifactSuffix }}'
      containerTarball: docker-harperdb_${{ inputs.harperdbVersion }}-${{ inputs.dockerArtifactSuffix }}.tar
    secrets: inherit

  #############
  #  Run Tests
  ############
  runTests:
    runs-on: ubuntu-latest
    needs:
      - createInstances
      - getValues
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docker-harperdb_${{ inputs.harperdbVersion }}-${{ inputs.dockerArtifactSuffix }}.tar
          path: utility/Docker
      - name: Run Tests
        env:
          CI_INSTANCES_PRIVATE_KEY: ${{ secrets.CI_INSTANCES_PRIVATE_KEY }}
          CONTAINER_TARBALL: docker-harperdb_${{ inputs.harperdbVersion }}-${{ inputs.dockerArtifactSuffix }}.tar
          HDB_ADMIN_USERNAME: ${{ secrets.HDB_ADMIN_USERNAME }}
          HDB_ADMIN_PASSWORD: ${{ secrets.HDB_ADMIN_PASSWORD }}
        run: |
          #!/bin/bash
          echo "$CI_INSTANCES_PRIVATE_KEY" > private_key && chmod 600 private_key
          public_dns_names=${{ needs.createInstances.outputs.publicDnsNames }}
          public_dns_names=($public_dns_names)
          public_dns_name="${public_dns_names[0]}"

          mkdir logs-artifact

          ssh -i private_key -o ServerAliveInterval=60 -o TCPKeepAlive=no -o ConnectionAttempts=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ubuntu@$public_dns_name \
            "sudo chmod +x /home/ubuntu/harperdb/${{ inputs.clusterTest }} && HDB_ADMIN_USERNAME='${HDB_ADMIN_USERNAME}' HDB_ADMIN_PASSWORD='${HDB_ADMIN_PASSWORD}' CONTAINER_TARBALL="${CONTAINER_TARBALL}" /home/ubuntu/harperdb/${{ inputs.clusterTest }} ${{ inputs.harperdbVersion }}"
      - name: 'Download Logs'
        if: always()
        run: |
          #!/bin/bash
          public_dns_names=${{ needs.createInstances.outputs.publicDnsNames }}
          public_dns_names=($public_dns_names)
          public_dns_name="${public_dns_names[0]}"
          scp -r -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "ubuntu@$public_dns_name:/home/ubuntu/harperdb/artifact" "logs-artifact/"
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs-artifact-${{ inputs.dockerArtifactSuffix }}${{ inputs.tfArtifactSuffix }}
          path: logs-artifact
          retention-days: 1

  ###############################
  #  Cleanup (destroy instances)
  ###############################
  destroyInstances:
    if: always()
    needs:
      - runTests
      - getValues
    uses: ./.github/workflows/destroy-instances.yaml
    with:
      instanceCount: '1'
      callingWorkflow: ${{ github.workflow }}
      instanceType: ${{ needs.getValues.outputs.instanceType }}
      tfstateArtifactName: tfstate-${{ inputs.dockerArtifactSuffix }}${{ inputs.tfArtifactSuffix }}
    secrets: inherit
