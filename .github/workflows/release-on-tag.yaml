name: "Release HarperDB"

on:
  push:
    tags:
      - release_*
  workflow_dispatch:

jobs:
  ############################################
  #  Send Slack Message for start of Release
  ############################################
  sendSlackMessageRealeaseStarted:
    uses: ./.github/workflows/post-to-slack-channel.yaml
    secrets: inherit
    with:
      channel_id: C05PLHLQFQA
      payload: |
        {
          "text": "${{ github.run_id }} Release Initiated.",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "HarperDB Release"
              }
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "*Status*"
                },
                {
                  "type": "mrkdwn",
                  "text": "Initiated"
                },
                {
                  "type": "mrkdwn",
                  "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|run ${{ github.run_id }}>"
                }
              ]
            }
          ]
        }


  ########
  #  Meta
  ########
  meta:
    runs-on: ubuntu-latest
    outputs:
      harperdbVersion: ${{ steps.get-values.outputs.harperdbVersion }}
      version: ${{ steps.get-values.outputs.version }}
      full_version: ${{ steps.get-values.outputs.full_version }}
      version_major: ${{ steps.get-values.outputs.version_major }}
      version_minor: ${{ steps.get-values.outputs.version_minor }}
      version_patch: ${{ steps.get-values.outputs.version_patch }}
      release_type: ${{ steps.get-values.outputs.release_type }}
      prerelease_version: ${{ steps.get-values.outputs.prerelease_version }}
      npm_extra_tags: ${{ steps.get-values.outputs.npm_extra_tags }}
      dockerhub_tag_latest: ${{ steps.get-values.outputs.dockerhub_tag_latest }}
    steps:
      - uses: actions/checkout@v4
      - name: 'Get values'
        id: get-values
        env:
          tag: ${{ github.ref }}
        run: |
          #!/usr/bin/env bash
          
          harperdbVersion=$(cat package.json | jq -r '.version')
          echo "harperdbVersion=${harperdbVersion}" >> $GITHUB_OUTPUT
          
          full_version=${tag#refs/*/release_}
          release_type='stable'
          prerelease_version=''
          if [[ "${full_version}" == *"-"* ]]; then
            prerelease_version_string="${full_version##*-}"
            prerelease_version="${prerelease_version_string##*.}"
            release_type="${prerelease_version_string%%.*}"
          fi
          
          version="${full_version%%-*}"
          version="${version#[vV]}"
          version_major="${version%%\.*}"
          version_minor="${version#*.}"
          version_minor="${version_minor%.*}"
          version_patch="${version##*.}"
          
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "full_version=${full_version}" >> $GITHUB_OUTPUT
          echo "version_major=${version_major}" >> $GITHUB_OUTPUT
          echo "version_minor=${version_minor}" >> $GITHUB_OUTPUT
          echo "version_patch=${version_patch}" >> $GITHUB_OUTPUT
          echo "release_type=${release_type}" >> $GITHUB_OUTPUT
          
          npm_extra_tags=''
          dockerhub_tag_latest=''
          
          if [[ "${release_type}" == @(alpha|beta|rc) ]]; then
            npm_extra_tags='next'
            dockerhub_tag_latest=false
          else
            npm_extra_tags='latest+stable'
            dockerhub_tag_latest=true
          fi
          
          echo "prerelease_version=${prerelease_version}" >> $GITHUB_OUTPUT
          echo "npm_extra_tags=${npm_extra_tags}" >> $GITHUB_OUTPUT
          echo "dockerhub_tag_latest=${dockerhub_tag_latest}" >> $GITHUB_OUTPUT
         
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Release ${version} ##
          harperdbVersion:  ${harperdbVersion}
          version from tag: ${full_version}
          
          > release type:         ${release_type}
          > npm tag:              ${npm_extra_tags}
          > dockerhub latest tag: ${dockerhub_tag_latest}
          ---
          
          major: ${version_major}
          minor: ${version_minor}
          patch: ${version_patch}
          
          EOF
          [[ "${release_type}" == "stable" ]] && echo "pre-release version: ${release_type}.${prerelease_version:-}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${full_version}" != "${harperdbVersion}" ]]; then
            cat <<EOF >> $GITHUB_STEP_SUMMARY
          > [!WARNING]
          > Terminating job as the version from the tag (${tag}, derived version ${full_version}) does not match harperdbVersion (${harperdbVersion})
          EOF
            exit 1
          fi

  ############################################
  #  Send Slack Message: add version to message
  ##############################################
  sendSlackMessageRealeaseVersion:
    uses: ./.github/workflows/post-to-slack-channel.yaml
    secrets: inherit
    needs:
      - sendSlackMessageRealeaseStarted
      - meta
    with:
      channel_id: C05PLHLQFQA
      update_ts: ${{ needs.sendSlackMessageRealeaseStarted.outputs.ts }}
      payload: |
        {
          "text": "${{ github.run_id }} Release ${{ needs.meta.outputs.full_version }} In Progress.",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "HarperDB Release ${{ needs.meta.outputs.full_version }}"
              }
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "*Status*"
                },
                {
                  "type": "mrkdwn",
                  "text": "In Progress"
                },
                {
                  "type": "mrkdwn",
                  "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|run ${{ github.run_id }}>"
                }
              ]
            }
          ]
        }

  ####################
  #  Build HarperDB
  ####################
  build:
    needs:
      - meta
    uses: ./.github/workflows/build.yaml

  ####################################
  #  Get License Files for Container
  ####################################
  getLicenses:
    runs-on: ubuntu-latest
    needs:
      - meta
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4
      - name: "Get Latest License Files"
        run: .github/scripts/get-license-files.sh
      - name: "Get HarperDB/harperdb_open_source_license_generator.git"
        uses: actions/checkout@v4
        with:
          repository: "HarperDB/harperdb_open_source_license_generator.git"
          path: "harperdb_open_source_license_generator"
          ref: "master"
      - uses: actions/setup-node@v4
      - name: "Generate license file"
        env:
          project_path: "."
          output_file: "utility/Docker/licenses/open-source-licenses-notices.md"
          template_file: "harperdb_open_source_license_generator/template.txt"
        run: |
          #!/usr/bin/env bash
          cd harperdb_open_source_license_generator
          npm install --omit=dev
          cd -
          node harperdb_open_source_license_generator/index.js
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: "licenses"
          path: "utility/Docker/licenses/"
          retention-days: 1

  ##############################################
  #  Release to Private NPM harperdb/@harperdb
  ##############################################
  npmPrivateRelease:
    needs:
      - meta
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz
      - uses: actions/setup-node@v4
        with:
          node-version: '${{needs.build.outputs.nodeVersion}}'
          registry-url: 'https://registry.npmjs.org'
      - name: "npm Publish"
        env:
          NODE_AUTH_TOKEN: "${{ secrets.NPM_ACCESS_KEY }}"
          HARPERDB_VERSION:  "${{ needs.build.outputs.harperdbVersion }}"
          PUBLISH_DESTINATION: 'private'
          EXTRA_TAGS: "${{ needs.meta.outputs.npm_extra_tags }}"
          DRYRUN: false
        run: ./.github/scripts/npm-publish.sh

  #########################################
  #  Release to dockerhub harperdb/private
  #########################################
  dockerhubPrivateRelease:
    needs:
      - meta
      - getLicenses
      - build
    uses: ./.github/workflows/docker-build.yaml
    with:
      harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
      container: 'harperdb/private'
      latest: ${{ needs.meta.outputs.dockerhub_tag_latest == 'true' && true || false }}
      platforms: 'linux/amd64,linux/arm64'
      push: true
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  ############################################
  #  Send Slack Message on 'Ready to Deploy'
  ############################################
  sendSlackMessageReadyToDeploy:
    if: ${{ needs.meta.outputs.release_type == 'stable' }}
    uses: ./.github/workflows/post-to-slack-channel.yaml
    secrets: inherit
    needs:
      - meta
      - getLicenses
      - npmPrivateRelease
      - dockerhubPrivateRelease
      - sendSlackMessageRealeaseStarted
      - sendSlackMessageRealeaseVersion
    with:
      channel_id: C05PLHLQFQA
      update_ts: ${{ needs.sendSlackMessageRealeaseStarted.outputs.ts }}
      payload: |
        {
          "text": "${{ github.run_id }} Release ${{ needs.meta.outputs.full_version }} requires review.",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "HarperDB Release ${{ needs.meta.outputs.full_version }}"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Review(s) Required*"
              },
              "accessory": {
                "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "Review Release"
                },
                "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "style": "primary"
              }
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "*Status*"
                },
                {
                  "type": "mrkdwn",
                  "text": "In progress"
                },
                {
                  "type": "mrkdwn",
                  "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|run ${{ github.run_id }}>"
                }
              ]
            }
          ]
        }

  ###################################
  #  Release to Public NPM harperdb
  #  Release to Public Dockerhub
  #    harperdb/harperdb
  #    harperdb/harperdb-openshift
  ###################################
  publicRelease:
    environment: ${{ needs.meta.outputs.release_type == 'stable' && 'release' || 'pre-release' }}
    needs:
      - build
      - meta
      - npmPrivateRelease
      - getLicenses
      - dockerhubPrivateRelease
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # setup for both publishing both to npm and dockerhub
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz

      # setup and publishing to npm
      - uses: actions/setup-node@v4
        with:
          node-version: '${{needs.build.outputs.nodeVersion}}'
          registry-url: 'https://registry.npmjs.org'
      - name: "npm Publish"
        env:
          NODE_AUTH_TOKEN: "${{ secrets.NPM_ACCESS_KEY }}"
          HARPERDB_VERSION:  "${{ needs.build.outputs.harperdbVersion }}"
          PUBLISH_DESTINATION: 'public'
          EXTRA_TAGS: "${{ needs.meta.outputs.npm_extra_tags }}"
          DRYRUN: false
        run: ./.github/scripts/npm-publish.sh

      # start docker setup and build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: "Setup Docker buildx"
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: actions/download-artifact@v4
        with:
          name: "licenses"
          path: "utility/Docker/licenses/"

      # generate tags for containers
      - name: Docker Meta Standard
        id: meta-standard
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: 'harperdb/harperdb'
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=${{ needs.build.outputs.harperdbVersion }}
            type=raw,value=latest,enable=${{ needs.meta.outputs.dockerhub_tag_latest }}

      - name: Docker Meta Openshift
        id: meta-openshift
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: 'harperdb/harperdb-openshift'
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=${{ needs.build.outputs.harperdbVersion }}
            type=raw,value=latest,enable=${{ needs.meta.outputs.dockerhub_tag_latest }}

      # standard container
      - name: "Publish harperdb:${{ needs.build.outputs.harperdbVersion }}"
        id: build-image-standard
        timeout-minutes: 30
        uses: docker/build-push-action@v5
        with:
          context: .
          file: 'utility/Docker/Dockerfile'
          platforms: 'linux/amd64,linux/arm64'
          push: true
          tags: ${{ steps.meta-standard.outputs.tags }}
          build-args: |
            HARPERDB_VERSION=${{ needs.build.outputs.harperdbVersion }}
            HARPERDB_TARBALL=harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T`
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # openshift container
      - name: "Publish harperdb-openshift:${{ needs.build.outputs.harperdbVersion }}"
        id: build-image-openshift
        timeout-minutes: 30
        uses: docker/build-push-action@v5
        with:
          context: .
          file: 'utility/Docker/Dockerfile-openshift'
          platforms: 'linux/amd64,linux/arm64'
          push: true
          tags: ${{ steps.meta-openshift.outputs.tags }}
          build-args: |
            HARPERDB_VERSION=${{ needs.build.outputs.harperdbVersion }}
            HARPERDB_TARBALL=harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T`
          cache-from: type=gha
          cache-to: type=gha,mode=max

  #################################
  #  Send Slack Message on success
  #################################
  sendSlackMessageParty:
    uses: ./.github/workflows/post-to-slack-channel.yaml
    if: ${{ !cancelled() && !failure() && needs.publicRelease.result == 'success' }}
    secrets: inherit
    needs:
      - meta
      - publicRelease
      - sendSlackMessageRealeaseStarted
      - sendSlackMessageRealeaseVersion
      - sendSlackMessageReadyToDeploy
    with:
      channel_id: C05PLHLQFQA
      update_ts: ${{ needs.meta.outputs.release_type == 'stable' && needs.sendSlackMessageReadyToDeploy.outputs.ts || needs.sendSlackMessageRealeaseVersion.outputs.ts }}
      payload: |
        {
          "text": "${{ github.run_id }} Release ${{ needs.meta.outputs.full_version }} Complete.",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "HarperDB Release ${{ needs.meta.outputs.full_version }}"
              }
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "*Status*"
                },
                {
                  "type": "mrkdwn",
                  "text": "Complete"
                },
                {
                  "type": "mrkdwn",
                  "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|run ${{ github.run_id }}>"
                },
                {
                  "type": "mrkdwn",
                  "text": ":white_check_mark:"
                }
              ]
            }
          ]
        }

  #################################
  #  Send Slack Message on failure
  #################################
  sendSlackMessageFailure:
    if: ${{ failure() && !cancelled() }}
    uses: ./.github/workflows/post-to-slack-channel.yaml
    secrets: inherit
    needs:
      - meta
      - getLicenses
      - build
      - npmPrivateRelease
      - dockerhubPrivateRelease
      - publicRelease
      - sendSlackMessageRealeaseStarted
      - sendSlackMessageReadyToDeploy
      - sendSlackMessageParty
    with:
      channel_id: C05PLHLQFQA
      update_ts: ${{ needs.sendSlackMessageRealeaseStarted.outputs.ts }}
      payload: |
        {
          "text": "${{ github.run_id }} Release ${{ needs.meta.outputs.full_version }} Failed.",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "HarperDB Release ${{ needs.meta.outputs.full_version }} Failed"
              }
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "*Status*"
                },
                {
                  "type": "mrkdwn",
                  "text": "Failed"
                },
                {
                  "type": "mrkdwn",
                  "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|run ${{ github.run_id }}>"
                },
                {
                  "type": "mrkdwn",
                  "text": ":x:"
                }
              ]
            }
          ]
        }
