name: "Release HarperDB"

on:
  push:
    tags:
      - release_*
  pull_request:
  workflow_dispatch:

env:
  # dm to mat
  slack_channel_id: "U0512LGPYSE"
  # development-ci channel_id
  #slack_channel_id: "C05PLHLQFQA"

jobs:
  ############################################
  #  Send Slack Message for start of Release
  ############################################
  sendSlackMessageRealeaseStarted:
    runs-on: ubuntu-latest
    outputs:
      ts: ${{ steps.slack-message.outputs.ts }}
    steps:
    - uses: slackapi/slack-github-action@v1.25.0
      id: slack-message
      with:
        channel-id: ${{ env.slack_channel_id }}
        payload: |
          {
            "text": ":deployparrot: Release started (In Progress)",
            "attachments": [
              {
                "pretext": "Release started",
                "color": "dbab09",
                "fields": [
                  {
                    "title": "Status",
                    "short": true,
                    "value": "In Progress"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_KEY }}

  ####################
  #  Build HarperDB
  ####################
  build:
    uses: ./.github/workflows/build.yaml

  ########
  #  Meta
  ########
  meta:
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      version: ${{ steps.get-values.outputs.version }}
      version_major: ${{ steps.get-values.outputs.version_major }}
      version_minor: ${{ steps.get-values.outputs.version_minor }}
      version_patch: ${{ steps.get-values.outputs.version_patch }}
      release_type: ${{ steps.get-values.outputs.release_type }}
      prerelease_version: ${{ steps.get-values.outputs.prerelease_version }}
      npm_extra_tags: ${{ steps.get-values.outputs.npm_extra_tags }}
      dockerhub_tag_latest: ${{ steps.get-values.outputs.dockerhub_tag_latest }}
    steps:
      - name: 'Get values'
        id: get-values
        env:
          #tag: ${{ github.ref }}
          tag: 'refs/heads/release_1.3.0'
          harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
        run: |
          #!/usr/bin/env bash
          
          VERSION=${tag#refs/*/release_}
          RELEASE_TYPE='stable'
          PRERELEASE_VERSION=''
          if [[ "${VERSION}" == *"-"* ]]; then
            PRERELEASE_VERSION_STRING="${VERSION##*-}"
            PRERELEASE_VERSION="${PRERELEASE_VERSION_STRING##*.}"
            RELEASE_TYPE="${PRERELEASE_VERSION_STRING%%.*}"
          fi
          
          VERSION="${VERSION%%-*}"
          VERSION="${VERSION#[vV]}"
          VERSION_MAJOR="${VERSION%%\.*}"
          VERSION_MINOR="${VERSION#*.}"
          VERSION_MINOR="${VERSION_MINOR%.*}"
          VERSION_PATCH="${VERSION##*.}"
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_major=${VERSION_MAJOR}" >> $GITHUB_OUTPUT
          echo "version_minor=${VERSION_MINOR}" >> $GITHUB_OUTPUT
          echo "version_patch=${VERSION_PATCH}" >> $GITHUB_OUTPUT
          echo "release_type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
          
          if [[ "${RELEASE_TYPE}" == @(alpha|beta|rc) ]]; then
            echo "prerelease_version=${PRERELEASE_VERSION}" >> $GITHUB_OUTPUT
            echo "npm_extra_tags=next" >> $GITHUB_OUTPUT
            echo "dockerhub_tag_latest=false" >> $GITHUB_OUTPUT
          else
            echo "prerelease_version=''" >> $GITHUB_OUTPUT
            echo "npm_extra_tags=latest+stable" >> $GITHUB_OUTPUT
            echo "dockerhub_tag_latest=true" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${VERSION}" != "${harperdbVersion}" ]]; then
            cat <<EOF >> $GITHUB_STEP_SUMMARY
          > [!WARNING]
          > Terminating job as the tag (${tag}) does not match harperdbVersion (${harperdbVersion})
          EOF
            exit 1
          fi

  ############################################
  #  Send Slack Message: add version to message
  ##############################################
  sendSlackMessageRealeaseVersion:
    runs-on: ubuntu-latest
    outputs:
      ts: ${{ steps.slack-message.outputs.ts }}
    needs:
      - sendSlackMessageRealeaseStarted
      - meta
    steps:
      - uses: slackapi/slack-github-action@v1.25.0
        id: slack-message
        with:
          channel-id: ${{ env.slack_channel_id }}
          update-ts: ${{ needs.sendSlackMessageRealeaseStarted.outputs.ts }}
          payload: |
            {
              "text": ":deployparrot: Release ${{ needs.meta.outputs.version }} started (In Progress)",
              "attachments": [
                {
                  "pretext": "Release started",
                  "color": "dbab09",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "In Progress"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_KEY }}

  ####################################
  #  Get License Files for Container
  ####################################
  getLicenses:
    runs-on: ubuntu-latest
    needs:
      - meta
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4
      - name: "Get Latest License Files"
        run: .github/scripts/get-license-files.sh
      - name: "Get HarperDB/harperdb_open_source_license_generator.git"
        uses: actions/checkout@v4
        with:
          repository: "HarperDB/harperdb_open_source_license_generator.git"
          path: "harperdb_open_source_license_generator"
          ref: "master"
      - uses: actions/setup-node@v4
      - name: "Generate license file"
        env:
          project_path: "."
          output_file: "utility/Docker/licenses/open-source-licenses-notices.md"
          template_file: "harperdb_open_source_license_generator/template.txt"
        run: |
          #!/usr/bin/env bash
          cd harperdb_open_source_license_generator
          npm install --omit=dev 
          cd -
          node harperdb_open_source_license_generator/index.js
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: "licenses"
          path: "utility/Docker/licenses/"
          retention-days: 1

  ##############################################
  #  Release to Private NPM harperdb/@harperdb
  ##############################################
  npmPrivateRelease:
    needs:
      - meta
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz
      - uses: actions/setup-node@v4
        with:
          node-version: '${{needs.build.outputs.nodeVersion}}'
          registry-url: 'https://registry.npmjs.org'
      - name: "npm Publish"
        env:
          NODE_AUTH_TOKEN: "${{ secrets.NPM_ACCESS_KEY }}"
          HARPERDB_VERSION:  "${{ needs.build.outputs.harperdbVersion }}"
          PUBLISH_DESTINATION: 'private'
          EXTRA_TAGS: "${{ needs.meta.outputs.npm_extra_tags }}"
          DRYRUN: true
        run: ./.github/scripts/npm-publish.sh

  #########################################
  #  Release to dockerhub harperdb/private
  #########################################
  dockerhubPrivateRelease:
    needs:
      - meta
      - getLicenses
      - build
    uses: ./.github/workflows/docker-build.yaml
    with:
      harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
      container: 'harperdb/private'
      latest: ${{ needs.meta.outputs.dockerhub_tag_latest == 'true' && true || false }}
      platforms: 'linux/amd64,linux/arm64'
      push: false
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  ############################################
  #  Output Summary
  ############################################
  createSummary:
    runs-on: ubuntu-latest
    needs:
      - meta
      - build
    steps:
      - name: summary
        id: summary
        env:
          harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
          version: ${{ needs.meta.outputs.version }}
          version_major: ${{ needs.meta.outputs.version_major }}
          version_minor: ${{ needs.meta.outputs.version_minor }}
          version_patch: ${{ needs.meta.outputs.version_patch }}
          release_type: ${{ needs.meta.outputs.release_type }}
          prerelease_version: ${{ needs.meta.outputs.prerelease_version }}
          npm_extra_tags: ${{ needs.meta.outputs.npm_extra_tags }}
          dockerhub_tag_latest: ${{ needs.meta.outputs.dockerhub_tag_latest }}
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Release ${version} ##
          harperdbVersion:  ${harperdbVersion}
          version from tag: ${version}
          
          release type:         ${release_type}
          npm tag:              ${npm_extra_tags}
          dockerhub latest tag: ${dockerhub_tag_latest}
          ---
          
          major: ${version_major}
          minor: ${version_minor}
          patch: ${version_patch}
          
          pre-release version: ${prerelease_version:-N/A}
          EOF

  ############################################
  #  Send Slack Message on 'Ready to Deploy'
  ############################################
  sendSlackMessageReadyToDeploy:
    if: ${{ needs.meta.outputs.release_type == 'stable' }}
    runs-on: ubuntu-latest
    outputs:
      ts: ${{ steps.slack-message.outputs.ts }}
    needs:
      - meta
      - getLicenses
      - npmPrivateRelease
      - dockerhubPrivateRelease
      - sendSlackMessageRealeaseVersion
    steps:
      - uses: slackapi/slack-github-action@v1.25.0
        id: slack-message
        with:
          channel-id: ${{ env.slack_channel_id }}
          update-ts: ${{ needs.sendSlackMessageRealeaseVersion.outputs.ts }}
          payload: |
            {
              "text": ":deployparrot: Release ${{ needs.meta.outputs.version }} started (In Progress)",
              "attachments": [
                {
                  "pretext": "Release started",
                  "color": "dbab09",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "In Progress"
                    },
                    {
                      "title": "Review Required",
                      "value": "[click here to review](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_KEY }}

  ###################################
  #  Release to Public NPM harperdb
  #  Release to Public Dockerhub
  #    harperdb/harperdb
  #    harperdb/harperdb-openshift
  ###################################
  publicRelease:
    environment: ${{ needs.meta.outputs.release_type == 'stable' && 'release' || 'pre-release' }}
    needs:
      - build
      - meta
      - npmPrivateRelease
      - getLicenses
      - dockerhubPrivateRelease
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # setup for both publishing both to npm and dockerhub
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz

      # setup and publishing to npm
      - uses: actions/setup-node@v4
        with:
          node-version: '${{needs.build.outputs.nodeVersion}}'
          registry-url: 'https://registry.npmjs.org'
      - name: "npm Publish"
        env:
          NODE_AUTH_TOKEN: "${{ secrets.NPM_ACCESS_KEY }}"
          HARPERDB_VERSION:  "${{ needs.build.outputs.harperdbVersion }}"
          PUBLISH_DESTINATION: 'public'
          EXTRA_TAGS: "${{ needs.meta.outputs.npm_extra_tags }}"
          DRYRUN: true
        run: ./.github/scripts/npm-publish.sh

      # start docker setup and build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: "Setup Docker buildx"
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: actions/download-artifact@v4
        with:
          name: "licenses"
          path: "utility/Docker/licenses/"

      # generate tags for containers
      - name: Docker Meta Standard
        id: meta-standard
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: 'harperdb/harperdb'
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=${{ needs.build.outputs.harperdbVersion }}
            type=raw,value=latest,enable=${{ needs.meta.outputs.dockerhub_tag_latest }}

      - name: Docker Meta Openshift
        id: meta-openshift
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: 'harperdb/harperdb-openshift'
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=${{ needs.build.outputs.harperdbVersion }}
            type=raw,value=latest,enable=${{ needs.meta.outputs.dockerhub_tag_latest }}

      # standard container
      - name: "Publish harperdb:${{ needs.build.outputs.harperdbVersion }}"
        id: build-image-standard
        timeout-minutes: 30
        uses: docker/build-push-action@v5
        with:
          context: .
          file: 'utility/Docker/Dockerfile'
          platforms: 'linux/amd64,linux/arm64'
          push: false
          tags: ${{ steps.meta-standard.outputs.tags }}
          build-args: |
            HARPERDB_VERSION=${{ needs.build.outputs.harperdbVersion }}
            HARPERDB_TARBALL=harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T`
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # openshift container
      - name: "Publish harperdb-openshift:${{ needs.build.outputs.harperdbVersion }}"
        id: build-image-openshift
        timeout-minutes: 30
        uses: docker/build-push-action@v5
        with:
          context: .
          file: 'utility/Docker/Dockerfile-openshift'
          platforms: 'linux/amd64,linux/arm64'
          push: false
          tags: ${{ steps.meta-openshift.outputs.tags }}
          build-args: |
            HARPERDB_VERSION=${{ needs.build.outputs.harperdbVersion }}
            HARPERDB_TARBALL=harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T`
          cache-from: type=gha
          cache-to: type=gha,mode=max

  #################################
  #  Send Slack Message on success
  #################################
  sendSlackMessageParty:
    if: ${{ !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    outputs:
      ts: ${{ steps.slack-message.outputs.ts }}
    needs:
    - meta
    - getLicenses
    - build
    - npmPrivateRelease
    - dockerhubPrivateRelease
    - publicRelease
    - sendSlackMessageReadyToDeploy
    steps:
      - uses: slackapi/slack-github-action@v1.25.0
        id: slack-message
        with:
          channel-id: ${{ env.slack_channel_id }}
          update-ts: ${{ needs.sendSlackMessageReadyToDeploy.outputs.ts }}
          payload: |
            {
              "text": ":white_check_mark: Release Finished: ${{ needs.meta.outputs.version }} (Completed)",
              "attachments": [
                {
                  "pretext": "Release finished",
                  "color": "28a745",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Completed"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_KEY }}

  #################################
  #  Send Slack Message on failure
  #################################
  sendSlackMessage:
    if: ${{ failure() && !cancelled() }}
    runs-on: ubuntu-latest
    outputs:
      ts: ${{ steps.slack-message.outputs.ts }}
    needs:
      - meta
      - getLicenses
      - build
      - npmPrivateRelease
      - dockerhubPrivateRelease
      - publicRelease
      - sendSlackMessageRealeaseStarted
    steps:
      - uses: slackapi/slack-github-action@v1.25.0
        id: slack-message
        with:
          channel-id: ${{ env.slack_channel_id }}
          update-ts: ${{ needs.sendSlackMessageRealeaseStarted.outputs.ts }}
          payload: |
            {
              "text": ":x: Release Failed: ${{ needs.meta.outputs.version }} (Failure)",
              "attachments": [
                {
                  "pretext": "Release failed",
                  "color": "db0d04",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Failed"
                    },
                    {
                      "title": "Job Status",
                      "value": "[Link to Github Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_KEY }}