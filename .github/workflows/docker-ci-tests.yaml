on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'utility/Docker/Dockerfile'
  schedule:
    - cron: '0 13 * * 1-5'
  workflow_dispatch:
name: "Run Docker CI Tests"
jobs:
  build:
    uses: ./.github/workflows/build.yaml
  dockerBuild:
    needs:
      - build
    uses: ./.github/workflows/docker-build.yaml
    with:
      harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
      nodeVersion: ${{ needs.build.outputs.nodeVersion }}
  runTests:
    runs-on: ubuntu-latest
    needs:
      - dockerBuild
      - build
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: docker-harperdb_${{ needs.build.outputs.harperdbVersion }}.tar
        path: utility/Docker
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ needs.build.outputs.nodeVersion }}
    - name: Run Tests
      run: |
        pushd utility/Docker
        ls
        docker load -i docker-harperdb_${{ needs.build.outputs.harperdbVersion }}.tar 
        popd
        containerId=$(docker run -d --restart=no -p 9925:9925 -p 9926:9926 -e HARPERDB_FINGERPRINT="4sADRM2e7dd501d7db58bb02d35bd0745146423a1" -e HARPERDB_LICENSE='{"license_key":"1373969b4cabd39e8b29c3c16e419c6abef4437d48168b4721e575610dcf656cf57016bd037cf1107f8232a1e94b7352c05b7c069560ac0e54ca156d3babc966289c664e5fb163e3429158a2f57afd39854ca51fa885abbca62f7e063a334498cd5ef0a038cbea80c6e063d174bbcc189a81dc4f2771ad90c9022cf20a322043ec4213fdef1d1e9eba36117c865acb6a13be3be218513ee80385e78bda0b9e27e7ec6532ac6e5416bc020f4f4be91cf6mofi25eYMW6aiRf6bd3d9b691699749569f6acd34a93e61","company":"harperdb.io"}' -e CUSTOM_FUNCTIONS=true -e LOG_TO_STDSTREAMS=true -e LOG_TO_FILE=true -e HDB_ADMIN_USERNAME="admin" -e HDB_ADMIN_PASSWORD="Abc1234!" harperdb/harperdb:${{ needs.build.outputs.harperdbVersion }})
        sleep 30s

        echo "DEBUG"
        docker ps -a
        docker logs $containerId

        harperdb_running=$(ss -tln | grep 9925 | awk '{print $4}' | cut -f2 -d:)
        if [ -z $harperdb_running ]; then exit 1; fi

        npm --loglevel=error install -g newman
        npm --loglevel=error install -g newman-reporter-html
        npm --loglevel=error install -g newman-reporter-htmlextra

        # Run integration tests from the Docker host
        docker cp test/data/integrationTestsCsvs/ $containerId:/home/harperdb/
        cd ./integrationTests/
        newman run HarperDB_Integration_Tests.json -e Int_test_env_var.json --reporters cli,html,htmlextra --reporter-html-export newman/report.html --reporter-htmlextra-export newman/extra_report.html --env-var "files_location=/home/harperdb/integrationTestsCsvs/" --env-var "username=admin" --env-var "password=Abc1234!"
        cd ../

        mkdir -p artifact

        # Capture hdb_log.log from container
        docker cp $containerId:/home/harperdb/hdb/log/ artifact

        # Capture harperdb-config.yaml
        docker cp $containerId:/home/harperdb/hdb/harperdb-config.yaml artifact

        # Capture docker log
        docker logs $containerId > artifact/docker_log.log

        # Capture newman reports
        cp integrationTests/newman/report.html artifact
        cp integrationTests/newman/extra_report.html artifact
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: logs
        path: artifact
        retention-days: 1
  sendSlackMessage:
    runs-on: ubuntu-latest
    if: ${{ failure() && github.event_name == 'schedule' }}
    needs:
      - runTests
      - dockerBuild
      - build
    steps:
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: 'development'
        slack-message: "${{ github.workflow }} Failed.\nSee logs here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_KEY }}