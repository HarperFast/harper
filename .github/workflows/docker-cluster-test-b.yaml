name: "Run Docker Cluster Tests B"

on:
  push:
    branches:
      - main
      - "release_*"
  schedule:
    - cron: '10 13 * * 1-5'
  workflow_dispatch:
  workflow_call:

jobs:
  ####################
  #  Build HarperDB
  ####################
  build:
    uses: ./.github/workflows/build.yaml

  ##########################
  #  Build Container Image
  ##########################
  dockerBuild:
    needs:
      - build
    uses: ./.github/workflows/docker-build.yaml
    strategy:
      matrix:
        platform:
          - 'linux/amd64'
          - 'linux/arm64'
    with:
      harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
      nodeVersion: ${{ needs.build.outputs.nodeVersion }}
      container: 'tar'
      file: 'utility/Docker/Dockerfile'
      platforms: ${{ matrix.platform }}
      get_dummy_licenses: true

  ##############################
  #  Create Instances for tests
  ##############################
  createInstances-amd64:
    needs:
      - build
      - dockerBuild
    uses: ./.github/workflows/create-instances.yaml
    with:
      instanceCount: "1"
      harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
      installType: "docker"
      callingWorkflow: ${{ github.workflow }}
      instanceType: 'c7i.2xlarge'
      tfstateArtifactName: "tfstate-amd64"
      containerTarball: "docker-harperdb_${{ needs.build.outputs.harperdbVersion }}-${{ github.run_number }}-amd64.tar"
    secrets: inherit

  createInstances-arm64:
    needs:
      - build
      - dockerBuild
    uses: ./.github/workflows/create-instances.yaml
    with:
      instanceCount: "1"
      harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
      installType: "docker"
      callingWorkflow: ${{ github.workflow }}
      instanceType: 'c7gn.2xlarge'
      tfstateArtifactName: "tfstate-arm64"
      containerTarball: "docker-harperdb_${{ needs.build.outputs.harperdbVersion }}-${{ github.run_number }}-arm64.tar"
    secrets: inherit

  #############
  #  Run Tests
  ############
  runTests:
    runs-on: ubuntu-latest
    needs:
      - dockerBuild
      - build
      - createInstances-amd64
      - createInstances-arm64
    timeout-minutes: 20
    strategy:
      matrix:
        platform:
          - 'amd64'
          - 'arm64'
        include:
          - platform: 'amd64'
            instanceType: 'c7i.2xlarge'
            publicDnsNames: ${{ needs.createInstances-amd64.outputs.publicDnsNames }}
          - platform: 'arm64'
            instanceType: 'c7gn.2xlarge'
            publicDnsNames: ${{ needs.createInstances-arm64.outputs.publicDnsNames }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: docker-harperdb_${{ needs.build.outputs.harperdbVersion }}-${{ github.run_number }}-${{ matrix.platform }}.tar
        path: utility/Docker
    - name: Run Tests
      env:
        CI_INSTANCES_PRIVATE_KEY: ${{ secrets.CI_INSTANCES_PRIVATE_KEY }}
      run: |
        #!/bin/bash
        echo "$CI_INSTANCES_PRIVATE_KEY" > private_key && chmod 600 private_key
        public_dns_names=${{ matrix.publicDnsNames }}
        public_dns_names=($public_dns_names)
        public_dns_name="${public_dns_names[0]}"
        
        mkdir logs-artifact

        ssh -i private_key -o ConnectTimeout=10 -o ConnectionAttempts=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ubuntu@$public_dns_name \
          "sudo chmod +x /home/ubuntu/harperdb/test/ci-tests/docker-cluster-test-b.sh && /home/ubuntu/harperdb/test/ci-tests/docker-cluster-test-b.sh ${{ needs.build.outputs.harperdbVersion }}"
    - name: 'Download Logs'
      if: always()
      run: |
        #!/bin/bash
        public_dns_names=${{ matrix.publicDnsNames }}
        public_dns_names=($public_dns_names)
        public_dns_name="${public_dns_names[0]}"
        scp -r -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "ubuntu@$public_dns_name:/home/ubuntu/harperdb/artifact" "logs-artifact/"
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: logs-artifact-${{ matrix.platform }}
        path: logs-artifact
        retention-days: 1

  ###############################
  #  Cleanup (destroy instances)
  ###############################
  destroyInstances:
    if: always()
    needs: runTests
    uses: ./.github/workflows/destroy-instances.yaml
    strategy:
      matrix:
        platform:
          - 'amd64'
          - 'arm64'
        include:
          - platform: 'amd64'
            instanceType: 'c7i.2xlarge'
            tfstateArtifactName: 'tfstate-amd64'
          - platform: 'arm64'
            instanceType: 'c7gn.2xlarge'
            tfstateArtifactName: 'tfstate-arm64'
    with:
      instanceCount: "1"
      callingWorkflow: ${{ github.workflow }}
      instanceType: ${{ matrix.instanceType }}
      tfstateArtifactName: ${{ matrix.tfstateArtifactName }}
    secrets: inherit

  #################################
  #  Send Slack Message on failure
  #################################
  sendSlackMessage:
    uses: ./.github/workflows/post-to-slack-channel.yaml
    if: ${{ failure() && (github.event_name == 'schedule' || github.event_name == 'push') }}
    secrets: inherit
    needs:
      - destroyInstances
      - runTests
      - createInstances-amd64
      - createInstances-arm64
      - dockerBuild
      - build