name: Dockerhub Publish

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Which publish target do we want, harperdb/private, harperdb/harperdb, harperdb/fabric, harperdb/openshift, tar, or public for both harperdb and openshift'
        default: 'harperdb/private'
        required: false
        type: choice
        options:
          - 'harperdb/private'
          - 'harperdb/harperdb'
          - 'harperdb/harperdb-openshift'
          - 'harperdb/fabric'
          - 'tar'
          - 'public'
      file:
        description: 'Which dockerfile to use for this build. ignored except when harperdb/private, or tar.'
        default: 'utility/Docker/Dockerfile'
        required: false
        type: string
      latest:
        description: 'tag this build as latest in registry'
        default: false
        required: false
        type: boolean
      platforms:
        description: 'Which platform(s) to build for'
        default: "linux/arm64,linux/amd64"
        required: false
        type: choice
        options:
          - "linux/arm64,linux/amd64"
          - "linux/amd64"
          - "linux/arm64"
      push:
        description: 'push the resultant image to dockerhub. ignored when tar'
        default: false
        required: false
        type: boolean

jobs:
  build:
    uses: ./.github/workflows/build.yaml

  getLicenses:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
    - uses: actions/checkout@v3
    - name: "Get Latest License Files"
      run: .github/scripts/get-license-files.sh
    - name: "Get HarperDB/harperdb_open_source_license_generator.git"
      uses: actions/checkout@v3
      with:
        repository: "HarperDB/harperdb_open_source_license_generator.git"
        path: "harperdb_open_source_license_generator"
        ref: "master"
    - uses: actions/setup-node@v3
    - name: "Generate license file"
      env:
        project_path: "."
        output_file: "utility/Docker/licenses/open-source-licenses-notices.md"
        template_file: "harperdb_open_source_license_generator/template.txt"
      run: |
        #!/usr/bin/env bash
        cd harperdb_open_source_license_generator
        npm install --omit=dev 
        cd -
        node harperdb_open_source_license_generator/index.js
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: "licenses"
        path: "utility/Docker/licenses/"
        retention-days: 1

  # creates matrix for next job
  meta:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [[ "${target}" == 'public' ]]; then
            cat <<EOF >> $GITHUB_OUTPUT
            matrix={
              "container":[
                "harperdb/harperdb",
                "harperdb/harperdb-openshift"
              ],
              "include":[
                {"container":"harperdb/harperdb","file":"./utility/Docker/Dockerfile"},
                {"container":"harperdb/harperdb-openshift","file":"./utility/Docker/Dockerfile-openshift"}
              ]
            }
          EOF
          else
            cat <<EOF >> $GITHUB_OUTPUT
            matrix={
              "container":["${target}"],
              "include":[{"container":"${target}","file":"${file}"}]
            }
          EOF
          fi
        env:
          target: ${{ inputs.target }}
          file: ${{ inputs.file }}

  target_public:
    needs:
      - build
      - getLicenses
      - meta
    strategy:
      matrix: ${{ fromJSON(needs.meta.outputs.matrix) }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: "Setup Docker buildx"
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: actions/download-artifact@v3
        with:
          name: harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz
          path: ./
      - uses: actions/download-artifact@v3
        with:
          name: "licenses"
          path: "utility/Docker/licenses/"

      # generate tags for containers
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ${{ matrix.container }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,enable=${{ matrix.container != 'harperdb/private'}},value=${{ needs.build.outputs.harperdbVersion }}
            type=raw,enable=${{ matrix.container == 'harperdb/private'}},value=${{ needs.build.outputs.harperdbVersion }}-${{ github.run_number }}
            type=raw,value=latest,enable=${{ inputs.latest }}

      # build and publish containers
      - name: "Publish ${{ matrix.container }}:${{ needs.build.outputs.harperdbVersion }}"
        if: matrix.container != 'tar'
        id: build-image
        timeout-minutes: 30
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.file }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NODE_VERSION=${{ needs.build.outputs.nodeVersion }}
            HARPERDB_VERSION=${{ needs.build.outputs.harperdbVersion }}
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Create container tar"
        id: build-image-tar
        if: matrix.container == 'tar'
        timeout-minutes: 30
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.file }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type-docker,dest=docker-harperdb-${{ needs.build.outputs.harperdbVersion }}-${{ github.run_number }}.tar
          build-args: |
            NODE_VERSION=${{ needs.build.outputs.nodeVersion }}
            HARPERDB_VERSION=${{ needs.build.outputs.harperdbVersion }}
            VCS_REF=`git rev-parse HEAD`
            BUILD_DATE=`date -u +%FT%T
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Upload Artifact'
        if: matrix.container == 'tar'
        uses: actions/upload-artifact@v4
        with:
          name: docker-harperdb-${{ needs.build.outputs.harperdbVersion }}-${{ github.run_number }}.tar
          path: docker-harperdb-${{ needs.build.outputs.harperdbVersion }}-${{ github.run_number }}.tar
          retention-days: 1