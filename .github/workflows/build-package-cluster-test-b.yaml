on:
  push:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * 1-5'
  workflow_dispatch:
name: Run Build Package Cluster Test B
jobs:
  build:
    uses: ./.github/workflows/build.yaml
  createInstances:
    outputs:
      publicDnsNames: ${{ steps.createInstances.outputs.PUBLIC_DNS_NAMES }}
      publicIps: ${{ steps.createInstances.outputs.PUBLIC_IPS }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Setup Terraform
      with:
        terraform_wrapper: false
      uses: hashicorp/setup-terraform@v1
    - uses: actions/download-artifact@v3
      with:
        name: harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz
        path: ../artifact/
    - id: createInstances
      name: Create Instances
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CI_PRIVATE_KEY: ${{ secrets.CI_PRIVATE_KEY }}
      run: |
        #!/bin/bash
        set -x
        cd ../
        mkdir terraform
        cd terraform
        echo "$CI_PRIVATE_KEY" > private_key && chmod 600 private_key
        mkdir upload
        cp ../harperdb/utility/devops/terraform/instance.tf .
        mv ../harperdb/utility/devops/scripts/user_data.sh .
        mv ../artifact/harperdb-${{ needs.build.outputs.harperdbVersion }}.tgz ./upload/
        cp -r ../harperdb/ ./upload/

        terraform init
        terraform apply -var='private_key=./private_key' -var='region=us-east-2' -var='instance_count=4' -var='instance_name_prefix=GitHub-${{github.run_number}}' -var='instance_type=c5.2xlarge' -var='teamcity_buildconf_name=GitHub-${{github.run_number}}' -var='teamcity_build_number=GitHub-${{github.run_number}}' -var='volume_size=32' -auto-approve
        mapfile -t public_dns_names <<< $(terraform output -json | jq -r '.public_dns_names.value[]')
        mapfile -t public_ips <<< $(terraform output -json | jq -r '.public_ips.value[]')
        echo "::set-output name=PUBLIC_DNS_NAMES::${public_dns_names[@]}"
        echo "::set-output name=PUBLIC_IPS::${public_ips[@]}"

        mkdir ../harperdb/tfstate/
        mv terraform.tfstate ../harperdb/tfstate/
        mv .terraform.lock.hcl ../harperdb/tfstate/
        mv instance.tf ../harperdb/tfstate/
    - name: 'Upload TFState'
      uses: actions/upload-artifact@v3
      with:
        name: tfstate
        path: tfstate/
        retention-days: 1
  registerInstances:
    needs: 
      - createInstances
      - build
    uses: ./.github/workflows/install-and-register.yaml
    with:
      publicDns: ${{ needs.createInstances.outputs.publicDnsNames }}
      harperdbVersion: ${{ needs.build.outputs.harperdbVersion }}
      goVersion: ${{ needs.build.outputs.goVersion }}
      nodeVersion: ${{ needs.build.outputs.nodeVersion }}
      installType: "sourceCode"
    secrets: inherit
  runTests:
    if: always()
    runs-on: ubuntu-latest
    needs:
      - createInstances
      - registerInstances
      - build
    steps:
    - name: Run Cluster Test B on Instances
      env:
        CI_PRIVATE_KEY: ${{ secrets.CI_PRIVATE_KEY }}
      run: |
        #!/bin/bash

        cd ../
        echo "$CI_PRIVATE_KEY" > private_key && chmod 600 private_key

        public_dns_names="${{ needs.createInstances.outputs.publicDnsNames }}"
        public_ips="${{ needs.createInstances.outputs.publicIps }}"
        public_dns_names=($public_dns_names)
        public_ips=($public_ips)
        # Run the cluster tests from the first test VM
        public_dns_name="${public_dns_names[0]}"

        echo "Starting work on: $public_dns_name"

        ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ubuntu@$public_dns_name << HERE
          . /home/ubuntu/.nvm/nvm.sh
          . /home/ubuntu/.nvm/bash_completion

          npm --loglevel=error install -g newman
          npm --loglevel=error install -g newman-reporter-teamcity
          npm --loglevel=error install -g newman-reporter-html
          npm --loglevel=error install -g newman-reporter-htmlextra

          cd /home/ubuntu/harperdb/integrationTests/

          # Set node host names in postman env vars file
          sed -in "s/ClstrTestB1/${public_ips[0]}/" clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json
          sed -in "s/ClstrTestB2/${public_ips[1]}/" clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json
          sed -in "s/ClstrTestB3/${public_ips[2]}/" clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json
          sed -in "s/ClstrTestB4/${public_ips[3]}/" clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json

          # Set node names in postman env vars file 4 percent signs escapes for trimming string
          sed -in "s/ClstrTestBNode1/${public_dns_names[0]%%.*}/" clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json
          sed -in "s/ClstrTestBNode2/${public_dns_names[1]%%.*}/" clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json
          sed -in "s/ClstrTestBNode3/${public_dns_names[2]%%.*}/" clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json
          sed -in "s/ClstrTestBNode4/${public_dns_names[3]%%.*}/" clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json

          # Increase retry limit
          #sed -in 's/"value": "7",/"value": "100",/' clusterTests/Four_Node_Cluster_Tests_Env_vars.postman_environment.json
          cat clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json
          newman run clusterTests/clusterTestB/Four_Node_Cluster_Tests.postman_collection.json -e clusterTests/clusterTestB/Four_Node_Cluster_Tests_Env_vars.postman_environment.json --reporters teamcity,cli,html,htmlextra --reporter-html-export newman/report.html --reporter-htmlextra-export newman/extra_report.html  --delay-request 100 --insecure
        HERE

        echo "Ending work on: $public_dns_name"
    - name: Download Logs
      if: always()
      run: |
        #!/bin/bash
        cd ../
        mkdir logs-artifact
        public_dns_names="${{ needs.createInstances.outputs.publicDnsNames }}"
        public_dns_names=($public_dns_names)
        for public_dns_name in ${public_dns_names[@]}
        do 
          echo "Starting work on: $public_dns_name"
          mkdir logs-artifact/$public_dns_name
          scp -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "ubuntu@$public_dns_name:/home/ubuntu/harperdb/integrationTests/newman/report.html" "logs-artifact/$public_dns_name/newman_report.html" || (true && echo "Newman report not found")
          scp -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "ubuntu@$public_dns_name:/home/ubuntu/harperdb/integrationTests/newman/extra_report.html" "logs-artifact/$public_dns_name/newman_extra_report.html" || (true && echo "Newman report not found")
          scp -r -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "ubuntu@$public_dns_name:/home/ubuntu/hdb/log/" "logs-artifact/$public_dns_name/"
          scp -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "ubuntu@$public_dns_name:/home/ubuntu/hdb/harperdb.conf" "logs-artifact/$public_dns_name/harperdb.conf"
          echo "Ending work on: $public_dns_name"
        done
        mv logs-artifact harperdb
      shell: bash
    - name: 'Upload Log Artifact'
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: logs
        path: logs-artifact/
        retention-days: 1
    - uses: actions/download-artifact@v3
      if: always()
      with:
        name: tfstate
        path: ../tfstate/
    - name: Setup Terraform
      if: always()
      with:
        terraform_wrapper: false
      uses: hashicorp/setup-terraform@v1
    - name: Destroy Instances
      if: always()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        #!/bin/bash
        cd ../tfstate
        terraform init
        # Terraform needs to validate this but doesn't need them to have real data to destroy
        mkdir upload
        touch user_data.sh
        terraform destroy -var='private_key=./private_key' -var='region=us-east-2' -var='instance_count=4' -var='instance_name_prefix=GitHub-${{github.run_number}}' -var='instance_type=c5.2xlarge' -var='teamcity_buildconf_name=GitHub-${{github.run_number}}' -var='teamcity_build_number=GitHub-${{github.run_number}}' -var='volume_size=32' -auto-approve
