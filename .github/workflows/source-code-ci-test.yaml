on:
  # Trigger analysis when pushing in master or pull requests, and when creating
  # a pull request. 
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
name: Run Source Code CI Tests
jobs:
  getNodeVersion:
    runs-on: ubuntu-latest
    outputs:
      nodeVersion: ${{ steps.getNode.outputs.NODE_VERSION }}
      harperdbVersion: ${{ steps.getNode.outputs.HARPERDB_VERSION }}
      goVersion: ${{ steps.getNode.outputs.GO_VERSION }}
    steps:
    - uses: actions/checkout@v2
    - id: getNode
      name: Get node version
      run: |
        pwd
        NODE_VERSION="$(cat package.json | jq -r '.engines.node')"
        HARPERDB_VERSION=$(cat package.json | jq -r '.version')
        GO_VERSION=$(cat package.json | jq -r '.engines."go-lang"')
        echo "::set-output name=NODE_VERSION::$NODE_VERSION"
        echo "::set-output name=HARPERDB_VERSION::$HARPERDB_VERSION"
        echo "::set-output name=GO_VERSION::$GO_VERSION"
  createInstances:
    needs:
      - getNodeVersion
    uses: ./.github/workflows/create-instances.yaml
    with:
      instanceCount: "1"
      harperdbVersion: ${{ needs.getNodeVersion.outputs.harperdbVersion }}
      installType: "sourceCode"
    secrets: inherit
  registerInstances:
    needs: 
      - createInstances
      - getNodeVersion
    uses: ./.github/workflows/install-and-register.yaml
    with:
      publicDns: ${{ needs.createInstances.outputs.publicDnsNames }}
      harperdbVersion: ${{ needs.getNodeVersion.outputs.harperdbVersion }}
      goVersion: ${{ needs.getNodeVersion.outputs.goVersion }}
      nodeVersion: ${{ needs.getNodeVersion.outputs.nodeVersion }}
      installType: "sourceCode"
    secrets: inherit
  runUnitTests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - createInstances
      - registerInstances
      - getNodeVersion
    steps:
    - name: Run Unit Tests on Instances
      env:
        CI_PRIVATE_KEY: ${{ secrets.CI_PRIVATE_KEY }}
      run: |
        #!/bin/bash

        cd ../
        echo "$CI_PRIVATE_KEY" > private_key && chmod 600 private_key
        public_dns_names=${{ needs.createInstances.outputs.publicDnsNames }}

        for public_dns_name in ${public_dns_names[@]}
        do 
        echo "Starting work on: $public_dns_name"
        ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ubuntu@$public_dns_name << HERE
          . /home/ubuntu/.nvm/nvm.sh
          . /home/ubuntu/.nvm/bash_completion

          npm --loglevel=error install mocha -g
          cd /home/ubuntu/harperdb/bin/
          node harperdb.js stop
          npm test

          # Re-register HarperDB after unit tests
          cd /home/ubuntu/harperdb/utility/devops
          node register.js --reset_license --ram_allocation=16384

          cd /home/ubuntu/harperdb/bin/
          node harperdb.js
        HERE
        echo "Ending work on: $public_dns_name"
        done
      shell: bash
  runSonarScans:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - runUnitTests
      - createInstances
    steps:
    - uses: actions/checkout@v2
    - name: 'Download coverage file'
      env: 
        CI_PRIVATE_KEY: ${{ secrets.CI_PRIVATE_KEY }}
      run: |
        #!/bin/bash
        mkdir coverage
        cd ../
        echo "$CI_PRIVATE_KEY" > private_key && chmod 600 private_key
        public_dns_names=${{ needs.createInstances.outputs.publicDnsNames }}
        public_dns_name="${public_dns_names[0]}"
        scp -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "ubuntu@$public_dns_name:/home/ubuntu/harperdb/coverage/lcov.info" "harperdb/coverage/lcov.info"
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  runIntegrationTests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - runUnitTests
      - createInstances
    steps: 
    - name: Run Integration Tests on Instances
      env:
        CI_PRIVATE_KEY: ${{ secrets.CI_PRIVATE_KEY }}
      run: |
        #!/bin/bash
        cd ../
        echo "$CI_PRIVATE_KEY" > private_key && chmod 600 private_key
        public_dns_names=${{ needs.createInstances.outputs.publicDnsNames }}

        for public_dns_name in ${public_dns_names[@]}
        do 
        echo "Starting work on: $public_dns_name"
        ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ubuntu@$public_dns_name << HERE
          . /home/ubuntu/.nvm/nvm.sh
          . /home/ubuntu/.nvm/bash_completion
          
          npm --loglevel=error install -g newman
          npm --loglevel=error install -g newman-reporter-teamcity
          npm --loglevel=error install -g newman-reporter-html
          npm --loglevel=error install -g newman-reporter-htmlextra

          cd /home/ubuntu/harperdb/integrationTests

          # Correct path to CSV files for integration tests
          sed -i 's/\/usr\/csv\//\/home\/ubuntu\/harperdb\/test\/data\/integrationTestsCsvs\//g' Int_test_env_var.json
          cat Int_test_env_var.json | grep "integrationTestsCsvs"

          newman run HarperDB_Integration_Tests.json -e Int_test_env_var.json --reporters teamcity,cli,html,htmlextra --reporter-html-export newman/report.html --reporter-htmlextra-export newman/extra_report.html --insecure
        HERE
        echo "Ending work on: $public_dns_name"
        done
  downloadLogs:
    if: always()
    needs: 
      - runIntegrationTests
      - createInstances
    uses: ./.github/workflows/download-logs.yaml
    with:
      publicDns: ${{ needs.createInstances.outputs.publicDnsNames }}
    secrets: inherit
  destroyInstances:
    if: always()
    needs: downloadLogs
    uses: ./.github/workflows/destroy-instances.yaml
    with:
      instanceCount: "1"
    secrets: inherit   