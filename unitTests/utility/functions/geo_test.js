'use strict';

/***
 * Test the utility/geo.js functions
 */

const assert = require('assert');
const geo = require('../../../utility/functions/geo');
const test_utils = require('../../test_utils');
// try to move to /bin directory so our properties reader doesn't explode.
test_utils.changeProcessToBinDir();

const GEO_JSON_MULTIPOLYGON_FIVE_POINTS = {
	type: 'Feature',
	properties: {
		name: 'Five Points',
		cartodb_id: 75,
		created_at: '2013-02-10T03:12:09.376Z',
		updated_at: '2013-02-10T03:12:09.662Z',
	},
	geometry: {
		type: 'MultiPolygon',
		coordinates: [
			[
				[
					[-104.971916, 39.770301],
					[-104.973347, 39.769188],
					[-104.973343, 39.768164],
					[-104.973338, 39.76792],
					[-104.973346, 39.767189],
					[-104.973349, 39.766975],
					[-104.973352, 39.766494],
					[-104.973329, 39.766059],
					[-104.973322, 39.765846],
					[-104.973319, 39.765766],
					[-104.973329, 39.765147],
					[-104.97334, 39.764513],
					[-104.973336, 39.764208],
					[-104.973331, 39.763794],
					[-104.973336, 39.763257],
					[-104.973345, 39.762423],
					[-104.97334, 39.762048],
					[-104.973343, 39.76178],
					[-104.973351, 39.761152],
					[-104.973342, 39.760759],
					[-104.973337, 39.760422],
					[-104.973325, 39.759508],
					[-104.973349, 39.758241],
					[-104.973355, 39.757726],
					[-104.973363, 39.756985],
					[-104.973361, 39.756377],
					[-104.973361, 39.755741],
					[-104.973368, 39.755315],
					[-104.973361, 39.755113],
					[-104.973361, 39.754931],
					[-104.973359, 39.754548],
					[-104.973365, 39.753226],
					[-104.973363, 39.751982],
					[-104.973358, 39.750724],
					[-104.973359, 39.749477],
					[-104.973357, 39.748361],
					[-104.973334, 39.748119],
					[-104.973335, 39.747529],
					[-104.973339, 39.746964],
					[-104.973366, 39.745943],
					[-104.973385, 39.745087],
					[-104.97339, 39.744835],
					[-104.973383, 39.74378],
					[-104.973981, 39.744232],
					[-104.974777, 39.744835],
					[-104.976142, 39.745908],
					[-104.976487, 39.74618],
					[-104.976993, 39.746556],
					[-104.977544, 39.746964],
					[-104.978178, 39.747501],
					[-104.978206, 39.747505],
					[-104.978364, 39.747529],
					[-104.978722, 39.74753],
					[-104.979885, 39.747535],
					[-104.981075, 39.747546],
					[-104.981687, 39.747549],
					[-104.982311, 39.747552],
					[-104.982948, 39.747552],
					[-104.983124, 39.747552],
					[-104.98359, 39.747552],
					[-104.983937, 39.747559],
					[-104.984218, 39.747558],
					[-104.98476, 39.747548],
					[-104.984852, 39.747549],
					[-104.984939, 39.747546],
					[-104.985091, 39.747548],
					[-104.985219, 39.747556],
					[-104.985376, 39.747566],
					[-104.98548, 39.747577],
					[-104.985574, 39.747597],
					[-104.985676, 39.747528],
					[-104.986105, 39.747527],
					[-104.987202, 39.747523],
					[-104.987307, 39.747421],
					[-104.9874, 39.747358],
					[-104.987398, 39.748214],
					[-104.987397, 39.748913],
					[-104.987526, 39.749048],
					[-104.988227, 39.749587],
					[-104.988671, 39.749926],
					[-104.989101, 39.750254],
					[-104.989976, 39.750942],
					[-104.990831, 39.75159],
					[-104.991691, 39.752289],
					[-104.992144, 39.752617],
					[-104.992597, 39.752946],
					[-104.992992, 39.753287],
					[-104.993418, 39.753655],
					[-104.993828, 39.753981],
					[-104.994272, 39.754335],
					[-104.994701, 39.754658],
					[-104.995148, 39.754994],
					[-104.996119, 39.755729],
					[-104.997019, 39.75647],
					[-104.997378, 39.756764],
					[-104.998575, 39.757749],
					[-104.999548, 39.758474],
					[-104.999831, 39.758672],
					[-105.000104, 39.758837],
					[-105.000826, 39.75921],
					[-105.001331, 39.759458],
					[-105.001778, 39.759672],
					[-105.001894, 39.759761],
					[-105.003169, 39.760406],
					[-105.00302, 39.760511],
					[-105.002968, 39.760553],
					[-105.002882, 39.760612],
					[-105.002838, 39.760635],
					[-105.002786, 39.760652],
					[-105.002649, 39.760683],
					[-105.002519, 39.760705],
					[-105.002463, 39.760722],
					[-105.00227, 39.760793],
					[-105.002136, 39.760855],
					[-105.001977, 39.76092],
					[-105.001857, 39.760968],
					[-105.001727, 39.761008],
					[-105.00162, 39.76103],
					[-105.001482, 39.761047],
					[-105.001353, 39.761052],
					[-105.001208, 39.761051],
					[-105.00103, 39.761071],
					[-105.000848, 39.76111],
					[-105.000463, 39.761231],
					[-105.000024, 39.761392],
					[-104.999812, 39.76148],
					[-104.999597, 39.761579],
					[-104.999451, 39.76165],
					[-104.999332, 39.76171],
					[-104.999198, 39.761792],
					[-104.999042, 39.761883],
					[-104.998972, 39.76192],
					[-104.998826, 39.761982],
					[-104.998752, 39.76201],
					[-104.998708, 39.762024],
					[-104.998667, 39.762036],
					[-104.998559, 39.762061],
					[-104.998441, 39.76208],
					[-104.998314, 39.7621],
					[-104.998247, 39.76212],
					[-104.998129, 39.762154],
					[-104.99791, 39.762213],
					[-104.997813, 39.762249],
					[-104.997705, 39.762317],
					[-104.997609, 39.762372],
					[-104.997486, 39.762419],
					[-104.997341, 39.762459],
					[-104.99727, 39.762476],
					[-104.997137, 39.76249],
					[-104.997047, 39.762492],
					[-104.996955, 39.762494],
					[-104.996777, 39.762514],
					[-104.996599, 39.76255],
					[-104.996388, 39.762624],
					[-104.996209, 39.762689],
					[-104.99599, 39.762781],
					[-104.995671, 39.762917],
					[-104.995507, 39.76299],
					[-104.995421, 39.763039],
					[-104.995324, 39.763097],
					[-104.995175, 39.763199],
					[-104.994673, 39.763583],
					[-104.994187, 39.764015],
					[-104.994053, 39.764144],
					[-104.99393, 39.764255],
					[-104.9938, 39.764354],
					[-104.993628, 39.764476],
					[-104.993382, 39.76467],
					[-104.9932, 39.764829],
					[-104.993088, 39.764923],
					[-104.992957, 39.765014],
					[-104.992816, 39.765102],
					[-104.99253, 39.765275],
					[-104.992392, 39.765345],
					[-104.992143, 39.765464],
					[-104.991972, 39.765543],
					[-104.991786, 39.765617],
					[-104.991653, 39.765662],
					[-104.991377, 39.765746],
					[-104.990976, 39.765843],
					[-104.990851, 39.765874],
					[-104.990728, 39.765894],
					[-104.99062, 39.765903],
					[-104.989619, 39.766013],
					[-104.989415, 39.766038],
					[-104.989103, 39.766105],
					[-104.988851, 39.766176],
					[-104.988717, 39.766212],
					[-104.987634, 39.766516],
					[-104.98754, 39.766542],
					[-104.986553, 39.766826],
					[-104.985442, 39.767179],
					[-104.985331, 39.767211],
					[-104.984605, 39.767537],
					[-104.984438, 39.767639],
					[-104.984356, 39.767707],
					[-104.984207, 39.767864],
					[-104.984106, 39.767981],
					[-104.984023, 39.768095],
					[-104.983888, 39.768337],
					[-104.983753, 39.768568],
					[-104.983539, 39.768934],
					[-104.983411, 39.769139],
					[-104.98332, 39.769276],
					[-104.983262, 39.769361],
					[-104.983161, 39.769495],
					[-104.982836, 39.769891],
					[-104.982417, 39.7704],
					[-104.982222, 39.770628],
					[-104.981714, 39.771232],
					[-104.981583, 39.771389],
					[-104.981254, 39.771793],
					[-104.981097, 39.771993],
					[-104.980484, 39.772755],
					[-104.980378, 39.772897],
					[-104.980176, 39.773165],
					[-104.980109, 39.773267],
					[-104.979952, 39.773463],
					[-104.979847, 39.773603],
					[-104.979772, 39.773695],
					[-104.979679, 39.773815],
					[-104.979604, 39.773909],
					[-104.979428, 39.774106],
					[-104.979241, 39.774294],
					[-104.979167, 39.774372],
					[-104.979066, 39.774472],
					[-104.978939, 39.774611],
					[-104.978853, 39.774711],
					[-104.978726, 39.774865],
					[-104.97861, 39.775013],
					[-104.978523, 39.775125],
					[-104.978415, 39.775306],
					[-104.978302, 39.775188],
					[-104.978046, 39.774971],
					[-104.97718, 39.774303],
					[-104.9763, 39.773631],
					[-104.97586, 39.773295],
					[-104.975426, 39.772963],
					[-104.974985, 39.77263],
					[-104.97455, 39.772302],
					[-104.97368, 39.771615],
					[-104.97281, 39.770943],
					[-104.972367, 39.770625],
					[-104.971916, 39.770301],
				],
			],
		],
	},
};

const GEO_JSON_POLYGON_1_KILOMETER_RADIUS = {
	type: 'Feature',
	properties: {},
	geometry: {
		type: 'Polygon',
		coordinates: [
			[
				[-104.98293570000001, 39.770482703637249],
				[-104.98408255456459, 39.77043939326073],
				[-104.98521835999875, 39.770309879396351],
				[-104.98633217374633, 39.7700954098149],
				[-104.98741326536701, 39.769798050757508],
				[-104.98845122002264, 39.769420667006607],
				[-104.98943603890596, 39.768966894256032],
				[-104.99035823563985, 39.768441104047959],
				[-104.99120892771435, 39.767848361616416],
				[-104.99197992207826, 39.767194377045215],
				[-104.99266379405877, 39.766485450213324],
				[-104.99325395884867, 39.76572841006017],
				[-104.99374473487349, 39.764930548758223],
				[-104.99413139842983, 39.7640995514292],
				[-104.99441022907183, 39.763243422082915],
				[-104.9945785453129, 39.762370406493922],
				[-104.99463473030357, 39.7614889127602],
				[-104.99457824724402, 39.760607430310124],
				[-104.9944096443887, 39.75973444813846],
				[-104.99413054960148, 39.758878373058955],
				[-104.99374365451992, 39.758047448760728],
				[-104.99325268848725, 39.757249676447067],
				[-104.99266238250878, 39.756492737819926],
				[-104.99197842358478, 39.755783921150183],
				[-104.99120739986365, 39.75513005114378],
				[-104.99035673714634, 39.754537423277036],
				[-104.98943462735596, 39.7540117432311],
				[-104.98844994966117, 39.753558072006541],
				[-104.9874121850134, 39.753180777243934],
				[-104.98633132491794, 39.752883491217347],
				[-104.98521777531558, 39.752669075902681],
				[-104.98408225649571, 39.75253959545563],
				[-104.98293570000001, 39.75249629636275],
				[-104.98178914350433, 39.75253959545563],
				[-104.98065362468444, 39.752669075902681],
				[-104.97954007508207, 39.752883491217347],
				[-104.97845921498661, 39.753180777243934],
				[-104.97742145033884, 39.753558072006541],
				[-104.97643677264408, 39.7540117432311],
				[-104.97551466285367, 39.754537423277036],
				[-104.97466400013639, 39.75513005114378],
				[-104.97389297641523, 39.755783921150183],
				[-104.97320901749124, 39.756492737819926],
				[-104.97261871151278, 39.757249676447067],
				[-104.97212774548011, 39.758047448760728],
				[-104.97174085039856, 39.758878373058955],
				[-104.97146175561132, 39.75973444813846],
				[-104.97129315275599, 39.760607430310124],
				[-104.97123666969644, 39.7614889127602],
				[-104.97129285468712, 39.762370406493922],
				[-104.97146117092818, 39.763243422082915],
				[-104.97174000157018, 39.7640995514292],
				[-104.97212666512654, 39.764930548758223],
				[-104.97261744115134, 39.76572841006017],
				[-104.97320760594127, 39.766485450213324],
				[-104.97389147792175, 39.767194377045215],
				[-104.97466247228566, 39.767848361616416],
				[-104.97551316436017, 39.768441104047959],
				[-104.97643536109405, 39.768966894256032],
				[-104.97742017997739, 39.769420667006607],
				[-104.978458134633, 39.769798050757508],
				[-104.97953922625368, 39.7700954098149],
				[-104.98065304000127, 39.770309879396351],
				[-104.98178884543542, 39.77043939326073],
				[-104.98293570000001, 39.770482703637249],
			],
		],
	},
};

const GEO_JSON_POLYGON_1_MILE_RADIUS = {
	type: 'Feature',
	properties: {},
	geometry: {
		type: 'Polygon',
		coordinates: [
			[
				[-104.98293570000001, 39.775962658314377],
				[-104.98478152973544, 39.775892951484387],
				[-104.98660957199679, 39.775684502730506],
				[-104.98840221104106, 39.775339320775622],
				[-104.9901421729168, 39.774860731936251],
				[-104.99181269220111, 39.774253348010475],
				[-104.99339767379176, 39.773523021758891],
				[-104.99488184818448, 39.772676790411509],
				[-104.99625091872889, 39.771722807749775],
				[-104.99749169943742, 39.770670265422943],
				[-104.99859224201526, 39.769529304263223],
				[-104.99954195088621, 39.768310916459633],
				[-105.00033168510872, 39.767026839539227],
				[-105.00095384620494, 39.765689443182808],
				[-105.00140245106525, 39.764311609970669],
				[-105.00167318923647, 39.762906611211712],
				[-105.00176346405469, 39.761487979055921],
				[-105.00167241724165, 39.76006937612464],
				[-105.00140093674293, 39.758664463916134],
				[-105.00095164774966, 39.757286771254307],
				[-105.00032888700588, 39.755949564046787],
				[-104.99953866066531, 39.754665717604979],
				[-104.99858858611762, 39.753447592752529],
				[-104.99748781835717, 39.752306916911436],
				[-104.99624696161371, 39.751254671306071],
				[-104.9948779671041, 39.7503009853658],
				[-104.99339401789392, 39.749455039337064],
				[-104.99180940197994, 39.748724976036641],
				[-104.99013937481367, 39.7481178225895],
				[-104.9884000125855, 39.747639422899056],
				[-104.98660805767427, 39.747294381494491],
				[-104.98478075774051, 39.747086019291089],
				[-104.98293570000001, 39.747016341685608],
				[-104.98109064225952, 39.747086019291089],
				[-104.97926334232575, 39.747294381494491],
				[-104.97747138741451, 39.747639422899056],
				[-104.97573202518635, 39.7481178225895],
				[-104.97406199802008, 39.748724976036641],
				[-104.97247738210609, 39.749455039337064],
				[-104.97099343289594, 39.7503009853658],
				[-104.96962443838632, 39.751254671306071],
				[-104.96838358164287, 39.752306916911436],
				[-104.96728281388239, 39.753447592752529],
				[-104.9663327393347, 39.754665717604979],
				[-104.96554251299413, 39.755949564046787],
				[-104.96491975225037, 39.757286771254307],
				[-104.9644704632571, 39.758664463916134],
				[-104.96419898275838, 39.76006937612464],
				[-104.96410793594534, 39.761487979055921],
				[-104.96419821076357, 39.762906611211712],
				[-104.96446894893477, 39.764311609970669],
				[-104.9649175537951, 39.765689443182808],
				[-104.96553971489129, 39.767026839539227],
				[-104.9663294491138, 39.768310916459633],
				[-104.96727915798476, 39.769529304263223],
				[-104.96837970056259, 39.770670265422943],
				[-104.96962048127112, 39.771722807749775],
				[-104.97098955181553, 39.772676790411509],
				[-104.97247372620826, 39.773523021758891],
				[-104.9740587077989, 39.774253348010475],
				[-104.97572922708321, 39.774860731936251],
				[-104.97746918895898, 39.775339320775622],
				[-104.97926182800322, 39.775684502730506],
				[-104.98108987026457, 39.775892951484387],
				[-104.98293570000001, 39.775962658314377],
			],
		],
	},
};

const GEO_JSON_POLYGON_RADIUS_DIFFERENCE = {
	type: 'Feature',
	properties: {},
	geometry: {
		type: 'Polygon',
		coordinates: [
			[
				[-105.00176346405469, 39.76148797905592],
				[-105.00167241724165, 39.76006937612464],
				[-105.00140093674293, 39.75866446391613],
				[-105.00095164774966, 39.75728677125431],
				[-105.00032888700588, 39.75594956404679],
				[-104.99953866066531, 39.75466571760498],
				[-104.99858858611762, 39.75344759275253],
				[-104.99748781835717, 39.75230691691144],
				[-104.9962469616137, 39.75125467130607],
				[-104.9948779671041, 39.7503009853658],
				[-104.99339401789392, 39.749455039337064],
				[-104.99180940197994, 39.74872497603664],
				[-104.99013937481367, 39.7481178225895],
				[-104.9884000125855, 39.747639422899056],
				[-104.98660805767427, 39.74729438149449],
				[-104.98478075774051, 39.74708601929109],
				[-104.98293570000001, 39.74701634168561],
				[-104.98109064225952, 39.74708601929109],
				[-104.97926334232575, 39.74729438149449],
				[-104.97747138741451, 39.747639422899056],
				[-104.97573202518635, 39.7481178225895],
				[-104.97406199802008, 39.74872497603664],
				[-104.97247738210609, 39.749455039337064],
				[-104.97099343289594, 39.7503009853658],
				[-104.96962443838632, 39.75125467130607],
				[-104.96838358164287, 39.75230691691144],
				[-104.96728281388239, 39.75344759275253],
				[-104.9663327393347, 39.75466571760498],
				[-104.96554251299413, 39.75594956404679],
				[-104.96491975225037, 39.75728677125431],
				[-104.9644704632571, 39.75866446391613],
				[-104.96419898275838, 39.76006937612464],
				[-104.96410793594534, 39.76148797905592],
				[-104.96419821076357, 39.76290661121171],
				[-104.96446894893477, 39.76431160997067],
				[-104.9649175537951, 39.76568944318281],
				[-104.96553971489129, 39.76702683953923],
				[-104.9663294491138, 39.76831091645963],
				[-104.96727915798476, 39.76952930426322],
				[-104.9683797005626, 39.77067026542294],
				[-104.96962048127112, 39.771722807749775],
				[-104.97098955181553, 39.77267679041151],
				[-104.97247372620826, 39.77352302175889],
				[-104.9740587077989, 39.774253348010475],
				[-104.9757292270832, 39.77486073193625],
				[-104.97746918895898, 39.77533932077562],
				[-104.97926182800322, 39.775684502730506],
				[-104.98108987026457, 39.77589295148439],
				[-104.98293570000001, 39.77596265831438],
				[-104.98478152973544, 39.77589295148439],
				[-104.9866095719968, 39.775684502730506],
				[-104.98840221104106, 39.77533932077562],
				[-104.9901421729168, 39.77486073193625],
				[-104.99181269220111, 39.774253348010475],
				[-104.99339767379176, 39.77352302175889],
				[-104.99488184818448, 39.77267679041151],
				[-104.99625091872889, 39.771722807749775],
				[-104.99749169943742, 39.77067026542294],
				[-104.99859224201526, 39.76952930426322],
				[-104.99954195088621, 39.76831091645963],
				[-105.00033168510872, 39.76702683953923],
				[-105.00095384620494, 39.76568944318281],
				[-105.00140245106525, 39.76431160997067],
				[-105.00167318923647, 39.76290661121171],
				[-105.00176346405469, 39.76148797905592],
			],
			[
				[-104.99463473030357, 39.7614889127602],
				[-104.9945785453129, 39.76237040649392],
				[-104.99441022907183, 39.763243422082915],
				[-104.99413139842983, 39.7640995514292],
				[-104.99374473487349, 39.76493054875822],
				[-104.99325395884867, 39.76572841006017],
				[-104.99266379405877, 39.766485450213324],
				[-104.99197992207826, 39.767194377045215],
				[-104.99120892771435, 39.767848361616416],
				[-104.99035823563985, 39.76844110404796],
				[-104.98943603890596, 39.76896689425603],
				[-104.98845122002264, 39.76942066700661],
				[-104.98741326536701, 39.76979805075751],
				[-104.98633217374633, 39.7700954098149],
				[-104.98521835999875, 39.77030987939635],
				[-104.9840825545646, 39.77043939326073],
				[-104.98293570000001, 39.77048270363725],
				[-104.98178884543542, 39.77043939326073],
				[-104.98065304000127, 39.77030987939635],
				[-104.97953922625368, 39.7700954098149],
				[-104.978458134633, 39.76979805075751],
				[-104.97742017997739, 39.76942066700661],
				[-104.97643536109405, 39.76896689425603],
				[-104.97551316436017, 39.76844110404796],
				[-104.97466247228566, 39.767848361616416],
				[-104.97389147792175, 39.767194377045215],
				[-104.97320760594127, 39.766485450213324],
				[-104.97261744115134, 39.76572841006017],
				[-104.97212666512654, 39.76493054875822],
				[-104.97174000157018, 39.7640995514292],
				[-104.97146117092818, 39.763243422082915],
				[-104.97129285468712, 39.76237040649392],
				[-104.97123666969644, 39.7614889127602],
				[-104.97129315275599, 39.760607430310124],
				[-104.97146175561132, 39.75973444813846],
				[-104.97174085039856, 39.758878373058955],
				[-104.97212774548011, 39.75804744876073],
				[-104.97261871151278, 39.75724967644707],
				[-104.97320901749124, 39.756492737819926],
				[-104.97389297641523, 39.75578392115018],
				[-104.97466400013639, 39.75513005114378],
				[-104.97551466285367, 39.754537423277036],
				[-104.97643677264408, 39.7540117432311],
				[-104.97742145033884, 39.75355807200654],
				[-104.97845921498661, 39.753180777243934],
				[-104.97954007508207, 39.75288349121735],
				[-104.98065362468444, 39.75266907590268],
				[-104.98178914350433, 39.75253959545563],
				[-104.98293570000001, 39.75249629636275],
				[-104.98408225649571, 39.75253959545563],
				[-104.98521777531558, 39.75266907590268],
				[-104.98633132491794, 39.75288349121735],
				[-104.9874121850134, 39.753180777243934],
				[-104.98844994966117, 39.75355807200654],
				[-104.98943462735596, 39.7540117432311],
				[-104.99035673714634, 39.754537423277036],
				[-104.99120739986365, 39.75513005114378],
				[-104.99197842358478, 39.75578392115018],
				[-104.99266238250878, 39.756492737819926],
				[-104.99325268848725, 39.75724967644707],
				[-104.99374365451992, 39.75804744876073],
				[-104.99413054960148, 39.758878373058955],
				[-104.9944096443887, 39.75973444813846],
				[-104.99457824724402, 39.760607430310124],
				[-104.99463473030357, 39.7614889127602],
			],
		],
	},
};
const GEO_JSON_POINT_ENTERPRISE_COWORKING = {
	type: 'Feature',
	properties: {},
	geometry: {
		type: 'Point',
		coordinates: [-104.9829357, 39.7614895],
	},
};

const GEO_JSON_POINT_ENTERPRISE_COWORKING2 = {
	type: 'Feature',
	properties: {},
	geometry: {
		type: 'Point',
		coordinates: [-104.9829357, 39.7614895],
	},
};

const GEO_JSON_POINT2 = {
	type: 'Feature',
	properties: {},
	geometry: {
		type: 'Point',
		coordinates: [-104.971916, 39.770301],
	},
};

const GEO_JSON_LINE = {
	type: 'Feature',
	properties: {},
	geometry: {
		type: 'LineString',
		coordinates: [
			[-104.9829357, 39.7614895],
			[-104.971916, 39.770301],
		],
	},
};

const POINT_COORDINATES_ENTERPRISE_COWORKING = [-104.9829357, 39.7614895];
const LINE_COORDINATES = [
	[-104.9829357, 39.7614895],
	[-104.971916, 39.770301],
];
const POLYGON_COORDINATES = [
	[
		[-104.98293570000001, 39.770482703637249],
		[-104.98408255456459, 39.77043939326073],
		[-104.98521835999875, 39.770309879396351],
		[-104.98633217374633, 39.7700954098149],
		[-104.98741326536701, 39.769798050757508],
		[-104.98845122002264, 39.769420667006607],
		[-104.98943603890596, 39.768966894256032],
		[-104.99035823563985, 39.768441104047959],
		[-104.99120892771435, 39.767848361616416],
		[-104.99197992207826, 39.767194377045215],
		[-104.99266379405877, 39.766485450213324],
		[-104.99325395884867, 39.76572841006017],
		[-104.99374473487349, 39.764930548758223],
		[-104.99413139842983, 39.7640995514292],
		[-104.99441022907183, 39.763243422082915],
		[-104.9945785453129, 39.762370406493922],
		[-104.99463473030357, 39.7614889127602],
		[-104.99457824724402, 39.760607430310124],
		[-104.9944096443887, 39.75973444813846],
		[-104.99413054960148, 39.758878373058955],
		[-104.99374365451992, 39.758047448760728],
		[-104.99325268848725, 39.757249676447067],
		[-104.99266238250878, 39.756492737819926],
		[-104.99197842358478, 39.755783921150183],
		[-104.99120739986365, 39.75513005114378],
		[-104.99035673714634, 39.754537423277036],
		[-104.98943462735596, 39.7540117432311],
		[-104.98844994966117, 39.753558072006541],
		[-104.9874121850134, 39.753180777243934],
		[-104.98633132491794, 39.752883491217347],
		[-104.98521777531558, 39.752669075902681],
		[-104.98408225649571, 39.75253959545563],
		[-104.98293570000001, 39.75249629636275],
		[-104.98178914350433, 39.75253959545563],
		[-104.98065362468444, 39.752669075902681],
		[-104.97954007508207, 39.752883491217347],
		[-104.97845921498661, 39.753180777243934],
		[-104.97742145033884, 39.753558072006541],
		[-104.97643677264408, 39.7540117432311],
		[-104.97551466285367, 39.754537423277036],
		[-104.97466400013639, 39.75513005114378],
		[-104.97389297641523, 39.755783921150183],
		[-104.97320901749124, 39.756492737819926],
		[-104.97261871151278, 39.757249676447067],
		[-104.97212774548011, 39.758047448760728],
		[-104.97174085039856, 39.758878373058955],
		[-104.97146175561132, 39.75973444813846],
		[-104.97129315275599, 39.760607430310124],
		[-104.97123666969644, 39.7614889127602],
		[-104.97129285468712, 39.762370406493922],
		[-104.97146117092818, 39.763243422082915],
		[-104.97174000157018, 39.7640995514292],
		[-104.97212666512654, 39.764930548758223],
		[-104.97261744115134, 39.76572841006017],
		[-104.97320760594127, 39.766485450213324],
		[-104.97389147792175, 39.767194377045215],
		[-104.97466247228566, 39.767848361616416],
		[-104.97551316436017, 39.768441104047959],
		[-104.97643536109405, 39.768966894256032],
		[-104.97742017997739, 39.769420667006607],
		[-104.978458134633, 39.769798050757508],
		[-104.97953922625368, 39.7700954098149],
		[-104.98065304000127, 39.770309879396351],
		[-104.98178884543542, 39.77043939326073],
		[-104.98293570000001, 39.770482703637249],
	],
];

describe(`Test geoArea`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoArea();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoArea(null);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoArea(42);
		});
	});
	it('Pass in polygon geojson, expect 4559449.809365065', function () {
		assert.equal(geo.geoArea(GEO_JSON_MULTIPOLYGON_FIVE_POINTS), 4559449.809365065);
	});
	it('Pass in point geojson, expect 0', function () {
		assert.equal(geo.geoArea(GEO_JSON_POINT_ENTERPRISE_COWORKING), 0);
	});
});

describe(`Test geoLength`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoLength();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoLength(null);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoLength(42);
		});
	});
	it('Pass in polygon geojson and invalid units, expect error', function () {
		assert.throws(() => {
			geo.geoLength(GEO_JSON_MULTIPOLYGON_FIVE_POINTS, 'spans');
		});
	});
	it('Pass in polygon geojson, expect 10.037307809946478', function () {
		assert.equal(geo.geoLength(GEO_JSON_MULTIPOLYGON_FIVE_POINTS), 10.037307809946478);
	});
	it('Pass in polygon geojson and miles, expect 6.236893920719556', function () {
		assert.equal(geo.geoLength(GEO_JSON_MULTIPOLYGON_FIVE_POINTS, 'miles'), 6.236893920719556);
	});
	it('Pass in point geojson and radians, expect 0', function () {
		assert.equal(geo.geoLength(GEO_JSON_POINT_ENTERPRISE_COWORKING, 'radians'), 0);
	});
	it('Pass in line geojson, expect 1.359089002130181', function () {
		assert.equal(geo.geoLength(GEO_JSON_LINE), 1.359089002130181);
	});
});

describe(`Test geoCircle`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoCircle();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoCircle(null);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoCircle(42);
		});
	});
	it('Pass in point value but no radius, expect error', function () {
		assert.throws(() => {
			geo.geoCircle(GEO_JSON_POINT_ENTERPRISE_COWORKING);
		});
	});
	it('Pass in point, radius and invalid units, expect error', function () {
		assert.throws(() => {
			geo.geoCircle(GEO_JSON_POINT_ENTERPRISE_COWORKING, 1, 'spans');
		});
	});
	it('Pass in point, radius of 1, expect matching polygons', function () {
		let geo_circle = geo.geoCircle(GEO_JSON_POINT_ENTERPRISE_COWORKING, 1);
		assert.equal(JSON.stringify(geo_circle), JSON.stringify(GEO_JSON_POLYGON_1_KILOMETER_RADIUS));
	});
	it('Pass in point, radius of 1 in miles, expect matching polygons', function () {
		let geo_circle = geo.geoCircle(GEO_JSON_POINT_ENTERPRISE_COWORKING, 1, 'miles');
		assert.equal(JSON.stringify(geo_circle), JSON.stringify(GEO_JSON_POLYGON_1_MILE_RADIUS));
	});
});

describe(`Test geoDifference`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoDifference();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoDifference(null);
		});
	});
	it('Pass in first poly and null, expect error', function () {
		assert.throws(() => {
			geo.geoDifference(GEO_JSON_POLYGON_1_KILOMETER_RADIUS);
		});
	});
	it('Pass in null, second poly, expect error', function () {
		assert.throws(() => {
			geo.geoDifference(null, GEO_JSON_POLYGON_1_KILOMETER_RADIUS);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoDifference(42);
		});
	});
	it('Pass mile poly and kilometer poly to diff, expect matching polygons', function () {
		let geo_difference = geo.geoDifference(GEO_JSON_POLYGON_1_MILE_RADIUS, GEO_JSON_POLYGON_1_KILOMETER_RADIUS);
		assert.equal(JSON.stringify(geo_difference), JSON.stringify(GEO_JSON_POLYGON_RADIUS_DIFFERENCE));
	});
	it('Pass kilometer poly and mile poly to diff, expect null', function () {
		let geo_difference = geo.geoDifference(GEO_JSON_POLYGON_1_KILOMETER_RADIUS, GEO_JSON_POLYGON_1_MILE_RADIUS);
		assert.equal(geo_difference, null);
	});
});

describe(`Test geoDistance`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoDistance();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoDistance(null);
		});
	});
	it('Pass in first poly and null, expect error', function () {
		assert.throws(() => {
			geo.geoDistance(GEO_JSON_POINT2);
		});
	});
	it('Pass in null, second poly, expect error', function () {
		assert.throws(() => {
			geo.geoDistance(null, GEO_JSON_POINT_ENTERPRISE_COWORKING);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoDistance(42);
		});
	});
	it('Pass in 2 points, no units, expect 1.359089002130181', function () {
		assert.equal(geo.geoDistance(GEO_JSON_POINT2, GEO_JSON_POINT_ENTERPRISE_COWORKING), 1.359089002130181);
	});
	it('Pass in 2 points, miles, expect 0.8444987536102792', function () {
		assert.equal(geo.geoDistance(GEO_JSON_POINT2, GEO_JSON_POINT_ENTERPRISE_COWORKING, 'miles'), 0.8444987536102792);
	});
});

describe(`Test geoNear`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoNear();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoNear(null);
		});
	});
	it('Pass in first poly and null, expect error', function () {
		assert.throws(() => {
			geo.geoNear(GEO_JSON_POINT2);
		});
	});
	it('Pass in null, second poly, expect error', function () {
		assert.throws(() => {
			geo.geoNear(null, GEO_JSON_POINT_ENTERPRISE_COWORKING);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoNear(42);
		});
	});
	it('Pass in 2 points and a non-numeric value for distance, expect error', function () {
		assert.throws(() => {
			geo.geoNear(GEO_JSON_POINT2, GEO_JSON_POINT_ENTERPRISE_COWORKING, 'woops');
		});
	});
	it('Pass in 2 points, distance of 1, no units expect false', function () {
		assert.equal(geo.geoNear(GEO_JSON_POINT2, GEO_JSON_POINT_ENTERPRISE_COWORKING, 1), false);
	});
	it('Pass in 2 points,distance of 1, units of miles, expect true', function () {
		assert.equal(geo.geoNear(GEO_JSON_POINT2, GEO_JSON_POINT_ENTERPRISE_COWORKING, 1, 'miles'), true);
	});
});

describe(`Test geoContains`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoContains();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoContains(null);
		});
	});
	it('Pass in first poly and null, expect error', function () {
		assert.throws(() => {
			geo.geoContains(GEO_JSON_POLYGON_1_MILE_RADIUS);
		});
	});
	it('Pass in null, second poly, expect error', function () {
		assert.throws(() => {
			geo.geoContains(null, GEO_JSON_POLYGON_1_KILOMETER_RADIUS);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoContains(42);
		});
	});
	it('Pass in 1 mile radius and enterprise coworking point, expect true', function () {
		assert.equal(geo.geoContains(GEO_JSON_POLYGON_1_MILE_RADIUS, GEO_JSON_POINT_ENTERPRISE_COWORKING), true);
	});
	it('Pass in 2 polys, expect false', function () {
		assert.equal(geo.geoContains(GEO_JSON_POLYGON_1_KILOMETER_RADIUS, GEO_JSON_POLYGON_RADIUS_DIFFERENCE), false);
	});
});

describe(`Test geoEqual`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoEqual();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoEqual(null);
		});
	});
	it('Pass in first poly and null, expect error', function () {
		assert.throws(() => {
			geo.geoEqual(GEO_JSON_POLYGON_1_MILE_RADIUS);
		});
	});
	it('Pass in null, second poly, expect error', function () {
		assert.throws(() => {
			geo.geoEqual(null, GEO_JSON_POLYGON_1_KILOMETER_RADIUS);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoEqual(42);
		});
	});
	it('Pass in 1 mile radius and enterprise coworking point, expect false', function () {
		assert.equal(geo.geoEqual(GEO_JSON_POLYGON_1_MILE_RADIUS, GEO_JSON_POINT_ENTERPRISE_COWORKING), false);
	});
	it('Pass in 2 unmatching points, expect false', function () {
		assert.equal(geo.geoEqual(GEO_JSON_POINT2, GEO_JSON_POINT_ENTERPRISE_COWORKING), false);
	});
	it('Pass in 2 matching points, expect true', function () {
		assert.equal(geo.geoEqual(GEO_JSON_POINT_ENTERPRISE_COWORKING2, GEO_JSON_POINT_ENTERPRISE_COWORKING), true);
	});
});

describe(`Test geoCrosses`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoCrosses();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoCrosses(null);
		});
	});
	it('Pass in first poly and null, expect error', function () {
		assert.throws(() => {
			geo.geoCrosses(GEO_JSON_POLYGON_1_MILE_RADIUS);
		});
	});
	it('Pass in null, second poly, expect error', function () {
		assert.throws(() => {
			geo.geoCrosses(null, GEO_JSON_POLYGON_1_KILOMETER_RADIUS);
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoCrosses(42);
		});
	});
	it('Pass in 1 mile radius and enterprise coworking point, expect true', function () {
		assert.equal(geo.geoCrosses(GEO_JSON_POLYGON_1_MILE_RADIUS, GEO_JSON_POINT_ENTERPRISE_COWORKING), true);
	});
	it('Pass in 2 unmatching points, expect false', function () {
		assert.equal(geo.geoCrosses(GEO_JSON_POINT2, GEO_JSON_POINT_ENTERPRISE_COWORKING), false);
	});
	it('Pass in 2 matching points, expect true', function () {
		assert.equal(geo.geoCrosses(GEO_JSON_POINT_ENTERPRISE_COWORKING2, GEO_JSON_POINT_ENTERPRISE_COWORKING), true);
	});

	it('Pass in 2 polys where one exists in the other, expect true', function () {
		assert.equal(geo.geoCrosses(GEO_JSON_POLYGON_1_KILOMETER_RADIUS, GEO_JSON_POLYGON_1_MILE_RADIUS), true);
	});
});

describe(`Test geoConvert`, function () {
	it('Pass in no argument geoJSON, expect error', function () {
		assert.throws(() => {
			geo.geoConvert();
		});
	});
	it('Pass in null value, expect error', function () {
		assert.throws(() => {
			geo.geoConvert(null);
		});
	});
	it('Pass in coordinates and null, expect error', function () {
		assert.throws(() => {
			geo.geoConvert(POINT_COORDINATES_ENTERPRISE_COWORKING);
		});
	});
	it('Pass in null, geo type, expect error', function () {
		assert.throws(() => {
			geo.geoConvert(null, 'point');
		});
	});
	it('Pass in number value, expect error', function () {
		assert.throws(() => {
			geo.geoConvert(42);
		});
	});
	it('Pass in coordinates & invalid type, expect error', function () {
		assert.throws(() => {
			geo.geoConvert(POINT_COORDINATES_ENTERPRISE_COWORKING, 'line');
		});
	});
	it('Pass in point coodinates, matches geo json point', function () {
		let geo_json = geo.geoConvert(POINT_COORDINATES_ENTERPRISE_COWORKING, 'point');
		assert.equal(JSON.stringify(geo_json), JSON.stringify(GEO_JSON_POINT_ENTERPRISE_COWORKING));
	});
	it('Pass in line coodinates, matches geo json line', function () {
		let geo_json = geo.geoConvert(LINE_COORDINATES, 'lineString');
		assert.equal(JSON.stringify(geo_json), JSON.stringify(GEO_JSON_LINE));
	});
	it('Pass in polygon coodinates, matches geo json polygon', function () {
		let geo_json = geo.geoConvert(POLYGON_COORDINATES, 'polygon');
		assert.equal(JSON.stringify(geo_json), JSON.stringify(GEO_JSON_POLYGON_1_KILOMETER_RADIUS));
	});
});
