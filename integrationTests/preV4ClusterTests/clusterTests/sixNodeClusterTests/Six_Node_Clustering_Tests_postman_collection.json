{
	"info": {
		"_postman_id": "23d2bfd4-eac7-4004-a1e1-3c68b02f0909",
		"name": "Six Node Clustering Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add Nodes",
			"item": [
				{
					"name": "Add node 1 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "741d326c-414c-44ea-9588-57da14f54e78",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node4_name}}\",\n    \"host\": \"{{node4_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{bear_schema}}:{{temp_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm cluster status node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10047fc9-b5bf-4e82-a641-86fddb04cfda",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node_name = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.status.outbound_connections[0].node_name).to.be.eql(node_name);\r",
									"    pm.expect()\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"cluster_status\"\n}\n"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18e814bc-5ab1-4162-8a8d-3cb4538648f5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node4_name}}\",\n    \"host\": \"{{node4_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{bear_schema}}:{{press_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm cluster status node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1646ff3a-66f8-4d0a-8f43-fc24c7d2a276",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node_name = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.status.outbound_connections[0].node_name).to.be.eql(node_name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"cluster_status\"\n}\n"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 3 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7632389-7cd4-4492-8709-a9613d64db9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node4_name}}\",\n    \"host\": \"{{node4_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{bear_schema}}:{{rpm_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm cluster status node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5120631-7f27-42b4-8a7f-0c970f4c7fb4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node_name = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.status.outbound_connections[0].node_name).to.be.eql(node_name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"cluster_status\"\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 4 to 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d9c3418-2d2c-44ef-b8ff-c29eace45754",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node6_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node6_name}}\",\n    \"host\": \"{{node6_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{bear_schema}}:{{temp_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        },\n        {\n            \"channel\": \"{{bear_schema}}:{{press_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        },\n        {\n            \"channel\": \"{{bear_schema}}:{{rpm_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 4 to 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "567e366f-99dd-40bd-b37b-5748b361dda7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node5_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node5_name}}\",\n    \"host\": \"{{node5_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{con_schema}}:{{con_rpm_table}}\",\n            \"subscribe\": true,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 5 to 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53051920-1d36-4a01-84c8-b997a6ac968b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node3_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node3_name}}\",\n    \"host\": \"{{node3_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{con_schema}}:{{con_rpm_table}}\",\n            \"subscribe\": true,\n            \"publish\": false\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Add Schemas And Tables",
			"item": [
				{
					"name": "Create schema bearing node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a339f8c-7387-4520-9e07-fc13dc0ced88",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"schema 'bearing' successfully created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41352f1d-ac02-4502-b456-5fd69bfb3b34",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2fd556c-3d33-469c-bc52-518fcd08af07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8b4d255-ae69-471d-8a22-56f799ee96d9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f27e1c6c-1480-4ebd-9cfe-8af48502ce70",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de6143bc-ed74-45dd-80c1-5334416cf7c1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50efb615-05dd-46b0-aa13-0cc7abde3882",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table temperature node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d908e35c-da5d-406a-b1b7-0d8c3638f7be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"table 'bearing.temperature' successfully created.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table pressure node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b492a03-5e4e-4ce4-bac8-40481936fa21",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"table 'bearing.pressure' successfully created.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{press_table}}\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table rpm node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc2b9330-f403-4ae9-8037-bdd2f96fbc93",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"table 'bearing.rpm' successfully created.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{rpm_table}}\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm all tables node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83259b6-1857-478e-99d7-98afe5cae6ae",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tables have been propagated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bearing.hasOwnProperty(\"temperature\")).to.be.eql(true);\r",
									"    pm.expect(jsonData.bearing.hasOwnProperty(\"pressure\")).to.be.eql(true);\r",
									"    pm.expect(jsonData.bearing.hasOwnProperty(\"rpm\")).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create schema conversion node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f028545-5bb1-43e9-ae5e-c6b3d4a5d05b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"schema 'conversion' successfully created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema conversion node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "057dba79-d08f-44a1-a7e9-8a08d7c0964d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been propagated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"conversion\")).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table conversion.rpm node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b10e779-9870-4ba0-81dd-e35ef3c48d89",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"table 'conversion.rpm' successfully created.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"hash_attribute\": \"rpm\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4e2b4d12-2dd7-4e23-8a0e-a6f441d1496b",
						"type": "text/javascript",
						"exec": [""]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3547b1ef-d135-4547-91e1-8bf8e35fa2ed",
						"type": "text/javascript",
						"exec": [""]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Add Records",
			"item": [
				{
					"name": "noSQL insert temperature data node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54572d18-d9d6-42b2-9858-03cee1a61bc7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data added successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 6 of 6 records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"records\": [\n\t  {\n\t  \t\"id\": 1,\n\t  \t\"sensorData1\": 34,\n\t  \t\"sensorData2\": 54\n\t  },\n\t  {\n\t  \t\"id\": 2,\n\t  \t\"sensorData1\": 25,\n\t  \t\"sensorData2\": 77\n\t  },\n\t  {\n\t  \t\"id\": 3,\n\t  \t\"sensorData1\": 90,\n\t  \t\"sensorData2\": 78\n\t  },\n\t  {\n\t  \t\"id\": 4,\n\t  \t\"sensorData1\": 33,\n\t  \t\"sensorData2\": 54\n\t  },\n\t  {\n\t  \t\"id\": 5,\n\t  \t\"sensorData1\": 76,\n\t  \t\"sensorData2\": 12\n\t  },\n\t  {\n\t  \t\"id\": 6,\n\t  \t\"sensorData1\": 11,\n\t  \t\"sensorData2\": 12\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature data node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b847dbd8-7772-476b-a382-380826917768",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eaad7e66-fc7a-4734-976c-a3972f3cef71",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(6);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b2a011f-8b14-4c63-b10a-dcb13928d23c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(6);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A no temperature data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca9b4380-cdd8-49a7-97d0-e8f07357c534",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ae4d5c4-7059-46f3-91e2-602910c81b75",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ced3a293-5464-4a6a-a819-e8d88c42ca78",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59ae912-0d03-4370-9710-7035fdb63040",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "991013ec-c920-413b-a676-186d5b21b6d8",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6bd6251-2c69-4bfe-9314-86de9446e91d",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL insert temperature data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c8e272c-7016-4c22-9103-fb0ba8422321",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data added successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 3 of 3 records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"records\": [\n\t  {\n\t  \t\"id\": 34,\n\t  \t\"sensorData1\": 34,\n\t  \t\"sensorData2\": 54\n\t  },\n\t  {\n\t  \t\"id\": 35,\n\t  \t\"sensorData1\": 25,\n\t  \t\"sensorData2\": 77\n\t  },\n\t  {\n\t  \t\"id\": 36,\n\t  \t\"sensorData1\": 90,\n\t  \t\"sensorData2\": 78\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature data node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13dbddc7-37b5-4464-b1e4-797cb581a484",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(6);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "335ef566-f6c8-4c88-8ec6-32f913ea77ad",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(9);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ac5c26d-53ef-41ba-8bf7-f9c76e2a9dd9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(9);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B no temperature data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad400d7c-a5b7-45ed-9d9e-7b46e6eecac2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL insert pressure data node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b89d341b-cbbe-40ac-b4a1-7ab1faf3694e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data added successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 5 of 5 records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\": \"INSERT INTO {{bear_schema}}.{{press_table}} (id, psi) VALUES(11, '123'), (22, '145'), (44, '208'), (55, '310'), (88, '333')\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure data node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "196f6cb1-a0b0-46d5-be05-7eed0e13c7e2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c4545d2-998c-4b1e-bab9-6488966dc7a7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(5);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a63f2563-8263-4e27-927e-2bd22f197015",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(5);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm no pressure data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f29cea1-2474-414d-bf22-d99eefeaced9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6852ed01-1028-4427-b33d-b284884b375e",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "329dbfdc-efce-4844-9350-7fc88eb01a78",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e30616e-ce61-417b-9075-e850f67c9372",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "162b7bae-0794-4497-888a-a93436c22a7f",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c4fc34d-a737-41dd-958f-7fe53c559571",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a63970e3-8f5a-400b-828c-ad042627f372",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "CSV data load rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb57a304-9ba6-44cb-84a0-57f6cda7636c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.includes(\"Starting job with id\")).to.be.eql(true);\r",
									"    \r",
									"    eval(pm.globals.get(\"function:getJobIdCSVct\"))(jsonData, null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_data_load\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"action\": \"insert\",\n\t\"table\":\"{{rpm_table}}\",\n\t\"transact_to_cluster\": true,\n\t\"data\":\"id,inner_race, outer_race\\n1, 1234, 800\\n2, 1456, 834\\n3, 1241, 799\\n4, 1314, 788\\n6, 1234, 810\\n8, 1233, 679\\n9, 1321, 788\\n10, 1234, 756\\n11, 1222, 844\\n12, 1231, 801\\n18, 1134, 808\\n19, 1266, 889\\n20, 1888 879\\n21, 1998, 899\\n\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Check csv data load complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fafd0c11-1701-452b-a62e-8bf3c5739964",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test Job Found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    ",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    ",
									"    let status = jsonData[0].status;",
									"    ",
									"    switch(status){",
									"        case 'ERROR':",
									"            console.log(jsonData[0]);",
									"            console.log(\"Error checking CSV data load job.\")",
									"            if(pm.environment.get(\"next_request_ct\")){",
									"                postman.setNextRequest(pm.environment.get(\"next_request_ct\"));",
									"            }",
									"            pm.expect(status).to.not.eql('ERROR');",
									"            break;",
									"        case 'COMPLETE':",
									"            console.log(jsonData[0]);",
									"            if(pm.environment.get(\"next_request_ct\")){",
									"                postman.setNextRequest(pm.environment.get(\"next_request_ct\"));",
									"            }",
									"           ",
									"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
									"            break;",
									"        case '0':",
									"        case 0:",
									"        case 'IN_PROGRESS':",
									"            console.log('in progress, checking again');",
									"            postman.setNextRequest('Check csv data load complete');",
									"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
									"            break;",
									"        default:",
									"            postman.setNextRequest('Check csv data load complete');",
									"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
									"            break;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id_ct}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fe86661-c716-4729-bf05-c2ff48ba7ab1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(14);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm rpm data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3046d1bf-a837-41f0-9283-9c6725c02b98",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(14);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm rpm data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3fdb5db-0109-4dcc-9bf0-b9d5d394338a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(14);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm no rpm data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c0e2e3d-16c0-4d6b-b505-b497b41809c6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "CSV file load conv rpm node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ed094b3-0029-4c5c-8a6b-86f78ab8ded8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.includes(\"Starting job with id\")).to.be.eql(true);\r",
									"    \r",
									"    eval(pm.globals.get(\"function:getJobIdCSVFilect\"))(jsonData, null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_file_load\",\n\t\"action\": \"insert\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"transact_to_cluster\": true,\n\t\"file_path\":\"{{con_rpm_csv_file}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Check file load complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1edded3-c08e-4b45-b5e5-5284c5378ada",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test Job Found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    ",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    ",
									"    let status = jsonData[0].status;",
									"    ",
									"    switch(status){",
									"        case 'ERROR':",
									"            console.log(jsonData[0]);",
									"            console.log(\"Error checking CSV file load job.\")",
									"            if(pm.environment.get(\"next_request_ct\")){",
									"                postman.setNextRequest(pm.environment.get(\"next_request_ct\"));",
									"            }",
									"            pm.expect(status).to.not.eql('ERROR');",
									"            break;",
									"        case 'COMPLETE':",
									"            console.log(jsonData[0]);",
									"            if(pm.environment.get(\"next_request_ct\")){",
									"                postman.setNextRequest(pm.environment.get(\"next_request_ct\"));",
									"            }",
									"           ",
									"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
									"            setTimeout(()=>{}, 500);",
									"            break;",
									"        case '0':",
									"        case 0:",
									"        case 'IN_PROGRESS':",
									"            console.log('in progress, checking again');",
									"            postman.setNextRequest('Check file load complete');",
									"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
									"            break;",
									"        default:",
									"            postman.setNextRequest('Check file load complete');",
									"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
									"            break;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id_ct}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b8d6eb3-9283-4352-86df-616f9330015c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(1000);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3b87308-63df-40e9-80ab-e097aeb5a0f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50c3db45-c885-4137-bccf-210981310bd3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(1000);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm no conv rpm data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acdb3414-e14b-4c0b-bb4b-d106b7a1a0b9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL insert conv rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a4b303d-0900-4f16-b32a-b1d4f3984fc0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data added successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 2 of 2 records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"records\": [\n\t  {\n\t  \t\"rpm\": 11,\n\t  \t\"rad_hr\": \"undefined\",\n\t  \t\"hz\": \"Test\"\n\t  },\n\t  {\n\t  \t\"rpm\": 21,\n\t  \t\"hz\": \"null\",\n\t  \t\"rad_hr\": 199\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acd803c1-20d5-4f1b-b24d-8fa3dd998a9f",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"rad_hr\": null,\r",
									"        \"hz\": \"Test\",\r",
									"        \"rad_min\": null\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"rad_hr\": 199,\r",
									"        \"hz\": null,\r",
									"        \"rad_min\": null\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(row=>{\r",
									"        delete row.__createdtime__;\r",
									"        delete row.__updatedtime__;\r",
									"    });\r",
									"    \r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8245f9a0-8aff-42e8-823d-e0e10c1d7f6b",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"rad_hr\": null,\r",
									"        \"rad_min\": null,\r",
									"        \"hz\": \"Test\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"rad_hr\": 199,\r",
									"        \"rad_min\": null,\r",
									"        \"hz\": null\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(row=>{\r",
									"        delete row.__createdtime__;\r",
									"        delete row.__updatedtime__;\r",
									"    });\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{con_schema}}.{{con_rpm_table}} where rpm = 11 or rpm = 21\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7004c27-84d5-43f8-a9a0-aed7be87a825",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"rad_hr\": null,\r",
									"        \"rad_min\": null,\r",
									"        \"hz\": \"Test\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"rad_hr\": 199,\r",
									"        \"rad_min\": null,\r",
									"        \"hz\": null\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(row=>{\r",
									"        delete row.__createdtime__;\r",
									"        delete row.__updatedtime__;\r",
									"    });\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{con_schema}}.{{con_rpm_table}} where rpm = 11 or rpm = 21\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cfb4d265-7e24-4211-b930-3e804d2579fa",
						"type": "text/javascript",
						"exec": [""]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c53c05e2-8d71-49d0-8e2d-dbf4a797df0f",
						"type": "text/javascript",
						"exec": [
							"postman.setGlobalVariable(\"function:getJobIdCSVct\", (jsonData, next_req)=>{",
							"    let id_index = jsonData.message.indexOf('id ');",
							"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
							"    pm.environment.set(\"job_id_ct\", parsedId);",
							"    pm.environment.set(\"next_request_ct\", next_req);",
							"    postman.setNextRequest(\"Check csv data load complete\");",
							"});",
							"",
							"postman.setGlobalVariable(\"function:getJobIdCSVFilect\", (jsonData, next_req)=>{",
							"    let id_index = jsonData.message.indexOf('id ');",
							"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
							"    pm.environment.set(\"job_id_ct\", parsedId);",
							"    pm.environment.set(\"next_request_ct\", next_req);",
							"    postman.setNextRequest(\"Check file load complete\");",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update Records",
			"item": [
				{
					"name": "noSQL update temperature node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7aa7a39e-c7af-4a36-8570-ba48e38261c8",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"updated 2 of 2 records\",\r",
									"    \"skipped_hashes\": [],\r",
									"    \"update_hashes\": [\r",
									"        1,\r",
									"        3\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of updated records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"records\": [\n\t  {\n\t    \"id\": 1,\n\t\t\"sensorData1\": 122,\n\t  \t\"sensorData2\": \"test\"\n\t  },\n\t\t{\n\t    \"id\": 3,\n\t    \"sensorData1\": \"null\",\n\t    \"sensorData2\": 351,\n\t    \"extraAttribute\": \"harper\"\n\t  }\n\t]\n}\n\n"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "269ce037-0d47-44d0-9393-91e6844d1ebd",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"id\": 1,\r",
									"        \"sensorData1\": 122,\r",
									"        \"sensorData2\": \"test\"\r",
									"    },\r",
									"    {\r",
									"        \"id\": 3,\r",
									"        \"sensorData1\": null,\r",
									"        \"sensorData2\": 351\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\",\n\t\"hash_values\":[1,3],\n\t\"get_attributes\": [\"id\", \"sensorData1\", \"sensorData2\"]\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edf18952-f913-43cf-ab12-e526d7403335",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"id\": 1,\r",
									"        \"sensorData1\": 122,\r",
									"        \"sensorData2\": \"test\"\r",
									"    },\r",
									"    {\r",
									"        \"id\": 3,\r",
									"        \"sensorData1\": null,\r",
									"        \"sensorData2\": 351\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Records match expected result\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\",\n\t\"hash_values\":[1,3],\n\t\"get_attributes\": [\"id\", \"sensorData1\", \"sensorData2\"]\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da974771-9a0e-4d74-b422-9219922be114",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d40fc41-d6c6-448f-954f-8e0dae887a12",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d56efe8-dbfa-4f2b-97c2-9a3f947fef09",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1f0b37e-4614-4597-bfda-ae5592b0a449",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fee6017-084d-4c71-8ea4-d9e987c689f5",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bcddf0a9-370f-4a75-bea2-abb8d6c2fae4",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL update pressure node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed9f064c-1626-4168-8315-2e6058291a0b",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"updated 1 of 1 records\",\r",
									"    \"skipped_hashes\": [],\r",
									"    \"update_hashes\": [\r",
									"        22\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of updated records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"update {{bear_schema}}.{{press_table}} set psiUPDATE = 'fault' where id = 22\"\n}\n"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33b398c6-c646-45be-85af-9ec7ff914c55",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"psiUPDATE\": \"fault\",\r",
									"        \"psi\": 145,\r",
									"        \"id\": 22\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    delete jsonData[0].__createdtime__;\r",
									"    delete jsonData[0].__updatedtime__;\r",
									"    \r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{bear_schema}}.{{press_table}} where id = 22\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6377249b-ca9d-4ffa-bce0-39f73529b879",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"psiUPDATE\": \"fault\",\r",
									"        \"psi\": 145,\r",
									"        \"id\": 22\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    delete jsonData[0].__createdtime__;\r",
									"    delete jsonData[0].__updatedtime__;\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{bear_schema}}.{{press_table}} where id = 22\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f74d32e-d4ac-4054-afd3-f7df7ad43612",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"psiUPDATE\": \"fault\",\r",
									"        \"psi\": 145,\r",
									"        \"id\": 22\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    delete jsonData[0].__createdtime__;\r",
									"    delete jsonData[0].__updatedtime__;\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{bear_schema}}.{{press_table}} where id = 22\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6daf6a37-af55-4ad3-ba1a-df6744040242",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc8fc288-165a-4b06-8610-dafd188f401c",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b229645-8d4a-4dcf-9b04-7bb88a5eeb7a",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c29d81d-401f-465e-9abc-db656e037608",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3bc6c77-6af0-453c-ac2e-b14b59976b99",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7373b99f-e641-4536-bd7f-0665526a7aad",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL update conv rpm node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ab6c42b-effd-40b7-8717-853234db1620",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"updated 2 of 2 records\",\r",
									"    \"skipped_hashes\": [],\r",
									"    \"update_hashes\": [\r",
									"        11,\r",
									"        21\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of updated records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"records\": [\n\t  {\n\t    \"rpm\": 11,\n\t    \"hz\": \"update\"\n\n\t  },\n\t  {\n\t    \"rpm\": 21,\n\t    \"hz\": \"update\"\n\t  }\n\t]\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b1a55af-afe0-4662-b8d0-27255662a2b7",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"update\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"update\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c33762c9-af0e-4d66-aed0-f4e6a7d73950",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"update\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"update\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecae8382-4cb7-4bdc-be93-6aa57914255a",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"update\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"update\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL update conv rpm node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73d0f254-d9da-402a-8cdf-d9d2bfe10032",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"updated 2 of 2 records\",\r",
									"    \"skipped_hashes\": [],\r",
									"    \"update_hashes\": [\r",
									"        11,\r",
									"        21\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of updated records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"records\": [\n\t  {\n\t    \"rpm\": 11,\n\t    \"hz\": \"harper\"\n\n\t  },\n\t  {\n\t    \"rpm\": 21,\n\t    \"hz\": \"alby\"\n\t  }\n\t]\n}\n\n"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 4 B",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8819738-3b48-468e-aa83-0acf155a105a",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"harper\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"alby\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 5 B",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fc4c2ac-e756-4c92-92f1-9c2bf939a7e7",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"harper\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"alby\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL no update node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed2c2e92-7dbf-44fe-8301-19197bb85468",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"update\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"update\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Records not updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete Records",
			"item": [
				{
					"name": "noSQL delete  temperature records node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f57f210-f23c-4a7f-a250-da0d4382d20c",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"2 of 2 records successfully deleted\",\r",
									"    \"deleted_hashes\": [\r",
									"        1,\r",
									"        2\r",
									"    ],\r",
									"    \"skipped_hashes\": []\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"For expected delete response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"hash_values\":[1,2]\n}\n"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature records delete node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc0be68b-3345-4e4f-a9e8-4643f4ae3528",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature records delete node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad9c7452-2573-4fad-85d4-3fbdaeb22eb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(7);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature records delete node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e2faa85-f98b-4e9e-9058-6fe522bdb4d5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(7);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL delete  temperature record node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee23ec64-3502-4f2c-8db5-3bbc6cd683e2",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"2 of 2 records successfully deleted\",\r",
									"    \"deleted_hashes\": [\r",
									"        34,\r",
									"        35\r",
									"    ],\r",
									"    \"skipped_hashes\": []\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"For expected delete response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"hash_values\":[34, 35]\n}\n"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature records delete node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7248bf3d-1c21-4414-9d11-160394ca9933",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature records delete node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2acdb84-081c-4591-886d-a9aecc6103ec",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(7);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature records delete node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "348c6820-0386-4bf7-8b51-f1c7fbd843f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(4);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL delete conv rpm records node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eaa00810-fc01-4b76-b17d-cb582e9daa07",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"1 of 1 record successfully deleted\",\r",
									"    \"deleted_hashes\": [\r",
									"        11\r",
									"    ],\r",
									"    \"skipped_hashes\": []\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"For expected delete response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"DELETE FROM {{con_schema}}.{{con_rpm_table}} WHERE rpm = 11\"\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm records delete node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "461505c4-d2de-4136-bdce-15adce96da30",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(1);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm records delete node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53c281ee-d117-4aad-9a41-9d89d43540a9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(1001);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm records delete node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe10acdd-4bb6-4a36-af74-b7eced765895",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Remove Nodes",
			"item": [
				{
					"name": "Remove node 1 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1661caa9-2481-4a4c-aa3a-956a09865e1c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node4_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 2 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0636aa1-79ce-475c-b689-532669610977",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node4_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 3 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9063cdb7-5aee-4440-af6a-e06ffda7b6f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node4_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 4 to 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "568caa33-bf68-4968-835f-4c9d7b1babb1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node6_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node6_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 4 to 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0ed887d-fa0d-498a-994c-4ab59a67deb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node5_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node5_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 5 to 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb4ee9fd-5dd8-4a4c-89f5-64b7775e11a3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node3_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node3_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "845adb89-83e6-4e60-97e1-05af530ba529",
						"type": "text/javascript",
						"exec": [""]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "79b731dc-53c8-414c-90d5-e1448f9aed6b",
						"type": "text/javascript",
						"exec": [""]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Drop Schemas And Tables",
			"item": [
				{
					"name": "Drop table temp node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c68c4329-6d26-4d50-87d5-9b2ef09f508f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.temperature'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "936d6531-4d8d-46cd-8284-2fa9c21662af",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.temperature'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "627c7902-f04e-42c0-b8ec-fe3caa3d3427",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.temperature'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9829957d-ebdd-41d6-80c3-3e8660ca5da7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.temperature'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dc6d8f2-9cf4-4c82-a068-77fcb0dc09e4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.temperature'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b49c80df-7ede-4e45-a5c2-a2e613142654",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.temperature'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9e1ceec-b742-4c67-b921-691b58799164",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.pressure'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1d293f-5c8c-4e21-b1b7-3538babb71c4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.pressure'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13110f1c-d47a-4c64-8ad6-decb419328cd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.pressure'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "519c6de0-1337-4e7d-a04c-97b2f2e8b3b5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.pressure'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5496ebff-950f-47a0-80e6-dc6fd79f910b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.pressure'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48ce01f9-75bd-469e-8375-0f364761dc08",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.pressure'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5123efeb-5ff5-41bb-8692-807ac64effab",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93a03b03-07c5-4033-a555-129a678a8460",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa989daf-50c7-4e24-9ef4-b2390cfd2a6e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a679218-7e55-409e-af13-6477b082f7a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4572064-a10f-479a-8e74-7a9c3caf7b1b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3fdcc93-b6b4-43d6-9217-85530a4b9724",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'bearing.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17ff4dc7-94d2-43de-9ed9-2876f326b09f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'conversion.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "032fa82f-c7c5-48b9-8c81-bfc0e84f10fe",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'conversion.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "beade5a1-aadf-4b7a-8f3e-7365786b0e73",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'conversion.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "305037f1-170f-414e-8e23-2e987618d543",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'conversion.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28201264-07d5-4ccc-a734-e347c728ec62",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'conversion.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6225ac7-f3b4-420b-821d-49dd81f7ccf2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table 'conversion.rpm'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c4092de-419c-481b-aef7-b35d5e7e25f5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'bearing'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a51ca55b-c8e4-4010-9708-0bd0fe5677b0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acb12fcd-7fdf-4a71-b0ab-e32b82a7a86f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'bearing'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da9d85c3-4298-456e-a0b7-23131b3a9758",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9868041e-acc7-48b1-85fc-a5c75d8266b7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'bearing'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e43073e0-8990-4f08-8d88-d1c951ff148a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9b8392c-da3e-43f3-a3ff-63e96dce29d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'bearing'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "244bf009-8bc2-4397-8142-2c62a84f7eb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40006825-7b2b-4645-bb54-a14e171c7c3d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'bearing'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "265b4cba-d8e8-4801-ac2a-774348b04af7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a51d951-8ec0-4fe6-bd2f-23304ea58da3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'bearing'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81bff640-1236-4dda-ba9d-e878be2e1485",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c67c7f65-9b6b-49c5-bfd2-616a4b594292",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'conversion'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node1_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb6ee979-41e9-4caf-85f5-8dac9002ba2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'conversion'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node2_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "362ea6c7-8900-45d1-8561-a653ec3e314a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'conversion'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node3_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75968f1c-6f7b-4b9b-91d9-40c8b13857b4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'conversion'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node4_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "047f15b3-9688-412d-b45d-7bbe811fc8ce",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'conversion'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node5_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d54a5234-b9c7-45db-aff1-875d1e93b544",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema 'conversion'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": ["{{node6_host}}"],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "88729bfd-7787-4938-8fe7-9d5f1da4aafd",
						"type": "text/javascript",
						"exec": [""]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d54bc81c-9531-48ce-a549-46a64ec60dd1",
						"type": "text/javascript",
						"exec": [""]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a37d8959-2ff8-4c02-9e0d-b495dfa01691",
				"type": "text/javascript",
				"exec": [""]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2fef10c8-6677-44fa-9e3e-cd526e7c90d0",
				"type": "text/javascript",
				"exec": [
					"// Retries a request a set amount of times with an incrementing timeout in-between retries. ",
					"// This function is only called when a test fails. If the test fails more than the retry limit the error is thrown.",
					"postman.setGlobalVariable(\"function:retryRequest\", (request, error) => {",
					"    let current_attempt = pm.environment.get('current_attempt');",
					"    let current_request = pm.environment.get('current_request');",
					"    let retry_limit = pm.environment.get('retry_limit');",
					"    let retry_delay_const = pm.environment.get('retry_delay_const');",
					"    let retry_delay = pm.environment.get('retry_delay');",
					"    ",
					"    console.log(`### Request: ${request.name} was resent due to failing with the error: ${error} ###`);",
					"    ",
					"    //If this is the first time this function is called for current request, reset environment variables.",
					"    if (current_request !== request.name) {",
					"        pm.environment.set('retry_delay', retry_delay_const);",
					"        retry_delay = pm.environment.get('retry_delay');",
					"        pm.environment.set('current_attempt', 0);",
					"        current_attempt = pm.environment.get('current_attempt');",
					"        pm.environment.set('current_request', request.name);",
					"        current_request = pm.environment.get('current_request');",
					"    }",
					"    ",
					"    if (current_attempt < retry_limit) {",
					"        postman.setNextRequest(request.name);",
					"        pm.environment.set('current_attempt', (parseInt(current_attempt) + 1));",
					"        pm.environment.set('retry_delay', 500 + (250 * current_attempt));",
					"        setTimeout(() => {}, retry_delay);",
					"    } else {",
					"        throw error;",
					"    }",
					"});"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
