{
	"info": {
		"_postman_id": "95159fef-2702-4aa3-9718-abde7e748e96",
		"name": "HarperDB Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Environment Setup",
			"item": [
				{
					"name": "create_schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"id": "b18c67bd-5441-40cc-ae4f-7fa8ded1ec24"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{schema}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema confirm schema exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ca9de9d-6808-4f8f-8e55-7a6da5911847",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"schema northnwd exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    var arrayData = Object.keys(jsonData)",
									"    pm.expect(arrayData.includes(\"northnwd\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_schema_dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"id": "61e2fc58-14fd-489a-94b4-a551504c6dee"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"dev\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema_call",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"id": "70baaff5-f182-4b73-9dd6-9d6f7cab0393"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"call\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema_other",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ac17f88-c761-46c6-b4ba-15d8e7d884b4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"other\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema_another",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c8ea938-cfdc-4f1b-b319-0834f39a37ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"another\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Validation Check NO Schema.",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"/*pm.test(\"sql select where (like) and (unitprice>100)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].unitprice)>100;",
									"});",
									"*/",
									"",
									"/*pm.test(\"Invalid JSON object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.schema[0]).to.eql(Schema  is required);",
									"});",
									"*/",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Schema  is required\");",
									"});",
									""
								],
								"id": "6ef0e318-a211-45a3-864f-a3ffede97092"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"create_schema\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "1c9cece3-3cb8-47fb-9faa-14a16114ee75"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"customers\",\n  \"hash_attribute\": \"customerid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by hash empty table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64bd906b-d8c7-4b88-b164-5c7ae9942dc4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check return array length\", function () {",
									"    pm.expect(pm.response.json().length).to.eql(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from northnwd.customers where customerid = 1\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table confirm table exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0b651d7-64b7-4f56-907b-2cf2f30df724",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table customers exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql(\"customers\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\":\"northnwd\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_suppliers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "9060b522-a713-4784-914a-1e95f780157d"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"suppliers\",\n  \"hash_attribute\": \"supplierid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_region",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "4d62dc98-5dfc-48ca-aaa7-db83b48ccbe2"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"region\",\n  \"hash_attribute\": \"regionid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_employees",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								],
								"id": "cbcb6978-668a-4504-b7e8-b896306ddcf5"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "25d5d31d-1b03-41ad-b392-3c026bc4eb1f"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"employees\",\n  \"hash_attribute\": \"employeeid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "7922e6ea-42c3-4868-adb0-2c45365e1259"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"orders\",\n  \"hash_attribute\": \"orderid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_territories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "0805b8e4-b5a4-423b-ad19-a24cd7fd0bdd"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"territories\",\n  \"hash_attribute\": \"territoryid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "cbd0dbf2-01ee-4b63-8355-ae6bc4ad7e60"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"categories\",\n  \"hash_attribute\": \"categoryid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_shippers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "daccde52-e2b8-4afd-bc5d-10c2f6762ca8"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"shippers\",\n  \"hash_attribute\": \"shipperid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_employeeterritories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "99777bcd-f9c4-4f4b-ac40-53b750062e04"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"employeeterritories\",\n  \"hash_attribute\": \"employeeid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_orderdetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "dfa8a5d3-435e-46b0-8448-6de41062d5cb"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"order_details\",\n  \"hash_attribute\": \"orderdetailid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_products",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "af56f3d5-a75a-42fc-a920-add1b804ac5d"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"products\",\n  \"hash_attribute\": \"productid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_long_text",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "1fbd53c6-a317-484f-aad0-2ec2edf4dcee"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"dev\",\n  \"table\":\"long_text\",\n  \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_call_aggr",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"id": "390415ed-435d-4228-aab9-7f5bf7ed9351"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_attribute\": \"all\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create Table AttributeDropTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1441266f-fb2d-4ec0-b2b7-87b97e688bb7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"dev\",\n  \"table\":\"AttributeDropTest\",\n  \"hash_attribute\": \"hashid\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test schema name\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].schema).to.eql(\"northnwd\");",
									"    pm.expect(jsonData[1].schema).to.eql(\"northnwd\");",
									"    pm.expect(jsonData[2].schema).to.eql(\"northnwd\");",
									"    pm.expect(jsonData[3].schema).to.eql(\"northnwd\");",
									"    pm.expect(jsonData[4].schema).to.eql(\"northnwd\");",
									"});"
								],
								"id": "e29ee74f-862b-494e-aeed-e9032406e649"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_schema\",\n  \"schema\":\"northnwd\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_invalid_attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0cdcdc9-1b55-44a0-bacd-68c63e9531f3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"invalid_attribute\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_remarks_blob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4a1b1a4-6418-4887-adc6-f3a493950111",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_books",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42609b48-36e1-4daf-bc16-fb7d8a1826bf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"books\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_ratings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32950c28-0918-44c7-bc74-b502d5344b1f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"ratings\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_date_functions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "979c56ef-f00f-4f2e-999c-acf178ef658a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"time_functions\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_dog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a9032da-ef17-4031-8092-e440dab9707a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_breed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dba3b30-9c63-4fdc-8ead-56e627a82903",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"breed\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3dde661f-797d-42bf-8c1e-f72766413be3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"owner\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5140f380-0beb-4116-8901-560681a35592",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"movie\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.credits",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35b10817-4b08-4913-9b41-04d6c1973bbf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"credits\",\n\t\"hash_attribute\": \"movie_id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.rando",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08a43420-e0c6-48e0-93bd-4c1e7c12a761",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"rando\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table other.owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63c625e8-3b92-4d29-872f-dd8d7911d9bb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"other\",\n\t\"table\":\"owner\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table another.breed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6a8f90a-51f6-4053-9511-9a886d812443",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"another\",\n\t\"table\":\"breed\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.sql_function",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d68ccf6-efa5-4da8-9a8c-0d3d0ed8dba6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"sql_function\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.leading_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b7d4d47-d1a5-4f25-956b-38ad1dfb854f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "2. Data Load",
			"item": [
				{
					"name": "CSV",
					"item": [
						{
							"name": "1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4eb0c619-5bf3-49a8-9066-1049f8590cd5",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"2\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"file_path\":\"{{files_location}}Suppliers.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into suppliers table"
							},
							"response": []
						},
						{
							"name": "2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "028a5031-339d-45db-bce3-24063848e2c7",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"3\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n   \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"file_path\":\"{{files_location}}Region.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into region table"
							},
							"response": []
						},
						{
							"name": "3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffd935da-2a8e-4134-97da-a4402a27346a",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"4\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"file_path\":\"{{files_location}}Territories.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into territories table"
							},
							"response": []
						},
						{
							"name": "4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d89f603-3329-40ff-be33-c5b248f5bc2f",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"5\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{empt_tb}}\",\n  \"file_path\":\"{{files_location}}EmployeeTerritories.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into employeeterritories table"
							},
							"response": []
						},
						{
							"name": "5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fa02846-2233-48f4-8642-31f6e28d786b",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"6\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ship_tb}}\",\n  \"file_path\":\"{{files_location}}Shippers.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into shippers table"
							},
							"response": []
						},
						{
							"name": "6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5f2c287-16fb-4870-9b53-0d682fb23548",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"7\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"file_path\":\"{{files_location}}Categories.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into categories table"
							},
							"response": []
						},
						{
							"name": "7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e35d340e-8eb8-40dd-b036-8b77a9d6ff6e",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"8\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"file_path\":\"{{files_location}}Employees.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into employees table"
							},
							"response": []
						},
						{
							"name": "8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4053151-ebc8-4390-9462-fa359dad1cc5",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"9\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"file_path\":\"{{files_location}}Customers.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into customers table"
							},
							"response": []
						},
						{
							"name": "9",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79843354-d00d-4070-9236-2d3dff61e1e4",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"10\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{prod_tb}}\",\n  \"file_path\":\"{{files_location}}Products.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into products table"
							},
							"response": []
						},
						{
							"name": "10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20a407f8-10b8-48e2-9353-660e36e1d25a",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"11\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ordd_tb}}\",\n  \"file_path\":\"{{files_location}}Orderdetails.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orderdetails table"
							},
							"response": []
						},
						{
							"name": "11",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48be8f6f-a6e2-43ff-b68b-c45180add898",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"12\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ords_tb}}\",\n  \"file_path\":\"{{files_location}}Orders.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "12",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b01173f5-12ea-4b4c-8303-421c3c3b4046",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"13\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"books\",\n  \"file_path\":\"{{files_location}}Books.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "13",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1ad3739-9eb1-49fd-93d5-bea169ea9bf7",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"14\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"ratings\",\n  \"file_path\":\"{{files_location}}BooksRatings.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "14",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e324d80e-e5f9-4865-bf14-c0c7e40f44db",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"15\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"movie\",\n  \"file_path\":\"{{files_location}}movies.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "15",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9fa1346-6689-4832-95af-5852dc06d9a0",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"credits\",\n  \"file_path\":\"{{files_location}}credits.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "Check Job Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c02377b-dac7-486f-bd93-1b30204f4823",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            postman.setNextRequest('Check Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90ddffd0-598c-4c9e-bb84-fc5518a3ac09",
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3aa7584-d93a-4c88-b0f7-2a813fb6327a",
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobId\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check Job Completed\");",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CSV URL Load",
					"item": [
						{
							"name": "Create CSV data table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e87e3e8a-7fbd-40de-82dd-f1889c61a058",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb}}\",\n  \"hash_attribute\": \"id\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV file load",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "756bb500-8aed-4886-8340-2e5fbf242f31",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdURLcsv\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb}}\",\n  \"csv_url\":\"https://harperdb-integration-test-data.s3.us-east-2.amazonaws.com/breeds.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "CSV Data Load",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"dev\",\n  \"action\": \"insert\",\n  \"table\":\"breed\",\n  \"data\":\"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}"
										},
										"url": {
											"raw": "{{HDB_ENDPOINT}}",
											"host": [
												"{{HDB_ENDPOINT}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "71",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Mon, 09 Jul 2018 20:07:14 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"47-FY/m86hgW/48m7lLK1CpL02xrIw\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check CSV data loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b375bd8-473e-4fd3-a736-e755f9adcf66",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking CSV URL load job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 350 of 350 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            postman.setNextRequest('Check CSV data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check CSV data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7f0aa08-5f25-4ad3-b865-8505e3a4351a",
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm all CSV records loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89a276ef-d10e-4fd3-bf21-d07d8c3b5f2e",
										"exec": [
											"pm.test(\"test good response\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test correct count from table\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]['COUNT(*)']).to.eql(350)",
											"});",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{schema}}.{{csv_tb}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "Select",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"name": "Authorization",
												"value": "Basic SERCX0FETUlOOjE0MDA="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.owner_name, b.name, b.section FROM dev.dog AS d INNER JOIN dev.breed AS b ON d.breed_id = b.id WHERE d.owner_name IN ('Kyle', 'Zach', 'Stephen') AND b.section = 'Mutt' ORDER BY d.dog_name\"\n}"
										},
										"url": {
											"raw": "http://{{host}}:9925",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"port": "9925"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "connection",
											"value": "keep-alive",
											"name": "connection",
											"description": ""
										},
										{
											"key": "content-length",
											"value": "389",
											"name": "content-length",
											"description": ""
										},
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"name": "content-type",
											"description": ""
										},
										{
											"key": "date",
											"value": "Fri, 01 Sep 2017 17:55:45 GMT",
											"name": "date",
											"description": ""
										},
										{
											"key": "etag",
											"value": "W/\"185-edwDBNLCreSo/YY1IIyzPmR72ec\"",
											"name": "etag",
											"description": ""
										},
										{
											"key": "x-powered-by",
											"value": "HarperDB",
											"name": "x-powered-by",
											"description": ""
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create CSV data table empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af6e12e3-7389-4f01-96dc-31f647cb20f4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb_empty}}\",\n  \"hash_attribute\": \"id\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV file load empty file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de8bc537-80c9-4c17-af61-4cdec5e98e2f",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdURLcsvEmpty\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4427be55-b61a-484a-bff7-591e07ba0a1e",
										"exec": [
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb_empty}}\",\n  \"csv_url\":\"https://s3.amazonaws.com/complimentarydata/breedsEmpty.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "CSV Data Load",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"dev\",\n  \"action\": \"insert\",\n  \"table\":\"breed\",\n  \"data\":\"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}"
										},
										"url": {
											"raw": "{{HDB_ENDPOINT}}",
											"host": [
												"{{HDB_ENDPOINT}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "71",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Mon, 09 Jul 2018 20:07:14 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"47-FY/m86hgW/48m7lLK1CpL02xrIw\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check CSV data empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01595014-9f95-420c-9493-5d626217ef54",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking CSV URL load job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 0 of 0 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            postman.setNextRequest('Check CSV data empty');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check CSV data empty');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5f517c7-c5ca-40de-9276-7970b523a2cd",
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV file load bad attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4b56ae1-1645-4313-814e-2e7e314c0afc",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdURLcsvError\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb_empty}}\",\n  \"csv_url\":\"https://s3.amazonaws.com/complimentarydata/breeds-bad-column-name.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "CSV Data Load",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"dev\",\n  \"action\": \"insert\",\n  \"table\":\"breed\",\n  \"data\":\"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}"
										},
										"url": {
											"raw": "{{HDB_ENDPOINT}}",
											"host": [
												"{{HDB_ENDPOINT}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "71",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Mon, 09 Jul 2018 20:07:14 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"47-FY/m86hgW/48m7lLK1CpL02xrIw\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check CSV job error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03bf4f62-32ab-4c34-b1d2-c895582e5a9b",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            ",
											"            let msg_contains = jsonData[0].message.includes(\"Invalid column name 'id/', cancelling load operation\");",
											"            pm.expect(msg_contains).to.eql(true);",
											"            pm.expect(status).to.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            ",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            postman.setNextRequest('Check CSV job error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check CSV job error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80065b94-6d0b-4f0d-85a0-17f408d16427",
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7c043b83-9b6a-4d6b-82d6-60d93be53e7a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b64d616c-e661-4d7f-87db-3bb3d237efc7",
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobIdURLcsv\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check CSV data loaded\");",
									"});",
									"",
									"postman.setGlobalVariable(\"function:getJobIdURLcsvEmpty\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check CSV data empty\");",
									"});",
									"",
									"postman.setGlobalVariable(\"function:getJobIdURLcsvError\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check CSV job error\");",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "JSON",
					"item": [
						{
							"name": "Import data bulk insert into dev.long_text table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa9ec3d6-90d3-410d-b491-622d3dc086e7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"inserted 25\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 25')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"long_text\",\n    \"records\": [\n    {\n      \"id\": 1,\n      \"remarks\": \"RIVERFRONT LIFESTYLE! New dock, new roof and new appliances. For sale fully furnished. Beautiful custom-built 2-story home with pool. Panoramic river views and open floor plan -- great for entertaining. Hardwood floors flow throughout. Enjoy sunsets over the St. Johns from covered lanai or family room with wood-burning fireplace. Large back yard, dock, boat lift, kayak area...endless lifestyle options for fishing, boating or just chilling. Spacious master suite includes seating area with gas fireplace. Additional bedroom or office, pool bath, and laundry room on 1st floor. Upstairs loft area, perfect for a game room, plus two bedrooms with upgraded baths in each. Kitchen features stainless steel appliances, granite countertops, cooking island, and walk-in pantry. 3-car garage with abundant\"\n    },\n    {\n      \"id\": 2,\n      \"remarks\": \"Come see the kitchen remodel and new wood flooring.  Custom built by Howard White in 2007, this immaculate Deerwood home enjoys a view of the 18th fairway. From the moment you step into the foyer, you will be impressed with the bright, open floor plan. The Master suite features a large en suite bath with his and hers custom closets. The kitchen features high-end appliances,cabinetry and granite countertops. Retreat upstairs to an expansive library with cherry bookshelves. Additional bedrooms are spacious with large walk-in closets for extra storage. Plantation shutters throughout. Relax in the large hot tub/small pool with lounge chair shelf and fountain. Side entry 3 car garage is connected by a breezeway to home. Portion of back yard fenced for small dog.\"\n    },\n    {\n      \"id\": 3,\n      \"remarks\": \"This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.  This amazing home includes impressive Brazilian hardwood floors, plantation shutters throughout, granite countertops, triple tray and wood beam ceilings and so much more.  Builder's touches include 24'' tiles, rounded corner walls, 5'' baseboards, 10 ft. ceilings, in-wall vacuum system and many more unique upgrades.  There are extensive custom touches on this property from the mailbox to the unique 3000 sq. ft. two level 3-stall barn with tons of storage space.\"\n    },\n    {\n      \"id\": 4,\n      \"remarks\": \"Make this stunning traditional two story red brick house your forever home. Custom built in 2004, this home is spacious enough for large gatherings and cozy enough for small get togethers. Located on a large corner lot with side entry four car garage and fenced backyard, this home has it all inside and out. Inviting foyer is flanked by formal living room and dining room with wood floors, crown molding, and large windows. Large eat-in kitchen with custom made Pine Cottage cabinets, granite countertops, and stainless steel appliances is conveniently located next to family room. Separate downstairs flex space with attached full bath currently used as a playroom could be used as a 5th bedroom/guest or mother-in-law suite (no closet, but one could be easily added.)\"\n    },\n    {\n      \"id\": 5,\n      \"remarks\": \"A beautiful waterfront home located on a deep water canal providing quick access to the St. Johns River and ocean. Spacious and open, the downstairs is perfect for both family activities and entertaining. Central to this is a large kitchen with extensive granite countertops, upgraded appliances, separate island and an adjacent laundry room. A great room with fireplace flows into Florida & game rooms which overlook the canal. From the leaded glass front door, the extensive crown molding, to the hardwood, marble and tile flooring, there are numerous upgrades throughout the house. Outside, a large backyard includes three separate patios surrounded by tropical landscaping maintained by automatic sprinklers. Along the concrete bulkhead, there are docks, davits and a 9,000lb. boat lift w Remote.\"\n    },\n    {\n      \"id\": 6,\n      \"remarks\": \"Walk inside this Perfect Family Home and make it your own. Spacious Foyer opens to formal living room. Family room features brick fireplace, wet bar, and sliding glass doors to beautiful patio and lushly landscapped backyard. Recently updated Kitchen boasts granite countertops, abundance of cabinets with pull out drawers and breakfast nook. Large Master Suite offers multiple closets, separate vanities,walk-in shower and garden tub. Spacious room sizes and storage throughout.Bedroom and Bath arrangements were built for today's living and convenience.  Walk to neighborhood parks. A rated Hendricks Elementary also a walk or bike ride away. Pretty median treed street filled with homes of the era dead ending to riverfront homes.\"\n    },\n    {\n      \"id\": 7,\n      \"remarks\": \"Wow! Pow! This one will knock you over! Like New! Meticulously cared for David Weekley home with all the bells and whistles! Telescoping sliders Open onto huge screened brick paver lanai with massive fireplace at end. Open concept floor plan has hardwood floors in all common areas, 3 way split bedroom plan, also has a study, formal dining room, sunroom, breakfast room - plenty of storage space, and room to spread out. Kitchen features a gorgeous large island, granite countertops, walk in pantry and upgraded stainless appliances lanai overlooks the park like, almost 1/2 acre fully fenced backyard with creek and preserve behind. Gated community no through traffic. Front view is a lake with fountain Heart of Mandarin.  If I could, I would buy this one myself!\"\n    },\n    {\n      \"id\": 8,\n      \"remarks\": \"Rare opportunity to own a home on fabulous Heaven Trees road! OPEN HOUSE Saturday 4/28 from 2 - 5! This beautiful brick home is move in ready! This home offers abundant living space with light filled rooms and hardwood floors. The kitchen features a gas range, double ovens, and granite countertops. Enjoy the expansive backyard with complete privacy. Owners have made several improvements including: New A/C 6/16, New Electric Box and Circuit Breakers 11/16, Front Septic Tank and Drainage Field Replaced 8/16, Back Septic Tank Improvements 4/18, New Hot Water Heater 5/14, New Soft Water Treatment System 7/12, Wet Bar installed in Family Room with beverage cooler, ice maker; and more. Please note: Fogged window in Sunroom is being replaced!\"\n    },\n    {\n      \"id\": 9,\n      \"remarks\": \"Wow! Spectacular opportunity to live in a charming, yet spacious, brick home in one the most highly desirable communities, Ortega Forest. This beautifully updated, one-story, pool home will be a beautiful place to make memories. The home features a large eat-in kitchen that has been fully renovated with custom cabinetry, granite countertops and upgraded, stainless appliances. A formal living and huge dining room are located at the front of the home. The family room/den features a gorgeous wood burning fireplace and overlooks the sparkling pool and backyard. The living and sleeping areas are separated. The large master bedroom features sizable his/her closets. The master and guest baths are renovated with custom cabinetry and marble countertops.\"\n    },\n    {\n      \"id\": 10,\n      \"remarks\": \"Lovely updated home in desired gated community.  Large corner lot with new paver circular driveway. Great first impression entryway to open floor plan with warm wood floors. Separate Dining room, huge Family room with gas fireplace and custom mantel, and sitting or casual eating area. Spacious Kitchen with quartz countertops, stainless steel appliances, gas range, and breakfast bar. Large laundry room between garage and kitchen. Split bedrooms with private Master Bedroom overlooking fenced, landscaped backyard and screened lanai. Master Bath has granite countertops, double sinks, wood grain tile floors, tub and separate shower. Two guest Bedrooms and Bath opposite the master along with a 4th Bedroom or Bonus room upstairs with another full Bath. Close to Beaches and Shopping!\"\n    },\n    {\n      \"id\": 11,\n      \"remarks\": \"Historic Avondale home designed in the Prairie School style -- an architectural design made famous by Frank Lloyd Wright and Jacksonville resident Henry John Klutho. This 3 bedroom, two bath, 2,202 sq ft home has maintained its vintage appeal while combining modern updates, such as renovated kitchen with beverage fridge and wine storage. Granite countertops and 2-yr-old SS appliances. Updates meld beautifully with original Prairie School window casings with grids, glass knobs, hardwood inlay floors, 10'' baseboards, picture rail molding and all original doors. Beautifully glassed sun room at the front of the house is a perfect office or reading room. Gorgeous French doors open to private backyard built for entertaining. Two-car garage includes back entry, extra storage and partial bathroom\"\n    },\n    {\n      \"id\": 12,\n      \"remarks\": \"MUCH bigger than it looks! This remodeled 4bed/2.5bath Avondale home has a separate studio apartment which rents for $750 a month. Relax on the front porch or walk to Boone Park, numerous restaurants, and shops. The living room w/ the original fireplace has French doors which lead to a sun room/office. The hardwood floors have been refinished beautifully. The spacious kitchen has finely crafted cabinets, gorgeous granite countertops, and a  walk-in pantry. The laundry room includes a washer and dryer. A unique rock and metal design surrounds the jetted tub. A large linen closet is near by. 2 beds and 2 baths are on the main floor. Two bedrooms and a half bath are on the second floor.  A screened porch overlooks the fully fenced back yard.\"\n    },\n    {\n      \"id\": 13,\n      \"remarks\": \"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING THRUOUT THE HOME*LARGE OFFICE W/GLASS FRENCH DOORS*FORMAL DINING ROOM W/PICTURE FRAME MOLDING*GOURMET KITCHEN W/42''CUSTOM CABINETRY & GRANITE COUNTERTOPS, STAINLESS STEEL APPLIANCES, & HUGE ISLAND OPEN TO THE GREAT ROOM W/TRAY CEILING & SURROUND SOUND SPEAKERS*MASTER BEDROOM SUITE W/TRAY CEILING W/BEADBOARD INSET AND SHOWER W/OVERHEAD RAINFOREST HEAD*2 MORE BEDROOMS & OPEN ''FLEX'' AREA*COVERED LANAI OVERLOOKING THE HUGE FENCED BACKYARD*3-CAR GARAGE*''NEST'' THERMOSTAT & AT&T HOME SECURITY W/WIFI ACCESS*WATER SOFTENER*LOTS MORE!!!\"\n    },\n    {\n      \"id\": 14,\n      \"remarks\": \"This is a 4 bedroom, 3 bath, with additional tiled sunroom single family home located in the Pablo Bay community. Upgrades galore! This home offers gorgeous marble flooring throughout the living areas, high ceilings, an upgraded kitchen with granite countertops, a tile backsplash, and stainless steel appliances! Relax and enjoy the lake view from the tiled sunroom or the expansive fenced backyard! Will have a 1 year home warranty! Also listed for rent under MLS 903970\"\n    },\n    {\n      \"id\": 15,\n      \"remarks\": \"Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA. Beautiful tiled kitchen has granite countertops, island, newer refrigerator, cooktop, oven & convection microwave (2 yrs), breakfast bar & nook. Separate DR, LR & Fam Rm all w/crown molding & wood laminate flrs; FP in Fam Rm. Remodeled BA w/granite countertops & gorgeous travertine tiled showers & flrs. New Roof 6/2014 & New upgraded AC system 10/2015. Huge owner suite w/Jacuzzi tub, sep. shower, 2 walk-in closets & bonus rm w/French doors. Relaxing back porch w/phantom retractable screen overlooks the charming patio & huge stunning backyard!**\"\n    },\n    {\n      \"id\": 16,\n      \"remarks\": \"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades: GRANITE countertops,upgraded kitchen cabs w/crown molding, st steel appl, New carpets,New exterior and interior paint,Rain soft water softner, tile floors, bay windows, addtl loft + sep. Internet center, fireplace, lots of arches& niches, 2 story family room, huge covered porch overlooking, Planing to put the new sod in the front and sides, landscaped backyard and much more! MUST SEE!\"\n    },\n    {\n      \"id\": 17,\n      \"remarks\": \"WELCOME HOME! MOVE-IN-READY! Spacious & Beautifully updated home with over 3500 sq ft of comfort. Great for everyday living or entertaining. 5 Bedrooms and 3.5 baths. Spacious 1st floor owner suite with a huge walking closet, sitting area, updated master bath with double vanities, separate shower & garden tub. Updated kitchen with granite countertops, food prep island, all appliances, plenty of cabinets and breakfast nook. Inviting family room with fireplace and large picture windows that bring in natural light throughout. Formal dining & living rooms. 2nd floor offers spacious bonus room, 4 large bedrooms and 2 full baths. Hard wood floors, new roof 2016, many updates throughout. Inviting screened in porch, large back yard backs up to wooded preserve. Great Community amenities. A must see\"\n    },\n    {\n      \"id\": 18,\n      \"remarks\": \"Welcome to the very desirable community of ST. JOHNS LANDING. This 4 bedroom 2 bathroom home is located in a riverfront community. It has been totally upgraded, boasting detailed crown molding, new kitchen cabinets, Travertine Stone Floors & granite countertops throughout.  6 foot Jacuzzi tub in master bath and separate shower. Prewired alarm system. Central Heat & A/C replaced a year ago, fireplace and an energy saving on demand water heater are just some of the features this beautiful home has to offer.(BRAND NEW ROOF is Included).  This home sits on a corner lot with a fenced backyard, and a tiled heated and cooled lanai overlooking the plush lawn and playset. Walking distance to the community clubhouse, playground, fishing dock, boat ramp & pool. Buyer to verify square footage.\"\n    },\n    {\n      \"id\": 19,\n      \"remarks\": \"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades: GRANITE countertops,upgraded kitchen cabs w/crown molding, st steel appl, New carpets,New exterior and interior paint,Rain soft water softner, tile floors, bay windows, addtl loft + sep. Internet center, fireplace, lots of arches& niches, 2 story family room, huge covered porch overlooking, Planing to put the new sod in the front and sides, landscaped backyard and much more! MUST SEE!\"\n    },\n    {\n      \"id\": 20,\n      \"remarks\": \"This house is ready for you to call it home! No stone was left unturned when it came to upgrades in this gorgeous home! As you walk through the front door, you'll be immediately impressed by the 20ft ceiling in the Grand Foyer. Beautiful hardwood floors throughout the first floor, Gourmet Kitchen, Double Ovens, Granite Countertops, Stainless Steel appliances. Need space? How about this: 5 bedrooms, 4 full bath (1 full bath and bedroom downstairs), plenty of room for a growing family. Need a place to escape to relax? Look no further, enjoy the peace and serenity that your large backyard offers, as you enjoy the evenings in your screened-in lanai, all behind the privacy of the preserve.\"\n    },\n    {\n      \"id\": 21,\n      \"remarks\": \"BACK ON MARKET!!MOTIVATED SELLER, OFFERING A $3000 CONCESSION TOWARDS NEW FLOORING. CONCESSION PAID AT CLOSING! Come see this gorgeous 4 bedroom 4 bath home in beautiful Hampton Glen. This home has two large master bedrooms with ensuites with sitting area. The loft bedroom upstairs also has a full bath. All baths have been updated with granite countertops and tile. If you love to cook you will love this kitchen. This large kitchen has beautiful granite countertops and tile. Everything has been updated. The roof is brand new!!! It was replaced January 2017. The house has been completely painted inside and out. Come and enjoy the serenity of the backyard in your large screened in patio and view the tall pines of the preserve swaying in the breeze.\"\n    },\n    {\n      \"id\": 22,\n      \"remarks\": \"Beautiful pool home that has all the upgrades you're looking for.  4 Bedroom/2 bath with updated kitchen with granite countertops, stainless steel appliances including a Bosch dishwasher and double ovens.  Formal Living room, dining room & separate family room with vauled ceilings. Family room is wired for speakers. Tile floors in kitchen & b'fast area.  Hardwood floors are found in the family room and 2 bedrooms.  The master bedroom has french doors out to the screened pool area.  The bath has separate vanities with granite tops, remodeled shower with a seat & his and hers closets.  There is a pool and spa.  Both are heated using solar panels, no gas heater.  There is a Soothing waterfall feature that makes this outdoor area perfect for entertaining.  Fenced back yard as well.\"\n    },\n    {\n      \"id\": 23,\n      \"remarks\": \"What a gem !!!! Located within walking distance to Bolles on a quiet cul de sac street, this brick home, with a circular drive,has it all! New roof in 2017, re-plumbed in 2016 and 2 HVAC systems ( inside and out -2008 and 2017). The kitchen has beenbeautifully updated with granite countertops and cream cabinets.  The kitchen opens to a large family room. The master suite has 2 walk-in closets and a large updated bath with jacuzzi and separate shower, separate dining room and formal living room with wood burning fireplace. Freshly painted and new tile throughout. There is a large shed in the backyard for additional storage in addition to the 2 car garage.This home was renovated in 2008 and 1,400 sq. ft. was added to the original plan. OPEN HOUSE SUNDAY 3/12/17 1:00-3:00\"\n    },\n    {\n      \"id\": 24,\n      \"remarks\": \"Designed for Generous Space and Flexibility for Family or Lifestyle! This Midcentury Modern Pool Home offers over 3000 sf of upgrades & classic design on almost 1/2 acre. Original Hardwood Floors, Lots of Natural Light, Freshly Painted Interior, Custom Kitchen, Granite countertops, Newer AC & New Carpet upstairs. Spacious rooms throughout include Living room w/Fireplace, Formal Dining and even larger Casual Dining, Breakfast room or Office. Family room with built-ins & pool bath could also be Mother-in-Law Suite with private bath or 4th Bedroom. Perfect Home for Entertaining with Private Backyard, Majestic Oaks, Expansive multi-level patio & Sparkling Pool. Plenty of room for RV/Boat Parking. All this in Desirable Beauclerc location convenient to I-295, Downtown, nearby Shops & Restaurants\"\n    },\n    {\n      \"id\": 25,\n      \"remarks\": \"Welcome to your new home in James Island. Easy commuting around the City, close to Town Center and JTB takes you to the beaches. You have it all with this home - Owner Suite is on the first floor, large bonus room upstairs with full bath, office, formal dining room, living room, and family room with fireplace. Amazing owner bath and large owner suite with beautiful ceilings. Split floor plan for the other two bedrooms which share a Jack and Jill bathroom. High ceilings, crown molding and so much more. Tile and wood flooring downstairs, gas range, granite countertops, fenced backyard, welcoming front entrance and large covered patio. Seller will consider reasonable offers. With accepted offer seller will provide credits for the fogged windows and a replacement stainless steel oven.\"\n    }\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import data bulk confirm specific value exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79815d36-9eaf-40ce-a45e-4babe11b4171",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].remarks.includes(\"Lovely updated home\")).to.be.true;",
											"    pm.expect(jsonData[0].id).to.eql(10);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "416b0a56-2048-48b5-9a52-edf1e818c966",
										"exec": [
											"setTimeout(() =>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"long_text\",\n  \"hash_attribute\": \"id\",\n  \"hash_values\":[10],\n  \"get_attributes\": [\"id\", \"remarks\"]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Search and confirm row 10 exists in schema dev table long_text\n"
							},
							"response": []
						},
						{
							"name": "Import data bulk insert into call.aggr",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c7a4bec-c7c4-4b66-a6a7-704e8e804860",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"inserted 25\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 10')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"call\",\n    \"table\":\"aggr\",\n    \"records\": [\n    \t{\n        \"all\" : 1,\n        \"dog_name\" : \"Penny\",\n        \"owner_name\": \"Kyle\",\n        \"breed_id\":154,\n        \"age\":5,\n        \"weight_lbs\":35,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 2,\n        \"dog_name\" : \"Harper\",\n        \"owner_name\": \"Stephen\",\n        \"breed_id\":346,\n        \"age\":5,\n        \"weight_lbs\":55,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 3,\n        \"dog_name\" : \"Alby\",\n        \"owner_name\": \"Kaylan\",\n        \"breed_id\":348,\n        \"age\":5,\n        \"weight_lbs\":84,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 4,\n        \"dog_name\" : \"Billy\",\n        \"owner_name\": \"Zach\",\n        \"breed_id\":347,\n        \"age\":4,\n        \"weight_lbs\":60,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 5,\n        \"dog_name\" : \"Rose Merry\",\n        \"owner_name\": \"Zach\",\n        \"breed_id\":348,\n        \"age\":6,\n        \"weight_lbs\":15,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 6,\n        \"dog_name\" : \"Kato\",\n        \"owner_name\": \"Kyle\",\n        \"breed_id\":351,\n        \"age\":4,\n        \"weight_lbs\":28,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 7,\n        \"dog_name\" : \"Simon\",\n        \"owner_name\": \"Fred\",\n        \"breed_id\":349,\n        \"age\":1,\n        \"weight_lbs\":35,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 8,\n        \"dog_name\" : \"Gemma\",\n        \"owner_name\": \"Stephen\",\n        \"breed_id\":350,\n        \"age\":3,\n        \"weight_lbs\":55,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 9,\n        \"dog_name\" : \"Gertrude\",\n        \"owner_name\": \"Eli\",\n        \"breed_id\":158,\n        \"age\":5,\n        \"weight_lbs\":70,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 10,\n        \"dog_name\" : \"Big Louie\",\n        \"owner_name\": \"Eli\",\n        \"breed_id\":241,\n        \"age\":11,\n        \"weight_lbs\":20,\n        \"adorable\":true\n      }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert dot & double dot data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ed8e1c-538c-498b-9582-f0df928cf373",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"inserted 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 1')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"call\",\n    \"table\":\"aggr\",\n    \"records\": [\n    \t{\n        \"all\" : 11,\n        \"dog_name\" : \".\",\n        \"owner_name\": \"..\"\n      }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert confirm dot & double data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bca095dd-5a16-4b79-9026-2178bd7e0667",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].all).to.eql(11);",
											"    pm.expect(jsonData[0].dog_name).to.eql(\".\");",
											"    pm.expect(jsonData[0].owner_name).to.eql(\"..\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_attribute\": \"all\",\n  \"hash_values\":[11],\n  \"get_attributes\": [\"all\", \"dog_name\", \"owner_name\"]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Search and confirm that insert dot & double data worked as expected. "
							},
							"response": []
						},
						{
							"name": "Insert attributes into DropAttributeTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e6cbbe-0752-45b5-9e76-a3e54dd99812",
										"exec": [
											"pm.test(\"inserted 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 2')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"AttributeDropTest\",\n    \"records\": [\n    \t{\n        \"hashid\" : 1,\n        \"some_attribute\" : \"some_att1\",\n        \"another_attribute\": \"1\"\n      },\n      {\n        \"hashid\" : 2,\n        \"some_attribute\" : \"some_att2\",\n        \"another_attribute\": \"1\"\n      }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert confirm attributes added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4505e80-30db-4602-84cb-30f99945e7ca",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonDataKeys = Object.keys(jsonData[0])",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    pm.expect(jsonDataKeys.includes(\"hashid\")).to.be.true;",
											"    pm.expect(jsonDataKeys.includes(\"some_attribute\")).to.be.true;",
											"    pm.expect(jsonDataKeys.includes(\"another_attribute\")).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e957926-1660-474e-a1d5-3c6e2463fb55",
										"exec": [
											"setTimeout(() => {}, 200)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"AttributeDropTest\",\n  \"hash_attribute\": \"hashid\",\n  \"hash_values\":[1, 2],\n  \"get_attributes\": [\"hashid\", \"some_attribute\", \"another_attribute\"]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Search and confirm that insert attributes worked as expected."
							},
							"response": []
						},
						{
							"name": "Import data bulk insert into dev.remarks_blob table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21d26dd3-d054-4149-b89b-ce9241cb60f9",
										"exec": [
											"pm.test(\"inserted 11\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 11')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"remarks_blob\",\n   \n\"records\": [\n    {\n        \"id\": 1,\n        \"length\": 238,\n        \"remarks\":\"Beautiful pool home that has all the upgrades you're looking for. 4 Bedroom/2.5+ bath with updated kitchen with granite countertops, stainless steel appliances including a Bosch dishwasher and double ovens. Formal Living room, dining room.\"\n    },\n    {\n        \"id\": 2,\n        \"length\": 248,\n        \"remarks\":\"Beautiful pool home that has all the upgrades you're looking for.  4 Bedroom/2.5+ bath with updated kitchen with granite countertops, stainless steel appliances including a Bosch dishwasher and double ovens.  Formal Living room, dining room and stuff.\"\n    },\n    {\n        \"id\": 3,\n        \"length\": 788,\n        \"remarks\": \"Beautiful pool home that has all the upgrades you're looking for.  4 Bedroom/2.5+ bath with updated kitchen with granite countertops, stainless steel appliances including a Bosch dishwasher and double ovens.  Formal Living room, dining room & separate family room with vauled ceilings. Family room is wired for speakers. Tile floors in kitchen & b'fast area.  Hardwood floors are found in the family room and 2 bedrooms.  The master bedroom has french doors out to the screened pool area.  The bath has separate vanities with granite tops, remodeled shower with a seat & his and hers closets.  There is a pool and spa.  Both are heated using solar panels, no gas heater.  There is a Soothing waterfall feature that makes this outdoor area perfect for entertaining.  Fenced back yard as well.\"\n    },\n    {\n        \"id\": 4,\n        \"length\": 701,\n        \"remarks\": \"This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.  This amazing home includes impressive Brazilian hardwood floors, plantation shutters throughout, granite countertops, triple tray and wood beam ceilings and so much more.  Builder's touches include 24'' tiles, rounded corner walls, 5'' baseboards, 10 ft. ceilings, in-wall vacuum system and many more unique upgrades.  There are extensive custom touches on this property from the mailbox to the unique 3000 sq. ft. two level 3-stall barn with tons of storage space.\"\n    },\n    {\n        \"id\": 5,\n        \"length\": 234,\n        \"remarks\": \"This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.\"\n    },\n    {\n        \"id\": 6,\n        \"length\": 779,\n        \"remarks\": \"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...THRUOUT THE HOME*LARGE OFFICE W/GLASS FRENCH DOORS*FORMAL DINING ROOM W/PICTURE FRAME MOLDING*GOURMET KITCHEN W/42''CUSTOM CABINETRY & GRANITE COUNTERTOPS, STAINLESS STEEL APPLIANCES, & HUGE ISLAND OPEN TO THE GREAT ROOM W/TRAY CEILING & SURROUND SOUND SPEAKERS*MASTER BEDROOM SUITE W/TRAY CEILING W/BEADBOARD INSET AND SHOWER W/OVERHEAD RAINFOREST HEAD*2 MORE BEDROOMS & OPEN ''FLEX'' AREA*COVERED LANAI OVERLOOKING THE HUGE FENCED BACKYARD*3-CAR GARAGE*''NEST'' THERMOSTAT & AT&T HOME SECURITY W/WIFI ACCESS*WATER SOFTENER*LOTS MORE!!!\"\n    },\n{\n        \"id\": 7,\n        \"length\": 243,\n        \"remarks\": \"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...\"\n    },\n    {\n        \"id\": 8,\n        \"length\": 802,\n        \"remarks\": \"**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA. Beautiful tiled kitchen has granite countertops, island, newer refrigerator, cooktop, oven & convection microwave (2 yrs), breakfast bar & nook. Separate DR, LR & Fam Rm all w/crown molding & wood laminate flrs; FP in Fam Rm. Remodeled BA w/granite countertops & gorgeous travertine tiled showers & flrs. New Roof 6/2014 & New upgraded AC system 10/2015. Huge owner suite w/Jacuzzi tub, sep. shower, 2 walk-in closets & bonus rm w/French doors. Relaxing back porch w/phantom retractable screen overlooks the charming patio & huge stunning backyard!**\"\n    },\n    {\n        \"id\": 9,\n        \"length\": 251,\n        \"remarks\": \"**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.\"\n    },\n    {\n        \"id\": 10,\n        \"length\": 560,\n        \"remarks\": \"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades: GRANITE countertops,upgraded kitchen cabs w/crown molding, st steel appl, New carpets,New exterior and interior paint,Rain soft water softner, tile floors, bay windows, addtl loft + sep. Internet center, fireplace, lots of arches& niches, 2 story family room, huge covered porch overlooking, Planing to put the new sod in the front and sides, landscaped backyard and much more! MUST SEE!\"\n    },\n\n    {\n        \"id\": 11,\n        \"length\": 172,\n        \"remarks\": \"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into dev.dog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb4e2eea-8d61-4bdd-af33-9035c063fc6d",
										"exec": [
											"pm.test(\"inserted 9 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 9')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"dog\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"breed_id\": 154,\n        \"weight_lbs\": 35,\n        \"dog_name\": \"Penny\",\n        \"age\": 5,\n        \"adorable\": true,\n        \"owner_id\": 2\n    },\n    {\n        \"id\": 2,\n        \"breed_id\": 346,\n        \"weight_lbs\": 55,\n        \"dog_name\": \"Harper\",\n        \"age\": 5,\n        \"adorable\": true,\n        \"owner_id\": 3\n    },\n    {\n        \"id\": 3,\n        \"breed_id\": 348,\n        \"weight_lbs\": 84,\n        \"dog_name\": \"Alby\",\n        \"age\": 5,\n        \"adorable\": true,\n        \"owner_id\": 4\n    },\n    {\n        \"id\": 4,\n        \"breed_id\": 347,\n        \"weight_lbs\": 60,\n        \"dog_name\": \"Billy\",\n        \"age\": 4,\n        \"adorable\": true,\n        \"owner_id\": 1\n    },\n    {\n        \"id\": 5,\n        \"breed_id\": 348,\n        \"weight_lbs\": 15,\n        \"dog_name\": \"Rose Merry\",\n        \"age\": 6,\n        \"adorable\": true,\n        \"owner_id\": 2\n    },\n    {\n        \"id\": 6,\n        \"breed_id\": 351,\n        \"weight_lbs\": 28,\n        \"dog_name\": \"Kato\",\n        \"age\": 4,\n        \"adorable\": true,\n        \"owner_id\": 3\n    },\n    {\n        \"id\": 7,\n        \"breed_id\": 349,\n        \"weight_lbs\": 35,\n        \"dog_name\": \"Simon\",\n        \"age\": 1,\n        \"adorable\": true,\n        \"owner_id\": 4\n    },\n    {\n        \"id\": 8,\n        \"breed_id\": 250,\n        \"weight_lbs\": 55,\n        \"dog_name\": \"Gemma\",\n        \"age\": 3,\n        \"adorable\": true,\n        \"owner_id\": 1\n    },\n    {\n        \"id\": 9,\n        \"breed_id\": 104,\n        \"weight_lbs\": 75,\n        \"dog_name\": \"Bode\",\n        \"age\": 8,\n        \"adorable\": true\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into dev.breed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32ff2594-80ab-4bd9-a247-345f4eb05beb",
										"exec": [
											"pm.test(\"inserted 350 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 350')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"breed\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"name\": \"ENGLISH POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"ENGLISH SETTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"KERRY BLUE TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"CAIRN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/004g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"ENGLISH COCKER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/005g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"GORDON SETTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/006g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"AIREDALE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/007g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"AUSTRALIAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/008g03.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"BEDLINGTON TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/009g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"BORDER TERRIER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/011g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"FOX TERRIER (SMOOTH)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/012g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"ENGLISH TOY TERRIER (BLACK &TAN)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/013g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"SWEDISH VALLHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/014g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"BELGIAN SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"OLD ENGLISH SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/016g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"GRIFFON NIVERNAIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/017g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"BRIQUET GRIFFON VENDEEN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/019g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"ARIEGEOIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/020g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 20,\n        \"name\": \"GASCON SAINTONGEOIS\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 21,\n        \"name\": \"GREAT GASCONY BLUE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/022g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 22,\n        \"name\": \"POITEVIN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/024g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 23,\n        \"name\": \"BILLY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/025g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 24,\n        \"name\": \"ARTOIS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/028g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 25,\n        \"name\": \"PORCELAINE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/030g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 26,\n        \"name\": \"SMALL BLUE GASCONY BLUE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"BLUE GASCONY GRIFFON\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 28,\n        \"name\": \"GRAND BASSET GRIFFON VENDEEN\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 29,\n        \"name\": \"NORMAN ARTESIEN BASSET\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 30,\n        \"name\": \"BLUE GASCONY BASSET\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 31,\n        \"name\": \"BASSET FAUVE DE BRETAGNE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 32,\n        \"name\": \"PORTUGUESE WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/037g08.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 33,\n        \"name\": \"WELSH CORGI CARDIGAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/038g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 34,\n        \"name\": \"WELSH CORGI PEMBROKE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/039g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 35,\n        \"name\": \"IRISH SOFT COATED WHEATEN TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 36,\n        \"name\": \"YUGOSLAVIAN SHEPHERD DOG - SHARPLANINA\",\n        \"image\": \" SERBIA\",\n        \"country\": \"MACEDONIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 37,\n        \"name\": \"JÄMTHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/042g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 38,\n        \"name\": \"BASENJI\",\n        \"image\": null,\n        \"country\": \"CENTRAL AFRICA\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 39,\n        \"name\": \"BERGER DE BEAUCE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 40,\n        \"name\": \"BERNESE MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/045g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 41,\n        \"name\": \"APPENZELL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 42,\n        \"name\": \"ENTLEBUCH CATTLE DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/047g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 43,\n        \"name\": \"KARELIAN BEAR DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/048g05-1.jpg\",\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 44,\n        \"name\": \"FINNISH SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/049g05-1.jpg\",\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 45,\n        \"name\": \"NEWFOUNDLAND\",\n        \"image\": null,\n        \"country\": \"CANADA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 46,\n        \"name\": \"FINNISH HOUND\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 47,\n        \"name\": \"POLISH HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/052g06.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 48,\n        \"name\": \"KOMONDOR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/053g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 49,\n        \"name\": \"KUVASZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/054g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 50,\n        \"name\": \"PULI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/055g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 51,\n        \"name\": \"PUMI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/056g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 52,\n        \"name\": \"HUNGARIAN SHORT-HAIRED POINTER (VIZSLA)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/057g07.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 53,\n        \"name\": \"GREAT SWISS MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/058g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 54,\n        \"name\": \"SWISS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/059g06-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 55,\n        \"name\": \"SMALL SWISS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/060g06-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 56,\n        \"name\": \"ST. BERNARD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/061g02-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 57,\n        \"name\": \"COARSE-HAIRED STYRIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/062g06.jpg\",\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 58,\n        \"name\": \"AUSTRIAN BLACK AND TAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/063g06.jpg\",\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 59,\n        \"name\": \"AUSTRIAN  PINSCHER\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 60,\n        \"name\": \"MALTESE\",\n        \"image\": null,\n        \"country\": \"CENTRAL MEDITERRANEAN BASIN\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 61,\n        \"name\": \"FAWN BRITTANY GRIFFON\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/066g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 62,\n        \"name\": \"PETIT BASSET GRIFFON VENDEEN\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 63,\n        \"name\": \"TYROLEAN HOUND\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 64,\n        \"name\": \"LAKELAND TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/070g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 65,\n        \"name\": \"MANCHESTER TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/071g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 66,\n        \"name\": \"NORWICH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/072g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 67,\n        \"name\": \"SCOTTISH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/073g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 68,\n        \"name\": \"SEALYHAM TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/074g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 69,\n        \"name\": \"SKYE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/075g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 70,\n        \"name\": \"STAFFORDSHIRE BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/076g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 71,\n        \"name\": \"CONTINENTAL TOY SPANIEL\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Continental Toy Spaniel and Russian Toy\"\n    },\n    {\n        \"id\": 72,\n        \"name\": \"WELSH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/078g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 73,\n        \"name\": \"GRIFFON BRUXELLOIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/080g09-1.jpg\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 74,\n        \"name\": \"GRIFFON BELGE\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 75,\n        \"name\": \"PETIT BRABANÇON\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 76,\n        \"name\": \"SCHIPPERKE\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 77,\n        \"name\": \"BLOODHOUND\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 78,\n        \"name\": \"WEST HIGHLAND WHITE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/085g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 79,\n        \"name\": \"YORKSHIRE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/086g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 80,\n        \"name\": \"CATALAN SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 81,\n        \"name\": \"SHETLAND SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/088g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 82,\n        \"name\": \"IBIZAN PODENCO\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 83,\n        \"name\": \"BURGOS POINTING DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 84,\n        \"name\": \"SPANISH MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 85,\n        \"name\": \"PYRENEAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 86,\n        \"name\": \"PORTUGUESE SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/093g01.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 87,\n        \"name\": \"PORTUGUESE WARREN HOUND-PORTUGUESE PODENGO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/094g05-1.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 88,\n        \"name\": \"BRITTANY SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/095g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 89,\n        \"name\": \"RAFEIRO OF ALENTEJO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/096g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 90,\n        \"name\": \"GERMAN SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/097g05-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"European Spitz\"\n    },\n    {\n        \"id\": 91,\n        \"name\": \"GERMAN WIRE- HAIRED POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/098g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 92,\n        \"name\": \"WEIMARANER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 93,\n        \"name\": \"WESTPHALIAN DACHSBRACKE\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 94,\n        \"name\": \"FRENCH BULLDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/101g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 95,\n        \"name\": \"KLEINER MÜNSTERLÄNDER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 96,\n        \"name\": \"GERMAN HUNTING TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/103g03-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 97,\n        \"name\": \"GERMAN SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/104g08.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 98,\n        \"name\": \"FRENCH WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/105g08.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 99,\n        \"name\": \"BLUE PICARDY SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 100,\n        \"name\": \"WIRE-HAIRED POINTING GRIFFON KORTHALS\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 101,\n        \"name\": \"PICARDY SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 102,\n        \"name\": \"CLUMBER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/109g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 103,\n        \"name\": \"CURLY COATED RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/110g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 104,\n        \"name\": \"GOLDEN RETRIEVER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 105,\n        \"name\": \"BRIARD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/113g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 106,\n        \"name\": \"PONT-AUDEMER SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 107,\n        \"name\": \"SAINT GERMAIN POINTER\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 108,\n        \"name\": \"DOGUE DE BORDEAUX\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/116g02.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 109,\n        \"name\": \"DEUTSCH LANGHAAR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/117g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 110,\n        \"name\": \"LARGE MUNSTERLANDER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/118g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 111,\n        \"name\": \"GERMAN SHORT- HAIRED POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/119g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 112,\n        \"name\": \"IRISH RED SETTER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 113,\n        \"name\": \"FLAT COATED RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/121g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 114,\n        \"name\": \"LABRADOR RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/122g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 115,\n        \"name\": \"FIELD SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/123g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 116,\n        \"name\": \"IRISH WATER SPANIEL\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 117,\n        \"name\": \"ENGLISH SPRINGER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/125g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 118,\n        \"name\": \"WELSH SPRINGER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/126g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 119,\n        \"name\": \"SUSSEX SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/127g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 120,\n        \"name\": \"KING CHARLES SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/128g09.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"English Toy Spaniels\"\n    },\n    {\n        \"id\": 121,\n        \"name\": \"SMÅLANDSSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/129g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 122,\n        \"name\": \"DREVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/130g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 123,\n        \"name\": \"SCHILLERSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/131g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 124,\n        \"name\": \"HAMILTONSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/132g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 125,\n        \"name\": \"FRENCH POINTING DOG - GASCOGNE TYPE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 126,\n        \"name\": \"FRENCH POINTING DOG - PYRENEAN TYPE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 127,\n        \"name\": \"SWEDISH LAPPHUND\",\n        \"image\": null,\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 128,\n        \"name\": \"CAVALIER KING CHARLES SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/136g09.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"English Toy Spaniels\"\n    },\n    {\n        \"id\": 129,\n        \"name\": \"PYRENEAN MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/137g02.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 130,\n        \"name\": \"PYRENEAN SHEEPDOG - SMOOTH FACED\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/138g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 131,\n        \"name\": \"IRISH TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 132,\n        \"name\": \"BOSTON TERRIER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 133,\n        \"name\": \"LONG-HAIRED PYRENEAN SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/141g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 134,\n        \"name\": \"SLOVAKIAN CHUVACH\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 135,\n        \"name\": \"DOBERMANN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/143g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 136,\n        \"name\": \"BOXER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/144g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 137,\n        \"name\": \"LEONBERGER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 138,\n        \"name\": \"RHODESIAN RIDGEBACK\",\n        \"image\": null,\n        \"country\": \"SOUTH AFRICA\",\n        \"section\": \"Related breeds\"\n    },\n    {\n        \"id\": 139,\n        \"name\": \"ROTTWEILER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 140,\n        \"name\": \"DACHSHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/148g04-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"None\"\n    },\n    {\n        \"id\": 141,\n        \"name\": \"BULLDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/149g02.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 142,\n        \"name\": \"SERBIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/150g06.jpg\",\n        \"country\": \"SERBIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 143,\n        \"name\": \"ISTRIAN SHORT-HAIRED HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/151g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 144,\n        \"name\": \"ISTRIAN WIRE-HAIRED HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/152g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 145,\n        \"name\": \"DALMATIAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/153g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Related breeds\"\n    },\n    {\n        \"id\": 146,\n        \"name\": \"POSAVATZ HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/154g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 147,\n        \"name\": \"BOSNIAN BROKEN-HAIRED HOUND - CALLED BARAK\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/155g06.jpg\",\n        \"country\": \"BOSNIA AND HERZEGOVINA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 148,\n        \"name\": \"COLLIE ROUGH\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/156g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 149,\n        \"name\": \"BULLMASTIFF\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 150,\n        \"name\": \"GREYHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/158g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 151,\n        \"name\": \"ENGLISH FOXHOUND\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 152,\n        \"name\": \"IRISH WOLFHOUND\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Rough-haired Sighthounds\"\n    },\n    {\n        \"id\": 153,\n        \"name\": \"BEAGLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/161g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 154,\n        \"name\": \"WHIPPET\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/162g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 155,\n        \"name\": \"BASSET HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/163g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 156,\n        \"name\": \"DEERHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/164g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Rough-haired Sighthounds\"\n    },\n    {\n        \"id\": 157,\n        \"name\": \"ITALIAN SPINONE\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 158,\n        \"name\": \"GERMAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/166g01-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 159,\n        \"name\": \"AMERICAN COCKER SPANIEL\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 160,\n        \"name\": \"DANDIE DINMONT TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/168g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 161,\n        \"name\": \"FOX TERRIER (WIRE)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/169g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 162,\n        \"name\": \"CASTRO LABOREIRO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/170g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 163,\n        \"name\": \"BOUVIER DES ARDENNES\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 164,\n        \"name\": \"POODLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/172g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Poodle\"\n    },\n    {\n        \"id\": 165,\n        \"name\": \"ESTRELA MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/173g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 166,\n        \"name\": \"FRENCH SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/175g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 167,\n        \"name\": \"PICARDY SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 168,\n        \"name\": \"ARIEGE POINTING DOG\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 169,\n        \"name\": \"BOURBONNAIS POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/179g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 170,\n        \"name\": \"AUVERGNE POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/180g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 171,\n        \"name\": \"GIANT SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/181g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 172,\n        \"name\": \"SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/182g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 173,\n        \"name\": \"MINIATURE SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/183g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 174,\n        \"name\": \"GERMAN PINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/184g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 175,\n        \"name\": \"MINIATURE PINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/185g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 176,\n        \"name\": \"AFFENPINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/186g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 177,\n        \"name\": \"PORTUGUESE POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/187g07.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 178,\n        \"name\": \"SLOUGHI\",\n        \"image\": null,\n        \"country\": \"MOROCCO\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 179,\n        \"name\": \"FINNISH LAPPHUND\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 180,\n        \"name\": \"HOVAWART\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 181,\n        \"name\": \"BOUVIER DES FLANDRES\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 182,\n        \"name\": \"KROMFOHRLÄNDER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/192g09.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Kromfohrländer\"\n    },\n    {\n        \"id\": 183,\n        \"name\": \"BORZOI - RUSSIAN HUNTING SIGHTHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/193g10.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 184,\n        \"name\": \"BERGAMASCO SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/194g01-1.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 185,\n        \"name\": \"ITALIAN VOLPINO\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"European Spitz\"\n    },\n    {\n        \"id\": 186,\n        \"name\": \"BOLOGNESE\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 187,\n        \"name\": \"NEAPOLITAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 188,\n        \"name\": \"ITALIAN ROUGH-HAIRED SEGUGIO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/198g06.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 189,\n        \"name\": \"CIRNECO DELL'ETNA\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 190,\n        \"name\": \"ITALIAN GREYHOUND\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 191,\n        \"name\": \"MAREMMA AND THE ABRUZZES SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 192,\n        \"name\": \"ITALIAN POINTING DOG\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 193,\n        \"name\": \"NORWEGIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/203g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 194,\n        \"name\": \"SPANISH HOUND\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 195,\n        \"name\": \"CHOW CHOW\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/205g05.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 196,\n        \"name\": \"JAPANESE CHIN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/206g09.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Japan Chin and Pekingese\"\n    },\n    {\n        \"id\": 197,\n        \"name\": \"PEKINGESE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/207g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Japan Chin and Pekingese\"\n    },\n    {\n        \"id\": 198,\n        \"name\": \"SHIH TZU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/208g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 199,\n        \"name\": \"TIBETAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/209g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 200,\n        \"name\": \"SAMOYED\",\n        \"image\": \" SIBERIA\",\n        \"country\": \"NORTHERN RUSSIA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 201,\n        \"name\": \"HANOVERIAN SCENTHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/213g06-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 202,\n        \"name\": \"HELLENIC HOUND\",\n        \"image\": null,\n        \"country\": \"GREECE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 203,\n        \"name\": \"BICHON FRISE\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 204,\n        \"name\": \"PUDELPOINTER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 205,\n        \"name\": \"BAVARIAN MOUNTAIN SCENT HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/217g06.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 206,\n        \"name\": \"CHIHUAHUA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/218g09-1.jpg\",\n        \"country\": \"MEXICO\",\n        \"section\": \"Chihuahueno\"\n    },\n    {\n        \"id\": 207,\n        \"name\": \"FRENCH TRICOLOUR HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 208,\n        \"name\": \"FRENCH WHITE & BLACK HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/220g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 209,\n        \"name\": \"FRISIAN WATER DOG\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 210,\n        \"name\": \"STABIJHOUN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/222g07-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 211,\n        \"name\": \"DUTCH SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/223g01-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 212,\n        \"name\": \"DRENTSCHE PARTRIDGE DOG\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 213,\n        \"name\": \"FILA BRASILEIRO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/225g02.jpg\",\n        \"country\": \"BRAZIL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 214,\n        \"name\": \"LANDSEER (EUROPEAN CONTINENTAL TYPE)\",\n        \"image\": \" SWITZERLAND\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 215,\n        \"name\": \"LHASA APSO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/227g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 216,\n        \"name\": \"AFGHAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/228g10.jpg\",\n        \"country\": \"AFGHANISTAN\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 217,\n        \"name\": \"SERBIAN TRICOLOUR HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/229g06.jpg\",\n        \"country\": \"SERBIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 218,\n        \"name\": \"TIBETAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 219,\n        \"name\": \"TIBETAN SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/231g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 220,\n        \"name\": \"DEUTSCH STICHELHAAR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/232g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 221,\n        \"name\": \"LITTLE LION DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/233g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 222,\n        \"name\": \"XOLOITZCUINTLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/234g05-1.jpg\",\n        \"country\": \"MEXICO\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 223,\n        \"name\": \"GREAT DANE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/235g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 224,\n        \"name\": \"AUSTRALIAN SILKY TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/236g03.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 225,\n        \"name\": \"NORWEGIAN BUHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/237g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 226,\n        \"name\": \"MUDI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/238g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 227,\n        \"name\": \"HUNGARIAN WIRE-HAIRED POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/239g07.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 228,\n        \"name\": \"HUNGARIAN GREYHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/240g10.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 229,\n        \"name\": \"HUNGARIAN HOUND - TRANSYLVANIAN SCENT HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/241g06.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 230,\n        \"name\": \"NORWEGIAN ELKHOUND GREY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/242g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 231,\n        \"name\": \"ALASKAN MALAMUTE\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 232,\n        \"name\": \"SLOVAKIAN HOUND\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 233,\n        \"name\": \"BOHEMIAN WIRE-HAIRED POINTING GRIFFON\",\n        \"image\": null,\n        \"country\": \"CZECH REPUBLIC\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 234,\n        \"name\": \"CESKY TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/246g03.jpg\",\n        \"country\": \"CZECH REPUBLIC\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 235,\n        \"name\": \"ATLAS MOUNTAIN DOG (AIDI)\",\n        \"image\": null,\n        \"country\": \"MOROCCO\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 236,\n        \"name\": \"PHARAOH HOUND\",\n        \"image\": null,\n        \"country\": \"MALTA\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 237,\n        \"name\": \"MAJORCA MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 238,\n        \"name\": \"HAVANESE\",\n        \"image\": null,\n        \"country\": \"WESTERN MEDITERRANEAN BASIN\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 239,\n        \"name\": \"POLISH LOWLAND SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/251g01.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 240,\n        \"name\": \"TATRA SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/252g01.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 241,\n        \"name\": \"PUG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/253g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 242,\n        \"name\": \"ALPINE DACHSBRACKE\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 243,\n        \"name\": \"AKITA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/255g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 244,\n        \"name\": \"SHIBA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/257g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 245,\n        \"name\": \"JAPANESE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/259g03.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 246,\n        \"name\": \"TOSA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/260g02.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 247,\n        \"name\": \"HOKKAIDO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/261g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 248,\n        \"name\": \"JAPANESE SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/262g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 249,\n        \"name\": \"CHESAPEAKE BAY RETRIEVER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 250,\n        \"name\": \"MASTIFF\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 251,\n        \"name\": \"NORWEGIAN LUNDEHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/265g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 252,\n        \"name\": \"HYGEN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/266g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 253,\n        \"name\": \"HALDEN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/267g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 254,\n        \"name\": \"NORWEGIAN ELKHOUND BLACK\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/268g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 255,\n        \"name\": \"SALUKI\",\n        \"image\": null,\n        \"country\": \"MIDDLE EAST\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 256,\n        \"name\": \"SIBERIAN HUSKY\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 257,\n        \"name\": \"BEARDED COLLIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/271g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 258,\n        \"name\": \"NORFOLK TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/272g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 259,\n        \"name\": \"CANAAN DOG\",\n        \"image\": null,\n        \"country\": \"ISRAEL\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 260,\n        \"name\": \"GREENLAND DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/274g05.jpg\",\n        \"country\": \"GREENLAND\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 261,\n        \"name\": \"NORRBOTTENSPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/276g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 262,\n        \"name\": \"CROATIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/277g01.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 263,\n        \"name\": \"KARST SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/278g02.jpg\",\n        \"country\": \"SLOVENIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 264,\n        \"name\": \"MONTENEGRIN MOUNTAIN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/279g06.jpg\",\n        \"country\": \"MONTENEGRO\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 265,\n        \"name\": \"OLD DANISH POINTING DOG\",\n        \"image\": null,\n        \"country\": \"DENMARK\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 266,\n        \"name\": \"GRAND GRIFFON VENDEEN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/282g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 267,\n        \"name\": \"COTON DE TULEAR\",\n        \"image\": null,\n        \"country\": \"MADAGASCAR\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 268,\n        \"name\": \"LAPPONIAN HERDER\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 269,\n        \"name\": \"SPANISH GREYHOUND\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 270,\n        \"name\": \"AMERICAN STAFFORDSHIRE TERRIER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 271,\n        \"name\": \"AUSTRALIAN CATTLE DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/287g01.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 272,\n        \"name\": \"CHINESE CRESTED DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/288g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Hairless Dogs\"\n    },\n    {\n        \"id\": 273,\n        \"name\": \"ICELANDIC SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/289g05.jpg\",\n        \"country\": \"ICELAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 274,\n        \"name\": \"BEAGLE HARRIER\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 275,\n        \"name\": \"EURASIAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/291g05.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 276,\n        \"name\": \"DOGO ARGENTINO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/292g02.jpg\",\n        \"country\": \"ARGENTINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 277,\n        \"name\": \"AUSTRALIAN KELPIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/293g01.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 278,\n        \"name\": \"OTTERHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/294g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 279,\n        \"name\": \"HARRIER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 280,\n        \"name\": \"COLLIE SMOOTH\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/296g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 281,\n        \"name\": \"BORDER COLLIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/297g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 282,\n        \"name\": \"ROMAGNA WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/298g08-01.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 283,\n        \"name\": \"GERMAN HOUND\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 284,\n        \"name\": \"BLACK AND TAN COONHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/300g06.jpg\",\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 285,\n        \"name\": \"AMERICAN WATER SPANIEL\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 286,\n        \"name\": \"IRISH GLEN OF IMAAL TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 287,\n        \"name\": \"AMERICAN FOXHOUND\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 288,\n        \"name\": \"RUSSIAN-EUROPEAN LAIKA\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 289,\n        \"name\": \"EAST SIBERIAN LAIKA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/305g05-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 290,\n        \"name\": \"WEST SIBERIAN LAIKA\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 291,\n        \"name\": \"AZAWAKH\",\n        \"image\": null,\n        \"country\": \"MALI\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 292,\n        \"name\": \"DUTCH SMOUSHOND\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 293,\n        \"name\": \"SHAR PEI\",\n        \"image\": null,\n        \"country\": \"CHINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 294,\n        \"name\": \"PERUVIAN HAIRLESS DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/310g05.jpg\",\n        \"country\": \"PERU\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 295,\n        \"name\": \"SAARLOOS WOLFHOND\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 296,\n        \"name\": \"NOVA SCOTIA DUCK TOLLING RETRIEVER\",\n        \"image\": null,\n        \"country\": \"CANADA\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 297,\n        \"name\": \"DUTCH SCHAPENDOES\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/313g01.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 298,\n        \"name\": \"NEDERLANDSE KOOIKERHONDJE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/314g08-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 299,\n        \"name\": \"BROHOLMER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/315g02.jpg\",\n        \"country\": \"DENMARK\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 300,\n        \"name\": \"FRENCH WHITE AND ORANGE HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 301,\n        \"name\": \"KAI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/317g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 302,\n        \"name\": \"KISHU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/318g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 303,\n        \"name\": \"SHIKOKU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/319g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 304,\n        \"name\": \"WIREHAIRED SLOVAKIAN POINTER\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 305,\n        \"name\": \"MAJORCA SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 306,\n        \"name\": \"GREAT ANGLO-FRENCH TRICOLOUR HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 307,\n        \"name\": \"GREAT ANGLO-FRENCH WHITE AND BLACK HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/323g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 308,\n        \"name\": \"GREAT ANGLO-FRENCH WHITE & ORANGE HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 309,\n        \"name\": \"MEDIUM-SIZED ANGLO-FRENCH HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 310,\n        \"name\": \"SOUTH RUSSIAN SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 311,\n        \"name\": \"RUSSIAN BLACK TERRIER\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 312,\n        \"name\": \"CAUCASIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/328g02.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 313,\n        \"name\": \"CANARIAN WARREN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/329g05.jpg\",\n        \"country\": \"SPAIN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 314,\n        \"name\": \"IRISH RED AND WHITE SETTER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 315,\n        \"name\": \"ANATOLIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/331g02.jpg\",\n        \"country\": \"ANATOLIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 316,\n        \"name\": \"CZECHOSLOVAKIAN WOLFDOG\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 317,\n        \"name\": \"POLISH GREYHOUND\",\n        \"image\": null,\n        \"country\": \"POLAND\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 318,\n        \"name\": \"KOREA JINDO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/334g05.jpg\",\n        \"country\": \"REPUBLIC OF KOREA\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 319,\n        \"name\": \"CENTRAL ASIA SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/335g02-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 320,\n        \"name\": \"SPANISH WATER DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 321,\n        \"name\": \"ITALIAN SHORT-HAIRED SEGUGIO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/337g06.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 322,\n        \"name\": \"THAI RIDGEBACK DOG\",\n        \"image\": null,\n        \"country\": \"THAILAND\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 323,\n        \"name\": \"PARSON RUSSELL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/339g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 324,\n        \"name\": \"SAINT MIGUEL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 325,\n        \"name\": \"BRAZILIAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/341g03.jpg\",\n        \"country\": \"BRAZIL\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 326,\n        \"name\": \"AUSTRALIAN SHEPHERD\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 327,\n        \"name\": \"ITALIAN CORSO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/343g02.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 328,\n        \"name\": \"AMERICAN AKITA\",\n        \"image\": null,\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 329,\n        \"name\": \"JACK RUSSELL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/345g03-2.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 330,\n        \"name\": \"DOGO CANARIO\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 331,\n        \"name\": \"WHITE SWISS SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/347g01-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 332,\n        \"name\": \"TAIWAN DOG\",\n        \"image\": null,\n        \"country\": \"TAIWAN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 333,\n        \"name\": \"ROMANIAN MIORITIC SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"ROMANIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 334,\n        \"name\": \"ROMANIAN CARPATHIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/350g01.jpg\",\n        \"country\": \"ROMANIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 335,\n        \"name\": \"AUSTRALIAN STUMPY TAIL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 336,\n        \"name\": \"RUSSIAN TOY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/352g09-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Continental Toy Spaniel and Russian Toy\"\n    },\n    {\n        \"id\": 337,\n        \"name\": \"CIMARRÓN URUGUAYO\",\n        \"image\": null,\n        \"country\": \"URUGUAY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 338,\n        \"name\": \"POLISH HUNTING DOG\",\n        \"image\": null,\n        \"country\": \"POLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 339,\n        \"name\": \"BOSNIAN AND HERZEGOVINIAN - CROATIAN SHEPHERD DOG\",\n        \"image\": \" CROATIA\",\n        \"country\": \"BOSNIA AND HERZEGOVINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 340,\n        \"name\": \"DANISH-SWEDISH FARMDOG\",\n        \"image\": \" SWEDEN\",\n        \"country\": \"DENMARK\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 341,\n        \"name\": \"SOUTHEASTERN EUROPEAN SHEPHERD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/357g02.jpg\",\n        \"country\": \"SOUTH-EASTERN EUROPE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 342,\n        \"name\": \"THAI BANGKAEW DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/358g05.jpg\",\n        \"country\": \"THAILAND\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 343,\n        \"name\": \"MINIATURE BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/359g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 344,\n        \"name\": \"LANCASHIRE HEELER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/360g01.jpg\",\n        \"country\": \"ENGLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 345,\n        \"name\": \"LABRADOR RETRIEVER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 346,\n        \"name\": \"HUSKY MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 347,\n        \"name\": \"LABRADOR / GREAT DANE MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 348,\n        \"name\": \"TERRIER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 349,\n        \"name\": \"BEAGLE MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 350,\n        \"name\": \"SHORT HAIRED SETTER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into dev.owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f0676c3-abcb-4ac4-985c-f8625c6b984e",
										"exec": [
											"pm.test(\"inserted 4 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 4')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"owner\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"name\": \"Sam\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Kyle\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"David\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Kaylan\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into other.owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ccd640a-5a49-42e3-8868-3e8449bd04ec",
										"exec": [
											"pm.test(\"inserted 4 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 4')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"other\",\n    \"table\":\"owner\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"name\": \"Sam\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Kyle\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"David\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Kaylan\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into another.breed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8e6e71f-05be-47c0-a343-dce758cdba40",
										"exec": [
											"pm.test(\"inserted 350 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 350')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"another\",\n    \"table\":\"breed\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"name\": \"ENGLISH POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"ENGLISH SETTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"KERRY BLUE TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"CAIRN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/004g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"ENGLISH COCKER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/005g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"GORDON SETTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/006g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"AIREDALE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/007g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"AUSTRALIAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/008g03.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"BEDLINGTON TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/009g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"BORDER TERRIER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/011g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"FOX TERRIER (SMOOTH)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/012g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"ENGLISH TOY TERRIER (BLACK &TAN)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/013g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"SWEDISH VALLHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/014g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"BELGIAN SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"OLD ENGLISH SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/016g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"GRIFFON NIVERNAIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/017g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"BRIQUET GRIFFON VENDEEN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/019g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"ARIEGEOIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/020g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 20,\n        \"name\": \"GASCON SAINTONGEOIS\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 21,\n        \"name\": \"GREAT GASCONY BLUE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/022g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 22,\n        \"name\": \"POITEVIN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/024g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 23,\n        \"name\": \"BILLY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/025g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 24,\n        \"name\": \"ARTOIS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/028g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 25,\n        \"name\": \"PORCELAINE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/030g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 26,\n        \"name\": \"SMALL BLUE GASCONY BLUE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"BLUE GASCONY GRIFFON\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 28,\n        \"name\": \"GRAND BASSET GRIFFON VENDEEN\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 29,\n        \"name\": \"NORMAN ARTESIEN BASSET\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 30,\n        \"name\": \"BLUE GASCONY BASSET\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 31,\n        \"name\": \"BASSET FAUVE DE BRETAGNE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 32,\n        \"name\": \"PORTUGUESE WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/037g08.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 33,\n        \"name\": \"WELSH CORGI CARDIGAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/038g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 34,\n        \"name\": \"WELSH CORGI PEMBROKE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/039g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 35,\n        \"name\": \"IRISH SOFT COATED WHEATEN TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 36,\n        \"name\": \"YUGOSLAVIAN SHEPHERD DOG - SHARPLANINA\",\n        \"image\": \" SERBIA\",\n        \"country\": \"MACEDONIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 37,\n        \"name\": \"JÄMTHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/042g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 38,\n        \"name\": \"BASENJI\",\n        \"image\": null,\n        \"country\": \"CENTRAL AFRICA\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 39,\n        \"name\": \"BERGER DE BEAUCE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 40,\n        \"name\": \"BERNESE MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/045g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 41,\n        \"name\": \"APPENZELL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 42,\n        \"name\": \"ENTLEBUCH CATTLE DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/047g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 43,\n        \"name\": \"KARELIAN BEAR DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/048g05-1.jpg\",\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 44,\n        \"name\": \"FINNISH SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/049g05-1.jpg\",\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 45,\n        \"name\": \"NEWFOUNDLAND\",\n        \"image\": null,\n        \"country\": \"CANADA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 46,\n        \"name\": \"FINNISH HOUND\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 47,\n        \"name\": \"POLISH HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/052g06.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 48,\n        \"name\": \"KOMONDOR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/053g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 49,\n        \"name\": \"KUVASZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/054g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 50,\n        \"name\": \"PULI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/055g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 51,\n        \"name\": \"PUMI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/056g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 52,\n        \"name\": \"HUNGARIAN SHORT-HAIRED POINTER (VIZSLA)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/057g07.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 53,\n        \"name\": \"GREAT SWISS MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/058g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 54,\n        \"name\": \"SWISS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/059g06-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 55,\n        \"name\": \"SMALL SWISS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/060g06-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 56,\n        \"name\": \"ST. BERNARD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/061g02-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 57,\n        \"name\": \"COARSE-HAIRED STYRIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/062g06.jpg\",\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 58,\n        \"name\": \"AUSTRIAN BLACK AND TAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/063g06.jpg\",\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 59,\n        \"name\": \"AUSTRIAN  PINSCHER\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 60,\n        \"name\": \"MALTESE\",\n        \"image\": null,\n        \"country\": \"CENTRAL MEDITERRANEAN BASIN\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 61,\n        \"name\": \"FAWN BRITTANY GRIFFON\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/066g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 62,\n        \"name\": \"PETIT BASSET GRIFFON VENDEEN\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 63,\n        \"name\": \"TYROLEAN HOUND\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 64,\n        \"name\": \"LAKELAND TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/070g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 65,\n        \"name\": \"MANCHESTER TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/071g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 66,\n        \"name\": \"NORWICH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/072g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 67,\n        \"name\": \"SCOTTISH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/073g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 68,\n        \"name\": \"SEALYHAM TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/074g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 69,\n        \"name\": \"SKYE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/075g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 70,\n        \"name\": \"STAFFORDSHIRE BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/076g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 71,\n        \"name\": \"CONTINENTAL TOY SPANIEL\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Continental Toy Spaniel and Russian Toy\"\n    },\n    {\n        \"id\": 72,\n        \"name\": \"WELSH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/078g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 73,\n        \"name\": \"GRIFFON BRUXELLOIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/080g09-1.jpg\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 74,\n        \"name\": \"GRIFFON BELGE\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 75,\n        \"name\": \"PETIT BRABANÇON\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 76,\n        \"name\": \"SCHIPPERKE\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 77,\n        \"name\": \"BLOODHOUND\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 78,\n        \"name\": \"WEST HIGHLAND WHITE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/085g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 79,\n        \"name\": \"YORKSHIRE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/086g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 80,\n        \"name\": \"CATALAN SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 81,\n        \"name\": \"SHETLAND SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/088g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 82,\n        \"name\": \"IBIZAN PODENCO\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 83,\n        \"name\": \"BURGOS POINTING DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 84,\n        \"name\": \"SPANISH MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 85,\n        \"name\": \"PYRENEAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 86,\n        \"name\": \"PORTUGUESE SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/093g01.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 87,\n        \"name\": \"PORTUGUESE WARREN HOUND-PORTUGUESE PODENGO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/094g05-1.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 88,\n        \"name\": \"BRITTANY SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/095g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 89,\n        \"name\": \"RAFEIRO OF ALENTEJO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/096g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 90,\n        \"name\": \"GERMAN SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/097g05-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"European Spitz\"\n    },\n    {\n        \"id\": 91,\n        \"name\": \"GERMAN WIRE- HAIRED POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/098g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 92,\n        \"name\": \"WEIMARANER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 93,\n        \"name\": \"WESTPHALIAN DACHSBRACKE\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 94,\n        \"name\": \"FRENCH BULLDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/101g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 95,\n        \"name\": \"KLEINER MÜNSTERLÄNDER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 96,\n        \"name\": \"GERMAN HUNTING TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/103g03-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 97,\n        \"name\": \"GERMAN SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/104g08.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 98,\n        \"name\": \"FRENCH WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/105g08.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 99,\n        \"name\": \"BLUE PICARDY SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 100,\n        \"name\": \"WIRE-HAIRED POINTING GRIFFON KORTHALS\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 101,\n        \"name\": \"PICARDY SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 102,\n        \"name\": \"CLUMBER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/109g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 103,\n        \"name\": \"CURLY COATED RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/110g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 104,\n        \"name\": \"GOLDEN RETRIEVER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 105,\n        \"name\": \"BRIARD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/113g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 106,\n        \"name\": \"PONT-AUDEMER SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 107,\n        \"name\": \"SAINT GERMAIN POINTER\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 108,\n        \"name\": \"DOGUE DE BORDEAUX\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/116g02.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 109,\n        \"name\": \"DEUTSCH LANGHAAR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/117g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 110,\n        \"name\": \"LARGE MUNSTERLANDER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/118g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 111,\n        \"name\": \"GERMAN SHORT- HAIRED POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/119g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 112,\n        \"name\": \"IRISH RED SETTER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 113,\n        \"name\": \"FLAT COATED RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/121g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 114,\n        \"name\": \"LABRADOR RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/122g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 115,\n        \"name\": \"FIELD SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/123g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 116,\n        \"name\": \"IRISH WATER SPANIEL\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 117,\n        \"name\": \"ENGLISH SPRINGER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/125g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 118,\n        \"name\": \"WELSH SPRINGER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/126g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 119,\n        \"name\": \"SUSSEX SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/127g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 120,\n        \"name\": \"KING CHARLES SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/128g09.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"English Toy Spaniels\"\n    },\n    {\n        \"id\": 121,\n        \"name\": \"SMÅLANDSSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/129g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 122,\n        \"name\": \"DREVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/130g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 123,\n        \"name\": \"SCHILLERSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/131g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 124,\n        \"name\": \"HAMILTONSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/132g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 125,\n        \"name\": \"FRENCH POINTING DOG - GASCOGNE TYPE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 126,\n        \"name\": \"FRENCH POINTING DOG - PYRENEAN TYPE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 127,\n        \"name\": \"SWEDISH LAPPHUND\",\n        \"image\": null,\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 128,\n        \"name\": \"CAVALIER KING CHARLES SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/136g09.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"English Toy Spaniels\"\n    },\n    {\n        \"id\": 129,\n        \"name\": \"PYRENEAN MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/137g02.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 130,\n        \"name\": \"PYRENEAN SHEEPDOG - SMOOTH FACED\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/138g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 131,\n        \"name\": \"IRISH TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 132,\n        \"name\": \"BOSTON TERRIER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 133,\n        \"name\": \"LONG-HAIRED PYRENEAN SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/141g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 134,\n        \"name\": \"SLOVAKIAN CHUVACH\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 135,\n        \"name\": \"DOBERMANN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/143g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 136,\n        \"name\": \"BOXER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/144g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 137,\n        \"name\": \"LEONBERGER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 138,\n        \"name\": \"RHODESIAN RIDGEBACK\",\n        \"image\": null,\n        \"country\": \"SOUTH AFRICA\",\n        \"section\": \"Related breeds\"\n    },\n    {\n        \"id\": 139,\n        \"name\": \"ROTTWEILER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 140,\n        \"name\": \"DACHSHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/148g04-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"None\"\n    },\n    {\n        \"id\": 141,\n        \"name\": \"BULLDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/149g02.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 142,\n        \"name\": \"SERBIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/150g06.jpg\",\n        \"country\": \"SERBIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 143,\n        \"name\": \"ISTRIAN SHORT-HAIRED HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/151g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 144,\n        \"name\": \"ISTRIAN WIRE-HAIRED HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/152g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 145,\n        \"name\": \"DALMATIAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/153g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Related breeds\"\n    },\n    {\n        \"id\": 146,\n        \"name\": \"POSAVATZ HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/154g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 147,\n        \"name\": \"BOSNIAN BROKEN-HAIRED HOUND - CALLED BARAK\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/155g06.jpg\",\n        \"country\": \"BOSNIA AND HERZEGOVINA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 148,\n        \"name\": \"COLLIE ROUGH\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/156g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 149,\n        \"name\": \"BULLMASTIFF\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 150,\n        \"name\": \"GREYHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/158g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 151,\n        \"name\": \"ENGLISH FOXHOUND\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 152,\n        \"name\": \"IRISH WOLFHOUND\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Rough-haired Sighthounds\"\n    },\n    {\n        \"id\": 153,\n        \"name\": \"BEAGLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/161g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 154,\n        \"name\": \"WHIPPET\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/162g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 155,\n        \"name\": \"BASSET HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/163g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 156,\n        \"name\": \"DEERHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/164g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Rough-haired Sighthounds\"\n    },\n    {\n        \"id\": 157,\n        \"name\": \"ITALIAN SPINONE\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 158,\n        \"name\": \"GERMAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/166g01-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 159,\n        \"name\": \"AMERICAN COCKER SPANIEL\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 160,\n        \"name\": \"DANDIE DINMONT TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/168g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 161,\n        \"name\": \"FOX TERRIER (WIRE)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/169g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 162,\n        \"name\": \"CASTRO LABOREIRO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/170g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 163,\n        \"name\": \"BOUVIER DES ARDENNES\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 164,\n        \"name\": \"POODLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/172g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Poodle\"\n    },\n    {\n        \"id\": 165,\n        \"name\": \"ESTRELA MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/173g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 166,\n        \"name\": \"FRENCH SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/175g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 167,\n        \"name\": \"PICARDY SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 168,\n        \"name\": \"ARIEGE POINTING DOG\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 169,\n        \"name\": \"BOURBONNAIS POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/179g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 170,\n        \"name\": \"AUVERGNE POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/180g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 171,\n        \"name\": \"GIANT SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/181g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 172,\n        \"name\": \"SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/182g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 173,\n        \"name\": \"MINIATURE SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/183g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 174,\n        \"name\": \"GERMAN PINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/184g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 175,\n        \"name\": \"MINIATURE PINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/185g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 176,\n        \"name\": \"AFFENPINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/186g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 177,\n        \"name\": \"PORTUGUESE POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/187g07.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 178,\n        \"name\": \"SLOUGHI\",\n        \"image\": null,\n        \"country\": \"MOROCCO\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 179,\n        \"name\": \"FINNISH LAPPHUND\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 180,\n        \"name\": \"HOVAWART\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 181,\n        \"name\": \"BOUVIER DES FLANDRES\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 182,\n        \"name\": \"KROMFOHRLÄNDER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/192g09.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Kromfohrländer\"\n    },\n    {\n        \"id\": 183,\n        \"name\": \"BORZOI - RUSSIAN HUNTING SIGHTHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/193g10.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 184,\n        \"name\": \"BERGAMASCO SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/194g01-1.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 185,\n        \"name\": \"ITALIAN VOLPINO\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"European Spitz\"\n    },\n    {\n        \"id\": 186,\n        \"name\": \"BOLOGNESE\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 187,\n        \"name\": \"NEAPOLITAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 188,\n        \"name\": \"ITALIAN ROUGH-HAIRED SEGUGIO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/198g06.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 189,\n        \"name\": \"CIRNECO DELL'ETNA\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 190,\n        \"name\": \"ITALIAN GREYHOUND\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 191,\n        \"name\": \"MAREMMA AND THE ABRUZZES SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 192,\n        \"name\": \"ITALIAN POINTING DOG\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 193,\n        \"name\": \"NORWEGIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/203g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 194,\n        \"name\": \"SPANISH HOUND\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 195,\n        \"name\": \"CHOW CHOW\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/205g05.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 196,\n        \"name\": \"JAPANESE CHIN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/206g09.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Japan Chin and Pekingese\"\n    },\n    {\n        \"id\": 197,\n        \"name\": \"PEKINGESE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/207g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Japan Chin and Pekingese\"\n    },\n    {\n        \"id\": 198,\n        \"name\": \"SHIH TZU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/208g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 199,\n        \"name\": \"TIBETAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/209g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 200,\n        \"name\": \"SAMOYED\",\n        \"image\": \" SIBERIA\",\n        \"country\": \"NORTHERN RUSSIA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 201,\n        \"name\": \"HANOVERIAN SCENTHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/213g06-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 202,\n        \"name\": \"HELLENIC HOUND\",\n        \"image\": null,\n        \"country\": \"GREECE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 203,\n        \"name\": \"BICHON FRISE\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 204,\n        \"name\": \"PUDELPOINTER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 205,\n        \"name\": \"BAVARIAN MOUNTAIN SCENT HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/217g06.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 206,\n        \"name\": \"CHIHUAHUA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/218g09-1.jpg\",\n        \"country\": \"MEXICO\",\n        \"section\": \"Chihuahueno\"\n    },\n    {\n        \"id\": 207,\n        \"name\": \"FRENCH TRICOLOUR HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 208,\n        \"name\": \"FRENCH WHITE & BLACK HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/220g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 209,\n        \"name\": \"FRISIAN WATER DOG\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 210,\n        \"name\": \"STABIJHOUN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/222g07-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 211,\n        \"name\": \"DUTCH SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/223g01-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 212,\n        \"name\": \"DRENTSCHE PARTRIDGE DOG\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 213,\n        \"name\": \"FILA BRASILEIRO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/225g02.jpg\",\n        \"country\": \"BRAZIL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 214,\n        \"name\": \"LANDSEER (EUROPEAN CONTINENTAL TYPE)\",\n        \"image\": \" SWITZERLAND\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 215,\n        \"name\": \"LHASA APSO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/227g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 216,\n        \"name\": \"AFGHAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/228g10.jpg\",\n        \"country\": \"AFGHANISTAN\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 217,\n        \"name\": \"SERBIAN TRICOLOUR HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/229g06.jpg\",\n        \"country\": \"SERBIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 218,\n        \"name\": \"TIBETAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 219,\n        \"name\": \"TIBETAN SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/231g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 220,\n        \"name\": \"DEUTSCH STICHELHAAR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/232g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 221,\n        \"name\": \"LITTLE LION DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/233g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 222,\n        \"name\": \"XOLOITZCUINTLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/234g05-1.jpg\",\n        \"country\": \"MEXICO\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 223,\n        \"name\": \"GREAT DANE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/235g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 224,\n        \"name\": \"AUSTRALIAN SILKY TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/236g03.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 225,\n        \"name\": \"NORWEGIAN BUHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/237g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 226,\n        \"name\": \"MUDI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/238g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 227,\n        \"name\": \"HUNGARIAN WIRE-HAIRED POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/239g07.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 228,\n        \"name\": \"HUNGARIAN GREYHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/240g10.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 229,\n        \"name\": \"HUNGARIAN HOUND - TRANSYLVANIAN SCENT HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/241g06.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 230,\n        \"name\": \"NORWEGIAN ELKHOUND GREY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/242g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 231,\n        \"name\": \"ALASKAN MALAMUTE\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 232,\n        \"name\": \"SLOVAKIAN HOUND\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 233,\n        \"name\": \"BOHEMIAN WIRE-HAIRED POINTING GRIFFON\",\n        \"image\": null,\n        \"country\": \"CZECH REPUBLIC\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 234,\n        \"name\": \"CESKY TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/246g03.jpg\",\n        \"country\": \"CZECH REPUBLIC\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 235,\n        \"name\": \"ATLAS MOUNTAIN DOG (AIDI)\",\n        \"image\": null,\n        \"country\": \"MOROCCO\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 236,\n        \"name\": \"PHARAOH HOUND\",\n        \"image\": null,\n        \"country\": \"MALTA\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 237,\n        \"name\": \"MAJORCA MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 238,\n        \"name\": \"HAVANESE\",\n        \"image\": null,\n        \"country\": \"WESTERN MEDITERRANEAN BASIN\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 239,\n        \"name\": \"POLISH LOWLAND SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/251g01.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 240,\n        \"name\": \"TATRA SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/252g01.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 241,\n        \"name\": \"PUG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/253g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 242,\n        \"name\": \"ALPINE DACHSBRACKE\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 243,\n        \"name\": \"AKITA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/255g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 244,\n        \"name\": \"SHIBA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/257g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 245,\n        \"name\": \"JAPANESE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/259g03.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 246,\n        \"name\": \"TOSA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/260g02.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 247,\n        \"name\": \"HOKKAIDO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/261g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 248,\n        \"name\": \"JAPANESE SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/262g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 249,\n        \"name\": \"CHESAPEAKE BAY RETRIEVER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 250,\n        \"name\": \"MASTIFF\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 251,\n        \"name\": \"NORWEGIAN LUNDEHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/265g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 252,\n        \"name\": \"HYGEN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/266g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 253,\n        \"name\": \"HALDEN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/267g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 254,\n        \"name\": \"NORWEGIAN ELKHOUND BLACK\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/268g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 255,\n        \"name\": \"SALUKI\",\n        \"image\": null,\n        \"country\": \"MIDDLE EAST\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 256,\n        \"name\": \"SIBERIAN HUSKY\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 257,\n        \"name\": \"BEARDED COLLIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/271g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 258,\n        \"name\": \"NORFOLK TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/272g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 259,\n        \"name\": \"CANAAN DOG\",\n        \"image\": null,\n        \"country\": \"ISRAEL\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 260,\n        \"name\": \"GREENLAND DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/274g05.jpg\",\n        \"country\": \"GREENLAND\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 261,\n        \"name\": \"NORRBOTTENSPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/276g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 262,\n        \"name\": \"CROATIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/277g01.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 263,\n        \"name\": \"KARST SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/278g02.jpg\",\n        \"country\": \"SLOVENIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 264,\n        \"name\": \"MONTENEGRIN MOUNTAIN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/279g06.jpg\",\n        \"country\": \"MONTENEGRO\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 265,\n        \"name\": \"OLD DANISH POINTING DOG\",\n        \"image\": null,\n        \"country\": \"DENMARK\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 266,\n        \"name\": \"GRAND GRIFFON VENDEEN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/282g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 267,\n        \"name\": \"COTON DE TULEAR\",\n        \"image\": null,\n        \"country\": \"MADAGASCAR\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 268,\n        \"name\": \"LAPPONIAN HERDER\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 269,\n        \"name\": \"SPANISH GREYHOUND\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 270,\n        \"name\": \"AMERICAN STAFFORDSHIRE TERRIER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 271,\n        \"name\": \"AUSTRALIAN CATTLE DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/287g01.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 272,\n        \"name\": \"CHINESE CRESTED DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/288g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Hairless Dogs\"\n    },\n    {\n        \"id\": 273,\n        \"name\": \"ICELANDIC SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/289g05.jpg\",\n        \"country\": \"ICELAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 274,\n        \"name\": \"BEAGLE HARRIER\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 275,\n        \"name\": \"EURASIAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/291g05.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 276,\n        \"name\": \"DOGO ARGENTINO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/292g02.jpg\",\n        \"country\": \"ARGENTINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 277,\n        \"name\": \"AUSTRALIAN KELPIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/293g01.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 278,\n        \"name\": \"OTTERHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/294g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 279,\n        \"name\": \"HARRIER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 280,\n        \"name\": \"COLLIE SMOOTH\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/296g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 281,\n        \"name\": \"BORDER COLLIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/297g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 282,\n        \"name\": \"ROMAGNA WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/298g08-01.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 283,\n        \"name\": \"GERMAN HOUND\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 284,\n        \"name\": \"BLACK AND TAN COONHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/300g06.jpg\",\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 285,\n        \"name\": \"AMERICAN WATER SPANIEL\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 286,\n        \"name\": \"IRISH GLEN OF IMAAL TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 287,\n        \"name\": \"AMERICAN FOXHOUND\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 288,\n        \"name\": \"RUSSIAN-EUROPEAN LAIKA\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 289,\n        \"name\": \"EAST SIBERIAN LAIKA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/305g05-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 290,\n        \"name\": \"WEST SIBERIAN LAIKA\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 291,\n        \"name\": \"AZAWAKH\",\n        \"image\": null,\n        \"country\": \"MALI\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 292,\n        \"name\": \"DUTCH SMOUSHOND\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 293,\n        \"name\": \"SHAR PEI\",\n        \"image\": null,\n        \"country\": \"CHINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 294,\n        \"name\": \"PERUVIAN HAIRLESS DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/310g05.jpg\",\n        \"country\": \"PERU\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 295,\n        \"name\": \"SAARLOOS WOLFHOND\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 296,\n        \"name\": \"NOVA SCOTIA DUCK TOLLING RETRIEVER\",\n        \"image\": null,\n        \"country\": \"CANADA\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 297,\n        \"name\": \"DUTCH SCHAPENDOES\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/313g01.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 298,\n        \"name\": \"NEDERLANDSE KOOIKERHONDJE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/314g08-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 299,\n        \"name\": \"BROHOLMER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/315g02.jpg\",\n        \"country\": \"DENMARK\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 300,\n        \"name\": \"FRENCH WHITE AND ORANGE HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 301,\n        \"name\": \"KAI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/317g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 302,\n        \"name\": \"KISHU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/318g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 303,\n        \"name\": \"SHIKOKU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/319g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 304,\n        \"name\": \"WIREHAIRED SLOVAKIAN POINTER\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 305,\n        \"name\": \"MAJORCA SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 306,\n        \"name\": \"GREAT ANGLO-FRENCH TRICOLOUR HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 307,\n        \"name\": \"GREAT ANGLO-FRENCH WHITE AND BLACK HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/323g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 308,\n        \"name\": \"GREAT ANGLO-FRENCH WHITE & ORANGE HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 309,\n        \"name\": \"MEDIUM-SIZED ANGLO-FRENCH HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 310,\n        \"name\": \"SOUTH RUSSIAN SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 311,\n        \"name\": \"RUSSIAN BLACK TERRIER\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 312,\n        \"name\": \"CAUCASIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/328g02.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 313,\n        \"name\": \"CANARIAN WARREN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/329g05.jpg\",\n        \"country\": \"SPAIN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 314,\n        \"name\": \"IRISH RED AND WHITE SETTER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 315,\n        \"name\": \"ANATOLIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/331g02.jpg\",\n        \"country\": \"ANATOLIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 316,\n        \"name\": \"CZECHOSLOVAKIAN WOLFDOG\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 317,\n        \"name\": \"POLISH GREYHOUND\",\n        \"image\": null,\n        \"country\": \"POLAND\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 318,\n        \"name\": \"KOREA JINDO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/334g05.jpg\",\n        \"country\": \"REPUBLIC OF KOREA\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 319,\n        \"name\": \"CENTRAL ASIA SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/335g02-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 320,\n        \"name\": \"SPANISH WATER DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 321,\n        \"name\": \"ITALIAN SHORT-HAIRED SEGUGIO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/337g06.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 322,\n        \"name\": \"THAI RIDGEBACK DOG\",\n        \"image\": null,\n        \"country\": \"THAILAND\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 323,\n        \"name\": \"PARSON RUSSELL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/339g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 324,\n        \"name\": \"SAINT MIGUEL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 325,\n        \"name\": \"BRAZILIAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/341g03.jpg\",\n        \"country\": \"BRAZIL\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 326,\n        \"name\": \"AUSTRALIAN SHEPHERD\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 327,\n        \"name\": \"ITALIAN CORSO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/343g02.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 328,\n        \"name\": \"AMERICAN AKITA\",\n        \"image\": null,\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 329,\n        \"name\": \"JACK RUSSELL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/345g03-2.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 330,\n        \"name\": \"DOGO CANARIO\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 331,\n        \"name\": \"WHITE SWISS SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/347g01-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 332,\n        \"name\": \"TAIWAN DOG\",\n        \"image\": null,\n        \"country\": \"TAIWAN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 333,\n        \"name\": \"ROMANIAN MIORITIC SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"ROMANIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 334,\n        \"name\": \"ROMANIAN CARPATHIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/350g01.jpg\",\n        \"country\": \"ROMANIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 335,\n        \"name\": \"AUSTRALIAN STUMPY TAIL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 336,\n        \"name\": \"RUSSIAN TOY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/352g09-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Continental Toy Spaniel and Russian Toy\"\n    },\n    {\n        \"id\": 337,\n        \"name\": \"CIMARRÓN URUGUAYO\",\n        \"image\": null,\n        \"country\": \"URUGUAY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 338,\n        \"name\": \"POLISH HUNTING DOG\",\n        \"image\": null,\n        \"country\": \"POLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 339,\n        \"name\": \"BOSNIAN AND HERZEGOVINIAN - CROATIAN SHEPHERD DOG\",\n        \"image\": \" CROATIA\",\n        \"country\": \"BOSNIA AND HERZEGOVINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 340,\n        \"name\": \"DANISH-SWEDISH FARMDOG\",\n        \"image\": \" SWEDEN\",\n        \"country\": \"DENMARK\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 341,\n        \"name\": \"SOUTHEASTERN EUROPEAN SHEPHERD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/357g02.jpg\",\n        \"country\": \"SOUTH-EASTERN EUROPE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 342,\n        \"name\": \"THAI BANGKAEW DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/358g05.jpg\",\n        \"country\": \"THAILAND\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 343,\n        \"name\": \"MINIATURE BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/359g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 344,\n        \"name\": \"LANCASHIRE HEELER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/360g01.jpg\",\n        \"country\": \"ENGLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 345,\n        \"name\": \"LABRADOR RETRIEVER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 346,\n        \"name\": \"HUSKY MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 347,\n        \"name\": \"LABRADOR / GREAT DANE MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 348,\n        \"name\": \"TERRIER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 349,\n        \"name\": \"BEAGLE MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 350,\n        \"name\": \"SHORT HAIRED SETTER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CSV Bulk Load Tests",
					"item": [
						{
							"name": "Invalid Attribute Check",
							"item": [
								{
									"name": "csv_data_load with invalid attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f597a9f-6054-44f7-9b4f-6628d921de8c",
												"exec": [
													"pm.test(\"Check for job message\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
													"    ",
													"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"csv_file_load with invalid attributes\");",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\": \"csv_data_load\",\n\t\"schema\": \"dev\",\n\t\"action\": \"insert\",\n\t\"table\": \"invalid_attribute\",\n\t\"data\": \"id,s/ome=attribute\\n1,cheeseburger\\n2,hamburger with cheese\\n3,veggie burger\\n\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										},
										"description": "Checks to confirm that a 500 status and error msg are returned when an invalid attribute name is used"
									},
									"response": []
								},
								{
									"name": "csv_file_load with invalid attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c731ec33-5c66-4b65-92b5-ab0433f82b4b",
												"exec": [
													"pm.test(\"Check for job message\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
													"    ",
													"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, null);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\": \"csv_file_load\",\n\t\"action\": \"insert\",\n\t\"schema\": \"dev\",\n\t\"table\": \"invalid_attribute\",\n\t\"file_path\": \"{{files_location}}InvalidAttributes.csv\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										},
										"description": "Checks to confirm that a 500 status and error msg are returned when invalid attribute names are used"
									},
									"response": []
								},
								{
									"name": "Check Job Failed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bd54511-9862-445b-8279-2e0f498c8cc7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test Job Found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.length).to.eql(1);",
													"    ",
													"    pm.expect(jsonData[0]).to.have.property('status');",
													"    ",
													"    const status = jsonData[0].status;",
													"    ",
													"    //",
													"    ",
													"    switch(status){",
													"        case 'ERROR':",
													"            console.log(jsonData[0]);",
													"            pm.expect(jsonData[0].message).to.contain('Invalid column name');",
													"            if(pm.environment.get(\"next_request\")){",
													"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
													"            }",
													"            break;",
													"        case 'COMPLETE':",
													"        case 'IN_PROGRESS':",
													"            console.log('in progress, checking again');",
													"            postman.setNextRequest('Check Job Failed');",
													"            break;",
													"        default:",
													"            postman.setNextRequest('Check Job Failed');",
													"            break;",
													"    }",
													"    ",
													"    //THIS MUST BE AT THE END!",
													"    pm.expect(status).to.be.oneOf(['ERROR', 'IN_PROGRESS']);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d809a8bb-5916-4b83-b77d-9b8fb54f943f",
												"exec": [
													"setTimeout(()=>{}, 200);",
													"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4fd4c8e2-c3df-4d08-8256-462e11512feb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c373907a-8689-402b-8b20-110f12d2c49b",
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"function:getJobId\", (jsonData, next_req)=>{",
											"    let id_index = jsonData.message.indexOf('id ');",
											"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"    pm.environment.set(\"job_id\", parsedId);",
											"    pm.environment.set(\"next_request\", next_req);",
											"    postman.setNextRequest(\"Check Job Failed\");",
											"});"
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "search for specific value from CSV load",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c76d6662-8cff-4d72-82ac-720c45893842",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].supplierid).to.eql(10);",
											"    pm.expect(jsonData[0].contactname).to.eql(\"Carlos Diaz\");",
											"    pm.expect(jsonData[0].companyname).to.eql(\"Refrescos Americanas LTDA\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"hash_attribute\": \"{{supp_id}}\",\n  \"hash_values\":[10],\n  \"get_attributes\": [\"supplierid\", \"companyname\", \"contactname\"]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Search for supplier id 10 and confirm it matches the source CSV file"
							},
							"response": []
						},
						{
							"name": "search for random value from CSV load",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbe568d1-dd0f-4080-a478-cb7559303a09",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    var randomNumber = Math.floor(Math.random() * 29);",
											"    pm.expect(jsonData[randomNumber]).to.not.eql(null)",
											"    pm.expect(jsonData.length).to.eql(29);",
											"    let keys = Object.keys(jsonData[randomNumber]);",
											"    //because helium has 2 extra keys we need to check for them",
											"    if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
											"        pm.expect(keys.length).to.eql(14);",
											"    } else{",
											"        pm.expect(keys.length).to.eql(12);",
											"    }",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{supp_tb}}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "SQL select all from supplier table and confirm that a random row exists and attributes match source file."
							},
							"response": []
						},
						{
							"name": "check error on invalid file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79e3b24c-a834-4c66-887b-426c336d6fee",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"insert array into table confirm\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error.includes(\"There was an error adding a job: No such file or directory\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"file_path\":\"{{files_location}}Suppliers_wrong.csv\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Should abort CSV upload and return error message"
							},
							"response": []
						},
						{
							"name": "csv bulk load update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bd34ebc-840f-4a68-951a-7a797980d07b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"action\": \"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"data\":\"supplierid,companyname\\n19,The Chum Bucket\\n\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "update a table with csv data uplaod"
							},
							"response": []
						},
						{
							"name": "csv bulk load update confirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f503a4a-ad7f-4f59-93a3-7e67a8b1323c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].supplierid).to.eql(19);",
											"    pm.expect(jsonData[0].contactname).to.eql(\"Robb Merchant\");",
											"    pm.expect(jsonData[0].companyname).to.eql(\"The Chum Bucket\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ac0800d-5e9e-4ef9-9c55-112a70e8a0eb",
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"hash_attribute\": \"{{supp_id}}\",\n  \"hash_values\":[19],\n  \"get_attributes\": [\"supplierid\", \"companyname\", \"contactname\"]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "confirm that table was actually updated"
							},
							"response": []
						}
					],
					"description": "Test a designated and random row from bulk CSV upload",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Insert object into table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f30e5dd1-5a3f-4696-81ee-1a10b80888cf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert object into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"TEST1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"postalcode\": { \"house\": 30, \"street\": \"South St\"},\n\t\t\t\"customerid\": \"TEST1\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Insert object into northnwd.customers and confirm error"
					},
					"response": []
				},
				{
					"name": "Insert object confirm ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d61401c-c74e-41ae-a5aa-7716234976bd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert object into table confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].postalcode).to.eql({ \"house\": 30, \"street\": \"South St\"});",
									"    pm.expect(jsonData[0].customerid).to.eql(\"TEST1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"hash_attribute\": \"{{supp_id}}\",\n  \"hash_values\":[\"TEST1\"],\n  \"get_attributes\": [\"postalcode\", \"customerid\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that the array from previous test was inserted into table as expected."
					},
					"response": []
				},
				{
					"name": "Insert array into table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5eeb4040-c193-4470-b2ee-c54b99860598",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert array into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"TEST2\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"postalcode\": [1, 2, 3],\n\t\t\t\"customerid\": \"TEST2\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Insert an array into northnwd.customers table and confirm error"
					},
					"response": []
				},
				{
					"name": "Insert array confirm ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef93a7fd-f2f4-4d40-be98-03e74685b5a1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert array into table confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].postalcode).to.eql([1, 2, 3]);",
									"    pm.expect(jsonData[0].customerid).to.eql(\"TEST2\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"hash_attribute\": \"{{supp_id}}\",\n  \"hash_values\":[\"TEST2\"],\n  \"get_attributes\": [\"postalcode\", \"customerid\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that the array from previous test was inserted into table as expected."
					},
					"response": []
				},
				{
					"name": "Insert value into schema that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e98a3151-eddc-4e9e-af83-c75cd8352b9e",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"insert non existent schema\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Schema 'not_a_schema' does not exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"not_a_schema\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"Harper\",\n\t\t\t\"customerid\": 1\n\t\t}\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert value into table that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8436ed51-865b-4147-bc54-6376a9526142",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"insert non existent table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Table 'not_a_table' does not exist in schema 'northnwd'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"not_a_table\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"Harper\",\n\t\t\t\"customerid\": 1\n\t\t}\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Update value in schema that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a557d8f-cd52-4f73-9a62-2fc2838dd147",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"insert non existent schema\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Schema 'not_a_schema' does not exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"not_a_schema\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"Harper\",\n\t\t\t\"customerid\": 1\n\t\t}\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Update value in table that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d175c937-ec3e-4a45-93f6-aa9afc647590",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"insert non existent table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Table 'not_a_table' does not exist in schema 'northnwd'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"not_a_table\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"Harper\",\n\t\t\t\"customerid\": 1\n\t\t}\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Set attribute to number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5daec0f9-5fcb-4740-8f10-93cb698c85e2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert array into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(25);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\": \"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"firstname\":\"Test for number attribute\",\n    \"4289\" :\"Mutt\",\n    \"employeeid\":25\n  }\n]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Set an attribute to a number."
					},
					"response": []
				},
				{
					"name": "Set attribute to number confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce9931c1-ed98-4a5f-b135-25745a59f297",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"set attribute to number confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    var found = false",
									"    jsonData.attributes.forEach((obj) => {",
									"        if( Object.values(obj)[0] === 4289 ) {",
									"            found = true;",
									"        }",
									"    });",
									"    pm.expect(found).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"schema\":\"{{schema}}\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm number from previous test was successfully set as an attribute in table as expected."
					},
					"response": []
				},
				{
					"name": "Set attribute name greater than 250 bytes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a36e894a-9030-420b-afc8-369dee4513fc",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"attribute too long error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    var longAttribute = \"transaction aborted due to attribute name IIetmyLabradorcomeoutsidewithmewhenIwastakingthebinsoutonemorningIlethimgoforawanderthinkinghewasjustgoingtopeeonthetelegraphpoleattheendofourdrivewaylikehealwaysdoesInsteadhesawhisopportunityandseizeditHekeptwalkingpastthetelegraphpolepasttheborderofour being too long. Attribute names cannot be longer than 250 bytes.\"",
									"    pm.expect(jsonData.error).to.eql(longAttribute);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\": \"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"firstname\":\"Test for number attribute\",\n    \"4289\" :\"Mutt\",\n    \"employeeid\":31,\n    \"IIetmyLabradorcomeoutsidewithmewhenIwastakingthebinsoutonemorningIlethimgoforawanderthinkinghewasjustgoingtopeeonthetelegraphpoleattheendofourdrivewaylikehealwaysdoesInsteadhesawhisopportunityandseizeditHekeptwalkingpastthetelegraphpolepasttheborderofour\":\"a story about a dog\"\n  }\n]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Attribute can not be larger than 250 bytes. Here we try and set attribute to a value greater than 250 bytes and confirm error message."
					},
					"response": []
				},
				{
					"name": "insert valid records into dev.invalid_attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83f93560-248f-4552-a576-3fca9988cf40",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted 2 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('inserted 2');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \"id\" : 100,\n        \"some_attribute\" : \"some_att1\",\n        \"another_attribute\": \"another_1\"\n      },\n      {\n        \"id\" : 101,\n        \"some_attribute\" : \"some_att2\",\n        \"another_attribute\": \"another_2\"\n      }\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "insert records into dev.leading_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8347f866-708b-440c-85db-27a57d379845",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted 3 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('inserted 3');",
									"});",
									"",
									"pm.test(\"inserted hashes\", function () {",
									"    const respMsg = pm.response.json().inserted_hashes;",
									"    pm.expect(respMsg).to.eql([ 0,\"011\", \"00011\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"leading_zero\",\n    \"records\": [\n    \t{\n        \"id\" : 0,\n        \"some_attribute\" : \"some_att1\",\n        \"another_attribute\": \"another_1\"\n      },\n      {\n        \"id\" : \"011\",\n        \"some_attribute\" : \"some_att2\",\n        \"another_attribute\": \"another_2\"\n      },\n      {\n        \"id\" : \"00011\",\n        \"some_attribute\" : \"some_att3\",\n        \"another_attribute\": \"another_3\"\n      }\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "insert test records into dev.rando",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b71a90a-9e1e-4abb-86e1-ab8020d4f5e8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted 4 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('inserted 4');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"rando\",\n    \"records\": [\n    \t{\n        \"id\" : 987654321,\n        \"name\" : \"Cool Dawg\"\n      },\n      {\n        \"id\" : 987654322,\n        \"name\" : \"The Coolest Dawg\"\n      },\n      {\n        \"id\" : 987654323,\n        \"name\" : \"Sup Dawg\"\n      },\n      {\n        \"id\" : 987654324,\n        \"name\" : \"Snoop Dawg\"\n      }\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "test SQL updating with numeric hash in single quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "501184b7-6815-4b1b-a67b-0e35df9f8023",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"updated 2 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('updated 2');",
									"});",
									"",
									"pm.test(\"update_hashes has correct hashes\", function () {",
									"    const updated = pm.response.json().update_hashes;",
									"    pm.expect(updated).to.have.members([987654321, 987654322]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"sql\",\n    \"sql\": \"UPDATE dev.rando set active = true WHERE id IN ('987654321', '987654322')\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "3. SQLTests",
			"item": [
				{
					"name": "Invalid Attribute Check",
					"item": [
						{
							"name": "insert invalid attribute name - single row",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb175c01-44ec-49ef-9ecc-d787c12528a0",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"INSERT INTO dev.invalid_attribute (id, `some/attribute`) VALUES ('1', 'some_attribute')\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update single row w/ invalid attribute name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e7b4de7-97f3-4679-9627-0fea9ab3a130",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"sql\",\n\t\"sql\": \"UPDATE dev.invalid_attribute SET `some/attribute` = 'some attribute' WHERE id = 100\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "insert all invalid attribute names - multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53c0c113-1bff-4e79-8831-9312ab51d125",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"INSERT INTO dev.invalid_attribute (id, `some/attribute1`, `some_/attribute2`, `some_attribute/3`) VALUES ('1', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('2', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('3', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('4', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('5', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('6', 'some_attribute', 'another_attribute', 'some_other_attribute')\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update multiple rows with invalid attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82b7ef32-e747-4c9e-8f5c-33d49fcb6d7c",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"UPDATE dev.invalid_attribute SET `/some_attribute` = 'new_value' WHERE id IN(100, 101)\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "insert some invalid attribute names - multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bbd5249-79f6-4fb9-a354-888bbb6200b5",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"INSERT INTO dev.invalid_attribute (id, some_attribute, another_attribute, `some_/other_attribute`) VALUES ('1', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('2', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('3', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('4', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('5', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('6', 'some_attribute', 'another_attribute', 'some_other_attribute')\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6179ce0-930f-4c5f-b40c-8f2154b7a9f5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3891bdcd-fd1a-4b24-8b31-cc5044bc031c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Response Data Type Check",
					"item": [
						{
							"name": "select by hash no result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc4926aa-475e-4dae-80b6-61c49e9b3a4e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an empty array was returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = 190\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "confirm select with no result returns an empty array"
							},
							"response": []
						},
						{
							"name": "select by hash one result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a017f6a-2ca2-49f0-a5c5-a25e8b3b65f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = 3\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "confirm select with one result returns an array with single object"
							},
							"response": []
						},
						{
							"name": "select by hash multiple results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d323e879-28db-485c-ba0e-8fafe80464e9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with two object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"    pm.expect((typeof jsonData[1])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = 3 OR {{emps_id}} = 5\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "confirm select with multiple results returns an array with multiple objects"
							},
							"response": []
						}
					],
					"description": "Test that response from search is object array ",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Date Function Check",
					"item": [
						{
							"name": "insert initial date function data into table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f5df5bc-9243-4444-bae8-0278443d7737",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL insert successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"inserted 4 of 4 records\");",
											"    pm.expect(jsonData.inserted_hashes[0]).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d9db959-71db-4e76-a661-1a50099a8f76",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"INSERT INTO dev.time_functions (id, c_date, c_time, c_timestamp, getdate, now) VALUES (1, CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP, GETDATE(), NOW()), (2, CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP, GETDATE(), NOW()), (3, CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP, GETDATE(), NOW()), (4, CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP, GETDATE(), NOW())\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check initial date function data in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da0b4117-cd5a-4339-8d16-7c16ad05d185",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 4 rows with correct date/time formats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"    var current_date = new Date().getUTCDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect([1,2,3,4]).to.include(row.id);",
											"        pm.expect(new Date(row.now).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.now.toString().length).to.equal(13);",
											"        pm.expect(new Date(row.getdate).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.getdate.toString().length).to.equal(13);",
											"        pm.expect(row.getdate.toString().length).to.equal(13);",
											"        pm.expect(new Date(row.c_timestamp).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.c_timestamp.toString().length).to.equal(13);",
											"        pm.expect(row.c_timestamp.toString().length).to.equal(13);",
											"        pm.expect(row.c_date).to.match(/\\d{4}-[01]{1}\\d{1}-[0-3]{1}\\d{1}$/);",
											"        pm.expect(row.c_time).to.match(/^[0-2]{1}\\d{1}:[0-6]{1}\\d{1}:[0-6]{1}\\d{1}.\\d{3}$/);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8040af5f-0fec-473e-90dd-46ede9bbca23",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update w/ date function data to null in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91f127dc-2ef3-40d0-a229-281b9811cc1f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 4 of 4 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f3c590f8-bf74-4901-b61a-15ba5f17bc37",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.time_functions SET c_date = null, c_time = null, c_timestamp = null, getdate = null, now = null\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check data set to null in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71b85bce-6d9e-426a-a809-686a517d5b71",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 4 rows with correct date/time formats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"    var current_date = new Date().getDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect([1,2,3,4]).to.include(row.id);",
											"        pm.expect(row.now).to.be.null;",
											"        pm.expect(row.getdate).to.be.null;",
											"        pm.expect(row.c_timestamp).to.be.null;",
											"        pm.expect(row.c_date).to.be.null;",
											"        pm.expect(row.c_time).to.be.null;",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d9a31cbe-054e-413e-8c2e-b07868cb4ece",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update w/ new date function data in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a41a2352-e8c0-460b-8373-4cdcacdfc27e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 4 of 4 records\");",
											"    pm.expect(jsonData.update_hashes.length).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ac2f7bb-1591-4657-8e34-d44e8db26c42",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.time_functions SET c_date = CURRENT_DATE(), c_time = CURRENT_TIME(), c_timestamp = CURRENT_TIMESTAMP, getdate = GETDATE(), now = NOW()\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check data updated to correct date values in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e099aa15-b691-4e4e-8df5-6a72c8c62761",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 4 rows with correct date/time formats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"    var current_date = new Date().getUTCDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect([1,2,3,4]).to.include(row.id);",
											"        pm.expect(new Date(row.now).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.now.toString().length).to.equal(13)",
											"        pm.expect(new Date(row.getdate).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.getdate.toString().length).to.equal(13)",
											"        pm.expect(new Date(row.c_timestamp).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.c_timestamp.toString().length).to.equal(13)",
											"        pm.expect(row.c_date).to.match(/\\d{4}-[01]{1}\\d{1}-[0-3]{1}\\d{1}$/);",
											"        pm.expect(row.c_time).to.match(/^[0-2]{1}\\d{1}:[0-6]{1}\\d{1}:[0-6]{1}\\d{1}.\\d{3}$/);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "665c2777-75a3-40df-9da6-56081620862e",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update w/ other date functions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfc43af3-c618-4575-9891-ad7fac7113ac",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 4 of 4 records\");",
											"    pm.expect(jsonData.update_hashes.length).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a411cdaa-81f5-42b6-a6fb-33c3d493176e",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.time_functions SET today = NOW(), add_day = DATE_ADD(CURRENT_TIMESTAMP, 1, 'days'), sub_3_years = DATE_SUB('2020-4-1', 3, 'years'), server_time = GET_SERVER_TIME(), offset_utc = OFFSET_UTC(NOW(), -6)\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check other date function updates are correct in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b677776-9811-4d7b-bc21-457b52d7240c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 4 rows with correct date/time formats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"    ",
											"    var current_date = new Date();",
											"    var current_day = current_date.getUTCDate();",
											"    var c_date_plus1 = current_date.setUTCDate(current_day + 1);",
											"    var c_day_plus1 = new Date(c_date_plus1).getUTCDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect(row.c_timestamp).to.match(/\\d{13}$/);",
											"        pm.expect(new Date(row.add_day).getUTCDate()).to.equal(c_day_plus1);",
											"        pm.expect(row.add_day).to.match(/\\d{13}$/);",
											"        pm.expect(new Date(row.sub_3_years).getFullYear()).to.equal(2017);",
											"        pm.expect(row.sub_3_years).to.match(/\\d{13}$/);",
											"        pm.expect(new Date(row.today).getUTCDate()).to.equal(current_day);",
											"        pm.expect(row.today).to.match(/\\d{13}$/);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a95418f-e2be-4b30-8d30-cab34fd95afa",
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update w/ other date functions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e133951e-5304-45fb-90ce-b86c7762b01c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 2 of 2 records\");",
											"    pm.expect(jsonData.update_hashes.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1576f9d9-ef85-41d8-ab90-102385fcf744",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.time_functions SET add_day = DATE_ADD(DATE(), 5, 'days'), tomorrow_epoch = DATE_FORMAT(DATE_ADD(NOW(), 1, 'days'), 'x') WHERE id > 2\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "select with date function in WHERE returns correct rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36471ea9-9508-49c3-acf4-7ce728667000",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 2 rows with correct add_day values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    var current_date = new Date().getDate();",
											"    var date_plus_5 = new Date(new Date().setDate(current_date + 5));",
											"    jsonData.forEach(row => {",
											"        pm.expect([3,4]).to.include(row.id);",
											"        pm.expect(new Date(row.add_day).getDate()).to.equal(date_plus_5.getDate());",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e3ba85c-947f-4e22-ac59-6c18fe71fbc9",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions WHERE DATE_DIFF(add_day, c_timestamp, 'days') > 3 AND tomorrow_epoch > NOW()\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "delete with date function in WHERE deletes correct rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f29a595-0e3e-4e84-9893-7650ed02225a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL delete successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"2 of 2 records successfully deleted\");",
											"    pm.expect(jsonData.deleted_hashes.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2042be15-1286-4ebc-b425-ae16ff69c98a",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"DELETE FROM dev.time_functions WHERE DATE_DIFF(add_day, c_timestamp, 'days') < 3\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check that correct rows were deleted based on date function",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d4d25e-f1db-4280-baf1-e3eb5ce87a9b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 2 rows with correct add_day values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    var current_date = new Date().getDate();",
											"    var date_plus_3 = new Date().setDate(current_date + 3);",
											"    jsonData.forEach(row => {",
											"        pm.expect([3,4]).to.include(row.id);",
											"        pm.expect(row.add_day).to.be.above(date_plus_3);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a47d180-1f1c-4255-8df7-780bc0107ff3",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check that DATE(__createdtime__) returns correct value w/ correct alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae39919f-c02a-47a3-b3e5-ad5dc612c3f6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 2 rows with correct DATE values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    var current_date = new Date().getDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect([3,4]).to.include(row.id);",
											"        pm.expect(new Date(row.updatedtime).getDate()).to.eql(current_date);",
											"        pm.expect(new Date(row['DATE(__createdtime__)']).getDate()).to.eql(current_date);",
											"        pm.expect(row.updatedtime).to.match(/\\d{4}-[01]{1}\\d{1}-[0-3]{1}\\d{1}T[0-2]{1}\\d{1}:[0-6]{1}\\d{1}:[0-6]{1}\\d{1}.\\d{3}[+|-][0-1][0-9][0-5][0-9]$/);",
											"        pm.expect(row['DATE(__createdtime__)']).to.match(/\\d{4}-[01]{1}\\d{1}-[0-3]{1}\\d{1}T[0-2]{1}\\d{1}:[0-6]{1}\\d{1}:[0-6]{1}\\d{1}.\\d{3}[+|-][0-1][0-9][0-5][0-9]$/);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae8520d-247b-430c-b10b-7cd1976644a5",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT id, DATE(__createdtime__), DATE(__updatedtime__) as updatedtime FROM dev.time_functions WHERE id = 3 OR id = 4\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SEARCH_JSON calls",
					"item": [
						{
							"name": "count movies where movie.keyword starts with super",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f40da24e-5213-4a10-bba6-09cf84225744",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select verify count is 161\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect(jsonData[0].count).to.eql(161);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d85f7061-ae29-4f90-bd02-e114cdaef48f",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT count(*) AS `count` from dev.movie where search_json('$[$substring(name,0, 5) = \\\"super\\\"].name', keywords) is not null\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "return array of just movie keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70c590b3-4b67-48e2-9fae-61ab853940f5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select verify keywords\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    jsonData.forEach(data=>{",
											"        pm.expect(Array.isArray(data.keywords)).to.eql(true);",
											"        pm.expect(typeof data.keywords[0] === 'string').to.eql(true);",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5fd0060-8c3b-4a48-9c7f-aec91cd22b59",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT title, search_json('name', keywords) as keywords from dev.movie where title Like '%Avengers%'\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "filter on credits.cast with join to movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67613288-d93b-406d-8043-d02ea3532264",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select verify movie titles\", function () {",
											"    let titles = [",
											"  \"Out of Sight\",",
											"  \"Iron Man\",",
											"  \"Captain America: The First Avenger\",",
											"  \"In Good Company\",",
											"  \"Zodiac\",",
											"  \"The Spirit\",",
											"  \"S.W.A.T.\",",
											"  \"Iron Man 2\",",
											"  \"Thor\",",
											"  \"The Avengers\",",
											"  \"Iron Man 3\",",
											"  \"Thor: The Dark World\",",
											"  \"Avengers: Age of Ultron\",",
											"  \"Captain America: The Winter Soldier\",",
											"  \"Captain America: Civil War\"",
											"];",
											"    ",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(data=>{",
											"        pm.expect(titles.indexOf(data.title)).to.be.gt(-1);",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2926e125-394b-4e4b-b753-6e17863e581a",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT m.title, m.overview, m.release_date, search_json('$[name in [\\\"Robert Downey Jr.\\\", \\\"Chris Evans\\\", \\\"Scarlett Johansson\\\", \\\"Mark Ruffalo\\\", \\\"Chris Hemsworth\\\", \\\"Jeremy Renner\\\", \\\"Clark Gregg\\\", \\\"Samuel L. Jackson\\\", \\\"Gwyneth Paltrow\\\", \\\"Don Cheadle\\\"]].{\\\"actor\\\": name, \\\"character\\\": character}', c.`cast`) as characters from dev.credits c inner join dev.movie m on c.movie_id = m.id where search_json('$count($[name in [\\\"Robert Downey Jr.\\\", \\\"Chris Evans\\\", \\\"Scarlett Johansson\\\", \\\"Mark Ruffalo\\\", \\\"Chris Hemsworth\\\", \\\"Jeremy Renner\\\", \\\"Clark Gregg\\\", \\\"Samuel L. Jackson\\\", \\\"Gwyneth Paltrow\\\", \\\"Don Cheadle\\\"]])', c.`cast`) >= 2\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a731b75-f68b-4477-8f49-e08ceb209244",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2625c700-e98a-4ce9-a896-95b25cab5fe7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SQL INSERT/UPDATE with Expressions & Functions",
					"item": [
						{
							"name": "insert values into table dev.sql_function",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2f7594d-35fe-4215-ba7c-03c685156a17",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL insert successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"inserted 2 of 2 records\");",
											"    pm.expect(jsonData.inserted_hashes[0]).to.eql(1);",
											"    pm.expect(jsonData.inserted_hashes[1]).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6b592934-d2f6-45c7-9649-90a12b7ef8ce",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"INSERT INTO dev.sql_function (id, rando, week_day) VALUES (1, FLOOR(RANDOM() * (10 - 1)) + 1, date_format(NOW(), 'dddd')), (2, FLOOR(RANDOM() * (10 - 1)) + 1, date_format(NOW(), 'dddd'))\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "SELECT inserted values FROM dev.sql_function",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "def45c90-f927-4fbd-a63b-daab3497a189",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"validate select results\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"    jsonData.forEach(record => {",
											"        pm.expect(typeof record.week_day).to.eql(\"string\");",
											"        pm.expect(typeof record.rando).to.eql(\"number\");",
											"        pm.expect(record.rando >= 1 && record.rando <= 10).to.eql(true);",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7592b72-d6e3-42f2-a13c-b9058ff5aee6",
										"exec": [
											"setTimeout(() => { }, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.sql_function\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update values into table dev.sql_function",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4902e9ee-da3d-4b20-ac23-ae80b846f095",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL insert successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 2 of 2 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
											"    pm.expect(jsonData.update_hashes[1]).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fcf529f4-e0e5-495b-a848-550706cf62cd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.sql_function SET rando = rando * 10, upper_week_day = UPPER(week_day)\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "SELECT updated values FROM dev.sql_function",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d7f78c0-cef5-4ed3-bf2e-82250a87926e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"validate select results length\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    ",
											"});",
											"",
											"pm.test(\"validate rando\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].rando >= 10 && jsonData[0].rando <= 100).to.eql(true);",
											"    pm.expect(jsonData[1].rando >= 10 && jsonData[1].rando <= 100).to.eql(true);",
											"});",
											"",
											"pm.test(\"validate upper_week_day\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].upper_week_day === jsonData[0].week_day.toUpperCase()).to.eql(true);",
											"    pm.expect(jsonData[1].upper_week_day === jsonData[1].week_day.toUpperCase()).to.eql(true);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90ac82cf-02c6-4468-8891-99deb5806b88",
										"exec": [
											"setTimeout(() => { }, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.sql_function\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update value in table for non-existent row",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "465a13b3-ed22-4422-a8d3-a376ea652def",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update reponse message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 0 of 0 records\");",
											"    pm.expect(jsonData.skipped_hashes).to.eql([]);",
											"    pm.expect(jsonData.update_hashes).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ae80d81-33eb-4f73-bf0a-1acb260cce09",
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE northnwd.customers SET companyname = 'Google' WHERE customerid = -100\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Update a value in a table and test for success message"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d777a555-5f8c-41bf-9693-5d34d3e91fb6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89cb3c11-c6fa-4ac7-b9f6-26ce21e16b34",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "insert value into table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64bee1fc-b668-4aeb-a889-fb29b42a5710",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"TEST3\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e797f2b1-db24-472b-b2a5-fe36c081e2af",
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"INSERT INTO northnwd.customers (customerid, postalcode, companyname) VALUES ('TEST3', '11385', 'Microsoft')\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "insert value into table confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0d4d6ff-c46c-4fa4-8c65-ac27d71fcccc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert value exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].customerid).to.eql(\"TEST3\");",
									"    pm.expect(jsonData[0].postalcode).to.eql(11385);",
									"    pm.expect(jsonData[0].companyname).to.eql(\"Microsoft\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a28bf950-b85d-425a-836d-67389e66b64b",
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT customerid, postalcode, companyname FROM northnwd.customers WHERE customerid = 'TEST3'\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm inserted value exists in table."
					},
					"response": []
				},
				{
					"name": "update value in table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "221253b4-958b-4b82-8d10-23579864460a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL update successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(\"TEST3\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e10c9bd0-b3c1-4248-bc28-6a60989d5f90",
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE northnwd.customers SET companyname = 'Google' WHERE customerid = 'TEST3'\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update a value in a table and test for success message"
					},
					"response": []
				},
				{
					"name": "update value in table confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78248e93-7cb1-4b5d-a20c-4af6aa2c6e5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert value exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].customerid).to.eql(\"TEST3\");",
									"    pm.expect(jsonData[0].postalcode).to.eql(11385);",
									"    pm.expect(jsonData[0].companyname).to.eql(\"Google\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2823a924-4f07-4f8f-8161-c5d460b354e7",
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT customerid, postalcode, companyname FROM northnwd.customers WHERE customerid = 'TEST3'\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm updated value exists in table."
					},
					"response": []
				},
				{
					"name": "delete value from table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f221518-24e1-40ff-8072-c9cce6b3f739",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL delete successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"successfully deleted\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "86c719db-608e-44b4-be02-37b417e923b0",
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"DELETE FROM northnwd.customers WHERE customerid = 'TEST3'\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Using SQL, delete a value and confirm success response"
					},
					"response": []
				},
				{
					"name": "delete value from table confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52058cdb-9fc5-4148-ac71-474485d5cb6e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL delete value does not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f4200246-acdb-4165-bae8-17899898d586",
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT customerid, postalcode, companyname FROM northnwd.customers WHERE companyname = 'Microsoft'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm deleted value does not exist in table."
					},
					"response": []
				},
				{
					"name": "select by hash as string multiple results",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18658a49-f48c-4ffc-ad56-b1dec9620225",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"verify an array with two object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
									"    pm.expect((typeof jsonData[1])).to.eql(\"object\");",
									"});",
									"",
									"pm.test(\"verify an array with correct objects\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"    pm.expect(jsonData[0].employeeid).to.eql(3);",
									"    pm.expect(jsonData[1].employeeid).to.eql(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = '3' OR {{emps_id}} = '5' ORDER BY {{emps_id}}\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where in numeric values as strings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed5f6913-07ff-487f-82a6-eed9aab4bb2a",
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test rows have correct id\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((row, i) => {",
									"        pm.expect(row.id).to.eql(i + 1);    ",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE id IN('1','2','3') ORDER BY id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where between",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1277ec9-f008-41d9-82a6-c9c4037246b0",
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test rows have correct id\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((row, i) => {",
									"        pm.expect(row.id).to.eql(i + 1);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE id BETWEEN 1 AND 3 ORDER BY id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where not between",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61c88cdb-008e-493e-a135-205235dd51fd",
								"exec": [
									"pm.test(\"test 47 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(47);",
									"});",
									"",
									"pm.test(\"test rows have correct id\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((row, i) => {",
									"        pm.expect(row.id).to.be.above(3);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE id NOT BETWEEN 1 AND 3 ORDER BY id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where value equals \"0\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8dd9d7e-aaf6-4f51-8fce-1a9814b23068",
								"exec": [
									"pm.test(\"test 15 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"test rows have books_count = 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.books_count).to.eql(0);    ",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE books_count = '0' \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where value equals \"false\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30794343-e1d0-4e98-b2b7-db0a0debdfe8",
								"exec": [
									"pm.test(\"test 25 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(25);",
									"});",
									"",
									"pm.test(\"test rows have nytimes_best_seller = false\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.nytimes_best_seller).to.eql(false);    ",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE nytimes_best_seller = 'false' \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select employees orderby id asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b474ac63-8e08-4029-bf9a-a7f9a95d4f90",
								"exec": [
									"pm.test(\"test employeeid order is asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(10);",
									"    pm.expect(jsonData[0].employeeid).to.eql(1);",
									"    pm.expect(jsonData[1].employeeid).to.eql(2);",
									"    pm.expect(jsonData[8].employeeid).to.eql(9);",
									"    pm.expect(jsonData[9].employeeid).to.eql(25);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{emps_id}}, * from {{schema}}.{{emps_tb}} order by {{emps_id}} asc \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select 2 + 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6ca6c3c-187a-456c-b3f8-69ecdb20986f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test calculator\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0][\"2 + 2\"]).to.eql(4);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select 2 + 2 \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * FROM orders - test no schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8639cd9-aa0e-42ce-a741-7b9f68f1dfd6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test select table no schema\", function () {",
									"    pm.response.to.have.status(500);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql('schema not defined for table orders');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM orders\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * from call.aggr - reserved words",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dbfdabc-4fb5-4a88-8602-4f5a17455845",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test bad response\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from call.aggr\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * from `call`.`aggr` - reserved words",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90f030a4-6800-4f7e-91e2-817214c864f4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test good response\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].all).to.eql(11);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select age AS `alter`, * from `call`.`aggr` as `and` WHERE `all` > 3 ORDER BY `and`.`all` desc\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * from call.aggr where id = 11 - select dot & double dot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21ee1819-0f5b-472a-aaa9-799747baf534",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test good response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 object in array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test owner_name is .. and dog_name is .\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].owner_name).to.eql(\"..\");",
									"    pm.expect(jsonData[0].dog_name).to.eql(\".\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from `call`.`aggr` where `all` = 11\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select orders orderby id desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id desc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].orderid).to.eql(11077);",
									"});"
								],
								"id": "737bc3f6-3500-45c6-beb1-19602a780329"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{ords_id}}, * from {{schema}}.{{ords_tb}} order by {{ords_id}} desc \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select count(*) orders where shipregion is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05ba27d6-7e7e-4a3a-a247-bf18b92e0a64",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order where shipregion is null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].count).to.eql(414);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select count(*) as `count` from {{schema}}.{{ords_tb}} where shipregion IS NULL\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select count(*) orders where shipregion is not null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78d9d932-d893-4089-8a59-cbf7f813717a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order where shipregion is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].count).to.eql(416);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select count(*) AS `count` from {{schema}}.{{ords_tb}} where shipregion is not null\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select most buyer orderby price asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c76e53d-fc9c-4c7d-85d3-10632e7ebaa5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql test most buyer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].companyname).to.eql(\"Berglunds snabbk\\ufffdp\");",
									"    pm.expect(jsonData[1].companyname).to.eql(\"Great Lakes Food Market\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{ords_id}}, a.productid, d.companyname, d.contactmame, b.productname, sum(a.unitprice) as unitprice, sum(a.quantity), sum(a.discount) from {{schema}}.{{ordd_tb}} a join {{schema}}.{{prod_tb}} b on a.{{prod_id}}=b.{{prod_id}} join {{schema}}.{{ords_tb}} c on a.{{ords_id}}=c.{{ords_id}} join {{schema}}.{{cust_tb}} d on c.{{cust_id}}=d.{{cust_id}} group by a.{{ords_id}}, a.productid, d.companyname, d.contactmame, b.productname order by unitprice desc, d.companyname \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select most buyer orderby price asc & companyname alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a0628e6-b7be-4db9-91d5-9331d1f78f64",
								"exec": [
									"pm.test(\"sql test most buyer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].compname).to.eql(\"Berglunds snabbk\\ufffdp\");",
									"    pm.expect(jsonData[1].compname).to.eql(\"Great Lakes Food Market\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{ords_id}}, a.productid, d.companyname as compname, d.contactmame, b.productname, sum(a.unitprice) as unitprice, sum(a.quantity), sum(a.discount) from {{schema}}.{{ordd_tb}} a join {{schema}}.{{prod_tb}} b on a.{{prod_id}}=b.{{prod_id}} join {{schema}}.{{ords_tb}} c on a.{{ords_id}}=c.{{ords_id}} join {{schema}}.{{cust_tb}} d on c.{{cust_id}}=d.{{cust_id}} group by a.{{ords_id}}, a.productid, d.companyname, d.contactmame, b.productname order by unitprice desc, compname \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select most buyer orderby order_id asc & product_id desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a77ec1e-d412-4931-bd6d-2db6d367f94f",
								"exec": [
									"pm.test(\"sql test lowest order id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].ords_id).to.eql(10248);",
									"    pm.expect(jsonData[1].ords_id).to.eql(10248);",
									"    pm.expect(jsonData[19].ords_id).to.eql(10254);",
									"    pm.expect(jsonData[0].companyname).to.eql(\"Vins et alcools Chevalier\");",
									"    pm.expect(jsonData[19].companyname).to.eql(\"Chop-suey Chinese\");",
									"});",
									"",
									"pm.test(\"sql test highest product id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productid).to.eql(72);",
									"    pm.expect(jsonData[1].productid).to.eql(42);",
									"    pm.expect(jsonData[19].productid).to.eql(24);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{ords_id}} as ords_id, a.productid, d.companyname as companyname, d.contactmame, b.productname, sum(a.unitprice) as unitprice, sum(a.quantity), sum(a.discount) from {{schema}}.{{ordd_tb}} a join {{schema}}.{{prod_tb}} b on a.{{prod_id}}=b.{{prod_id}} join {{schema}}.{{ords_tb}} c on a.{{ords_id}}=c.{{ords_id}} join {{schema}}.{{cust_tb}} d on c.{{cust_id}}=d.{{cust_id}} group by a.{{ords_id}}, a.productid, d.companyname, d.contactmame, b.productname order by ords_id, a.productid desc\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select product orderby id asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productid).to.eql(1);",
									"});"
								],
								"id": "5b31459d-d27f-46ac-a8c4-aff3da85f3a9"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{prod_id}}, * from {{schema}}.{{prod_tb}} order by {{prod_id}} asc \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select customers orderby id asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].customerid).to.eql(\"ALFKI\");",
									"});"
								],
								"id": "d68ed2ea-5b91-4ba1-aeba-d9b4b4432370"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{cust_id}}, * from {{schema}}.{{cust_tb}} order by {{cust_id}} asc \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select all details join 5 table where customername",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql join 5 table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].customerid).to.eql(\"ALFKI\");",
									"});"
								],
								"id": "fdb44192-c7b8-4ad8-9694-993bb78f70c6"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{cust_id}}, a.companyname, a.contactmame, b.{{ords_id}}, b.shipname, d.productid, d.productname, d.unitprice, c.quantity, c.discount, e.employeeid, e.firstname, e.lastname from {{schema}}.{{cust_tb}} a join {{schema}}.{{ords_tb}} b on a.{{cust_id}}=b.{{cust_id}} join {{schema}}.{{ordd_tb}} c on b.{{ordd_id}}=c.{{ordd_id}} join {{schema}}.{{prod_tb}} d on c.{{prod_id}}=d.{{prod_id}} join {{schema}}.{{emps_tb}} e on b.{{emps_id}}=e.{{emps_id}}  where a.companyname='Alfreds Futterkiste' \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select order details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								],
								"id": "9007f267-09d3-448f-831c-93173883c904"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id desc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].orderid).to.eql(10248);",
									"});"
								],
								"id": "718ea8fe-8628-4d0c-a619-cbe3983a3805"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{ordd_id}}, productid, unitprice,quantity, discount from {{schema}}.{{ordd_tb}} order by {{ordd_id}} asc\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select count groupby country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								],
								"id": "0d0155cf-fc9f-49bf-a926-1514237cd44c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id desc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].country).to.eql('USA');",
									"});",
									""
								],
								"id": "d3765068-332a-4b3f-a552-534cf72451bd"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select count({{cust_id}}) as counter,country from {{schema}}.{{cust_tb}} group by country order by counter desc\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select most have the extension employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select count group by last_name order by age asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].firstname).to.eql(\"Nancy\")",
									"});"
								],
								"id": "d0a803cf-9e3f-46de-bcce-d75079d52448"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select extension,* from {{schema}}.{{emps_tb}} order by extension desc\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select top 10 most price of product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select count where age > 30 group by last_name order by age asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productname) ===\"C\\ufffdte de Blaye\";",
									"});"
								],
								"id": "6c47f0d1-b015-4eb0-aa5e-49fb7235b3b9"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select categoryid,productname,quantityperunit,unitprice,* from {{schema}}.{{prod_tb}}  order by unitprice desc limit 10 \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select count min max avg sum price of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select count min max avg sum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].allproducts)===77;",
									"});"
								],
								"id": "c87dd11e-cf1f-4d62-8024-0412f711249d"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select count(unitprice) as allproducts, min(unitprice) as minprice, max(unitprice) as maxprice, avg(unitprice) as avgprice, sum(unitprice) as sumprice from {{schema}}.{{prod_tb}} \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select round unit price using alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6114a38b-13c8-49f0-a7f3-169ede17f44f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    var objKeysData = Object.keys(jsonData[0]);",
									"    pm.expect(objKeysData[0]).to.eql('Price');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT ROUND(unitprice) AS Price FROM {{schema}}.{{prod_tb}} GROUP BY ROUND(unitprice)\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select where (like)and(<=>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select where (like) and (unitprice>100)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].unitprice)>100;",
									"});"
								],
								"id": "eca86b60-52fd-4f96-ba41-767410701b9e"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where (productname like 'T%') and (unitprice>100) \"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr < comparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48d64db5-5306-411d-8aae-e8c9a5f1cb11",
								"exec": [
									"pm.test(\"sql select - where attr < comparator\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice)<81;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice < 81\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr <= comparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7d9ba37-a72a-449e-820f-0ac6de9becdb",
								"exec": [
									"pm.test(\"sql select - where attr <= comparator\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice)<=81;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice <= 81\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr > comparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a140eca8-b376-4418-8559-30b39efc4368",
								"exec": [
									"pm.test(\"sql select - where attr > comparator\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice) > 81;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 81\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr >= comparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f08b9fda-fbd9-479b-b85a-77820bff7e21",
								"exec": [
									"pm.test(\"sql select - where attr >= comparator\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice) >= 81;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice >= 81\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr w/ multiple comparators",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec69096d-7608-4072-b40e-f18a6086662b",
								"exec": [
									"pm.test(\"sql select - where attr w/ multiple comparators\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice) > 20;",
									"        pm.expect(record.unitprice) <= 81;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 20 AND unitprice <= 81\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where w/ multiple attr comparators",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1989d67c-9443-4b2d-aadc-e1fbae786f9a",
								"exec": [
									"pm.test(\"sql select - where w/ multiple attr comparators\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice) > 10;",
									"        pm.expect(record.unitprice) <= 81;",
									"        pm.expect(record.unitsinstock).to.eql(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 10 AND unitprice <=81 AND unitsinstock = 0\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where w/ multiple comparators for multiple attrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a15b451-4690-4b07-b85e-429eae4098c8",
								"exec": [
									"pm.test(\"sql select - where w/ multiple comparators for multiple attrs\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice) > 10;",
									"        pm.expect(record.unitprice) <= 81;",
									"        pm.expect(record.unitsinstock) > 10;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 10 AND unitprice <=81 AND unitsinstock > 10\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where w/ IN() and multiple of comparators for multiple attrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74de99c5-c48d-4ea8-86d8-bb434110ada7",
								"exec": [
									"pm.test(\"sql select - where w/ IN() and multiple of comparators for multiple attrs\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice) > 10;",
									"        pm.expect(record.unitprice) <= 81;",
									"        pm.expect(record.unitsinstock) > 10;",
									"        pm.expect(record.supplierid).to.be.oneOf([1,2,3,4]);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 10 AND unitprice <=81 AND unitsinstock > 10 AND supplierid IN(1,2,3,4)\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update SQL employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"id": "db1b27b9-d486-4aae-a7b7-02dbe405c6e1"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update {{schema}}.{{emps_tb}} set address = 'abc1234' where {{emps_id}} = 1\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select verify SQL update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"verify SQL update worked\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].address).to.eql('abc1234');",
									"});"
								],
								"id": "e3c60dfe-9d2b-4c1a-bdba-060a39cc877a"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select address from {{schema}}.{{emps_tb}} where {{emps_id}} = 1\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.long_text",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6afe4119-39ee-4df4-96cb-feb1b8dfbad2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test all 25 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(25);",
									"});",
									"",
									"pm.test(\"test all remarks greater than 255 characters\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.remarks.length).to.gt(255);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.long_text\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.long_text regexp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d3cdf6f-e6ce-4b1d-a33e-69a085ed319a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test all remarks contain word dock\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.remarks.indexOf('dock')).to.gte(0);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.long_text where remarks regexp 'dock'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update employee with falsey data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efb159c8-3dda-4ff5-9e30-a4176d7333bf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"address is false and hireDate is 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"UPDATE {{schema}}.{{emps_tb}} SET address = false, hireDate = 0, notes = null, birthdate = undefined WHERE {{emps_id}} = 1\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes to false/0/null/undefined to validate values are stored correctly."
					},
					"response": []
				},
				{
					"name": "select employee to confirm falsey update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "935b5e84-7241-4aa6-b4b6-f9da85d5e821",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"address is false and hireDate is 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].address).to.be.false;",
									"    pm.expect(jsonData[0].hireDate).to.eql(0);",
									"});",
									"",
									"pm.test(\"notes and birthdate do not exist afting being set to null and undefined\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.have.property('notes');",
									"    pm.expect(jsonData).to.not.have.property('birthdate');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = 1\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "setup for next test - insert array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c78fd5c9-df9c-4c27-994b-0a42aa8119a0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert array into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"arrayTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"array\":  [\"arr1\",\"arr2\",\"arr3\"],\n\t\t\t\"customerid\": \"arrayTest\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Inserting an array into table with NoSQL as it is needed for following test."
					},
					"response": []
				},
				{
					"name": "select array from table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a75fee6-02c4-4766-9c8d-e50e93ebabe4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"select array from table with SQL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].array).to.eql([\"arr1\",\"arr2\",\"arr3\"]);",
									"    pm.expect(jsonData[0].customerid).to.eql(\"arrayTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{cust_tb}} where {{cust_id}} = 'arrayTest'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Retrieve array from table"
					},
					"response": []
				},
				{
					"name": "setup for next test - insert object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b31c81ed-3146-4098-a32b-393634cb1fea",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert object into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"objTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"object\": {\"red\": \"1\", \"white\": \"2\", \"blue\": \"3\"},\n\t\t\t\"customerid\": \"objTest\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Inserting an object into table with NoSQL as it is needed for following test."
					},
					"response": []
				},
				{
					"name": "select object from table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f70b5c64-8b65-4b36-9487-c7cccb406380",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"select object from table with SQL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].object).to.eql({\"red\": \"1\", \"white\": \"2\", \"blue\": \"3\"});",
									"    pm.expect(jsonData[0].customerid).to.eql(\"objTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{cust_tb}} where {{cust_id}} = 'objTest'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Retrieve object from table"
					},
					"response": []
				},
				{
					"name": "select without sql parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a09f02c7-19fc-4863-8fb0-305fdd0211c9",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"that error message is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"sql parameter is missing\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"slq\":\"select * from {{schema}}.{{cust_tb}}\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "check that correct error is returned when query is sent without sql parameter "
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a132875a-311e-4893-974e-194d024779db",
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test all remarks contain '4 Bedroom/2.5+ bath'\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('4 Bedroom/2.5+ bath')).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like '%4 Bedroom/2.5+ bath%'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64be15ec-bda6-494f-be0f-4c4e8f2918cb",
								"exec": [
									"pm.test(\"test 2 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test all remarks contain provided text\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.')).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like 'This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.%'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc41292a-a47d-43d5-b021-10c7a57c76f9",
								"exec": [
									"pm.test(\"test 2 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test all remarks contain provided text\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:')).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like '%...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:%'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c6f6d65-d4be-445e-abff-aa862fc0d7a2",
								"exec": [
									"pm.test(\"test 1 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test all remarks contain provided text\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.')).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like '**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adb74373-aa33-4f32-8a3f-d00578319348",
								"exec": [
									"pm.test(\"test 11 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(11);",
									"});",
									"",
									"pm.test(\"test all remarks contain 3 attribute values\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like '%'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * FROM {{schema}}.{{ords_tb}} LIMIT 100 OFFSET 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84a2f308-72f1-414a-b70b-1c742fca1793",
								"exec": [
									"pm.test(\"test 100 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(100);",
									"});",
									"",
									"pm.test(\"test first & last orderids\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].orderid).to.eql(10248);",
									"    pm.expect(jsonData[99].orderid).to.eql(10347);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM {{schema}}.{{ords_tb}} LIMIT 100 OFFSET 0\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * FROM {{schema}}.{{ords_tb}} LIMIT 100 OFFSET 0 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abd02c02-8efd-46d0-b3e3-3bad8d20578f",
								"exec": [
									"pm.test(\"test 100 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(100);",
									"});",
									"",
									"pm.test(\"test first & last orderids\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].orderid).to.eql(10348);",
									"    pm.expect(jsonData[99].orderid).to.eql(10447);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM {{schema}}.{{ords_tb}} LIMIT 100 OFFSET 100\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select AVE(rating) w/ join, group by and order by (1 of 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1626e6c8-8176-42db-86b6-e5ae7c6da974",
								"exec": [
									"pm.test(\"test 26 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(26);",
									"});",
									"",
									"pm.test(\"test ratings listed in correct order\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].rating).to.eql(4.46);",
									"    pm.expect(jsonData[1].rating).to.eql(4.42);",
									"    pm.expect(jsonData[25].rating).to.eql(2.77);",
									"});",
									"",
									"pm.test(\"test authors listed in correct order\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].authors).to.eql(\"J.K. Rowling, Mary GrandPré, Rufus Beck\");",
									"    pm.expect(jsonData[1].authors).to.eql(\"Gabriel García Márquez, Gregory Rabassa\");",
									"    pm.expect(jsonData[25].authors).to.eql(\"Henry James, Patricia Crick\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.authors as authors, AVG(r.rating) as rating from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.authors order by rating desc\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select AVE(rating) w/ join, group by and order by (2 of 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "878b5abb-003f-45d4-8e34-24c4fc166492",
								"exec": [
									"pm.test(\"test 50 records returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(50);",
									"});",
									"",
									"pm.test(\"test first & last ids in correct order\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(1);",
									"    pm.expect(jsonData[49].id).to.eql(50);",
									"});",
									"",
									"pm.test(\"random tests for correct values in correct order\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[5].id).to.eql(6);",
									"    pm.expect(jsonData[5].authors).to.eql(\"J.K. Rowling, Mary GrandPré\");",
									"    pm.expect(jsonData[5][`AVG(r.rating)`]).to.eql(4.09);",
									"    pm.expect(jsonData[21].id).to.eql(22);",
									"    pm.expect(jsonData[21].authors).to.eql(\"Edward P. Jones\");",
									"    pm.expect(jsonData[21][`AVG(r.rating)`]).to.eql(3.73);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.id, b.authors as authors, AVG(r.rating) from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.authors, b.id order by b.id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select AVE(rating) w/ join and group by (1 of 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1943b9c-d60a-4234-993e-bc051f02b8db",
								"exec": [
									"pm.test(\"test 50 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(50);",
									"});",
									"",
									"pm.test(\"test first & last row objects for 3 key/values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData[0]).length).to.eql(3);",
									"    pm.expect(Object.keys(jsonData[49]).length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.id, b.authors as authors, AVG(r.rating) from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.authors, b.id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select AVE(rating) w/ join, gb, ob, and LIMIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a91ec415-3f50-44f2-8348-d1272bc18490",
								"exec": [
									"pm.test(\"test 10 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"test first & last ids\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(1);",
									"    pm.expect(jsonData[9].id).to.eql(10);",
									"});",
									"",
									"pm.test(\"test for 3 values in row\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData[0]).length).to.eql(3);",
									"    pm.expect(Object.keys(jsonData[8]).length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.id as id, b.authors as authors, AVG(r.rating) as rating from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.id, b.authors order by id limit 10\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select COUNT(rating) w/ join, gb, ob, limit, and OFFSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb410255-f15d-47d6-b367-7e01e67e9fd7",
								"exec": [
									"pm.test(\"test 15 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(15);",
									"});",
									"",
									"pm.test(\"test first & last authors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].authors).to.eql(\"Frank Herbert\");",
									"    pm.expect(jsonData[14].authors).to.eql(\"Marguerite Duras, Barbara Bray, Maxine Hong Kingston\");",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[9].authors).to.eql(\"J.K. Rowling, Mary GrandPré\");",
									"    pm.expect(jsonData[0].rating_count).to.eql(400);",
									"    pm.expect(jsonData[11].rating_count).to.eql(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.authors as authors, COUNT(r.rating) as rating_count from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.authors order by b.authors limit 15 offset 5\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ function alias in ORDER BY and LIMIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65909387-7b42-4a52-9d79-62c1240e6c34",
								"exec": [
									"pm.test(\"test 15 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(25);",
									"});",
									"",
									"pm.test(\"test first & last ords_id and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].ords_id).to.eql(10518);",
									"    pm.expect(jsonData[0].unitprice).to.eql(264);",
									"    pm.expect(jsonData[24].ords_id).to.eql(10510);",
									"    pm.expect(jsonData[24].unitprice).to.eql(124);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[15].unitprice).to.eql(264);",
									"    pm.expect(jsonData[16].unitprice).to.eql(211);",
									"    pm.expect(jsonData[20].unitprice).to.eql(211);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{ords_id}} as ords_id, a.productid, d.companyname as companyname, d.contactmame, b.productname, ROUND(a.unitprice) as unitprice from {{schema}}.{{ordd_tb}} a join {{schema}}.{{prod_tb}} b on a.{{prod_id}}=b.{{prod_id}} join {{schema}}.{{ords_tb}} c on a.{{ords_id}}=c.{{ords_id}} join {{schema}}.{{cust_tb}} d on c.{{cust_id}}=d.{{cust_id}} order by unitprice DESC LIMIT 25\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ inconsistent table refs & ORDER BY column not in SELECT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a29db94f-7bd0-4d34-b030-b06c14b8c924",
								"exec": [
									"pm.test(\"test 2155 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2155);",
									"});",
									"",
									"pm.test(\"test first, second, forth productid and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productid).to.eql(2);",
									"    pm.expect(jsonData[0].unitprice).to.eql(19);",
									"    pm.expect(jsonData[1].productid).to.eql(3);",
									"    pm.expect(jsonData[1].unitprice).to.eql(10);",
									"    pm.expect(jsonData[3].productid).to.eql(6);",
									"    pm.expect(jsonData[3].unitprice).to.eql(25);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[15].unitprice).to.eql(9.65);",
									"    pm.expect(jsonData[996].unitprice).to.eql(18);",
									"    pm.expect(jsonData[1255].unitprice).to.eql(9.5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT a.productid, a.unitprice as unitprice FROM {{schema}}.{{ordd_tb}} a ORDER BY a.{{ords_id}} DESC\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ inconsistent table refs, ORDER BY column not in SELECT & LIMIT/OFFSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60189a60-beeb-43a1-aa42-c5e83152617c",
								"exec": [
									"pm.test(\"test 250 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(250);",
									"});",
									"",
									"pm.test(\"test first, second, forth productid and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productid).to.eql(8);",
									"    pm.expect(jsonData[0].unitprice).to.eql(40);",
									"    pm.expect(jsonData[1].productid).to.eql(10);",
									"    pm.expect(jsonData[1].unitprice).to.eql(31);",
									"    pm.expect(jsonData[5].productid).to.eql(16);",
									"    pm.expect(jsonData[5].unitprice).to.eql(17.45);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[10].unitprice).to.eql(9.65);",
									"    pm.expect(jsonData[216].unitprice).to.eql(7.75);",
									"    pm.expect(jsonData[249].unitprice).to.eql(17.45);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT productid, a.unitprice as unitprice FROM {{schema}}.{{ordd_tb}} a ORDER BY {{ords_id}} DESC LIMIT 250 OFFSET 5\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ inconsistent table refs & second ORDER BY column not included in SELECT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "667b3761-6a9d-4f19-b93e-66e8c62ca257",
								"exec": [
									"pm.test(\"test 2155 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2155);",
									"});",
									"",
									"pm.test(\"test first, second, forth ords_id and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].ords_id).to.eql(11077);",
									"    pm.expect(jsonData[0].unitprice).to.eql(13);",
									"    pm.expect(jsonData[1].ords_id).to.eql(11068);",
									"    pm.expect(jsonData[1].unitprice).to.eql(13);",
									"    pm.expect(jsonData[3].ords_id).to.eql(11015);",
									"    pm.expect(jsonData[3].unitprice).to.eql(13);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[15].unitprice).to.eql(13);",
									"    pm.expect(jsonData[996].unitprice).to.eql(46);",
									"    pm.expect(jsonData[1255].unitprice).to.eql(14.4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT a.{{ords_id}} as ords_id, a.unitprice as unitprice FROM {{schema}}.{{ordd_tb}} a ORDER BY productid DESC, a.{{ords_id}} DESC\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ inconsistent table refs, second ORDER BY column not included in SELECT & LIMIT/OFFSETS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "168c5130-f5f0-41d1-afd0-eb9573e139e5",
								"exec": [
									"pm.test(\"test 205 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(205);",
									"});",
									"",
									"pm.test(\"test first, second, forth ords_id and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].ords_id).to.eql(10808);",
									"    pm.expect(jsonData[0].unitprice).to.eql(18);",
									"    pm.expect(jsonData[1].ords_id).to.eql(10749);",
									"    pm.expect(jsonData[1].unitprice).to.eql(18);",
									"    pm.expect(jsonData[3].ords_id).to.eql(10732);",
									"    pm.expect(jsonData[3].unitprice).to.eql(18);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[16].unitprice).to.eql(14.4);",
									"    pm.expect(jsonData[66].unitprice).to.eql(6.2);",
									"    pm.expect(jsonData[204].unitprice).to.eql(15);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT a.{{ords_id}} as ords_id, a.unitprice as unitprice FROM {{schema}}.{{ordd_tb}} a ORDER BY productid DESC, a.{{ords_id}} DESC LIMIT 205 OFFSET 50\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select * on 3 table INNER JOIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d0e98f0-d1f6-4d33-80e5-74806044241d",
								"exec": [
									"pm.test(\"test 7 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"test for duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.id2).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"        pm.expect(row.name1).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name1).to.eql(\"Sam\");",
									"    pm.expect(jsonData[1].id2).to.eql(1);",
									"    pm.expect(jsonData[4].id1).to.eql(154);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT `d`.*, `b`.*, `o`.* FROM `dev`.`dog` AS `d` INNER JOIN `dev`.`breed` AS `b` ON `d`.`breed_id` = `b`.`id` INNER JOIN `dev`.`owner` AS `o` ON `d`.`owner_id` = `o`.`id` ORDER BY `dog_name`\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with basic CROSS SCHEMA JOIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "147d50a4-925a-4d05-8b5b-aacd9d06d4ec",
								"exec": [
									"pm.test(\"test 8 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(8);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.dog_name).to.exist;",
									"        pm.expect(row.age).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name).to.eql(\"David\");",
									"    pm.expect(jsonData[1].id1).to.eql(3);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with complex CROSS SCHEMA JOIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cbf9bb9-1ec9-4f4c-a9fc-55814f9934df",
								"exec": [
									"pm.test(\"test  records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.dog_name).to.exist;",
									"        pm.expect(row.age).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test first and last row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql(\"David\");",
									"    pm.expect(jsonData[0].id).to.eql(6);",
									"    pm.expect(jsonData[0].id1).to.eql(3);",
									"    pm.expect(jsonData[4].name).to.eql(\"Kyle\");",
									"    pm.expect(jsonData[4].id).to.eql(5);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.* FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id ORDER BY o.name, o.id LIMIT 5 OFFSET 1\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with basic CROSS 3 SCHEMA JOINS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eb0e5d2-9966-4e60-95a3-d8d7c2dacf01",
								"exec": [
									"pm.test(\"test 7 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.id2).to.exist;",
									"        pm.expect(row.dog_name).to.exist;",
									"        pm.expect(row.age).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"        pm.expect(row.name1).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name).to.eql(\"David\");",
									"    pm.expect(jsonData[1].id1).to.eql(3);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"    pm.expect(jsonData[6].id1).to.eql(1);",
									"    pm.expect(jsonData[6].name1).to.eql(\"MASTIFF\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name, b.id, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with complex CROSS 3 SCHEMA JOINS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9092e7ff-6336-4360-be3f-5e82e1977ac7",
								"exec": [
									"pm.test(\"test 7 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.dog_age).to.exist;",
									"        pm.expect(row.dog_weight).to.exist;",
									"        pm.expect(row.owner_name).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test first and last row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].dog_age).to.eql(1);",
									"    pm.expect(jsonData[0].dog_weight).to.eql(35);",
									"    pm.expect(jsonData[0].owner_name).to.eql(\"Kaylan\");",
									"    pm.expect(jsonData[0].name).to.eql(\"BEAGLE MIX\");",
									"    pm.expect(jsonData[6].dog_age).to.eql(5);",
									"    pm.expect(jsonData[6].dog_weight).to.eql(35);",
									"    pm.expect(jsonData[6].owner_name).to.eql(\"Kyle\");",
									"    pm.expect(jsonData[6].name).to.eql(\"WHIPPET\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.age AS dog_age, AVG(d.weight_lbs) AS dog_weight, o.name AS owner_name, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id GROUP BY o.name, b.name, d.age ORDER BY b.name\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6db04414-c567-4b13-9c07-a71011b7c730",
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test for all columns exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(Object.keys(row).length).to.equal(9);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.dog\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query w/ * and alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e86e7836-2924-4e14-bd0c-af86032f61fe",
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test for all columns exist and alias is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(Object.keys(row).length).to.equal(9);",
									"        pm.expect(row.dname).to.exist;",
									"        pm.expect(row.dog_name).to.not.exist;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT *, dog_name as dname FROM dev.dog\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query w/ single alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58ff85b7-2f80-4a49-ac32-4e4efc246344",
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test that single column exist and alias is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(Object.keys(row).length).to.equal(1);",
									"        pm.expect(row.dname).to.exist;",
									"        pm.expect(row.dog_name).to.not.exist;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT dog_name as dname FROM dev.dog\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query w/ multiple aliases",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11489f7d-2161-4425-86f1-fbc3685a7517",
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test for all columns exist and aliases are correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(Object.keys(row).length).to.equal(3);",
									"        pm.expect(row.dname).to.exist;",
									"        pm.expect(row.dog_name).to.not.exist;",
									"        pm.expect(row.dog_id).to.exist;",
									"        pm.expect(row.id).to.not.exist;",
									"        pm.expect(row.dog_age).to.exist;",
									"        pm.expect(row.age).to.not.exist;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT id as dog_id, dog_name as dname, age as dog_age FROM dev.dog\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query from leading_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cdc0f7d-edb7-424f-baa0-317cc24bf079",
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test for correct ids\", function () {",
									"    var jsonData = pm.response.json();",
									"    let ids = [];",
									"    let expected_ids = [0, \"00011\", \"011\"];",
									"    jsonData.forEach(row => {",
									"        ids.push(row.id);",
									"    });",
									"",
									"    pm.expect(ids).to.eql(expected_ids);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.leading_zero\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "query from leading_zero where id = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a5a384d-0524-475e-a16c-9eecc0b686fb",
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.leading_zero where id = 0\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "query from leading_zero where id = '011'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b037cb90-c40f-4510-960b-ed39cabf50cc",
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql('011');",
									"    pm.expect(record.another_attribute).to.eql(\"another_2\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.leading_zero where id = '011'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "query from leading_zero where id = 011",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4e1c6f1-eb86-4841-b77b-a3015efd0ec8",
								"exec": [
									"pm.test(\"test 0 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.leading_zero where id = 011\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "4. NoSQL Tests",
			"item": [
				{
					"name": "Invalid Attribute Check",
					"item": [
						{
							"name": "insert invalid attribute name - single row",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c50c8e2a-d64a-4f82-bc60-a2ea66c450d7",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \"id\" : 1,\n        \"some`$`attribute\" : \"some_attribute\"\n      }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update single row w/ invalid attribute name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73e493fa-d148-4b59-894e-4276abccfda9",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"update\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \"id\" : 100,\n        \"some/attribute\" : \"some_attribute\"\n      }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "insert all invalid attribute names - multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fe57cd4-1d4d-4d73-947d-2c381fa05452",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \t\"id\" : 1,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 2,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 3,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 4,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 5,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 6,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t}\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update multiple rows with invalid attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6d2469c-d94f-43fb-9756-3ca68a884208",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"dev\",\n    \"table\": \"invalid_attribute\",\n    \"records\": [\n        {\n            \"id\": 100,\n            \"some/attribute\": \"some_attribute\"\n        },\n        {\n            \"id\": 101,\n            \"some-`attribute`\": \"some_attribute\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "insert some invalid attribute names - multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "646c0867-6e93-483d-8c5a-b593bea0a5ed",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \t\"id\" : 1,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"$ome-attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 2,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"$ome-attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 3,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"some-attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4/\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 4,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"some-attribute3/\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 5,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"some-attribute3\" : \"some_attribute3\",\n        \t\"some_`attribute4`\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 6,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"some-attribute3`\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t}\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Response Data Type Check",
					"item": [
						{
							"name": "NoSQL search by hash no result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c68c9b46-3c96-42b9-a512-a2e2eabf3f7b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an empty array was returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[100],\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by hash no result returns empty array"
							},
							"response": []
						},
						{
							"name": "NoSQL search by hash one result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e24dd51-44c2-4d75-a9a8-a09a4ff4b463",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by hash one result returns array with single object"
							},
							"response": []
						},
						{
							"name": "NoSQL search by hash multiple results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "342ad8be-ccea-4484-b685-64b69bfefd92",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"    pm.expect((typeof jsonData[1])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1, 5],\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by hash multiple results returns array with N objects"
							},
							"response": []
						},
						{
							"name": "NoSQL search by value no result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2cf4824-af7e-4bc5-bec0-8c6b65d3651d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an empty array was returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_value\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"search_attribute\":\"lastname\",\n  \"search_value\":\"Xyz\",\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by value no result returns empty array"
							},
							"response": []
						},
						{
							"name": "NoSQL search by value one result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d32066b4-ab57-4961-82bc-1732babd1129",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_value\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"search_attribute\":\"lastname\",\n  \"search_value\":\"King\",\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by value one result returns an array with single object"
							},
							"response": []
						},
						{
							"name": "NoSQL search by value multiple results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e852ec6a-bfe6-4a7f-b90e-a2edea142d5f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"    pm.expect((typeof jsonData[1])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_value\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"search_attribute\":\"lastname\",\n  \"search_value\":\"D*\",\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by value multiple results returns an array with N objects"
							},
							"response": []
						}
					],
					"description": "Test that search returns object array",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40647e3c-c9f8-48b6-aa42-234f14286de7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "39604a42-91a5-4c5c-8fad-8f56fd40927a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update NoSQL employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"id": "c33cdfc7-700b-46e8-976b-dffb44b44ac0"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"{{emps_id}}\": 1,\n    \"address\": \"def1234\"\n  }\n]\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update NoSQL employee confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74228351-575c-46cc-a2db-f44e38a900f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value from previous test update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].employeeid).to.eql(1);",
									"    pm.expect(jsonData[0].address).to.eql(\"def1234\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_attribute\": \"{{emps_id}}\",\n\t\"hash_values\":[1],\n\t\"get_attributes\": [\"{{emps_id}}\", \"address\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "update NoSQL call.aggr set data to dot & double dot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcabdbfc-7b94-43d8-9685-2aaa50be69e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update aggr id 4 dog_name, owner_name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(4);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"call\",\n\"table\":\"aggr\",\n\"records\": [\n  {\n    \"all\": 4,\n    \"dog_name\": \".\",\n    \"owner_name\": \"..\"\n  }\n]\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update NoSQL employee add new attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function pausecomp(millis)",
									" {",
									"  var date = new Date();",
									"  var curDate = null;",
									"  do { curDate = new Date(); }",
									"  while(curDate-date < millis);",
									"}",
									"",
									"pausecomp(100);"
								],
								"id": "2af13366-94b9-4749-8b47-8fc90a894913"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"{{emps_id}}\": 1,\n    \"address\": \"def1234\",\n    \"test_record\":\"I'mATest\"\n  }\n]\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert with duplicate records to make sure both are not added",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2f764f2-0bf9-4982-b597-07cff1a9deff",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.skipped_hashes[0]).to.eql(212);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"records\": [\n\t  {\n\t    \"{{emps_id}}\": 212,\n\t    \"address\": \"def1234\",\n\t    \"lastname\":\"dobolina\",\n\t    \"firstname\":\"bob\"\n\t  },\n\t  {\n\t    \"{{emps_id}}\": 212,\n\t    \"address\": \"def1234\",\n\t    \"lastname\":\"dobolina2\",\n\t    \"firstname\":\"bob\"\n\t  }\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert with no hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c89f6ba-e745-467a-80b4-b23e05bb56bf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Insert with no hash\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inserted_hashes.length).to.eql(1);",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"records\": [\n\t  {\n\t    \"address\": \"1 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n\t  }\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert with empty hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ced8d795-6e22-4498-8161-a5cd751ff67c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Insert with no hash\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inserted_hashes.length).to.eql(1);",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"records\": [\n\t  {\n\t  \t\"{{emps_id}}\": \"\",\n\t    \"address\": \"23 North Street\",\n\t    \"lastname\":\"Cat\",\n\t    \"firstname\":\"Brian\"\n\t  }\n\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].address).to.eql('def1234');",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked, new attribute added\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].test_record).to.eql(\"I'mATest\");",
									"});",
									"",
									"",
									""
								],
								"id": "769c49ae-cb05-4750-92c6-89d2db0d0049"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"address\", \"test_record\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash - check dot & double dot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5acf081d-25c3-40cc-a0a0-1b5c6e6de697",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked check dot\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].dog_name).to.eql('.');",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked, check double dot\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].owner_name).to.eql(\"..\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_values\":[4],\n  \"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash with unknown attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c431a034-e6b3-45ee-9c90-c76ee2d18ee9",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"unknown attribute 'attr1, attr3 and attr4'\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"attr1\", \"address\", \"attr3\", \"attr4\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash no schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "113ca25c-59a6-4909-9d62-b032cc925109",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"schema 'callABC' does not exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"callABC\",\n  \"table\":\"aggr\",\n  \"hash_values\":[4],\n  \"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash no table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd6113d6-658c-4556-83d4-5d5c4cf27218",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"table 'call.aggrABC' does not exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggrABC\",\n  \"hash_values\":[4],\n  \"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash hash_value bad data type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c00c4b4-aafe-41d9-af7b-912ea7eb0dd8",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"hash_values must be an array\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_values\":4,\n  \"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash get_attributes bad data type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "522d7ebd-8eda-48ae-b6b5-b6d20f844006",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"get_attributes must be an array\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_values\":[4],\n  \"get_attributes\": \"*\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update NoSQL employee with falsey attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0af5212-43c8-4ee7-b587-62be168e1013",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Update employee id 2 address, hireDate, notes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"{{emps_id}}\": 2,\n    \"address\": 0,\n    \"hireDate\": null,\n    \"notes\": false\n  }\n]\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes to false/0/null/undefined to validate values are stored correctly."
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash to confirm falsey update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43126b8b-2085-4eff-a824-80f2ea071723",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify NoSQL falsey update worked as expected\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].address).to.eql(0);",
									"    pm.expect(jsonData[0].hireDate).to.eql(null);",
									"    pm.expect(jsonData[0].notes).to.eql(false);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[2],\n  \"get_attributes\": [\"address\", \"hireDate\", \"notes\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Search for employee id 2 and confirm that false/0/null attributes have been updated"
					},
					"response": []
				},
				{
					"name": "update NoSQL one employee record with no hash attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3083472a-efdd-4876-bdec-af9d320fdd9a",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Valid error message is recieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"a valid hash attribute must be provided with update record, check log for more info\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"address\": \"3000 Dog Place\"\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes without providing a primary key/hash and check for error."
					},
					"response": []
				},
				{
					"name": "update NoSQL one employee record with empty hash attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7653d5a-09aa-4b1a-8bec-e44b04f91ee6",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Valid error message is recieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"a valid hash attribute must be provided with update record, check log for more info\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n {\n    \"{{emps_id}}\": \"\",\n    \"address\": \"123 North Blvd\",\n    \"notes\": \"This guy is the real deal\"\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes without providing a primary key/hash and check for error."
					},
					"response": []
				},
				{
					"name": "update NoSQL multiple employee records with no hash attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4edcb9b9-c962-469b-a02e-fef17a380764",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Valid error message is recieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"a valid hash attribute must be provided with update record, check log for more info\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n {\n    \"{{emps_id}}\": 2,\n    \"address\": \"123 North Blvd\",\n    \"notes\": \"This guy is the real deal\"\n  },\n  {\n    \"address\": \"45 Lost St\",\n    \"notes\": \"This person doesn't even have an id!\"\n  }, \n  {\n    \"{{emps_id}}\": 3,\n    \"address\": \"1 Main St\",\n    \"notes\": \"This guy okay\"\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes without providing a primary key/hash and check for error."
					},
					"response": []
				},
				{
					"name": "update NoSQL employee with valid nonexistent hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3888b63c-fba3-45ec-aa89-d56f5cbd4f1c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"update with nonexistent hash skips hash\", function () {",
									"    var jsonData = pm.response.json();",
									"    if(jsonData.message === \"updated 0 of 1 records\"){",
									"        pm.expect(jsonData.message).to.eql(\"updated 0 of 1 records\");",
									"        pm.expect(jsonData.update_hashes).to.eql([]);",
									"        pm.expect(jsonData.skipped_hashes[0]).to.eql(\"There is no way this exists\");",
									"    } else if(jsonData.message === \"updated 1 of 1 records\"){",
									"        pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"        pm.expect(jsonData.update_hashes[0]).to.eql(\"There is no way this exists\");",
									"        pm.expect(jsonData.skipped_hashes).to.eql([]);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"{{emps_id}}\": \"There is no way this exists\",\n    \"notes\": \"who is this fella?\"\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Try to update employee record with valid nonexistent hash. "
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - % at end",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "158c4500-6ec0-447b-9538-3cf9ab3fb6a1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 2 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:')).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:%\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - * at end",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c760562-b7db-4cee-8a30-bfaf82515cca",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 2 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:')).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:*\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - % at start",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4254141e-9f04-4f36-9769-55bb8a261d77",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes(\"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...\")).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"%*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - * at start",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0770cfd-9181-4d63-b398-02f38c6a7439",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes(\"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...\")).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"**DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - * at start and end",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c32d4149-201e-4fd3-9956-e1571cbd53bc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 3 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes(\"4 Bedroom/2.5+\")).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"*4 Bedroom/2.5+*\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - % at start and end",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca8a6f32-723b-4579-9c44-13f25d446a2c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 3 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes(\"4 Bedroom/2.5+\")).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"*4 Bedroom/2.5+*\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - * as search_value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ae31cc8-ffce-489b-9de4-34338b882dc8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 11 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(11);",
									"});",
									"",
									"pm.test(\"test all remarks contain all attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - % as search_value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "967a3dda-e2d8-4537-8679-baa58e903724",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 11 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(11);",
									"});",
									"",
									"pm.test(\"test all remarks contain all attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"%\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - *** at start",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "810f48a1-7b06-41f9-88ed-21ccc7795bdd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test all remarks contain value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes(\"**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.\")).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"***Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash on leading_zero, value = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bdf6d11-ffa3-4a67-8fef-fa086f091bbe",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"leading_zero\",\n  \"hash_attribute\": \"id\",\n  \"hash_values\":[0],\n  \"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash on leading_zero, value = '0'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffcd98bf-e2e1-4bdb-8563-8c1a7ee40d38",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"leading_zero\",\n  \"hash_attribute\": \"id\",\n  \"hash_values\":[\"0\"],\n  \"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash on leading_zero, values '011', '00011'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d1e1e86-5a88-4078-b445-2489d85f1605",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 2 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(\"011\");",
									"    pm.expect(record.another_attribute).to.eql(\"another_2\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att2\");",
									"",
									"    let record2 = jsonData[1];    ",
									"",
									"    pm.expect(record2.id).to.eql(\"00011\");",
									"    pm.expect(record2.another_attribute).to.eql(\"another_3\");",
									"    pm.expect(record2.some_attribute).to.eql(\"some_att3\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"leading_zero\",\n  \"hash_attribute\": \"id\",\n  \"hash_values\":[\"011\", \"00011\"],\n  \"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value leading_zero - value = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc704967-5199-4ac8-9af5-c2d4a2edded6",
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"search_attribute\":\"id\",\n    \"search_value\":0,\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value leading_zero - value = \"0\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c21a89c-60ae-4f87-850e-2fb63ff112a6",
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"search_attribute\":\"id\",\n    \"search_value\":\"0\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value leading_zero - value = \"011\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcdbfa12-b121-4d18-96b6-2baf2a3c395f",
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql('011');",
									"    pm.expect(record.another_attribute).to.eql(\"another_2\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"search_attribute\":\"id\",\n    \"search_value\":\"011\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value leading_zero - value = \"0%\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6955aaf6-25a4-4bd0-8c05-3ae4a95cb2c1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"",
									"    let record3 = jsonData[1];    ",
									"",
									"    pm.expect(record3.id).to.eql(\"00011\");",
									"    pm.expect(record3.another_attribute).to.eql(\"another_3\");",
									"    pm.expect(record3.some_attribute).to.eql(\"some_att3\");",
									"    ",
									"    let record2 = jsonData[2];    ",
									"",
									"    pm.expect(record2.id).to.eql(\"011\");",
									"    pm.expect(record2.another_attribute).to.eql(\"another_2\");",
									"    pm.expect(record2.some_attribute).to.eql(\"some_att2\");",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"search_attribute\":\"id\",\n    \"search_value\":\"0%\",\n\t\"get_attributes\": [\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "5. NoSQL Role Testing",
			"item": [
				{
					"name": "Authentication - bad username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47733812-1328-4d8f-9a88-87398423f0b6",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Login failed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bad_name",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"auth\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Authentication - bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8141b193-f88f-48e4-a19b-10f648208608",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Login failed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "badPassword",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"auth\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "NoSQL Add non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4ccb53c-27e2-4faf-8808-af2355f8a482",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test_5\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n\n   \"tables\": {\n     \"customers\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":true,\n         \"attribute_restrictions\":[]\n      },\n      \"suppliers\": {\n         \"read\":false,\n         \"insert\":false,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[]\n      },\n      \"region\": {\n         \"read\":true,\n         \"insert\":false,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[{\n               \"attribute_name\": \"regiondescription\",\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false\n            }]\n      },\n      \"territories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"territorydescription\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false\n            }\n           ]\n      },\n      \"categories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false\n            }\n           ]\n      },\n      \"shippers\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":true,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"companyname\",\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false\n            }\n           ]\n      }\n   }\n}\n  }\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Add User with new Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21af8a85-b014-4fed-9fbc-493dc37228a1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"{{role_id}}\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read suppliers table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc272e61-6b52-48b9-98aa-b2e41362ebf6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{supp_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{supp_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"{{supp_id}}\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read user read restricted suppliers table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5db6b480-e5c2-45db-85fd-ac4547dbc8a3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{supp_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{supp_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"{{supp_id}}\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read region table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47b0b20f-c8f9-4809-9996-dca1a2e34feb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{regi_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{regi_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3065478d-fbe3-4958-8ea1-83685f89c8db",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{regi_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{regi_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into region table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8ef7485-952e-458d-95bd-b3bf256e6103",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"records\": [\n    {\n      \"{{regi_id}}\":16,\n      \"regiondescription\":\"test description\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into insert restricted region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2deddc-c212-4d8f-bb58-6f519ac67531",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_table_permissions is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"records\": [\n    {\n      \"{{regi_id}}\":17,\n      \"regiondescription\":\"test description\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into insert restricted attribute in categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a147ddb5-feb4-45ec-8b1d-3e495c5d0583",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"required_attribute_permissions includes 1 perms error\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions object has correct attribute name and perm\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"categoryname\");",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\":9,\n      \"categoryname\":\"test name\",\n      \"description\":\"test description\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into territories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c83a5c17-15f0-4c16-b568-ae61e2d9196f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"records\": [\n    {\n      \"{{terr_id}}\":123456,\n      \"territorydescription\":\"test description\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into territories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7f6896c-0e4e-42c3-8b6a-cfd02cdc951b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"records\": [\n    {\n      \"{{terr_id}}\":1234567,\n      \"territorydescription\":\"test description\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update territories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36d7dda2-1296-440f-974e-4184349c41ac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"records\": [\n    {\n      \"{{terr_id}}\":123456,\n      \"territorydescription\":\"test description updated\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update restricted territories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a97cad7-04e5-4f37-aebc-15d755edf7f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_table_permissions is update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql(\"update\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"records\": [\n    {\n      \"{{terr_id}}\":1234567,\n      \"territorydescription\":\"test description updated\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11bb4581-abcf-4289-a328-67af0c38bb3c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\":1,\n      \"description\":\"test description updated\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update restricted attrs in categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5fa8747e-a930-402f-94a0-d4efc7380d24",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"required_attribute_permissions includes 2 perms error\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions objects have correct attribute name and perm\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"categoryname\");",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].attribute_name).to.eql(\"picture\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\": 1,\n      \"categoryname\": \"test name\",\n      \"description\":\"test description updated\",\n      \"picture\": \"test picture\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Try to delete from categories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ff3fbe-ff8a-45c1-a11a-ebe7e5247a05",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"delete\",\n  \"table\":\"{{cate_tb}}\",\n  \"schema\":\"{{schema}}\",\n  \"hash_values\":[1]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to delete from restricted categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe3a2c59-9f1b-4e9f-9d6d-033d09bea1cd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_table_permissions is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"required_table_permissions is delete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql(\"delete\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"delete\",\n  \"table\":\"{{cate_tb}}\",\n  \"schema\":\"{{schema}}\",\n  \"hash_values\":[2]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read shippers table restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25c84f2e-a09c-4d76-802a-833274e900d6",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_table_permissions is not empty - has two objects\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(2);",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"shipperid\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].attribute_name).to.eql(\"companyname\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{ship_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{ship_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"companyname\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read ALL shippers table attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5f7299b-752f-4e73-afc2-92102dd9bb63",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"required_table_permissions is not empty - has five objects\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read\", function () {",
									"    jsonData.unauthorized_access.forEach(obj => {",
									"        pm.expect(obj.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{ship_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{ship_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update shippers table restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a96543c-beca-4f95-9a48-e1dcea1f02ea",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is not empty - has two objects\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(2);",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"shipperid\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].attribute_name).to.eql(\"companyname\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ship_tb}}\",\n  \"records\": [{\n    \"{{ship_id}}\": 1,\n    \"companyname\": \"bad update name\"\n  }]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert shippers table restricted attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecb32219-a652-4a30-8ba7-83cf1efa960f",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is not empty - has three objects\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"shipperid\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].attribute_name).to.eql(\"companyname\");",
									"    pm.expect(jsonData.unauthorized_access[2].required_attribute_permissions[0].attribute_name).to.eql(\"phone\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is insert\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"    pm.expect(jsonData.unauthorized_access[2].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ship_tb}}\",\n  \"records\": [{\n      \"{{ship_id}}\": 1,\n      \"companyname\": \"bad update name\",\n      \"phone\": \"(503) 555-9831\"\n    }]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert categories table restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb356b5d-447c-4831-92f1-eec760e8b35f",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is not empty - has one object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"categoryname\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is insert\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [{\n      \"{{cate_id}}\": 4,\n      \"categoryname\": \"bad update name\"\n    }]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert categories table unrestricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f032771-ee4d-48dd-bc13-c087460243af",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [{\n      \"{{cate_id}}\": 1,\n      \"description\": \"Cheese and cheese and cheese\"\n    }]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update categories table unrestricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a57d49e4-9849-43ce-bd83-98fca1bd334f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [{\n      \"{{cate_id}}\": 2,\n      \"description\": \"Meats and cheeses\"\n    }]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert categories table restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91e61859-a6e2-4b42-8660-72a28d5937c8",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is not empty - has one object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"categoryname\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is insert\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [{\n      \"{{cate_id}}\": 1,\n      \"categoryname\": \"Stuff and things\"\n    }]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9bcc324-58b6-4aec-9267-6e7f75602b05",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8feb86a7-4f30-4419-891d-91a02fa0ac3d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Add cluster_user Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c64545f-2cdd-49db-8f08-7ef8be548ce5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has id\", ()=>{",
									"    pm.response.to.have.jsonBody('id');",
									"    postman.setEnvironmentVariable(\"cluster_user_role_id\", pm.response.json().id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"test_cluster_user_role\",\n\"permission\":{\n  \"cluster_user\": true\n  }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Add cluster_user with another permission, expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f51c1d29-ec9a-49d0-a042-8f88140d3d72",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error\", ()=>{",
									"    pm.response.to.have.jsonBody('error');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.contain('cluster_user permission cannot be mixed with other permissions.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"cluster_user_bad\",\n\"permission\":{\n  \"cluster_user\": true,\n  \"super_user\":true\n  }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Add User with cluster_user Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d375a50-d1d0-4b3c-9480-8fb7bd7cd547",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.response.to.have.jsonBody('message');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain('successfully added');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"{{cluster_user_role_id}}\",\n\"username\":\"test_cluster_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL alter cluster user, change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "feb7637f-b72d-4d46-9826-6beaaa1e0da3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.response.to.have.jsonBody('message');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain('updated 1 of 1 records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"alter_user\",\n\"username\":\"test_cluster_user\",\n\"password\":\"{{password}}111\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL alter cluster user, change role, expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9ff2d1d-5bf9-410a-9557-2df110cc47f7",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Error message\", function () {",
									"    pm.response.to.have.jsonBody('error');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.contain('cannot change the role of a cluster_user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"alter_user\",\n\"username\":\"test_cluster_user\",\n\"role\":\"{{role_id}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop test_cluster_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b34d377c-28b4-4634-a987-62b7221b5eea",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.response.to.have.jsonBody('message');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain('successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_cluster_user\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop cluster_user role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce83d18c-b141-4726-a72b-84b2a650fdf2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.response.to.have.jsonBody('message');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain('successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{cluster_user_role_id}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "6. SQL Role Testing",
			"item": [
				{
					"name": "SQL Add non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9852495b-f2c0-4fa9-b7fa-5c93d2987363",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test_5\",\n   \"permission\":{\n   \"super_user\": false,\n   \"northnwd\":{\n\n      \"tables\": {\n      \"customers\": {\n            \"read\":true,\n            \"insert\":true,\n            \"update\":true,\n            \"delete\":true,\n            \"attribute_restrictions\":[]\n         },\n         \"suppliers\": {\n            \"read\":false,\n            \"insert\":false,\n            \"update\":false,\n            \"delete\":false,\n            \"attribute_restrictions\":[]\n         },\n         \"region\": {\n            \"read\":true,\n            \"insert\":false,\n            \"update\":false,\n            \"delete\":false,\n            \"attribute_restrictions\":[{\n                  \"attribute_name\": \"regiondescription\",\n                  \"read\":true,\n                  \"insert\":false,\n                  \"update\":false,\n                  \"delete\":false\n               }]\n         },\n         \"territories\": {\n            \"read\":true,\n            \"insert\":true,\n            \"update\":false,\n            \"delete\":false,\n            \"attribute_restrictions\":[\n            {\n                  \"attribute_name\": \"territorydescription\",\n                  \"read\":true,\n                  \"insert\":true,\n                  \"update\":false,\n                  \"delete\":false\n               }\n            ]\n         },\n         \"categories\": {\n            \"read\":true,\n            \"insert\":true,\n            \"update\":true,\n            \"delete\":false,\n            \"attribute_restrictions\":[\n            {\n                  \"attribute_name\": \"description\",\n                  \"read\":true,\n                  \"insert\":true,\n                  \"update\":true,\n                  \"delete\":false\n               }\n            ]\n         },\n         \"shippers\": {\n            \"read\":true,\n            \"insert\":true,\n            \"update\":true,\n            \"delete\":true,\n            \"attribute_restrictions\":[\n            {\n                  \"attribute_name\": \"companyname\",\n                  \"read\":false,\n                  \"insert\":false,\n                  \"update\":false,\n                  \"delete\":false\n               }\n            ]\n            }\n         }\n      },\n      \"dev\": {\n         \"tables\": {\n            \"dog\": {\n               \"read\": true,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": true,\n               \"attribute_restrictions\": []\n            }\n         }\n      },\n      \"other\": {\n         \"tables\": {\n            \"owner\": {\n               \"read\": true,\n               \"insert\": false,\n               \"update\": true,\n               \"delete\": false,\n               \"attribute_restrictions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false,\n                     \"delete\":false\n                  }\n               ]\n            }\n         }\n      },\n      \"another\": {\n         \"tables\": {\n            \"breed\": {\n               \"read\": false,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": true,\n               \"attribute_restrictions\": [\n                  {\n                     \"attribute_name\": \"image\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false,\n                     \"delete\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL Add User with new Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30ece3e1-4b3c-48b9-8bd5-5ef3d01769b4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"{{role_id}}\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "get user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4c81af0-632e-41b8-ac14-fcce367f4f3a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"responseData = JSON.parse(responseBody);",
									"for(let user of responseData) {",
									"    if(user.username === 'test_user') {",
									"        postman.setEnvironmentVariable(\"user_role_id\", user.role.id);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"list_users\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for getting user info.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'user_info'</li>"
					},
					"response": []
				},
				{
					"name": "try to set bad role to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1431a5d-ab23-4e7b-ba79-e9db381e6a54",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"alter_user\",\n\"role\":\"blahblah\",\n\"username\":\"test_user\"\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for altering users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  Use this method to change password as well.  \n\n<ul>\n\n<li><b>operation</b> <i>(required)</i> - must always be 'alter_user'</li>\n\n<li><b>role</b> <i>(optional) </i>- id of the role you wish to assign to the user.  See add_role for more detail. </li> \n\n<li><b>username </b><i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li> <b>password</b><i> (optional) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n</ul>"
					},
					"response": []
				},
				{
					"name": "get user info make sure role was not changed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6669a7be-d584-4232-8eb2-d6ad96574162",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"responseData = JSON.parse(responseBody);",
									"pm.test(\"ensure role not changed\", function () {",
									"    for(let user of responseData) {",
									"    if(user.username === 'test_user') {",
									"        pm.expect(postman.getEnvironmentVariable(\"user_role_id\")).to.eql(user.role.id);",
									"    }",
									"}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"list_users\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for getting user info.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'user_info'</li>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read suppliers table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d2e62e5-9b37-47b3-b481-7021050f0bd7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{supp_tb}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read restricted suppliers table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5e65b32-f3ea-4ba7-bd25-8693f6cf4e2b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Should return 1 unauthorized_access object\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"required_table_permissions is read\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql(\"read\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{supp_tb}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read region table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70be3d92-1c32-4359-a016-fae206e17eac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{regi_tb}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee1df498-fd1d-478c-9c94-d7dabbf289b6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var permitted_attrs = [\"regiondescription\", \"regionid\"];",
									"",
									"pm.test(\"Only permitted attributes are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(obj => {",
									"        Object.keys(obj).forEach(attr_name => {",
									"            pm.expect(permitted_attrs.includes(attr_name))    ",
									"        })",
									"    })",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{regi_tb}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into region table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c0f3c9b-168c-4a0b-b5ed-1d90b97001bb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.region (regionid, regiondescription) values ('16', 'test description');\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into insert restricted region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da973620-b50f-485e-962d-e6c2b9e630da",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_table_permissions is insert\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql(\"insert\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"    pm.expect(jsonData.unauthorized_access[2].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.region (regionid, regiondescription) values ('17', 'test description');\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into territories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a75200ad-2750-4c30-90cf-4ba1df0f44ad",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.territories (regionid, territoryid, territorydescription) values ('1', '65', 'Im a test');\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into territories table with restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "767cb177-a82c-409f-b351-46d6b21685d8",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is insert\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.territories (regionid, territoryid, territorydescription) values ('1', '65', 'Im a test');\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into territories table with allowed attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80a21ee7-002c-48ce-909b-d2a8bd120794",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New record inserted\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(165);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.territories (territoryid, territorydescription) values ('165', 'Im a test');\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to update territories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f829e9ed-91e5-45d7-8b0d-0340d1601f4f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.territories set territorydescription = 'update test' where territoryid = 65\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to update restricted territories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "850eefc6-ea77-44a1-917e-07ed5f42de8e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_table_permissions is update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql(\"update\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.territories set territorydescription = 'update test' where territoryid = 65\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to update categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48573a8a-3f4b-4c89-904d-8a3a5b782339",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.categories set description = 'update test' where categoryid = 2\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to update restricted attr in categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f775221-9fcf-47cf-abe1-ce4765a11d0b",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"required_attribute_permissions is not empty - has one object\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"picture\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is insert\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.categories set description = 'update test', picture = 'test picture' where categoryid = 2\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL Try to delete from categories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25dc52ef-1e6e-4bb0-91f8-f7577936ddbd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"operation\":\"sql\",\n  \"sql\":\"delete from northnwd.categories where categoryid = 2\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to delete from restricted categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c05919fa-85db-4a0f-aa65-ee60bd708f97",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_table_permissions is delete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql(\"delete\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].required_permissions[0]).to.eql(\"delete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"operation\":\"sql\",\n  \"sql\":\"delete from northnwd.categories where categoryid = 2\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read shippers table w/ restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bf4bc6f-d947-4235-89d0-d85ae5e41dfd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"All table attributes returned in unauthorized access array\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read\", function () {",
									"    jsonData.unauthorized_access.forEach(val => {",
									"        pm.expect(val.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{ship_tb}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL Try to update shippers table restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6f6044d-4c4b-4361-a640-9f746a4aa488",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"companyname\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.{{ship_tb}} set companyname = 'bad update name' where {{ship_id}} = 1\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert shippers table restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3769eaa-4b64-4a63-8849-584eeadc42e3",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"required_attribute_permissions is not empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"shipperid\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].attribute_name).to.eql(\"companyname\");",
									"    pm.expect(jsonData.unauthorized_access[2].required_attribute_permissions[0].attribute_name).to.eql(\"phone\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is insert\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"    pm.expect(jsonData.unauthorized_access[2].required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.shippers (shipperid, companyname, phone) values ('1', 'bad update name', '(503) 555-9831');\"\n}\n\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert categories table unrestricted attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e152de4e-4240-4c9d-b862-2162aa89f818",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.categories (categoriesid, description) values ('9', 'Other food stuff');\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read shippers table as test_user with restricted attribute in WHERE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8629c8f-bd79-48fa-acc9-5c94a85fa48d",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"required_table_permissions is not empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"shipperid\");",
									"    pm.expect(jsonData.unauthorized_access[1].required_attribute_permissions[0].attribute_name).to.eql(\"phone\");",
									"    pm.expect(jsonData.unauthorized_access[2].required_attribute_permissions[0].attribute_name).to.eql(\"companyname\");",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read\", function () {",
									"    jsonData.unauthorized_access.forEach(perm => {",
									"        pm.expect(perm.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");    ",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select shipperid from {{schema}}.{{ship_tb}} WHERE (phone IS NOT NULL AND shipperid = 0) OR companyname IS NOT NULL\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:9925/",
							"host": [
								"{{host}}"
							],
							"port": "9925",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Select with restricted CROSS SCHEMA JOIN as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccb261a6-53ea-48ef-aced-e1d039dd0965",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Table attr restrictions returned in unauthorized access array\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read for both attributes\", function () {",
									"    jsonData.unauthorized_access.forEach(perm => {",
									"        pm.expect(perm.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select * with restricted CROSS SCHEMA JOIN as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e2a9463-7ef2-4c4a-a2eb-157d775be00c",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"4 table attr restriction returned in unauthorized access array\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read for table attributes\", function () {",
									"    jsonData.unauthorized_access.forEach(perm => {",
									"        pm.expect(perm.schema).to.eql(\"other\");",
									"        pm.expect(perm.table).to.eql(\"owner\");",
									"        pm.expect(perm.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.*, o.* FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id ORDER BY o.name, o.id LIMIT 5 OFFSET 1\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select restricted attrs in CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d40273b-b3c3-4985-ae21-e2c093e571c4",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json().unauthorized_access;",
									"",
									"pm.test(\"5 table attr restriction returned in unauthorized access array\", function () {",
									"    pm.expect(jsonData.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read for table attributes\", function () {",
									"    jsonData.forEach((perm, i) => {",
									"        if (i < 2) {",
									"            pm.expect(perm.schema).to.eql(\"other\");",
									"            pm.expect(perm.table).to.eql(\"owner\");",
									"            pm.expect(perm.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"        } else if (i === 2) {",
									"            pm.expect(perm.schema).to.eql(\"another\");",
									"            pm.expect(perm.table).to.eql(\"breed\");",
									"            pm.expect(perm.required_table_permissions[0]).to.eql(\"read\");",
									"        } else {",
									"            pm.expect(perm.schema).to.eql(\"another\");",
									"            pm.expect(perm.table).to.eql(\"breed\");",
									"            pm.expect(perm.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"        }",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name, b.id, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with complex CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d56a6b9c-815f-4e24-89f6-0e37a468f021",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = jsonData.unauthorized_access;",
									"pm.test(\"test 5 records returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read for table attributes\", function () {",
									"    jsonData.forEach((perm, i) => {",
									"        if (i < 2) {",
									"            pm.expect(perm.schema).to.eql(\"other\");",
									"            pm.expect(perm.table).to.eql(\"owner\");",
									"            pm.expect(perm.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"        } else if (i === 2) {",
									"            pm.expect(perm.schema).to.eql(\"another\");",
									"            pm.expect(perm.table).to.eql(\"breed\");",
									"            pm.expect(perm.required_table_permissions[0]).to.eql(\"read\");",
									"        } else {",
									"            pm.expect(perm.schema).to.eql(\"another\");",
									"            pm.expect(perm.table).to.eql(\"breed\");",
									"            pm.expect(perm.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"        }",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.age AS dog_age, AVG(d.weight_lbs) AS dog_weight, o.name AS owner_name, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id GROUP BY o.name, b.name, d.age ORDER BY b.name\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL ALTER non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27c9ae9d-47a7-4dab-a561-5972aaaac736",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"alter_role\",\n   \"role\":\"developer_test_5\",\n   \"id\": \"{{role_id}}\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n\n         \"tables\": {\n         \"customers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_restrictions\":[]\n            },\n            \"suppliers\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_restrictions\":[]\n            },\n            \"region\": {\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_restrictions\":[{\n                     \"attribute_name\": \"regiondescription\",\n                     \"read\":true,\n                     \"insert\":false,\n                     \"update\":false,\n                     \"delete\":false\n                  }]\n            },\n            \"territories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_restrictions\":[\n               {\n                     \"attribute_name\": \"territorydescription\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false,\n                     \"delete\":false\n                  }\n               ]\n            },\n            \"categories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false,\n               \"attribute_restrictions\":[\n               {\n                     \"attribute_name\": \"description\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":true,\n                     \"delete\":false\n                  }\n               ]\n            },\n            \"shippers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_restrictions\":[\n               {\n                     \"attribute_name\": \"companyname\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false,\n                     \"delete\":false\n                  }\n               ]\n               }\n            }\n         },\n         \"dev\": {\n            \"tables\": {\n               \"dog\": {\n                  \"read\": true,\n                  \"insert\": true,\n                  \"update\": true,\n                  \"delete\": true,\n                  \"attribute_restrictions\": []\n               }\n            }\n         },\n         \"other\": {\n            \"tables\": {\n               \"owner\": {\n                  \"read\": true,\n                  \"insert\": false,\n                  \"update\": true,\n                  \"delete\": false,\n                  \"attribute_restrictions\": [\n                     {\n                        \"attribute_name\": \"name\",\n                        \"read\":true,\n                        \"insert\":false,\n                        \"update\":false,\n                        \"delete\":false\n                     }\n                  ]\n               }\n            }\n         },\n         \"another\": {\n            \"tables\": {\n               \"breed\": {\n                  \"read\": true,\n                  \"insert\": true,\n                  \"update\": true,\n                  \"delete\": true,\n                  \"attribute_restrictions\": [\n                     {\n                        \"attribute_name\": \"name\",\n                        \"read\":true,\n                        \"insert\":false,\n                        \"update\":false,\n                        \"delete\":false\n                     }\n                  ]\n               }\n            }\n         }\n      }\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select two table CROSS SCHEMA JOIN as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77fe2fe0-7d89-44bc-8394-73a7f771ab87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"test 8 records returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(8);",
									"});",
									"",
									"var expected_attributes = [\"id\", \"dog_name\", \"age\", \"adorable\", \"id1\", \"name\"]",
									"",
									"//Important to test that only the id (returned as id1) and name attributes come back for 'other.owner' since user only has access to those two attributes",
									"pm.test(\"test for all columns returned including duplicate 'id' column with name numbering\", function () {",
									"    jsonData.forEach(row => {",
									"        expected_attributes.forEach(attr => {",
									"            pm.expect(row[attr]).to.exist;",
									"        })",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    pm.expect(jsonData[1].name).to.eql(\"David\");",
									"    pm.expect(jsonData[1].id1).to.eql(3);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select * w/ two table CROSS SCHEMA JOIN as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a34215f8-e4b0-4ef1-be86-e856462ed1e5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var expected_attributes = [\"dog_name\", \"weight_lbs\", \"breed_id\", \"owner_id\", \"__updatedtime__\", \"age\", \"adorable\", \"id\", \"__createdtime__\", \"id1\", \"name\"]",
									"",
									"//Important to test that only the id (returned as id1) and name attributes come back for 'other.owner' since user only has access to those two attributes",
									"pm.test(\"test for all columns returned including duplicate 'id' column with name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        expected_attributes.forEach(attr => {",
									"            pm.expect(row[attr]).to.exist;",
									"        })",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.*, o.* FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id ORDER BY o.name, o.id LIMIT 5 OFFSET 1\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select w/ CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3a91e76-cc45-42a9-a21e-c3aca8b30673",
								"exec": [
									"pm.test(\"test 7 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.id2).to.exist;",
									"        pm.expect(row.dog_name).to.exist;",
									"        pm.expect(row.age).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"        pm.expect(row.name1).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name).to.eql(\"David\");",
									"    pm.expect(jsonData[1].id1).to.eql(3);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"    pm.expect(jsonData[6].id1).to.eql(1);",
									"    pm.expect(jsonData[6].name1).to.eql(\"MASTIFF\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name, b.id, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with complex CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "779b2438-493f-47a8-ae12-e54c92fdb676",
								"exec": [
									"pm.test(\"test 7 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.dog_age).to.exist;",
									"        pm.expect(row.dog_weight).to.exist;",
									"        pm.expect(row.owner_name).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test first and last row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].dog_age).to.eql(1);",
									"    pm.expect(jsonData[0].dog_weight).to.eql(35);",
									"    pm.expect(jsonData[0].owner_name).to.eql(\"Kaylan\");",
									"    pm.expect(jsonData[0].name).to.eql(\"BEAGLE MIX\");",
									"    pm.expect(jsonData[6].dog_age).to.eql(5);",
									"    pm.expect(jsonData[6].dog_weight).to.eql(35);",
									"    pm.expect(jsonData[6].owner_name).to.eql(\"Kyle\");",
									"    pm.expect(jsonData[6].name).to.eql(\"WHIPPET\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.age AS dog_age, AVG(d.weight_lbs) AS dog_weight, o.name AS owner_name, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id GROUP BY o.name, b.name, d.age ORDER BY b.name\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL drop test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5677914-1346-4deb-a1c3-68505120deb3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes correct message\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.equal(",
									"        \"test_user successfully deleted\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL drop_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b1bde77-991c-4c6b-8be6-cb96dc12caa3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes correct message\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.equal(",
									"        \"developer_test_5 successfully deleted\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "944b0220-e59d-424f-9602-84d16c7aec28",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42f0ea50-fce0-4a95-be51-a3494fbec975",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "7. Jobs & Job Role Testing",
			"item": [
				{
					"name": "Jobs - Add non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f96ea081-2558-451c-af69-1be7a95a3485",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test_5\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n\n   \"tables\": {\n     \"customers\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":true,\n         \"attribute_restrictions\":[]\n      },\n      \"suppliers\": {\n         \"read\":false,\n         \"insert\":false,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[]\n      },\n      \"region\": {\n         \"read\":true,\n         \"insert\":false,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[{\n               \"attribute_name\": \"regiondescription\",\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false\n            }]\n      },\n      \"territories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n         \t{\n               \"attribute_name\": \"territorydescription\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false\n            }\n         \t]\n      },\n      \"categories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n         \t{\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false\n            }\n         \t]\n      },\n      \"shippers\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":true,\n         \"attribute_restrictions\":[\n         \t{\n               \"attribute_name\": \"companyname\",\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false\n            }\n         \t]\n      }\n   }\n}\n  }\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Jobs - Add User with new Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8780570-6e86-4925-89d0-a44f2c6b10d4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"{{role_id}}\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Query HDB as bad user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8a9d5ce-bc3b-49a6-9078-9e8eb11f5fb4",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Login failed error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Login failed\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "JohnnyBadUser",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"operation\": \"search_by_value\", \n  \"table\":\"hdb_user\",\n  \"schema\": \"system\",\n  \"search_attribute\":\"username\",\n  \"search_value\":\"{{username}}\",\n  \"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Query system table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d696bab2-8850-4f95-8b28-6c892e3bdf31",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    var objKeysData = Object.keys(jsonData[0]);",
									"    pm.expect(jsonData[0].username).to.eql(environment[\"username\"]);",
									"    pm.expect(objKeysData.includes(\"password\")).to.be.true;",
									"    pm.expect(objKeysData.includes(\"role\")).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"operation\": \"search_by_value\", \n  \"table\":\"hdb_user\",\n  \"schema\": \"system\",\n  \"search_attribute\":\"username\",\n  \"search_value\":\"{{username}}\",\n  \"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a super user can query a system table"
					},
					"response": []
				},
				{
					"name": "Describe all  system table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80a82f44-610d-471e-a27b-612bde04dd9a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SU can describe all system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.hash_attribute).to.eql(\"username\");",
									"    pm.expect(jsonData.name).to.eql(\"hdb_user\");",
									"    pm.expect(jsonData.schema).to.eql(\"system\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\"operation\":\"describe_table\", \n\"table\":\"hdb_user\", \n\"schema\":\"system\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a super user can describe all on system table"
					},
					"response": []
				},
				{
					"name": "Query system table non SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0f015d0-7f49-4aea-bf74-2019cb09f136",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"operation\": \"search_by_value\", \n  \"table\":\"hdb_user\",\n  \"schema\": \"system\",\n  \"search_attribute\":\"username\",\n  \"search_value\":\"{{username}}\",\n  \"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a non super user can NOT query a system table"
					},
					"response": []
				},
				{
					"name": "Describe all  system table as non SU ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ccfec7b-04c1-4a8f-86a8-c82417ddc393",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\"operation\":\"describe_table\", \n\"table\":\"hdb_user\", \n\"schema\":\"system\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a non super user can NOT describe all on system table"
					},
					"response": []
				},
				{
					"name": "Insert record system table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d14f5c8a-d3fa-4fc4-945b-20a723f06a98",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"records\": [\n  {\n\t\"username\": \"admin\",\n    \"role\": \"0bffc136-0b0b-4582-8efe-44031f40d906\",\n    \"password\": \"fakepassword\",\n    \"active\": true\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a super user can NOT insert record into system table"
					},
					"response": []
				},
				{
					"name": "Insert record system table as non SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04a22029-d5b6-4712-83ab-25c69bf185e5",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"records\": [\n  {\n\t\"username\": \"admin\",\n    \"role\": \"0bffc136-0b0b-4582-8efe-44031f40d906\",\n    \"password\": \"fakepassword\",\n    \"active\": true\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a non super user can NOT insert record into system table"
					},
					"response": []
				},
				{
					"name": "Update record system table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbf0a435-d424-4958-afeb-a89bbbdaf670",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"records\": [\n  {\n\t\"username\": \"admin\",\n    \"role\": \"0bffc136-0b0b-4582-8efe-44031f40d906\",\n    \"password\": \"fakepassword\",\n    \"active\": true\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a super user can NOT update record in system table"
					},
					"response": []
				},
				{
					"name": "Update record system table as non SU ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e75e7641-8ba5-4e89-9d9e-e57e9318b4cc",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"records\": [\n  {\n\t\"username\": \"admin\",\n    \"role\": \"0bffc136-0b0b-4582-8efe-44031f40d906\",\n    \"password\": \"fakepassword\",\n    \"active\": true\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a non super user can NOT update record in system table"
					},
					"response": []
				},
				{
					"name": "Delete record system table as SU ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6a2e4b0-6139-447b-915f-2f2974b4d2c4",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"delete\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"hash_values\": [\"admin1\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a super user can NOT delete record from system table"
					},
					"response": []
				},
				{
					"name": "Delete record system table as non SU ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94fb51ec-9c94-4317-b1f2-61b130382422",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"delete\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"hash_values\": [\"admin1\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a non super user can NOT delete record from system table"
					},
					"response": []
				},
				{
					"name": "Drop system table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32e5fa7a-b7d6-4af5-b499-7da6cecc2936",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_table\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a super user can NOT drop system table."
					},
					"response": []
				},
				{
					"name": "Drop system table as non SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe94610d-f58b-49e6-a8b4-5e67fd07e529",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"SU can view system table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_table\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that a non super user can NOT drop system table."
					},
					"response": []
				},
				{
					"name": "Jobs - Add jobs test schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2aed3929-2209-4f63-a47f-8541e3e756ee",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");",
									"",
									"setTimeout(()=>{}, 500);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"test_job\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Add runner table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a9c103-3b93-417b-9276-e6912a5dd900",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"setTimeout(()=>{}, 500);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"test_job\",\n  \"table\":\"runner\",\n  \"hash_attribute\": \"runner_id\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Insert into runners table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0d52899-061e-47c2-8939-4fc109f074e5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function pausecomp(millis)",
									" {",
									"  var date = new Date();",
									"  var curDate = null;",
									"  do { curDate = new Date(); }",
									"  while(curDate-date < millis);",
									"}",
									"",
									"pausecomp(100);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_job\",\n\"table\":\"runner\",\n\"records\": [\n  {\n    \"name\":\"Harper\",\n    \"shoes\":\"Nike\",\n    \"runner_id\":\"1\",\n    \"age\":55\n  }\n]\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Validate 1 entry in runners table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "893affeb-2c27-4683-b85f-1703b272ade7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 runner\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from test_job.runner\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Test Remove Files Before with test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf7aa60d-777b-4e95-a161-4b257517b99f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete_files_before\",\n\t\"date\":\"2018-06-14\",\n\t\"schema\":\"dev\",\n\t\"schema\":\"dog\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Test Remove Files Before with su and store job_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5cea9eb-0477-4a28-b9a5-78d57acfc988",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"let id_index = jsonData.message.indexOf('id ');",
									"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"pm.environment.set(\"job_id\", parsedId);",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "332ffbae-095d-4f39-b9b7-108c4c1e40d0",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"date_tomorrow\", (new Date(new Date().getTime() + 86400000)).toISOString());"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete_files_before\",\n\t\"date\":\"{{date_tomorrow}}\",\n\t\"schema\":\"test_job\",\n\t\"table\":\"runner\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Validate 0 entry in runners table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "413d963e-8cd7-4f99-8162-1d09660c0990",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 0 runners\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8ea3f4cd-d4b2-4ff3-97fe-90ca7600b71b",
								"exec": [
									"setTimeout(()=>{}, 2000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from test_job.runner\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search Jobs by date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "33134c39-d036-4b5a-8389-6efbcb87b2a4",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"date_yesterday\", (new Date(new Date().getTime() - 86400000)).toISOString());"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f14b91e2-17d0-42e7-9baf-824073aaebdd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test found jobs\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_jobs_by_start_date\",\n\t\"from_date\": \t\"{{date_yesterday}}\",\n\t\"to_date\": \t\"{{date_tomorrow}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search Jobs by date - non-super user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6428838-ac94-4a6b-81b0-726684567987",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7e943fe8-dd32-477b-b322-a1f28e2f171d",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"test received not authorized response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"You are not authorized to perform the operation specified\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_jobs_by_start_date\",\n\t\"from_date\": \t\"{{date_yesterday}}\",\n\t\"to_date\": \t\"{{date_tomorrow}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search Jobs by job_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91781f7d-2c60-4cca-93f2-7024257bc126",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test Job Found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search Jobs by job_id - non-super user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6587c4a4-7964-40cd-9202-e58e922eb2c8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test Job Found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Jobs - Bulk CSV load into restricted region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fdc7e95-7f16-4ef9-9197-17fd2129a6cc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"data\":\"regionid, regiondescription\\n'17', 'test description'\\n\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Bulk CSV load into restricted region table as su",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed9fa0e0-77b8-4500-b9f6-73e69f24f32d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"data\":\"regionid, regiondescription\\n'17', 'test description'\\n\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Bulk CSV Try to insert suppliers table restricted attribute as test_user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e535b6f5-76eb-4fe7-9bd3-5041d6cd27a6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"file_path\":\"{{files_location}}Suppliers.csv\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using SQL as su",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84fc829f-cd16-4134-9422-bebd3e25827e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n        \"operation\":\"sql\",\n        \"sql\":\"select * from {{schema}}.{{ship_tb}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using NoSQL as su",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2210cc1d-6afa-4db1-97d7-faf697281e14",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n\t  \"operation\":\"search_by_hash\",\n\t  \"schema\":\"{{schema}}\",\n\t  \"table\":\"{{ship_tb}}\",\n\t  \"hash_attribute\": \"{{ship_id}}\",\n\t  \"hash_values\":[1],\n\t  \"get_attributes\": [\"companyname\"]\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using SQL as test_user on restricted table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3e4fa85-1d5c-4997-a9e3-6cdb3e8bf18c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"All table attributes returned in unauthorized access array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"required_attribute_permissions is read\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.unauthorized_access.forEach(val => {",
									"        pm.expect(val.required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n        \"operation\":\"sql\",\n        \"sql\":\"select * from {{schema}}.{{ship_tb}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using SQL as test_user on table w/ two attr perms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c92136bc-c229-43a6-ac50-be4eb488c75b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n        \"operation\":\"sql\",\n        \"sql\":\"select * from {{schema}}.{{regi_tb}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using NoSQL as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fadbb406-e964-44c3-98bf-dc80667256d3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n\t  \"operation\":\"search_by_hash\",\n\t  \"schema\":\"{{schema}}\",\n\t  \"table\":\"{{supp_tb}}\",\n\t  \"hash_attribute\": \"{{supp_id}}\",\n\t  \"hash_values\":[1],\n\t  \"get_attributes\": [\"{{supp_id}}\"]\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - drop test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba5e1bf-2227-4a7c-837d-4ab5135ad133",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs -  drop_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bbb8dd0-3fb2-463d-b29c-b1bf60cb3a67",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Delete Jobs_test schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"id": "b078a989-a082-4d06-a402-2f060d40bcf4"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"test_job\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "de3cc224-871c-4c26-ac46-fcabcc3b19a3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "40366dcf-1010-4514-8875-fa128e0a7d97",
						"type": "text/javascript",
						"exec": [
							"console.log(responseBody);"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "8. Delete Tests",
			"item": [
				{
					"name": "Delete Records Before Tests",
					"item": [
						{
							"name": "create test schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "258c7621-3e47-417e-87a3-656bf9b68f48",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
											"\r",
											"setTimeout(()=>{}, 500);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"test_delete_before\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "create test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1962288e-caff-4297-9add-7565969209ea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"test_delete_before\",\n  \"table\":\"address\",\n  \"hash_attribute\": \"id\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0d8e7bf-196f-4d1c-bb06-5aa7cbdd14c7",
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(6);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aec40608-edb6-447a-bb04-493f5ce19cb8",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"address\",\n\"records\": [\n  {\n    \"id\": 1,\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": 2,\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": 3,\n    \"address\": \"19 Broadway\"\n  },\n  {\n    \"id\": 4,\n    \"address\": \"34A Mountain View\"\n  },\n  {\n    \"id\": 5,\n    \"address\": \"234 Curtis St\"\n  },\n  {\n    \"id\": 6,\n    \"address\": \"115 Way Rd\"\n  }\n]\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert additional new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d48949d-13e1-4bdc-ad3f-a9ed13d4cd8d",
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2df24f3e-9631-4423-ad93-9b9c9b911d08",
										"exec": [
											"pm.environment.set(\"insert_timestamp\", new Date().toISOString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"address\",\n\"records\": [\n  {\n    \"id\": 11,\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": 12,\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": 13,\n    \"address\": \"19 Broadway\"\n  }\n]\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete records before",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3992cdfa-9db2-4a76-90e0-81f54304fa32",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdDelete\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a954acc2-3d2c-40f8-8ebd-9b0d242bf62e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"delete_files_before\",\n\t\"date\":\"{{insert_timestamp}}\",\n\t\"schema\":\"test_delete_before\",\n\t\"table\":\"address\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check Delete Job Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a169cd3b-9f53-427c-b483-2af4e11091b7",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            postman.setNextRequest('Check Delete Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Delete Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf377968-c47d-4f97-bda5-2610f3a9ab6c",
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3918d23-a0e2-4a34-bc03-27d7969eee51",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify correct number of records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"verify correct records are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var ids = [];",
											"    jsonData.forEach((record) => {",
											"        ids.push(record.id)",
											"    })",
											"    ",
											"    pm.expect(ids.includes(11)).to.be.true;",
											"    pm.expect(ids.includes(12)).to.be.true;",
											"    pm.expect(ids.includes(13)).to.be.true;",
											"    ",
											"    pm.expect(ids.includes(1)).to.be.false;",
											"    pm.expect(ids.includes(2)).to.be.false;",
											"    pm.expect(ids.includes(3)).to.be.false;",
											"    pm.expect(ids.includes(4)).to.be.false;",
											"    pm.expect(ids.includes(5)).to.be.false;",
											"    pm.expect(ids.includes(6)).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce879b4d-0bd1-4357-9681-4a2382e033d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"test_delete_before\",\n\t\"table\":\"address\",\n\t\"hash_attribute\": \"id\",\n\t\"hash_values\":[1, 2, 3, 4, 5, 6, 11, 12, 13],\n\t\"get_attributes\": [\"id\", \"address\"]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1e269295-8c2c-446f-8a2b-77b40532bc7e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "338969c2-5eea-412e-b2d3-937e2d1c1ae1",
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobIdDelete\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check Delete Job Completed\");",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Transaction Logs Before Tests",
					"item": [
						{
							"name": "create test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d70dd1bd-fcab-4375-b2e8-dfc2c8dad33e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"test_delete_before\",\n  \"table\":\"testerama\",\n  \"hash_attribute\": \"id\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eca9f137-c6c4-4914-ac69-235af03841cd",
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(6);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3311282-1cc7-456e-bb4c-1ca44c8dad2b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"testerama\",\n\"records\": [\n  {\n    \"id\": 1,\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": 2,\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": 3,\n    \"address\": \"19 Broadway\"\n  },\n  {\n    \"id\": 4,\n    \"address\": \"34A Mountain View\"\n  },\n  {\n    \"id\": 5,\n    \"address\": \"234 Curtis St\"\n  },\n  {\n    \"id\": 6,\n    \"address\": \"115 Way Rd\"\n  }\n]\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert additional new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a297ca5-15ae-4da0-9f43-78fea09c59a6",
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb1cca69-76d7-4d00-855e-5e4db4e46a1d",
										"exec": [
											"pm.environment.set(\"insert_timestamp\", Date.now());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"testerama\",\n\"records\": [\n  {\n    \"id\": 11,\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": 12,\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": 13,\n    \"address\": \"19 Broadway\"\n  }\n]\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete records before",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbeba083-00bf-47a3-a8a0-d417f383dcc2",
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdDelete\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d7b16afa-4938-4da2-a55b-2891662fa5a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"delete_transaction_logs_before\",\n\t\"timestamp\":\"{{insert_timestamp}}\",\n\t\"schema\":\"test_delete_before\",\n\t\"table\":\"testerama\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check Delete Job Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7fd223a-0fdb-4ad1-b460-ba35fbdba4b6",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            postman.setNextRequest('Check Delete Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Delete Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53e32091-5454-4861-b357-28d2dc630484",
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "185ffd59-610d-4d6e-9bd7-58d6ab999ba1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ecd3bb7e-3767-49b6-a73f-9e90a98ca5d8",
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobIdDelete\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check Delete Job Completed\");",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Drop schema tests",
					"item": [
						{
							"name": "Create schema for drop test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e710a68d-a45a-402b-ac1e-6af7893faf21",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response from create schema is correct\", () =>{\r",
											"     var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.message).to.eql(\"schema 'drop_schema' successfully created\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9dcad88-a7c4-4032-9102-51f4cac4c85b",
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{drop_schema}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "Create table for drop test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "726f59b1-b63c-48b9-b50d-f449c57d3f78",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from create table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"table 'drop_schema.drop_table' successfully created.\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11e2933b-34de-484d-9f7e-2f21880dcf3c",
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"{{drop_schema}}\",\n  \"table\":\"{{drop_table}}\",\n  \"hash_attribute\": \"id\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert records for drop test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eebcadc3-fab5-42bd-9307-b3c4e5cff9a5",
										"exec": [
											"pm.test(\"Inserted all records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0cf3dcbb-d9b5-4b95-932a-0b1eeb4189e9",
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"{{drop_schema}}\",\n\"table\":\"{{drop_table}}\",\n\"records\": [\n  {\n    \"id\": 4,\n    \"address\": \"194 Greenbrook Drive\"\n  },\n  {\n    \"id\": 7,\n    \"address\": \"195 Greenbrook Lane\"\n  },\n  {\n    \"id\": 9,\n    \"address\": \"196 Greenbrook Lane\"\n  },\n  {\n    \"id\": 0,\n    \"address\": \"197 Greenbrook Drive\"\n  }\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52928ebc-b10c-492e-bc83-bacdd9a41a3d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted schema 'drop_schema'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{drop_schema}}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm drop schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84f57d06-19a5-4044-a287-a4cb9f749bda",
										"exec": [
											"// This code loops through the response from describe all and compares ",
											"// the attributes to expected result variable below. ",
											"// If you create tests that modify schema/table/attributes you should update ‘expected_result’",
											"let expected_result = {",
											"    \"dev\": {",
											"        \"time_functions\": {",
											"            \"__createdtime__\": 1592596204301,",
											"            \"__updatedtime__\": 1592596204301,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"079c4677-fc50-4a6c-bd00-21646f09ece1\",",
											"            \"name\": \"time_functions\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"getdate\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"now\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"today\"",
											"                },",
											"                {",
											"                    \"attribute\": \"tomorrow_epoch\"",
											"                },",
											"                {",
											"                    \"attribute\": \"server_time\"",
											"                },",
											"                {",
											"                    \"attribute\": \"c_timestamp\"",
											"                },",
											"                {",
											"                    \"attribute\": \"c_time\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"sub_3_years\"",
											"                },",
											"                {",
											"                    \"attribute\": \"add_day\"",
											"                },",
											"                {",
											"                    \"attribute\": \"offset_utc\"",
											"                },",
											"                {",
											"                    \"attribute\": \"c_date\"",
											"                }",
											"            ],",
											"            \"record_count\": 2",
											"        },",
											"        \"owner\": {",
											"            \"__createdtime__\": 1592596204432,",
											"            \"__updatedtime__\": 1592596204432,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"162d1334-54b3-42e9-95e9-bf33d4c50522\",",
											"            \"name\": \"owner\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"name\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                }",
											"            ],",
											"            \"record_count\": 4",
											"        },",
											"        \"long_text\": {",
											"            \"__createdtime__\": 1592596203947,",
											"            \"__updatedtime__\": 1592596203947,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"18638a1e-566a-4747-9272-9f5834b63e72\",",
											"            \"name\": \"long_text\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"remarks\"",
											"                }",
											"            ],",
											"            \"record_count\": 25",
											"        },",
											"        \"AttributeDropTest\": {",
											"            \"__createdtime__\": 1592596204025,",
											"            \"__updatedtime__\": 1592596204025,",
											"            \"hash_attribute\": \"hashid\",",
											"            \"id\": \"21508c60-a072-455b-abfa-5d0bbbb1ba3d\",",
											"            \"name\": \"AttributeDropTest\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"another_attribute\"",
											"                },",
											"                {",
											"                    \"attribute\": \"hashid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"some_attribute\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 2",
											"        },",
											"        \"invalid_attribute\": {",
											"            \"__createdtime__\": 1592596204120,",
											"            \"__updatedtime__\": 1592596204120,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"3703db05-107f-4162-9781-4432a479e260\",",
											"            \"name\": \"invalid_attribute\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"some_attribute2\"",
											"                },",
											"                {",
											"                    \"attribute\": \"some_attribute\"",
											"                },",
											"                {",
											"                    \"attribute\": \"some_attribute4\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"$ome-attribute3\"",
											"                },",
											"                {",
											"                    \"attribute\": \"some-attribute3\"",
											"                },",
											"                {",
											"                    \"attribute\": \"some_attribute1\"",
											"                },",
											"                {",
											"                    \"attribute\": \"another_attribute\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 2",
											"        },",
											"        \"remarks_blob\": {",
											"            \"__createdtime__\": 1592596204161,",
											"            \"__updatedtime__\": 1592596204161,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"84837373-a661-4f70-b4a0-e524cc5bc19e\",",
											"            \"name\": \"remarks_blob\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"length\"",
											"                },",
											"                {",
											"                    \"attribute\": \"remarks\"",
											"                }",
											"            ],",
											"            \"record_count\": 11",
											"        },",
											"        \"rando\": {",
											"            \"__createdtime__\": 1592596204559,",
											"            \"__updatedtime__\": 1592596204559,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"92fab46a-8eda-4855-bd9e-931728605837\",",
											"            \"name\": \"rando\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"active\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"name\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 4",
											"        },",
											"        \"dog\": {",
											"            \"__createdtime__\": 1592596204346,",
											"            \"__updatedtime__\": 1592596204346,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"a74b18a8-2f6d-43f0-a92e-871eee9fed92\",",
											"            \"name\": \"dog\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"breed_id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"owner_id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"adorable\"",
											"                },",
											"                {",
											"                    \"attribute\": \"age\"",
											"                },",
											"                {",
											"                    \"attribute\": \"weight_lbs\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"dog_name\"",
											"                }",
											"            ],",
											"            \"record_count\": 9",
											"        },",
											"        \"credits\": {",
											"            \"__createdtime__\": 1592596204517,",
											"            \"__updatedtime__\": 1592596204517,",
											"            \"hash_attribute\": \"movie_id\",",
											"            \"id\": \"ae36101c-cfbe-4500-aade-37f84a2e819e\",",
											"            \"name\": \"credits\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"crew\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"movie_id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"cast\"",
											"                },",
											"                {",
											"                    \"attribute\": \"title\"",
											"                }",
											"            ],",
											"            \"record_count\": 4803",
											"        },",
											"        \"movie\": {",
											"            \"__createdtime__\": 1592596204475,",
											"            \"__updatedtime__\": 1592596204475,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"d626b6d1-9fac-4b51-b66e-a5b01c202f80\",",
											"            \"name\": \"movie\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"vote_average\"",
											"                },",
											"                {",
											"                    \"attribute\": \"title\"",
											"                },",
											"                {",
											"                    \"attribute\": \"original_title\"",
											"                },",
											"                {",
											"                    \"attribute\": \"production_countries\"",
											"                },",
											"                {",
											"                    \"attribute\": \"vote_count\"",
											"                },",
											"                {",
											"                    \"attribute\": \"budget\"",
											"                },",
											"                {",
											"                    \"attribute\": \"popularity\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"spoken_languages\"",
											"                },",
											"                {",
											"                    \"attribute\": \"overview\"",
											"                },",
											"                {",
											"                    \"attribute\": \"revenue\"",
											"                },",
											"                {",
											"                    \"attribute\": \"keywords\"",
											"                },",
											"                {",
											"                    \"attribute\": \"homepage\"",
											"                },",
											"                {",
											"                    \"attribute\": \"production_companies\"",
											"                },",
											"                {",
											"                    \"attribute\": \"runtime\"",
											"                },",
											"                {",
											"                    \"attribute\": \"original_language\"",
											"                },",
											"                {",
											"                    \"attribute\": \"genres\"",
											"                },",
											"                {",
											"                    \"attribute\": \"release_date\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"status\"",
											"                },",
											"                {",
											"                    \"attribute\": \"tagline\"",
											"                }",
											"            ],",
											"            \"record_count\": 4803",
											"        },",
											"        \"sql_function\": {",
											"            \"__createdtime__\": 1592596204693,",
											"            \"__updatedtime__\": 1592596204693,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"d9ba16fe-f6e2-4547-be8f-a36b72d07143\",",
											"            \"name\": \"sql_function\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"rando\"",
											"                },",
											"                {",
											"                    \"attribute\": \"week_day\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"upper_week_day\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 2",
											"        },",
											"        \"books\": {",
											"            \"__createdtime__\": 1592596204204,",
											"            \"__updatedtime__\": 1592596204204,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"e661164b-fd70-4267-833a-34511a2d0260\",",
											"            \"name\": \"books\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"original_publication_year\"",
											"                },",
											"                {",
											"                    \"attribute\": \"authors\"",
											"                },",
											"                {",
											"                    \"attribute\": \"original_title\"",
											"                },",
											"                {",
											"                    \"attribute\": \"small_image_url\"",
											"                },",
											"                {",
											"                    \"attribute\": \"image_url\"",
											"                },",
											"                {",
											"                    \"attribute\": \"ratings_1\"",
											"                },",
											"                {",
											"                    \"attribute\": \"language_code\"",
											"                },",
											"                {",
											"                    \"attribute\": \"ratings_count\"",
											"                },",
											"                {",
											"                    \"attribute\": \"ratings_2\"",
											"                },",
											"                {",
											"                    \"attribute\": \"ratings_5\"",
											"                },",
											"                {",
											"                    \"attribute\": \"work_text_reviews_count\"",
											"                },",
											"                {",
											"                    \"attribute\": \"books_count\"",
											"                },",
											"                {",
											"                    \"attribute\": \"average_rating\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"ratings_3\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"nytimes_best_seller\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"ratings_4\"",
											"                },",
											"                {",
											"                    \"attribute\": \"work_ratings_count\"",
											"                },",
											"                {",
											"                    \"attribute\": \"title\"",
											"                }",
											"            ],",
											"            \"record_count\": 50",
											"        },",
											"        \"breed\": {",
											"            \"__createdtime__\": 1592596204391,",
											"            \"__updatedtime__\": 1592596204391,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"e79574ee-aff9-442b-8286-eafde771259f\",",
											"            \"name\": \"breed\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"name\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"image\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"section\"",
											"                },",
											"                {",
											"                    \"attribute\": \"country\"",
											"                }",
											"            ],",
											"            \"record_count\": 350",
											"        },",
											"        \"ratings\": {",
											"            \"__createdtime__\": 1592596204258,",
											"            \"__updatedtime__\": 1592596204258,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"ebc43530-fcab-4e5a-a168-eddf07257df7\",",
											"            \"name\": \"ratings\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"rating\"",
											"                },",
											"                {",
											"                    \"attribute\": \"book_id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"user_id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 5000",
											"        }",
											"    },",
											"    \"northnwd\": {",
											"        \"url_csv_data\": {",
											"            \"__createdtime__\": 1592596240984,",
											"            \"__updatedtime__\": 1592596240984,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"07f45132-af85-4738-8cbb-cc0dfb2b6eac\",",
											"            \"name\": \"url_csv_data\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"section\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"image\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"country\"",
											"                },",
											"                {",
											"                    \"attribute\": \"name\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 350",
											"        },",
											"        \"suppliers\": {",
											"            \"__createdtime__\": 1592596203524,",
											"            \"__updatedtime__\": 1592596203524,",
											"            \"hash_attribute\": \"supplierid\",",
											"            \"id\": \"143fc67f-a08b-4582-a953-6b17b65ea6a1\",",
											"            \"name\": \"suppliers\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"country\"",
											"                },",
											"                {",
											"                    \"attribute\": \"postalcode\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"fax\"",
											"                },",
											"                {",
											"                    \"attribute\": \"address\"",
											"                },",
											"                {",
											"                    \"attribute\": \"supplierid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"contacttitle\"",
											"                },",
											"                {",
											"                    \"attribute\": \"contactname\"",
											"                },",
											"                {",
											"                    \"attribute\": \"city\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"companyname\"",
											"                },",
											"                {",
											"                    \"attribute\": \"homepage\"",
											"                },",
											"                {",
											"                    \"attribute\": \"phone\"",
											"                },",
											"                {",
											"                    \"attribute\": \"region\"",
											"                }",
											"            ],",
											"            \"record_count\": 29",
											"        },",
											"        \"employeeterritories\": {",
											"            \"__createdtime__\": 1592596203830,",
											"            \"__updatedtime__\": 1592596203830,",
											"            \"hash_attribute\": \"employeeid\",",
											"            \"id\": \"2d96d532-aff5-400c-9ed5-f2515ee79366\",",
											"            \"name\": \"employeeterritories\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"employeeid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"skip\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"territoryid\"",
											"                }",
											"            ],",
											"            \"record_count\": 9",
											"        },",
											"        \"customers\": {",
											"            \"__createdtime__\": 1592596203364,",
											"            \"__updatedtime__\": 1592596203364,",
											"            \"hash_attribute\": \"customerid\",",
											"            \"id\": \"39331e86-bf9a-4089-9ee7-6fe4aa3753e8\",",
											"            \"name\": \"customers\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"array\"",
											"                },",
											"                {",
											"                    \"attribute\": \"fax\"",
											"                },",
											"                {",
											"                    \"attribute\": \"companyname\"",
											"                },",
											"                {",
											"                    \"attribute\": \"phone\"",
											"                },",
											"                {",
											"                    \"attribute\": \"country\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"object\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"city\"",
											"                },",
											"                {",
											"                    \"attribute\": \"postalcode\"",
											"                },",
											"                {",
											"                    \"attribute\": \"contacttitle\"",
											"                },",
											"                {",
											"                    \"attribute\": \"customerid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"address\"",
											"                },",
											"                {",
											"                    \"attribute\": \"region\"",
											"                },",
											"                {",
											"                    \"attribute\": \"contactmame\"",
											"                }",
											"            ],",
											"            \"record_count\": 95",
											"        },",
											"        \"order_details\": {",
											"            \"__createdtime__\": 1592596203867,",
											"            \"__updatedtime__\": 1592596203867,",
											"            \"hash_attribute\": \"orderdetailid\",",
											"            \"id\": \"40a4cf2c-663a-43f9-9e96-2b731bb02cd2\",",
											"            \"name\": \"order_details\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"orderid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"orderdetailid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"unitprice\"",
											"                },",
											"                {",
											"                    \"attribute\": \"discount\"",
											"                },",
											"                {",
											"                    \"attribute\": \"productid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"quantity\"",
											"                }",
											"            ],",
											"            \"record_count\": 2155",
											"        },",
											"        \"url_csv_no_data\": {",
											"            \"__createdtime__\": 1592596244007,",
											"            \"__updatedtime__\": 1592596244007,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"542a0a6b-9ddd-494d-bc83-bf6dda72a6b1\",",
											"            \"name\": \"url_csv_no_data\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 0",
											"        },",
											"        \"products\": {",
											"            \"__createdtime__\": 1592596203905,",
											"            \"__updatedtime__\": 1592596203905,",
											"            \"hash_attribute\": \"productid\",",
											"            \"id\": \"5fee5f0a-52f7-40a3-ac1b-a6554b7e99a9\",",
											"            \"name\": \"products\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"productid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"unitsnnorder\"",
											"                },",
											"                {",
											"                    \"attribute\": \"productname\"",
											"                },",
											"                {",
											"                    \"attribute\": \"discontinued\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"reorderlevel\"",
											"                },",
											"                {",
											"                    \"attribute\": \"supplierid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"quantityperunit\"",
											"                },",
											"                {",
											"                    \"attribute\": \"unitsinstock\"",
											"                },",
											"                {",
											"                    \"attribute\": \"unitprice\"",
											"                },",
											"                {",
											"                    \"attribute\": \"categoryid\"",
											"                }",
											"            ],",
											"            \"record_count\": 77",
											"        },",
											"        \"orders\": {",
											"            \"__createdtime__\": 1592596203663,",
											"            \"__updatedtime__\": 1592596203663,",
											"            \"hash_attribute\": \"orderid\",",
											"            \"id\": \"793135d4-a7f7-452b-a474-f154b0299a05\",",
											"            \"name\": \"orders\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"shipvia\"",
											"                },",
											"                {",
											"                    \"attribute\": \"shipregion\"",
											"                },",
											"                {",
											"                    \"attribute\": \"shipcountry\"",
											"                },",
											"                {",
											"                    \"attribute\": \"orderid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"shipname\"",
											"                },",
											"                {",
											"                    \"attribute\": \"shipaddress\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"orderdate\"",
											"                },",
											"                {",
											"                    \"attribute\": \"shippeddate\"",
											"                },",
											"                {",
											"                    \"attribute\": \"employeeid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"freight\"",
											"                },",
											"                {",
											"                    \"attribute\": \"requireddate\"",
											"                },",
											"                {",
											"                    \"attribute\": \"shipPostalcode\"",
											"                },",
											"                {",
											"                    \"attribute\": \"customerid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"shipcity\"",
											"                }",
											"            ],",
											"            \"record_count\": 830",
											"        },",
											"        \"employees\": {",
											"            \"__createdtime__\": 1592596203623,",
											"            \"__updatedtime__\": 1592596203623,",
											"            \"hash_attribute\": \"employeeid\",",
											"            \"id\": \"8f0c8beb-9f60-4431-a086-d0ff04a8ef56\",",
											"            \"name\": \"employees\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"city\"",
											"                },",
											"                {",
											"                    \"attribute\": \"photopath\"",
											"                },",
											"                {",
											"                    \"attribute\": \"birthdate\"",
											"                },",
											"                {",
											"                    \"attribute\": \"test_record\"",
											"                },",
											"                {",
											"                    \"attribute\": \"skip\"",
											"                },",
											"                {",
											"                    \"attribute\": \"reportsto\"",
											"                },",
											"                {",
											"                    \"attribute\": \"employeeid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"firstname\"",
											"                },",
											"                {",
											"                    \"attribute\": \"notes\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"address\"",
											"                },",
											"                {",
											"                    \"attribute\": \"lastname\"",
											"                },",
											"                {",
											"                    \"attribute\": \"postalCode\"",
											"                },",
											"                {",
											"                    \"attribute\": \"homephone\"",
											"                },",
											"                {",
											"                    \"attribute\": \"region\"",
											"                },",
											"                {",
											"                    \"attribute\": \"extension\"",
											"                },",
											"                {",
											"                    \"attribute\": 4289",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"country\"",
											"                },",
											"                {",
											"                    \"attribute\": \"hireDate\"",
											"                },",
											"                {",
											"                    \"attribute\": \"title\"",
											"                },",
											"                {",
											"                    \"attribute\": \"titleofcourtesy\"",
											"                }",
											"            ],",
											"            \"record_count\": 13",
											"        },",
											"        \"shippers\": {",
											"            \"__createdtime__\": 1592596203789,",
											"            \"__updatedtime__\": 1592596203789,",
											"            \"hash_attribute\": \"shipperid\",",
											"            \"id\": \"a30b9fb8-b433-4e10-94f7-b65718b0a066\",",
											"            \"name\": \"shippers\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"shipperid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"phone\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"companyname\"",
											"                }",
											"            ],",
											"            \"record_count\": 3",
											"        },",
											"        \"territories\": {",
											"            \"__createdtime__\": 1592596203709,",
											"            \"__updatedtime__\": 1592596203709,",
											"            \"hash_attribute\": \"territoryid\",",
											"            \"id\": \"aebd9ccb-2c2f-47d9-b0d7-b29e4bc93810\",",
											"            \"name\": \"territories\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"territorydescription\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"territoryid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"regionid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 56",
											"        },",
											"        \"region\": {",
											"            \"__createdtime__\": 1592596203565,",
											"            \"__updatedtime__\": 1592596203565,",
											"            \"hash_attribute\": \"regionid\",",
											"            \"id\": \"e1bb4a56-79e9-4219-abe1-58f6dbd63f03\",",
											"            \"name\": \"region\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"regionid\"",
											"                },",
											"                {",
											"                    \"attribute\": \"regiondescription\"",
											"                },",
											"                {",
											"                    \"attribute\": \" regiondescription\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 6",
											"        },",
											"        \"categories\": {",
											"            \"__createdtime__\": 1592596203750,",
											"            \"__updatedtime__\": 1592596203750,",
											"            \"hash_attribute\": \"categoryid\",",
											"            \"id\": \"e613fd24-77bf-46b3-b7ec-28082ff7e3bf\",",
											"            \"name\": \"categories\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"categoryname\"",
											"                },",
											"                {",
											"                    \"attribute\": \"picture\"",
											"                },",
											"                {",
											"                    \"attribute\": \"description\"",
											"                },",
											"                {",
											"                    \"attribute\": \"categoryid\"",
											"                }",
											"            ],",
											"            \"record_count\": 6",
											"        }",
											"    },",
											"    \"test_delete_before\": {",
											"        \"address\": {",
											"            \"__createdtime__\": 1592596373941,",
											"            \"__updatedtime__\": 1592596373941,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"70399c96-528d-4ac5-8134-2a25f2d3bd22\",",
											"            \"name\": \"address\",",
											"            \"residence\": null,",
											"            \"schema\": \"test_delete_before\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"address\"",
											"                }",
											"            ],",
											"            \"record_count\": 3",
											"        }",
											"    },",
											"    \"another\": {",
											"        \"breed\": {",
											"            \"__createdtime__\": 1592596204649,",
											"            \"__updatedtime__\": 1592596204649,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"898c6c6c-7b50-40f3-bbc3-1e90b79440ff\",",
											"            \"name\": \"breed\",",
											"            \"residence\": null,",
											"            \"schema\": \"another\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"section\"",
											"                },",
											"                {",
											"                    \"attribute\": \"country\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"name\"",
											"                },",
											"                {",
											"                    \"attribute\": \"image\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 350",
											"        }",
											"    },",
											"    \"call\": {",
											"        \"aggr\": {",
											"            \"__createdtime__\": 1592596203986,",
											"            \"__updatedtime__\": 1592596203986,",
											"            \"hash_attribute\": \"all\",",
											"            \"id\": \"a2089ab5-92dd-4def-ba2e-c10cb0893f4d\",",
											"            \"name\": \"aggr\",",
											"            \"residence\": null,",
											"            \"schema\": \"call\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"breed_id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"age\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"adorable\"",
											"                },",
											"                {",
											"                    \"attribute\": \"all\"",
											"                },",
											"                {",
											"                    \"attribute\": \"dog_name\"",
											"                },",
											"                {",
											"                    \"attribute\": \"owner_name\"",
											"                },",
											"                {",
											"                    \"attribute\": \"weight_lbs\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 11",
											"        }",
											"    },",
											"    \"other\": {",
											"        \"owner\": {",
											"            \"__createdtime__\": 1592596204604,",
											"            \"__updatedtime__\": 1592596204604,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"cc68da26-fdb6-4c35-bf6b-dcfcc014b4bf\",",
											"            \"name\": \"owner\",",
											"            \"residence\": null,",
											"            \"schema\": \"other\",",
											"            \"attributes\": [",
											"                {",
											"                    \"attribute\": \"__createdtime__\"",
											"                },",
											"                {",
											"                    \"attribute\": \"name\"",
											"                },",
											"                {",
											"                    \"attribute\": \"id\"",
											"                },",
											"                {",
											"                    \"attribute\": \"__updatedtime__\"",
											"                }",
											"            ],",
											"            \"record_count\": 4",
											"        }",
											"    }",
											"}",
											"",
											"let json_data = pm.response.json();",
											"let attribute_found = true;",
											"let schema_exists = false;",
											"let schema_name = pm.environment.get(\"drop_schema\")",
											"for (let schema in expected_result) {",
											"    if (schema === schema_name) {",
											"        schema_exists = true;",
											"        break;",
											"    }",
											"    for (let table in expected_result[schema]) {",
											"        let json_data_attr_array = json_data[schema][table][\"attributes\"].map(obj => obj.attribute);",
											"        expected_result[schema][table].attributes.forEach((value) => {",
											"            if (!json_data_attr_array.includes(value.attribute)) {",
											"                attribute_found = false;",
											"                console.log(value.attribute);",
											"            }",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Test schema does not exist\", function () {",
											"    pm.expect(schema_exists).to.eql(false);",
											"});",
											"",
											"pm.test(\"Test attributes are as expected\", function () {",
											"    pm.expect(attribute_found).to.eql(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"describe_all\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create schema again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01a3f6ae-60bb-4946-9c80-69656c9dc510",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response from create schema is correct\", () =>{\r",
											"     var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.message).to.eql(\"schema 'drop_schema' successfully created\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2638fc7d-8325-43f7-ae52-f186d41f7a75",
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{drop_schema}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "Create table again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf70cdd9-8dc6-457a-a09a-ac67bc8fa52e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from create table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"table 'drop_schema.drop_table' successfully created.\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3f61600-8922-4779-a7d8-4f45e9e0a787",
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"{{drop_schema}}\",\n  \"table\":\"{{drop_table}}\",\n  \"hash_attribute\": \"id\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm correct attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "012bfc8c-582f-4c67-96e5-beb52d0e7a9e",
										"exec": [
											"// This code loops through the response from describe all and compares ",
											"// the attributes to expected result variable below. ",
											"// If you create tests that modify schema/table/attributes you should update ‘expected_result’",
											"let expected_result = {",
											"    \"dev\": {",
											"        \"time_functions\": {",
											"            \"__createdtime__\": 1592596204301,",
											"            \"__updatedtime__\": 1592596204301,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"079c4677-fc50-4a6c-bd00-21646f09ece1\",",
											"            \"name\": \"time_functions\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"getdate\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"now\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"today\"",
											"            }, {",
											"                \"attribute\": \"tomorrow_epoch\"",
											"            }, {",
											"                \"attribute\": \"server_time\"",
											"            }, {",
											"                \"attribute\": \"c_timestamp\"",
											"            }, {",
											"                \"attribute\": \"c_time\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"sub_3_years\"",
											"            }, {",
											"                \"attribute\": \"add_day\"",
											"            }, {",
											"                \"attribute\": \"offset_utc\"",
											"            }, {",
											"                \"attribute\": \"c_date\"",
											"            }],",
											"            \"record_count\": 2",
											"        },",
											"        \"owner\": {",
											"            \"__createdtime__\": 1592596204432,",
											"            \"__updatedtime__\": 1592596204432,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"162d1334-54b3-42e9-95e9-bf33d4c50522\",",
											"            \"name\": \"owner\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"name\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }],",
											"            \"record_count\": 4",
											"        },",
											"        \"long_text\": {",
											"            \"__createdtime__\": 1592596203947,",
											"            \"__updatedtime__\": 1592596203947,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"18638a1e-566a-4747-9272-9f5834b63e72\",",
											"            \"name\": \"long_text\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"remarks\"",
											"            }],",
											"            \"record_count\": 25",
											"        },",
											"        \"AttributeDropTest\": {",
											"            \"__createdtime__\": 1592596204025,",
											"            \"__updatedtime__\": 1592596204025,",
											"            \"hash_attribute\": \"hashid\",",
											"            \"id\": \"21508c60-a072-455b-abfa-5d0bbbb1ba3d\",",
											"            \"name\": \"AttributeDropTest\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"another_attribute\"",
											"            }, {",
											"                \"attribute\": \"hashid\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"some_attribute\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }],",
											"            \"record_count\": 2",
											"        },",
											"        \"invalid_attribute\": {",
											"            \"__createdtime__\": 1592596204120,",
											"            \"__updatedtime__\": 1592596204120,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"3703db05-107f-4162-9781-4432a479e260\",",
											"            \"name\": \"invalid_attribute\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"some_attribute2\"",
											"            }, {",
											"                \"attribute\": \"some_attribute\"",
											"            }, {",
											"                \"attribute\": \"some_attribute4\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"$ome-attribute3\"",
											"            }, {",
											"                \"attribute\": \"some-attribute3\"",
											"            }, {",
											"                \"attribute\": \"some_attribute1\"",
											"            }, {",
											"                \"attribute\": \"another_attribute\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }],",
											"            \"record_count\": 2",
											"        },",
											"        \"remarks_blob\": {",
											"            \"__createdtime__\": 1592596204161,",
											"            \"__updatedtime__\": 1592596204161,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"84837373-a661-4f70-b4a0-e524cc5bc19e\",",
											"            \"name\": \"remarks_blob\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"length\"",
											"            }, {",
											"                \"attribute\": \"remarks\"",
											"            }],",
											"            \"record_count\": 11",
											"        },",
											"        \"rando\": {",
											"            \"__createdtime__\": 1592596204559,",
											"            \"__updatedtime__\": 1592596204559,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"92fab46a-8eda-4855-bd9e-931728605837\",",
											"            \"name\": \"rando\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"active\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"name\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }],",
											"            \"record_count\": 4",
											"        },",
											"        \"dog\": {",
											"            \"__createdtime__\": 1592596204346,",
											"            \"__updatedtime__\": 1592596204346,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"a74b18a8-2f6d-43f0-a92e-871eee9fed92\",",
											"            \"name\": \"dog\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"breed_id\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"owner_id\"",
											"            }, {",
											"                \"attribute\": \"adorable\"",
											"            }, {",
											"                \"attribute\": \"age\"",
											"            }, {",
											"                \"attribute\": \"weight_lbs\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"dog_name\"",
											"            }],",
											"            \"record_count\": 9",
											"        },",
											"        \"credits\": {",
											"            \"__createdtime__\": 1592596204517,",
											"            \"__updatedtime__\": 1592596204517,",
											"            \"hash_attribute\": \"movie_id\",",
											"            \"id\": \"ae36101c-cfbe-4500-aade-37f84a2e819e\",",
											"            \"name\": \"credits\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"crew\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"movie_id\"",
											"            }, {",
											"                \"attribute\": \"cast\"",
											"            }, {",
											"                \"attribute\": \"title\"",
											"            }],",
											"            \"record_count\": 4803",
											"        },",
											"        \"movie\": {",
											"            \"__createdtime__\": 1592596204475,",
											"            \"__updatedtime__\": 1592596204475,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"d626b6d1-9fac-4b51-b66e-a5b01c202f80\",",
											"            \"name\": \"movie\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"vote_average\"",
											"            }, {",
											"                \"attribute\": \"title\"",
											"            }, {",
											"                \"attribute\": \"original_title\"",
											"            }, {",
											"                \"attribute\": \"production_countries\"",
											"            }, {",
											"                \"attribute\": \"vote_count\"",
											"            }, {",
											"                \"attribute\": \"budget\"",
											"            }, {",
											"                \"attribute\": \"popularity\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"spoken_languages\"",
											"            }, {",
											"                \"attribute\": \"overview\"",
											"            }, {",
											"                \"attribute\": \"revenue\"",
											"            }, {",
											"                \"attribute\": \"keywords\"",
											"            }, {",
											"                \"attribute\": \"homepage\"",
											"            }, {",
											"                \"attribute\": \"production_companies\"",
											"            }, {",
											"                \"attribute\": \"runtime\"",
											"            }, {",
											"                \"attribute\": \"original_language\"",
											"            }, {",
											"                \"attribute\": \"genres\"",
											"            }, {",
											"                \"attribute\": \"release_date\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"status\"",
											"            }, {",
											"                \"attribute\": \"tagline\"",
											"            }],",
											"            \"record_count\": 4803",
											"        },",
											"        \"sql_function\": {",
											"            \"__createdtime__\": 1592596204693,",
											"            \"__updatedtime__\": 1592596204693,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"d9ba16fe-f6e2-4547-be8f-a36b72d07143\",",
											"            \"name\": \"sql_function\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"rando\"",
											"            }, {",
											"                \"attribute\": \"week_day\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"upper_week_day\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }],",
											"            \"record_count\": 2",
											"        },",
											"        \"books\": {",
											"            \"__createdtime__\": 1592596204204,",
											"            \"__updatedtime__\": 1592596204204,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"e661164b-fd70-4267-833a-34511a2d0260\",",
											"            \"name\": \"books\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"original_publication_year\"",
											"            }, {",
											"                \"attribute\": \"authors\"",
											"            }, {",
											"                \"attribute\": \"original_title\"",
											"            }, {",
											"                \"attribute\": \"small_image_url\"",
											"            }, {",
											"                \"attribute\": \"image_url\"",
											"            }, {",
											"                \"attribute\": \"ratings_1\"",
											"            }, {",
											"                \"attribute\": \"language_code\"",
											"            }, {",
											"                \"attribute\": \"ratings_count\"",
											"            }, {",
											"                \"attribute\": \"ratings_2\"",
											"            }, {",
											"                \"attribute\": \"ratings_5\"",
											"            }, {",
											"                \"attribute\": \"work_text_reviews_count\"",
											"            }, {",
											"                \"attribute\": \"books_count\"",
											"            }, {",
											"                \"attribute\": \"average_rating\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"ratings_3\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"nytimes_best_seller\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"ratings_4\"",
											"            }, {",
											"                \"attribute\": \"work_ratings_count\"",
											"            }, {",
											"                \"attribute\": \"title\"",
											"            }],",
											"            \"record_count\": 50",
											"        },",
											"        \"breed\": {",
											"            \"__createdtime__\": 1592596204391,",
											"            \"__updatedtime__\": 1592596204391,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"e79574ee-aff9-442b-8286-eafde771259f\",",
											"            \"name\": \"breed\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"name\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"image\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"section\"",
											"            }, {",
											"                \"attribute\": \"country\"",
											"            }],",
											"            \"record_count\": 350",
											"        },",
											"        \"ratings\": {",
											"            \"__createdtime__\": 1592596204258,",
											"            \"__updatedtime__\": 1592596204258,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"ebc43530-fcab-4e5a-a168-eddf07257df7\",",
											"            \"name\": \"ratings\",",
											"            \"residence\": null,",
											"            \"schema\": \"dev\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"rating\"",
											"            }, {",
											"                \"attribute\": \"book_id\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"user_id\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }],",
											"            \"record_count\": 5000",
											"        }",
											"    },",
											"    \"northnwd\": {",
											"        \"url_csv_data\": {",
											"            \"__createdtime__\": 1592596240984,",
											"            \"__updatedtime__\": 1592596240984,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"07f45132-af85-4738-8cbb-cc0dfb2b6eac\",",
											"            \"name\": \"url_csv_data\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"section\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"image\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"country\"",
											"            }, {",
											"                \"attribute\": \"name\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }],",
											"            \"record_count\": 350",
											"        },",
											"        \"suppliers\": {",
											"            \"__createdtime__\": 1592596203524,",
											"            \"__updatedtime__\": 1592596203524,",
											"            \"hash_attribute\": \"supplierid\",",
											"            \"id\": \"143fc67f-a08b-4582-a953-6b17b65ea6a1\",",
											"            \"name\": \"suppliers\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"country\"",
											"            }, {",
											"                \"attribute\": \"postalcode\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"fax\"",
											"            }, {",
											"                \"attribute\": \"address\"",
											"            }, {",
											"                \"attribute\": \"supplierid\"",
											"            }, {",
											"                \"attribute\": \"contacttitle\"",
											"            }, {",
											"                \"attribute\": \"contactname\"",
											"            }, {",
											"                \"attribute\": \"city\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"companyname\"",
											"            }, {",
											"                \"attribute\": \"homepage\"",
											"            }, {",
											"                \"attribute\": \"phone\"",
											"            }, {",
											"                \"attribute\": \"region\"",
											"            }],",
											"            \"record_count\": 29",
											"        },",
											"        \"employeeterritories\": {",
											"            \"__createdtime__\": 1592596203830,",
											"            \"__updatedtime__\": 1592596203830,",
											"            \"hash_attribute\": \"employeeid\",",
											"            \"id\": \"2d96d532-aff5-400c-9ed5-f2515ee79366\",",
											"            \"name\": \"employeeterritories\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"employeeid\"",
											"            }, {",
											"                \"attribute\": \"skip\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"territoryid\"",
											"            }],",
											"            \"record_count\": 9",
											"        },",
											"        \"customers\": {",
											"            \"__createdtime__\": 1592596203364,",
											"            \"__updatedtime__\": 1592596203364,",
											"            \"hash_attribute\": \"customerid\",",
											"            \"id\": \"39331e86-bf9a-4089-9ee7-6fe4aa3753e8\",",
											"            \"name\": \"customers\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"array\"",
											"            }, {",
											"                \"attribute\": \"fax\"",
											"            }, {",
											"                \"attribute\": \"companyname\"",
											"            }, {",
											"                \"attribute\": \"phone\"",
											"            }, {",
											"                \"attribute\": \"country\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"object\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"city\"",
											"            }, {",
											"                \"attribute\": \"postalcode\"",
											"            }, {",
											"                \"attribute\": \"contacttitle\"",
											"            }, {",
											"                \"attribute\": \"customerid\"",
											"            }, {",
											"                \"attribute\": \"address\"",
											"            }, {",
											"                \"attribute\": \"region\"",
											"            }, {",
											"                \"attribute\": \"contactmame\"",
											"            }],",
											"            \"record_count\": 95",
											"        },",
											"        \"order_details\": {",
											"            \"__createdtime__\": 1592596203867,",
											"            \"__updatedtime__\": 1592596203867,",
											"            \"hash_attribute\": \"orderdetailid\",",
											"            \"id\": \"40a4cf2c-663a-43f9-9e96-2b731bb02cd2\",",
											"            \"name\": \"order_details\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"orderid\"",
											"            }, {",
											"                \"attribute\": \"orderdetailid\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"unitprice\"",
											"            }, {",
											"                \"attribute\": \"discount\"",
											"            }, {",
											"                \"attribute\": \"productid\"",
											"            }, {",
											"                \"attribute\": \"quantity\"",
											"            }],",
											"            \"record_count\": 2155",
											"        },",
											"        \"url_csv_no_data\": {",
											"            \"__createdtime__\": 1592596244007,",
											"            \"__updatedtime__\": 1592596244007,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"542a0a6b-9ddd-494d-bc83-bf6dda72a6b1\",",
											"            \"name\": \"url_csv_no_data\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }],",
											"            \"record_count\": 0",
											"        },",
											"        \"products\": {",
											"            \"__createdtime__\": 1592596203905,",
											"            \"__updatedtime__\": 1592596203905,",
											"            \"hash_attribute\": \"productid\",",
											"            \"id\": \"5fee5f0a-52f7-40a3-ac1b-a6554b7e99a9\",",
											"            \"name\": \"products\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"productid\"",
											"            }, {",
											"                \"attribute\": \"unitsnnorder\"",
											"            }, {",
											"                \"attribute\": \"productname\"",
											"            }, {",
											"                \"attribute\": \"discontinued\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"reorderlevel\"",
											"            }, {",
											"                \"attribute\": \"supplierid\"",
											"            }, {",
											"                \"attribute\": \"quantityperunit\"",
											"            }, {",
											"                \"attribute\": \"unitsinstock\"",
											"            }, {",
											"                \"attribute\": \"unitprice\"",
											"            }, {",
											"                \"attribute\": \"categoryid\"",
											"            }],",
											"            \"record_count\": 77",
											"        },",
											"        \"orders\": {",
											"            \"__createdtime__\": 1592596203663,",
											"            \"__updatedtime__\": 1592596203663,",
											"            \"hash_attribute\": \"orderid\",",
											"            \"id\": \"793135d4-a7f7-452b-a474-f154b0299a05\",",
											"            \"name\": \"orders\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"shipvia\"",
											"            }, {",
											"                \"attribute\": \"shipregion\"",
											"            }, {",
											"                \"attribute\": \"shipcountry\"",
											"            }, {",
											"                \"attribute\": \"orderid\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"shipname\"",
											"            }, {",
											"                \"attribute\": \"shipaddress\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"orderdate\"",
											"            }, {",
											"                \"attribute\": \"shippeddate\"",
											"            }, {",
											"                \"attribute\": \"employeeid\"",
											"            }, {",
											"                \"attribute\": \"freight\"",
											"            }, {",
											"                \"attribute\": \"requireddate\"",
											"            }, {",
											"                \"attribute\": \"shipPostalcode\"",
											"            }, {",
											"                \"attribute\": \"customerid\"",
											"            }, {",
											"                \"attribute\": \"shipcity\"",
											"            }],",
											"            \"record_count\": 830",
											"        },",
											"        \"employees\": {",
											"            \"__createdtime__\": 1592596203623,",
											"            \"__updatedtime__\": 1592596203623,",
											"            \"hash_attribute\": \"employeeid\",",
											"            \"id\": \"8f0c8beb-9f60-4431-a086-d0ff04a8ef56\",",
											"            \"name\": \"employees\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"city\"",
											"            }, {",
											"                \"attribute\": \"photopath\"",
											"            }, {",
											"                \"attribute\": \"birthdate\"",
											"            }, {",
											"                \"attribute\": \"test_record\"",
											"            }, {",
											"                \"attribute\": \"skip\"",
											"            }, {",
											"                \"attribute\": \"reportsto\"",
											"            }, {",
											"                \"attribute\": \"employeeid\"",
											"            }, {",
											"                \"attribute\": \"firstname\"",
											"            }, {",
											"                \"attribute\": \"notes\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"address\"",
											"            }, {",
											"                \"attribute\": \"lastname\"",
											"            }, {",
											"                \"attribute\": \"postalCode\"",
											"            }, {",
											"                \"attribute\": \"homephone\"",
											"            }, {",
											"                \"attribute\": \"region\"",
											"            }, {",
											"                \"attribute\": \"extension\"",
											"            }, {",
											"                \"attribute\": 4289",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"country\"",
											"            }, {",
											"                \"attribute\": \"hireDate\"",
											"            }, {",
											"                \"attribute\": \"title\"",
											"            }, {",
											"                \"attribute\": \"titleofcourtesy\"",
											"            }],",
											"            \"record_count\": 13",
											"        },",
											"        \"shippers\": {",
											"            \"__createdtime__\": 1592596203789,",
											"            \"__updatedtime__\": 1592596203789,",
											"            \"hash_attribute\": \"shipperid\",",
											"            \"id\": \"a30b9fb8-b433-4e10-94f7-b65718b0a066\",",
											"            \"name\": \"shippers\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"shipperid\"",
											"            }, {",
											"                \"attribute\": \"phone\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"companyname\"",
											"            }],",
											"            \"record_count\": 3",
											"        },",
											"        \"territories\": {",
											"            \"__createdtime__\": 1592596203709,",
											"            \"__updatedtime__\": 1592596203709,",
											"            \"hash_attribute\": \"territoryid\",",
											"            \"id\": \"aebd9ccb-2c2f-47d9-b0d7-b29e4bc93810\",",
											"            \"name\": \"territories\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"territorydescription\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"territoryid\"",
											"            }, {",
											"                \"attribute\": \"regionid\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }],",
											"            \"record_count\": 56",
											"        },",
											"        \"region\": {",
											"            \"__createdtime__\": 1592596203565,",
											"            \"__updatedtime__\": 1592596203565,",
											"            \"hash_attribute\": \"regionid\",",
											"            \"id\": \"e1bb4a56-79e9-4219-abe1-58f6dbd63f03\",",
											"            \"name\": \"region\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"regionid\"",
											"            }, {",
											"                \"attribute\": \"regiondescription\"",
											"            }, {",
											"                \"attribute\": \" regiondescription\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }],",
											"            \"record_count\": 6",
											"        },",
											"        \"categories\": {",
											"            \"__createdtime__\": 1592596203750,",
											"            \"__updatedtime__\": 1592596203750,",
											"            \"hash_attribute\": \"categoryid\",",
											"            \"id\": \"e613fd24-77bf-46b3-b7ec-28082ff7e3bf\",",
											"            \"name\": \"categories\",",
											"            \"residence\": null,",
											"            \"schema\": \"northnwd\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"categoryname\"",
											"            }, {",
											"                \"attribute\": \"picture\"",
											"            }, {",
											"                \"attribute\": \"description\"",
											"            }, {",
											"                \"attribute\": \"categoryid\"",
											"            }],",
											"            \"record_count\": 6",
											"        }",
											"    },",
											"    \"test_delete_before\": {",
											"        \"address\": {",
											"            \"__createdtime__\": 1592596373941,",
											"            \"__updatedtime__\": 1592596373941,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"70399c96-528d-4ac5-8134-2a25f2d3bd22\",",
											"            \"name\": \"address\",",
											"            \"residence\": null,",
											"            \"schema\": \"test_delete_before\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"address\"",
											"            }],",
											"            \"record_count\": 3",
											"        }",
											"    },",
											"    \"another\": {",
											"        \"breed\": {",
											"            \"__createdtime__\": 1592596204649,",
											"            \"__updatedtime__\": 1592596204649,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"898c6c6c-7b50-40f3-bbc3-1e90b79440ff\",",
											"            \"name\": \"breed\",",
											"            \"residence\": null,",
											"            \"schema\": \"another\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"section\"",
											"            }, {",
											"                \"attribute\": \"country\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"name\"",
											"            }, {",
											"                \"attribute\": \"image\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }],",
											"            \"record_count\": 350",
											"        }",
											"    },",
											"    \"call\": {",
											"        \"aggr\": {",
											"            \"__createdtime__\": 1592596203986,",
											"            \"__updatedtime__\": 1592596203986,",
											"            \"hash_attribute\": \"all\",",
											"            \"id\": \"a2089ab5-92dd-4def-ba2e-c10cb0893f4d\",",
											"            \"name\": \"aggr\",",
											"            \"residence\": null,",
											"            \"schema\": \"call\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"breed_id\"",
											"            }, {",
											"                \"attribute\": \"age\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"adorable\"",
											"            }, {",
											"                \"attribute\": \"all\"",
											"            }, {",
											"                \"attribute\": \"dog_name\"",
											"            }, {",
											"                \"attribute\": \"owner_name\"",
											"            }, {",
											"                \"attribute\": \"weight_lbs\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }],",
											"            \"record_count\": 11",
											"        }",
											"    },",
											"    \"other\": {",
											"        \"owner\": {",
											"            \"__createdtime__\": 1592596204604,",
											"            \"__updatedtime__\": 1592596204604,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"cc68da26-fdb6-4c35-bf6b-dcfcc014b4bf\",",
											"            \"name\": \"owner\",",
											"            \"residence\": null,",
											"            \"schema\": \"other\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"name\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }, {",
											"                \"attribute\": \"__updatedtime__\"",
											"            }],",
											"            \"record_count\": 4",
											"        }",
											"    },",
											"    \"drop_schema\": {",
											"        \"drop_table\": {",
											"            \"__createdtime__\": 1592596516112,",
											"            \"__updatedtime__\": 1592596516112,",
											"            \"hash_attribute\": \"id\",",
											"            \"id\": \"f4f7f2ae-de40-4238-9c87-f76036227dd8\",",
											"            \"name\": \"drop_table\",",
											"            \"residence\": null,",
											"            \"schema\": \"drop_schema\",",
											"            \"attributes\": [{",
											"                \"attribute\": \"__updatedtime__\"",
											"            }, {",
											"                \"attribute\": \"__createdtime__\"",
											"            }, {",
											"                \"attribute\": \"id\"",
											"            }],",
											"            \"record_count\": 0",
											"        }",
											"    }",
											"}",
											"",
											"let json_data = pm.response.json();",
											"let attribute_found = true;",
											"let schema_exists = false;",
											"let schema_name = pm.environment.get(\"drop_schema\")",
											"for (let schema in expected_result) {",
											"    if (schema === schema_name) {",
											"        schema_exists = true;",
											"    }",
											"    for (let table in expected_result[schema]) {",
											"        let json_data_attr_array = json_data[schema][table][\"attributes\"].map(obj => obj.attribute);",
											"        expected_result[schema][table].attributes.forEach((value) => {",
											"            if (!json_data_attr_array.includes(value.attribute)) {",
											"                attribute_found = false;",
											"                console.log(value.attribute);",
											"            }",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Test schema does exist\", function () {",
											"    pm.expect(schema_exists).to.eql(true);",
											"});",
											"",
											"pm.test(\"Test attributes are as expected\", function () {",
											"    pm.expect(attribute_found).to.eql(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"describe_all\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Clean up after drop schema tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d61f5c7d-bf0f-4bf8-9599-8df0f6ea9118",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted schema 'drop_schema'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{drop_schema}}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Insert new Employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c0194a8-6753-4188-8854-fa7b6899a28b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Insert employee id 924 - 927 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inserted_hashes.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"employeeid\": 924,\n    \"address\": \"194 Greenbrook Drive\"\n  },\n  {\n    \"employeeid\": 925,\n    \"address\": \"195 Greenbrook Lane\"\n  },\n  {\n    \"employeeid\": 926,\n    \"address\": \"196 Greenbrook Lane\"\n  },\n  {\n    \"employeeid\": 927,\n    \"address\": \"197 Greenbrook Drive\"\n  }\n]\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records ending in Lane",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c3d03ed-b11c-4dca-8fbf-5cd599197c62",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"delete from {{schema}}.{{emps_tb}} where address like '%Lane'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Verify records are deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "644a175d-bb6b-40eb-b32b-87cab40f763b",
								"type": "text/javascript",
								"exec": [
									"//we want to test that the returned result is an empty array\"",
									"pm.test(\"Verify records deleted\", function(){",
									"    let jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData) && jsonData.length === 0);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"SELECT * from {{schema}}.{{emps_tb}} where address like '%Lane'\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35ef6bd7-c3ce-4cd1-9c99-eff198ae5179",
								"exec": [
									"let expected_result = {",
									"    \"message\": \"2 of 2 records successfully deleted\",",
									"    \"deleted_hashes\": [",
									"        924,",
									"        927",
									"    ],",
									"    \"skipped_hashes\": []",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct response from NoSQL delete\", function () {",
									"   let jsonData = pm.response.json();",
									"   pm.expect(jsonData).to.eql(expected_result);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"delete\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_values\":[\"924\",927]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Verify records are deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d857d3-b340-4485-a8cf-963f62bbce7a",
								"type": "text/javascript",
								"exec": [
									"//we want to test that the returned result is an empty array\"",
									"pm.test(\"Verify records deleted\", function(){",
									"    let jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData) && jsonData.length === 0);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_values\":[924,925,926,927],\n\t\"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records with objects and arrays",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04d5919f-3d03-4b1e-a569-580cfce6c836",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Inserted all records\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 4 of 4 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"employeeid\": 7924,\n    \"address\": [{\"height\": 12, \"weight\": 46}, {\"shoe_size\": 12, \"iq\": 46}]\n  },\n  {\n    \"employeeid\": 7925,\n    \"address\": {\"number\": 12, \"age\": 46}\n  },\n  {\n    \"employeeid\": 7926,\n    \"address\": {\"numberArray\": [\"1\", \"2\", \"3\"], \"string\": \"Penny\"}\n  },\n  {\n    \"employeeid\": 7927,\n    \"address\":  [\"1\", \"2\", \"3\"]\n  }\n]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records contaitng objects and arrays",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "628556d4-473b-4e2b-a0c7-3390db6c3066",
								"exec": [
									"let expected_result = {",
									"    \"message\": \"4 of 4 records successfully deleted\",",
									"    \"deleted_hashes\": [",
									"        7924,",
									"        7925,",
									"        7926,",
									"        7927",
									"    ],",
									"    \"skipped_hashes\": []",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Deleted all records\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.eql(expected_result);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_values\":[7924, 7925, 7926, 7927]\n}\n\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Verify object and array records deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9de16fb7-b2fe-47bb-9ce7-3a7322fd0d62",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search finds no records\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.eql([]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_values\":[7924, 7925, 7926, 7925],\n\t\"get_attributes\": [\"employeeid\", \"address\"]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "test SQL deleteing with numeric hash in single quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91f69316-c44b-4d09-a500-128121d79e44",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"deleted 2 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('2 of 2 records successfully deleted');",
									"});",
									"",
									"pm.test(\"update_hashes has correct hashes\", function () {",
									"    const updated = pm.response.json().deleted_hashes;",
									"    pm.expect(updated).to.have.members([987654321, 987654322]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"sql\",\n    \"sql\": \"DELETE FROM dev.rando WHERE id IN ('987654321', '987654322')\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "test SQL deleteing with numeric no condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca6b0e2e-12ab-4e4f-b944-713f016f1722",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"deleted 2 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('2 of 2 records successfully deleted');",
									"});",
									"",
									"pm.test(\"update_hashes has correct hashes\", function () {",
									"    const updated = pm.response.json().deleted_hashes;",
									"    pm.expect(updated).to.have.members([987654323, 987654324]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"sql\",\n    \"sql\": \"DELETE FROM dev.rando\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "9. Alter Role Tests",
			"item": [
				{
					"name": "Add Role - error checks",
					"item": [
						{
							"name": "Add role with mismatched table/attr READ perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96ebd932-156c-43fb-89c9-d294004d5df8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    responseData = JSON.parse(responseBody);",
											"    pm.expect(responseData.error).to.equal(\"You have a conflict with TABLE permissions for 'northnwd.categories' being false and ATTRIBUTE permissions being true. Please try again. \")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":false,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false\n            }\n           ]\n      }\n   }\n}\n  }\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with mismatched table/attr INSERT perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1907fc8f-2981-464f-940e-bde92feb2fb6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    responseData = JSON.parse(responseBody);",
											"    pm.expect(responseData.error).to.equal(\"You have a conflict with TABLE permissions for 'northnwd.categories' being false and ATTRIBUTE permissions being true. Please try again. \")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":true,\n         \"insert\":false,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false\n            }\n           ]\n      }\n   }\n}\n  }\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with mismatched table/attr UPDATE perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d674d0e-1097-4f8c-a16a-07d3ac621077",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    responseData = JSON.parse(responseBody);",
											"    pm.expect(responseData.error).to.equal(\"You have a conflict with TABLE permissions for 'northnwd.categories' being false and ATTRIBUTE permissions being true. Please try again. \")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false\n            }\n           ]\n      }\n   }\n}\n  }\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with multiple mismatched table/attr perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3539ea11-bd0f-4dbd-9c2e-79ef8868643c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    responseData = JSON.parse(responseBody);",
											"    pm.expect(responseData.error).to.equal(\"You have a conflict with TABLE permissions for 'northnwd.categories' being false and ATTRIBUTE permissions being true. Please try again. \")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":false,\n         \"insert\":true,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false\n            }\n           ]\n      }\n   }\n}\n  }\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f277665e-6a8b-4082-b61f-dceac9dad76b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98031a24-9d9d-4521-815c-5f7b0b2f1874",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SQL Add non SU role Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4febf0e0-11c6-45a2-8a86-050c99a40fb1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test_5\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n\n   \"tables\": {\n     \"customers\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":true,\n         \"attribute_restrictions\":[]\n      },\n      \"suppliers\": {\n         \"read\":false,\n         \"insert\":false,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[]\n      },\n      \"region\": {\n         \"read\":true,\n         \"insert\":false,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[{\n               \"attribute_name\": \"regiondescription\",\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false\n            }]\n      },\n      \"territories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"territorydescription\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false\n            }\n           ]\n      },\n      \"categories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false\n            }\n           ]\n      },\n      \"shippers\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":true,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"companyname\",\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false\n            }\n           ]\n      }\n   }\n}\n  }\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "alter_role with bad data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0bea5c-b7b1-470a-8f53-c32746a9f7bd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Response text shows invalid schema, table, attribute\", function () {",
									"    pm.response.error === \"Invalid schema crapschema. Invalid table craptable. Invalid attribute crapattribute. \";",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46ZmFsc2U="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"alter_role\",\n    \"role\": \"bad_user_2\",\n    \"id\": \"{{role_id}}\",\n    \"permission\": {\n        \"super_user\": false,\n        \"crapschema\": {\n            \"tables\": {\n                \"blahblah\": {\n                    \"read\": false,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_restrictions\": [\n                        {\n                            \"attribute_name\": \"name\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true,\n                            \"delete\": false\n                        }\n                    ]\n                }\n            }\n        },\n        \"dev\": {\n            \"tables\": {\n                \"craptable\": {\n                    \"read\": false,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_restrictions\": [\n                        {\n                            \"attribute_name\": \"name\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true,\n                            \"delete\": false\n                        }\n                    ]\n                },\n                \"dog\": {\n                    \"read\": false,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_restrictions\": [\n                        {\n                            \"attribute_name\": \"name\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true,\n                            \"delete\": false\n                        },\n                        {\n                            \"attribute_name\": \"crapattribute\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true,\n                            \"delete\": false\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for altering  roles.  Roles are assigned to users to give them specifc permisisons.  \n\n<ul>\n<li><b>operation</b><i> (required)</i> - must always be 'alter_role'</li>\n\n<li><b>role</b><i> (optional)</i> - name of role you are defining </li>\n\n<li><b>permission </b><i>(optional)</i> - object defining permissions for users associated with this role </li>\n\n<li> <b>permission.super_admin (optional) </b> - boolean which if set to true gives users associated with this role full access to all operations and methods. </li>\n\n\n\nTo learn more about managing roles view our help desk article \nhttps://harperdbhelp.zendesk.com/hc/en-us/articles/115010158848"
					},
					"response": []
				},
				{
					"name": "list_roles ensure role not changed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b97b78ad-c0dd-4bc2-b8bf-c39b9bea107c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"found_role\", undefined);",
									"for(let role of pm.response.json()) {",
									"   if(role.role === \"bad_user_2\") {",
									"       pm.environment.set(\"found_role\", role);",
									"   }",
									"}",
									"",
									"pm.test(\"role name was not updated\", function () {",
									"   pm.expect(pm.environment.get(\"found_role\")).to.eql(undefined);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"list_roles\"\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for listing all roles.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'list_roles'</li>"
					},
					"response": []
				},
				{
					"name": "alter_role good data",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46ZmFsc2U="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\": \"alter_role\",\n  \"role\": \"user_role_update\",\n  \"id\": \"{{role_id}}\",\n  \"permission\": {\n    \"super_user\": false,\n    \"{{schema}}\": {\n      \"tables\": {\n        \"{{cust_tb}}\": {\n          \"read\": false,\n          \"insert\": false,\n          \"update\": false,\n          \"delete\": false,\n          \"attribute_restrictions\": [\n            {\n              \"attribute_name\": \"fax\",\n              \"read\": false,\n              \"insert\": false,\n              \"update\": false,\n              \"delete\": false\n            }\n          ]\n        }\n      }\n    }\n    }\n  }",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for altering  roles.  Roles are assigned to users to give them specifc permisisons.  \n\n<ul>\n<li><b>operation</b><i> (required)</i> - must always be 'alter_role'</li>\n\n<li><b>role</b><i> (optional)</i> - name of role you are defining </li>\n\n<li><b>permission </b><i>(optional)</i> - object defining permissions for users associated with this role </li>\n\n<li> <b>permission.super_admin (optional) </b> - boolean which if set to true gives users associated with this role full access to all operations and methods. </li>\n\n\n\nTo learn more about managing roles view our help desk article \nhttps://harperdbhelp.zendesk.com/hc/en-us/articles/115010158848"
					},
					"response": []
				},
				{
					"name": "list_roles ensure role was updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "011420a0-199c-4d8c-96b4-fc8aa71583f4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"found_role\", undefined);",
									"for(let role of pm.response.json()) {",
									"       if(role.role === \"user_role_update\") {",
									"           pm.environment.set(\"found_role\", role);",
									"       }",
									"   }",
									"",
									"pm.test(\"role name was updated\", function () {",
									"   pm.expect(pm.environment.get(\"found_role\").role).to.eql(\"user_role_update\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"list_roles\"\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for listing all roles.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'list_roles'</li>"
					},
					"response": []
				},
				{
					"name": "SQL drop_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dcfa718-75e8-4fa4-acac-9d4d0f133212",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "10. Alter User Tests",
			"item": [
				{
					"name": "SQL Add non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77a95c31-1c9a-4e54-adaa-d1bd99ce29e1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test_5\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n\n   \"tables\": {\n     \"customers\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":true,\n         \"attribute_restrictions\":[]\n      },\n      \"suppliers\": {\n         \"read\":false,\n         \"insert\":false,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[]\n      },\n      \"region\": {\n         \"read\":true,\n         \"insert\":false,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[{\n               \"attribute_name\": \"regiondescription\",\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false\n            }]\n      },\n      \"territories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":false,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"territorydescription\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false\n            }\n           ]\n      },\n      \"categories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false\n            }\n           ]\n      },\n      \"shippers\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":true,\n         \"attribute_restrictions\":[\n           {\n               \"attribute_name\": \"companyname\",\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false\n            }\n           ]\n      }\n   }\n}\n  }\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Add User with new Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82b39aa4-3f83-40ca-9690-243a6bd97e02",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"{{role_id}}\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Alter User with empty role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6baa94a1-748a-407d-a670-c42b7889e7c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"If role is specified, it cannot be empty.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"alter_user\",\n\"role\":\"\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Alter User set active to false.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5dab403-0863-47be-95f6-54623058783c",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(\"test_user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"alter_user\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":false\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Check for active=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3a5da52-5e6b-4b9d-aacf-b3bbb166a7a7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"for(let user of pm.response.json()) {",
									"   if(user.username === \"test_user\") {",
									"       pm.environment.set(\"found_user\", user);",
									"   }",
									"}",
									"",
									"pm.test(\"user active should be false.\", function () {",
									"    let temp = pm.environment.get(\"found_user\");",
									"   pm.expect(temp.active).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"list_users\"\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for listing all users.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'list_users'</li>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67caf08d-9758-456d-914b-64dad21ffcbd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL drop_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8138e1f2-c831-4316-b6db-c2b1a437443b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "11. Configuration",
			"item": [
				{
					"name": "Describe table DropAttributeTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c56f708c-a006-43b9-bf2b-eb940edd9a18",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute another_attribute exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    //pm.expect(jsonData[\"another_attribute\"] === undefined);",
									"        pm.expect(jsonData.another_attribute).to.eql(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"table\":\"AttributeDropTest\",\n\t\"schema\":\"dev\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for describing a table. This will return all attributes under the specified table.\n\n<ul>\n<li>\n<b>operation</b> <i> (required) </i> - must always be 'describe_table'\n</li>\n\n<li>\n<b>table</b> <i>(required)</i> - table you wish to describe\n</li>\n\n<li>\n<b>schema </b><i>(required)</i> -schema where the table you wish to describe lives\n</li>\n\n\n</ul>"
					},
					"response": [
						{
							"name": "Describe dev.dog Table",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic SERCX0FETUlOOjE0MDA="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"describe_table\",\n\"table\":\"dog\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:9925",
									"host": [
										"{{host}}"
									],
									"port": "9925"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "298",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 01 Sep 2017 17:06:12 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"12a-UwcyoEDwkVEWSNeo7dsNBD12Vcg\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"hash_attribute\":\"id\",\"name\":\"dog\",\"id\":\"125ab5c9-f8ac-4197-a348-dd716b0f11ed\",\"schema\":\"dev\",\"attributes\":[{\"attribute\":\"adorable\"},{\"attribute\":\"weight_lbs\"},{\"attribute\":\"owner_name\"},{\"attribute\":\"doc\"},{\"attribute\":\"id\"},{\"attribute\":\"dog_name\"},{\"attribute\":\"age\"},{\"attribute\":\"breed_id\"}]}"
						}
					]
				},
				{
					"name": "Create Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d87a43-1ba3-4648-8c93-7a6ca878cf56",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"create attribute successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message === \"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_attribute\",\n\t\"schema\":\"dev\",\n\t\"table\":\"AttributeDropTest\",\n\t\"attribute\":\"created_attribute\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Confirm created attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10b3c855-20b1-4596-bd0a-39326e12e3be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute created_attribute exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"created_attribute\"] === true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"table\":\"AttributeDropTest\",\n\t\"schema\":\"dev\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "http://{{host}}:9925",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "9925"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Create existing attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19bf7e4b-c35e-48b0-b3ba-537c0281d0e4",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"create attribute successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error === \"attribute 'created_attribute' already exists in dev.AttributeDropTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_attribute\",\n\t\"schema\":\"dev\",\n\t\"table\":\"AttributeDropTest\",\n\t\"attribute\":\"created_attribute\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Drop Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7d07e51-5513-4906-bd2e-db425fcb6509",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"remove successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message === \"records successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"dev\",\n\t\"table\":\"AttributeDropTest\",\n\t\"attribute\":\"another_attribute\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Describe table DropAttributeTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e56b95a-830a-43ec-bb15-99e59b1cad78",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute another_attribute exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"another_attribute\"] === undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"table\":\"AttributeDropTest\",\n\t\"schema\":\"dev\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for describing a table. This will return all attributes under the specified table.\n\n<ul>\n<li>\n<b>operation</b> <i> (required) </i> - must always be 'describe_table'\n</li>\n\n<li>\n<b>table</b> <i>(required)</i> - table you wish to describe\n</li>\n\n<li>\n<b>schema </b><i>(required)</i> -schema where the table you wish to describe lives\n</li>\n\n\n</ul>"
					},
					"response": [
						{
							"name": "Describe dev.dog Table",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic SERCX0FETUlOOjE0MDA="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"describe_table\",\n\"table\":\"dog\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "298",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 01 Sep 2017 17:06:12 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"12a-UwcyoEDwkVEWSNeo7dsNBD12Vcg\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"hash_attribute\":\"id\",\"name\":\"dog\",\"id\":\"125ab5c9-f8ac-4197-a348-dd716b0f11ed\",\"schema\":\"dev\",\"attributes\":[{\"attribute\":\"adorable\"},{\"attribute\":\"weight_lbs\"},{\"attribute\":\"owner_name\"},{\"attribute\":\"doc\"},{\"attribute\":\"id\"},{\"attribute\":\"dog_name\"},{\"attribute\":\"age\"},{\"attribute\":\"breed_id\"}]}"
						}
					]
				},
				{
					"name": "Get Fingerprint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "605b0532-1d56-45cf-8c70-646ccfa2588a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test fingerprint returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['fingerprint'] !== undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_fingerprint\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Set License",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d18654d-a281-4b72-b717-bfc5fbadc1a8",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"test fingerprint returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['error'] === \"There was an parsing the license key.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"set_license\",\n\"key\":\"uFFG7xAZG11ec9d335bfe27c4ec5555310bd4a27f\",\n\"company\":\"harperdb.io\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Get Registration Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60e9d236-c292-4c52-919f-cf4e6ae5c0a7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"license data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.registered).to.eql(true);",
									"    pm.expect(!!jsonData.version && !!jsonData.storage_type && !!jsonData.license_expiration_date).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"registration_info\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for describing a table. This will return all attributes under the specified table.\n\n<ul>\n<li>\n<b>operation</b> <i> (required) </i> - must always be 'describe_table'\n</li>\n\n<li>\n<b>table</b> <i>(required)</i> - table you wish to describe\n</li>\n\n<li>\n<b>schema </b><i>(required)</i> -schema where the table you wish to describe lives\n</li>\n\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Set License Bad Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b241598-14c9-485c-9f0c-9f624ddf571e",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"test fingerprint returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['message'] === \"Invalid key specified for license file.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"set_license\",\n\"key\":\"\",\n\"company\":\"harperdb.io\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Configure Cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "655cc859-980c-49b4-92ea-91f0bfe81352",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"configure_cluster\",\n\t\"clustering\": \"true\",\n\t\"clustering_PORT\": \"12345\",\n\t\"NODE_NAME\":\"server\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Configure Cluster bad port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47e89c45-2600-4508-b153-bc6475b404ff",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"configure_cluster\",\n\t\"clustering\": \"true\",\n\t\"clustering_PORT\": \"1\",\n\t\"NODE_NAME\":\"some_name\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e7510537-f0f2-459f-ac1a-65a938dc18bb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d01c7cd4-bac6-49a8-a617-36fbd092cdc4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "12. System Information",
			"item": [
				{
					"name": "Get all System Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7d146c2-6610-4023-9083-52cf1d6f7641",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"create system info has all attributes\", function () {",
									"    let attributes = ['system', 'time', 'cpu', 'memory', 'disk', 'network', 'harperdb_processes'];",
									"    var jsonData = pm.response.json();",
									"    ",
									"    attributes.forEach(attribute=>{",
									"        pm.expect(jsonData[attribute] !== undefined);",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"system_information\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				},
				{
					"name": "Get some System Information (time, memory)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c287d11-2f6c-420f-a55b-77858d98a212",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"create system info has some attributes\", function () {",
									"    var results = pm.response.json();",
									"    ",
									"    pm.expect(results.time !== undefined);",
									"    pm.expect(results.memory !== undefined);",
									"    pm.expect(results.system === undefined);",
									"    pm.expect(results.cpu === undefined);",
									"    pm.expect(results.disk === undefined);",
									"    pm.expect(results.network === undefined);",
									"    pm.expect(results.harperdb_processes === undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"system_information\",\n\t\"attributes\": [\"memory\", \"time\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"name": "Authorization",
										"value": "Basic ZWxpOnBhc3M="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"create_schema\",\n\"schema\":\"dev\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop",
									"name": "access-control-allow-origin",
									"description": ""
								},
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": ""
								},
								{
									"key": "content-length",
									"value": "45",
									"name": "content-length",
									"description": ""
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"name": "content-type",
									"description": ""
								},
								{
									"key": "date",
									"value": "Fri, 13 Oct 2017 21:14:04 GMT",
									"name": "date",
									"description": ""
								},
								{
									"key": "etag",
									"value": "W/\"2d-GPJz4Nu7aSF7N/KODFK3o/TNPUw\"",
									"name": "etag",
									"description": ""
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": ""
								},
								{
									"key": "x-powered-by",
									"value": "HarperDB",
									"name": "x-powered-by",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"message\":\"schema dev successfully created\"}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "13. Environment Clean Up",
			"item": [
				{
					"name": "drop schema northnwd",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"id": "0dfaabf6-b42a-439f-9d26-d4c81128989b"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"northnwd\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "confirm attribute count correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7bb66b2-7edb-4380-b343-dfed150433cf",
								"exec": [
									"// This code loops through the response from describe all and compares ",
									"// the attributes to expected result variable below. ",
									"// If you create tests that modify schema/table/attributes you should update ‘expected_result’",
									"let expected_result = {",
									"    \"dev\": {",
									"        \"invalid_attribute\": {",
									"            \"id\": \"0c4c779d-edc8-4163-8d2b-3a139b31279b\",",
									"            \"name\": \"invalid_attribute\",",
									"            \"hash_attribute\": \"id\",",
									"            \"schema\": \"dev\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"some_attribute\"",
									"                },",
									"                {",
									"                    \"attribute\": \"some_attribute2\"",
									"                },",
									"                {",
									"                    \"attribute\": \"id\"",
									"                },",
									"                {",
									"                    \"attribute\": \"some_attribute1\"",
									"                }",
									"            ]",
									"        },",
									"        \"AttributeDropTest\": {",
									"            \"id\": \"59f1b41a-edc6-42de-a90c-4535fd7ae5a3\",",
									"            \"name\": \"AttributeDropTest\",",
									"            \"hash_attribute\": \"hashid\",",
									"            \"schema\": \"dev\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"created_attribute\"",
									"                },",
									"                {",
									"                    \"attribute\": \"some_attribute\"",
									"                },",
									"                {",
									"                    \"attribute\": \"hashid\"",
									"                }",
									"            ]",
									"        },",
									"        \"remarks_blob\": {",
									"            \"id\": \"db5ae901-6109-456d-bd25-4abe55e14eb8\",",
									"            \"name\": \"remarks_blob\",",
									"            \"hash_attribute\": \"id\",",
									"            \"schema\": \"dev\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"remarks\"",
									"                },",
									"                {",
									"                    \"attribute\": \"id\"",
									"                },",
									"                {",
									"                    \"attribute\": \"length\"",
									"                }",
									"            ]",
									"        },",
									"        \"long_text\": {",
									"            \"id\": \"eb3e5ea0-2ec5-4a7a-a190-37b5ed6e2e64\",",
									"            \"name\": \"long_text\",",
									"            \"hash_attribute\": \"id\",",
									"            \"schema\": \"dev\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"remarks\"",
									"                },",
									"                {",
									"                    \"attribute\": \"id\"",
									"                }",
									"            ]",
									"        }",
									"    },",
									"    \"call\": {",
									"        \"aggr\": {",
									"            \"id\": \"a6f5eedb-4834-4dad-81e9-0899666e477e\",",
									"            \"name\": \"aggr\",",
									"            \"hash_attribute\": \"all\",",
									"            \"schema\": \"call\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"owner_name\"",
									"                },",
									"                {",
									"                    \"attribute\": \"dog_name\"",
									"                },",
									"                {",
									"                    \"attribute\": \"age\"",
									"                },",
									"                {",
									"                    \"attribute\": \"weight_lbs\"",
									"                },",
									"                {",
									"                    \"attribute\": \"adorable\"",
									"                },",
									"                {",
									"                    \"attribute\": \"all\"",
									"                },",
									"                {",
									"                    \"attribute\": \"breed_id\"",
									"                }",
									"            ]",
									"        }",
									"    },",
									"    \"test_delete_before\": {",
									"        \"address\": {",
									"            \"id\": \"cbbc9bf3-3649-4879-812d-348fd55dd608\",",
									"            \"name\": \"address\",",
									"            \"hash_attribute\": \"id\",",
									"            \"schema\": \"test_delete_before\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"address\"",
									"                },",
									"                {",
									"                    \"attribute\": \"id\"",
									"                }",
									"            ]",
									"        }",
									"    }",
									"};",
									"",
									"let json_data = pm.response.json();",
									"let attribute_found = true;",
									"let schema_northnwd_exists = false;",
									"for (let schema in expected_result) {",
									"    try {",
									"         if (schema === \"northnwd\") {",
									"        schema_northnwd_exists = true;",
									"        break;",
									"        }",
									"        for (let table in expected_result[schema]) {",
									"            let json_data_attr_array = json_data[schema][table][\"attributes\"].map(obj => obj.attribute);",
									"            expected_result[schema][table].attributes.forEach((value) => {",
									"                if (!json_data_attr_array.includes(value.attribute)) {",
									"                    attribute_found = false;",
									"                    console.log(`Attribute: ${value.attribute}`);",
									"                    console.log(`Searching schema: ${schema} and table: ${table}`);",
									"                }",
									"            });",
									"        }",
									"    } catch(err) {",
									"        console.log(err);",
									"    }",
									"}",
									"",
									"pm.test(\"Test northnwd schema does not exist\", function () {",
									"    pm.expect(schema_northnwd_exists).to.eql(false);",
									"});",
									"",
									"pm.test(\"Test attributes are as expected\", function () {",
									"    pm.expect(attribute_found).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "VALIDATION Check Schema not found.",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Validation Check Schema Not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"schema not found\");",
									"});",
									""
								],
								"id": "27044659-b650-42e5-a82e-2e30fe18c476"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_schema\",\n  \"schema\":\"northnwd\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop schema dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"id": "da4acdea-4e4f-4794-ba26-008aecfb826f"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"dev\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "drop schema other",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c394510-a4da-4a2e-b2be-5dd7dbc7e4b5",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"other\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "drop schema another",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e97b9b5-f190-4941-8854-3c6fa73ca1b8",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"another\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "drop schema call",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"id": "4bdb3890-f901-4d94-8e1d-0228c330063d"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"call\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "drop schema test_delete_before",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "067148b5-f5a4-4b61-b6f2-4e16cd245b4e",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"test_delete_before\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d54f71f9-6107-40a6-ae8b-036f16ed329c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "13e1cd94-704d-425c-b8b9-3725bca59a64",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "573ef5e4-ba63-45d0-b697-58c078b2b8c7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d2fab1cb-32cd-4ed7-bf2b-4c3a929a3f74",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b3e8ac5c-5940-4bbe-9db4-a1731dbedb65",
			"key": "insert_timestamp",
			"value": "0",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}