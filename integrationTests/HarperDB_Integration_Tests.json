{
	"info": {
		"_postman_id": "2551980e-f639-49cf-adf6-734363b6f81e",
		"name": "HarperDB Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38120670"
	},
	"item": [
		{
			"name": "1. Environment Setup",
			"item": [
				{
					"name": "create_schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{schema}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema confirm schema exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"schema northnwd exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    var arrayData = Object.keys(jsonData)",
									"    pm.expect(arrayData.includes(\"northnwd\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_schema_dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"dev\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema_call",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"database\": \"call\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema_other",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"other\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema_another",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"another\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema_number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"123\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_schema_number_number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": 1123\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_table_customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"database\":\"northnwd\",\n  \"table\":\"customers\",\n  \"hash_attribute\": \"customerid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by hash empty table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check return array length\", function () {",
									"    pm.expect(pm.response.json().length).to.eql(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from northnwd.customers where customerid = 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table confirm table exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table customers exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    Object.values(jsonData).forEach(table => {",
									"        pm.expect(table.schema).to.eql(\"northnwd\");",
									"        pm.expect(table.name).to.eql(\"customers\");",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\":\"northnwd\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_suppliers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"suppliers\",\n  \"hash_attribute\": \"supplierid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_region",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"region\",\n  \"hash_attribute\": \"regionid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_employees",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"employees\",\n  \"hash_attribute\": \"employeeid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"orders\",\n  \"hash_attribute\": \"orderid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_territories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"territories\",\n  \"hash_attribute\": \"territoryid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"categories\",\n  \"hash_attribute\": \"categoryid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_shippers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"shippers\",\n  \"hash_attribute\": \"shipperid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_employeeterritories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"employeeterritories\",\n  \"hash_attribute\": \"employeeid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_orderdetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"order_details\",\n  \"hash_attribute\": \"orderdetailid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_products",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"northnwd\",\n  \"table\":\"products\",\n  \"hash_attribute\": \"productid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_long_text",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"dev\",\n  \"table\":\"long_text\",\n  \"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_call_aggr",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_attribute\": \"all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create Table AttributeDropTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"dev\",\n  \"table\":\"AttributeDropTest\",\n  \"hash_attribute\": \"hashid\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test schema name\", function() {",
									"    var jsonData = pm.response.json();",
									"    Object.values(jsonData).forEach(table => {",
									"        pm.expect(table.schema).to.eql(\"northnwd\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_schema\",\n  \"schema\":\"northnwd\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_invalid_attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"invalid_attribute\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_remarks_blob",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"books\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_ratings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"ratings\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_date_functions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"time_functions\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_dog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_breed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"breed\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_dev_owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"owner\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"movie\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.credits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"credits\",\n\t\"hash_attribute\": \"movie_id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.rando",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"rando\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table other.owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"other\",\n\t\"table\":\"owner\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table another.breed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"another\",\n\t\"table\":\"breed\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.sql_function",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"sql_function\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table dev.leading_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"123\",\n\t\"table\":\"4\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table_number_number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":1123,\n\t\"table\":1,\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_schema_number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number schema is described\", function() {",
									"    let json_data = pm.response.json();",
									"",
									"    pm.expect(json_data).to.haveOwnProperty(\"4\");",
									"    pm.expect(json_data['4'].schema).to.equal(\"123\");",
									"    pm.expect(json_data['4'].name).to.equal(\"4\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_schema\",\n  \"schema\":\"123\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_table_number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number table is described\", function() {",
									"    let json_data = pm.response.json();",
									"",
									"    pm.expect(json_data.schema).to.equal(\"123\");",
									"    pm.expect(json_data.name).to.equal(\"4\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_table\",\n  \"schema\":\"123\",\n  \"table\": \"4\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table for conditions tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"dev\",\n  \"table\":\"dog_conditions\",\n  \"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Data Load",
			"item": [
				{
					"name": "CSV",
					"item": [
						{
							"name": "1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"2\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check job_id param is returned\", () =>{",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.haveOwnProperty('job_id');",
											"    pm.expect(response.message.split(' ')[4]).to.equal(response.job_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"file_path\":\"{{files_location}}Suppliers.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into suppliers table"
							},
							"response": []
						},
						{
							"name": "2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"3\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n   \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"file_path\":\"{{files_location}}Region.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into region table"
							},
							"response": []
						},
						{
							"name": "3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"4\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"file_path\":\"{{files_location}}Territories.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into territories table"
							},
							"response": []
						},
						{
							"name": "4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"5\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{empt_tb}}\",\n  \"file_path\":\"{{files_location}}EmployeeTerritories.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into employeeterritories table"
							},
							"response": []
						},
						{
							"name": "5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"6\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ship_tb}}\",\n  \"file_path\":\"{{files_location}}Shippers.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into shippers table"
							},
							"response": []
						},
						{
							"name": "6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"7\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"file_path\":\"{{files_location}}Categories.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into categories table"
							},
							"response": []
						},
						{
							"name": "7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"8\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"file_path\":\"{{files_location}}Employees.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into employees table"
							},
							"response": []
						},
						{
							"name": "8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"9\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"file_path\":\"{{files_location}}Customers.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into customers table"
							},
							"response": []
						},
						{
							"name": "9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"10\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{prod_tb}}\",\n  \"file_path\":\"{{files_location}}Products.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into products table"
							},
							"response": []
						},
						{
							"name": "10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"11\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ordd_tb}}\",\n  \"file_path\":\"{{files_location}}Orderdetails.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orderdetails table"
							},
							"response": []
						},
						{
							"name": "11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"12\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ords_tb}}\",\n  \"file_path\":\"{{files_location}}Orders.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "12",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"13\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"books\",\n  \"file_path\":\"{{files_location}}Books.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "13",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"14\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"ratings\",\n  \"file_path\":\"{{files_location}}BooksRatings.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "14",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"15\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"movie\",\n  \"file_path\":\"{{files_location}}movies.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "15",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"credits\",\n  \"file_path\":\"{{files_location}}credits.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "Check Job Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobId\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check Job Completed\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "CSV URL Load",
					"item": [
						{
							"name": "Create CSV data table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"database\":\"{{schema}}\",\n  \"table\":\"{{csv_tb}}\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV file load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdURLcsv\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb}}\",\n  \"csv_url\":\"https://harperdb-integration-test-data.s3.us-east-2.amazonaws.com/breeds.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "CSV Data Load",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"dev\",\n  \"action\": \"insert\",\n  \"table\":\"breed\",\n  \"data\":\"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}"
										},
										"url": {
											"raw": "{{HDB_ENDPOINT}}",
											"host": [
												"{{HDB_ENDPOINT}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "71",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Mon, 09 Jul 2018 20:07:14 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"47-FY/m86hgW/48m7lLK1CpL02xrIw\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check CSV data loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking CSV URL load job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 350 of 350 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check CSV data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check CSV data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm all CSV records loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"test good response\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test correct count from table\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]['COUNT(*)']).to.eql(350)",
											"});",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{schema}}.{{csv_tb}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create CSV data table empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb_empty}}\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV file load empty file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdURLcsvEmpty\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb_empty}}\",\n  \"csv_url\":\"https://s3.amazonaws.com/complimentarydata/breedsEmpty.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "CSV Data Load",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"dev\",\n  \"action\": \"insert\",\n  \"table\":\"breed\",\n  \"data\":\"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}"
										},
										"url": {
											"raw": "{{HDB_ENDPOINT}}",
											"host": [
												"{{HDB_ENDPOINT}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "71",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Mon, 09 Jul 2018 20:07:14 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"47-FY/m86hgW/48m7lLK1CpL02xrIw\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check CSV data empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking CSV URL load job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 0 of 0 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check CSV data empty');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check CSV data empty');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV file load bad attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdURLcsvError\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb_empty}}\",\n  \"csv_url\":\"https://s3.amazonaws.com/complimentarydata/breeds-bad-column-name.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "CSV Data Load",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"dev\",\n  \"action\": \"insert\",\n  \"table\":\"breed\",\n  \"data\":\"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}"
										},
										"url": {
											"raw": "{{HDB_ENDPOINT}}",
											"host": [
												"{{HDB_ENDPOINT}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "71",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Mon, 09 Jul 2018 20:07:14 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"47-FY/m86hgW/48m7lLK1CpL02xrIw\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check CSV job error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            ",
											"            let msg_contains = jsonData[0].message.includes(\"Invalid column name 'id/', cancelling load operation\");",
											"            pm.expect(msg_contains).to.eql(true);",
											"            pm.expect(status).to.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            ",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check CSV job error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check CSV job error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobIdURLcsv\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check CSV data loaded\");",
									"});",
									"",
									"postman.setGlobalVariable(\"function:getJobIdURLcsvEmpty\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check CSV data empty\");",
									"});",
									"",
									"postman.setGlobalVariable(\"function:getJobIdURLcsvError\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check CSV job error\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "JSON",
					"item": [
						{
							"name": "Import data bulk insert into dev.long_text table",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"inserted 25\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 25')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"long_text\",\n    \"records\": [\n    {\n      \"id\": 1,\n      \"remarks\": \"RIVERFRONT LIFESTYLE! New dock, new roof and new appliances. For sale fully furnished. Beautiful custom-built 2-story home with pool. Panoramic river views and open floor plan -- great for entertaining. Hardwood floors flow throughout. Enjoy sunsets over the St. Johns from covered lanai or family room with wood-burning fireplace. Large back yard, dock, boat lift, kayak area...endless lifestyle options for fishing, boating or just chilling. Spacious master suite includes seating area with gas fireplace. Additional bedroom or office, pool bath, and laundry room on 1st floor. Upstairs loft area, perfect for a game room, plus two bedrooms with upgraded baths in each. Kitchen features stainless steel appliances, granite countertops, cooking island, and walk-in pantry. 3-car garage with abundant\"\n    },\n    {\n      \"id\": 2,\n      \"remarks\": \"Come see the kitchen remodel and new wood flooring.  Custom built by Howard White in 2007, this immaculate Deerwood home enjoys a view of the 18th fairway. From the moment you step into the foyer, you will be impressed with the bright, open floor plan. The Master suite features a large en suite bath with his and hers custom closets. The kitchen features high-end appliances,cabinetry and granite countertops. Retreat upstairs to an expansive library with cherry bookshelves. Additional bedrooms are spacious with large walk-in closets for extra storage. Plantation shutters throughout. Relax in the large hot tub/small pool with lounge chair shelf and fountain. Side entry 3 car garage is connected by a breezeway to home. Portion of back yard fenced for small dog.\"\n    },\n    {\n      \"id\": 3,\n      \"remarks\": \"This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.  This amazing home includes impressive Brazilian hardwood floors, plantation shutters throughout, granite countertops, triple tray and wood beam ceilings and so much more.  Builder's touches include 24'' tiles, rounded corner walls, 5'' baseboards, 10 ft. ceilings, in-wall vacuum system and many more unique upgrades.  There are extensive custom touches on this property from the mailbox to the unique 3000 sq. ft. two level 3-stall barn with tons of storage space.\"\n    },\n    {\n      \"id\": 4,\n      \"remarks\": \"Make this stunning traditional two story red brick house your forever home. Custom built in 2004, this home is spacious enough for large gatherings and cozy enough for small get togethers. Located on a large corner lot with side entry four car garage and fenced backyard, this home has it all inside and out. Inviting foyer is flanked by formal living room and dining room with wood floors, crown molding, and large windows. Large eat-in kitchen with custom made Pine Cottage cabinets, granite countertops, and stainless steel appliances is conveniently located next to family room. Separate downstairs flex space with attached full bath currently used as a playroom could be used as a 5th bedroom/guest or mother-in-law suite (no closet, but one could be easily added.)\"\n    },\n    {\n      \"id\": 5,\n      \"remarks\": \"A beautiful waterfront home located on a deep water canal providing quick access to the St. Johns River and ocean. Spacious and open, the downstairs is perfect for both family activities and entertaining. Central to this is a large kitchen with extensive granite countertops, upgraded appliances, separate island and an adjacent laundry room. A great room with fireplace flows into Florida & game rooms which overlook the canal. From the leaded glass front door, the extensive crown molding, to the hardwood, marble and tile flooring, there are numerous upgrades throughout the house. Outside, a large backyard includes three separate patios surrounded by tropical landscaping maintained by automatic sprinklers. Along the concrete bulkhead, there are docks, davits and a 9,000lb. boat lift w Remote.\"\n    },\n    {\n      \"id\": 6,\n      \"remarks\": \"Walk inside this Perfect Family Home and make it your own. Spacious Foyer opens to formal living room. Family room features brick fireplace, wet bar, and sliding glass doors to beautiful patio and lushly landscapped backyard. Recently updated Kitchen boasts granite countertops, abundance of cabinets with pull out drawers and breakfast nook. Large Master Suite offers multiple closets, separate vanities,walk-in shower and garden tub. Spacious room sizes and storage throughout.Bedroom and Bath arrangements were built for today's living and convenience.  Walk to neighborhood parks. A rated Hendricks Elementary also a walk or bike ride away. Pretty median treed street filled with homes of the era dead ending to riverfront homes.\"\n    },\n    {\n      \"id\": 7,\n      \"remarks\": \"Wow! Pow! This one will knock you over! Like New! Meticulously cared for David Weekley home with all the bells and whistles! Telescoping sliders Open onto huge screened brick paver lanai with massive fireplace at end. Open concept floor plan has hardwood floors in all common areas, 3 way split bedroom plan, also has a study, formal dining room, sunroom, breakfast room - plenty of storage space, and room to spread out. Kitchen features a gorgeous large island, granite countertops, walk in pantry and upgraded stainless appliances lanai overlooks the park like, almost 1/2 acre fully fenced backyard with creek and preserve behind. Gated community no through traffic. Front view is a lake with fountain Heart of Mandarin.  If I could, I would buy this one myself!\"\n    },\n    {\n      \"id\": 8,\n      \"remarks\": \"Rare opportunity to own a home on fabulous Heaven Trees road! OPEN HOUSE Saturday 4/28 from 2 - 5! This beautiful brick home is move in ready! This home offers abundant living space with light filled rooms and hardwood floors. The kitchen features a gas range, double ovens, and granite countertops. Enjoy the expansive backyard with complete privacy. Owners have made several improvements including: New A/C 6/16, New Electric Box and Circuit Breakers 11/16, Front Septic Tank and Drainage Field Replaced 8/16, Back Septic Tank Improvements 4/18, New Hot Water Heater 5/14, New Soft Water Treatment System 7/12, Wet Bar installed in Family Room with beverage cooler, ice maker; and more. Please note: Fogged window in Sunroom is being replaced!\"\n    },\n    {\n      \"id\": 9,\n      \"remarks\": \"Wow! Spectacular opportunity to live in a charming, yet spacious, brick home in one the most highly desirable communities, Ortega Forest. This beautifully updated, one-story, pool home will be a beautiful place to make memories. The home features a large eat-in kitchen that has been fully renovated with custom cabinetry, granite countertops and upgraded, stainless appliances. A formal living and huge dining room are located at the front of the home. The family room/den features a gorgeous wood burning fireplace and overlooks the sparkling pool and backyard. The living and sleeping areas are separated. The large master bedroom features sizable his/her closets. The master and guest baths are renovated with custom cabinetry and marble countertops.\"\n    },\n    {\n      \"id\": 10,\n      \"remarks\": \"Lovely updated home in desired gated community.  Large corner lot with new paver circular driveway. Great first impression entryway to open floor plan with warm wood floors. Separate Dining room, huge Family room with gas fireplace and custom mantel, and sitting or casual eating area. Spacious Kitchen with quartz countertops, stainless steel appliances, gas range, and breakfast bar. Large laundry room between garage and kitchen. Split bedrooms with private Master Bedroom overlooking fenced, landscaped backyard and screened lanai. Master Bath has granite countertops, double sinks, wood grain tile floors, tub and separate shower. Two guest Bedrooms and Bath opposite the master along with a 4th Bedroom or Bonus room upstairs with another full Bath. Close to Beaches and Shopping!\"\n    },\n    {\n      \"id\": 11,\n      \"remarks\": \"Historic Avondale home designed in the Prairie School style -- an architectural design made famous by Frank Lloyd Wright and Jacksonville resident Henry John Klutho. This 3 bedroom, two bath, 2,202 sq ft home has maintained its vintage appeal while combining modern updates, such as renovated kitchen with beverage fridge and wine storage. Granite countertops and 2-yr-old SS appliances. Updates meld beautifully with original Prairie School window casings with grids, glass knobs, hardwood inlay floors, 10'' baseboards, picture rail molding and all original doors. Beautifully glassed sun room at the front of the house is a perfect office or reading room. Gorgeous French doors open to private backyard built for entertaining. Two-car garage includes back entry, extra storage and partial bathroom\"\n    },\n    {\n      \"id\": 12,\n      \"remarks\": \"MUCH bigger than it looks! This remodeled 4bed/2.5bath Avondale home has a separate studio apartment which rents for $750 a month. Relax on the front porch or walk to Boone Park, numerous restaurants, and shops. The living room w/ the original fireplace has French doors which lead to a sun room/office. The hardwood floors have been refinished beautifully. The spacious kitchen has finely crafted cabinets, gorgeous granite countertops, and a  walk-in pantry. The laundry room includes a washer and dryer. A unique rock and metal design surrounds the jetted tub. A large linen closet is near by. 2 beds and 2 baths are on the main floor. Two bedrooms and a half bath are on the second floor.  A screened porch overlooks the fully fenced back yard.\"\n    },\n    {\n      \"id\": 13,\n      \"remarks\": \"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING THRUOUT THE HOME*LARGE OFFICE W/GLASS FRENCH DOORS*FORMAL DINING ROOM W/PICTURE FRAME MOLDING*GOURMET KITCHEN W/42''CUSTOM CABINETRY & GRANITE COUNTERTOPS, STAINLESS STEEL APPLIANCES, & HUGE ISLAND OPEN TO THE GREAT ROOM W/TRAY CEILING & SURROUND SOUND SPEAKERS*MASTER BEDROOM SUITE W/TRAY CEILING W/BEADBOARD INSET AND SHOWER W/OVERHEAD RAINFOREST HEAD*2 MORE BEDROOMS & OPEN ''FLEX'' AREA*COVERED LANAI OVERLOOKING THE HUGE FENCED BACKYARD*3-CAR GARAGE*''NEST'' THERMOSTAT & AT&T HOME SECURITY W/WIFI ACCESS*WATER SOFTENER*LOTS MORE!!!\"\n    },\n    {\n      \"id\": 14,\n      \"remarks\": \"This is a 4 bedroom, 3 bath, with additional tiled sunroom single family home located in the Pablo Bay community. Upgrades galore! This home offers gorgeous marble flooring throughout the living areas, high ceilings, an upgraded kitchen with granite countertops, a tile backsplash, and stainless steel appliances! Relax and enjoy the lake view from the tiled sunroom or the expansive fenced backyard! Will have a 1 year home warranty! Also listed for rent under MLS 903970\"\n    },\n    {\n      \"id\": 15,\n      \"remarks\": \"Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA. Beautiful tiled kitchen has granite countertops, island, newer refrigerator, cooktop, oven & convection microwave (2 yrs), breakfast bar & nook. Separate DR, LR & Fam Rm all w/crown molding & wood laminate flrs; FP in Fam Rm. Remodeled BA w/granite countertops & gorgeous travertine tiled showers & flrs. New Roof 6/2014 & New upgraded AC system 10/2015. Huge owner suite w/Jacuzzi tub, sep. shower, 2 walk-in closets & bonus rm w/French doors. Relaxing back porch w/phantom retractable screen overlooks the charming patio & huge stunning backyard!**\"\n    },\n    {\n      \"id\": 16,\n      \"remarks\": \"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades: GRANITE countertops,upgraded kitchen cabs w/crown molding, st steel appl, New carpets,New exterior and interior paint,Rain soft water softner, tile floors, bay windows, addtl loft + sep. Internet center, fireplace, lots of arches& niches, 2 story family room, huge covered porch overlooking, Planing to put the new sod in the front and sides, landscaped backyard and much more! MUST SEE!\"\n    },\n    {\n      \"id\": 17,\n      \"remarks\": \"WELCOME HOME! MOVE-IN-READY! Spacious & Beautifully updated home with over 3500 sq ft of comfort. Great for everyday living or entertaining. 5 Bedrooms and 3.5 baths. Spacious 1st floor owner suite with a huge walking closet, sitting area, updated master bath with double vanities, separate shower & garden tub. Updated kitchen with granite countertops, food prep island, all appliances, plenty of cabinets and breakfast nook. Inviting family room with fireplace and large picture windows that bring in natural light throughout. Formal dining & living rooms. 2nd floor offers spacious bonus room, 4 large bedrooms and 2 full baths. Hard wood floors, new roof 2016, many updates throughout. Inviting screened in porch, large back yard backs up to wooded preserve. Great Community amenities. A must see\"\n    },\n    {\n      \"id\": 18,\n      \"remarks\": \"Welcome to the very desirable community of ST. JOHNS LANDING. This 4 bedroom 2 bathroom home is located in a riverfront community. It has been totally upgraded, boasting detailed crown molding, new kitchen cabinets, Travertine Stone Floors & granite countertops throughout.  6 foot Jacuzzi tub in master bath and separate shower. Prewired alarm system. Central Heat & A/C replaced a year ago, fireplace and an energy saving on demand water heater are just some of the features this beautiful home has to offer.(BRAND NEW ROOF is Included).  This home sits on a corner lot with a fenced backyard, and a tiled heated and cooled lanai overlooking the plush lawn and playset. Walking distance to the community clubhouse, playground, fishing dock, boat ramp & pool. Buyer to verify square footage.\"\n    },\n    {\n      \"id\": 19,\n      \"remarks\": \"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades: GRANITE countertops,upgraded kitchen cabs w/crown molding, st steel appl, New carpets,New exterior and interior paint,Rain soft water softner, tile floors, bay windows, addtl loft + sep. Internet center, fireplace, lots of arches& niches, 2 story family room, huge covered porch overlooking, Planing to put the new sod in the front and sides, landscaped backyard and much more! MUST SEE!\"\n    },\n    {\n      \"id\": 20,\n      \"remarks\": \"This house is ready for you to call it home! No stone was left unturned when it came to upgrades in this gorgeous home! As you walk through the front door, you'll be immediately impressed by the 20ft ceiling in the Grand Foyer. Beautiful hardwood floors throughout the first floor, Gourmet Kitchen, Double Ovens, Granite Countertops, Stainless Steel appliances. Need space? How about this: 5 bedrooms, 4 full bath (1 full bath and bedroom downstairs), plenty of room for a growing family. Need a place to escape to relax? Look no further, enjoy the peace and serenity that your large backyard offers, as you enjoy the evenings in your screened-in lanai, all behind the privacy of the preserve.\"\n    },\n    {\n      \"id\": 21,\n      \"remarks\": \"BACK ON MARKET!!MOTIVATED SELLER, OFFERING A $3000 CONCESSION TOWARDS NEW FLOORING. CONCESSION PAID AT CLOSING! Come see this gorgeous 4 bedroom 4 bath home in beautiful Hampton Glen. This home has two large master bedrooms with ensuites with sitting area. The loft bedroom upstairs also has a full bath. All baths have been updated with granite countertops and tile. If you love to cook you will love this kitchen. This large kitchen has beautiful granite countertops and tile. Everything has been updated. The roof is brand new!!! It was replaced January 2017. The house has been completely painted inside and out. Come and enjoy the serenity of the backyard in your large screened in patio and view the tall pines of the preserve swaying in the breeze.\"\n    },\n    {\n      \"id\": 22,\n      \"remarks\": \"Beautiful pool home that has all the upgrades you're looking for.  4 Bedroom/2 bath with updated kitchen with granite countertops, stainless steel appliances including a Bosch dishwasher and double ovens.  Formal Living room, dining room & separate family room with vauled ceilings. Family room is wired for speakers. Tile floors in kitchen & b'fast area.  Hardwood floors are found in the family room and 2 bedrooms.  The master bedroom has french doors out to the screened pool area.  The bath has separate vanities with granite tops, remodeled shower with a seat & his and hers closets.  There is a pool and spa.  Both are heated using solar panels, no gas heater.  There is a Soothing waterfall feature that makes this outdoor area perfect for entertaining.  Fenced back yard as well.\"\n    },\n    {\n      \"id\": 23,\n      \"remarks\": \"What a gem !!!! Located within walking distance to Bolles on a quiet cul de sac street, this brick home, with a circular drive,has it all! New roof in 2017, re-plumbed in 2016 and 2 HVAC systems ( inside and out -2008 and 2017). The kitchen has beenbeautifully updated with granite countertops and cream cabinets.  The kitchen opens to a large family room. The master suite has 2 walk-in closets and a large updated bath with jacuzzi and separate shower, separate dining room and formal living room with wood burning fireplace. Freshly painted and new tile throughout. There is a large shed in the backyard for additional storage in addition to the 2 car garage.This home was renovated in 2008 and 1,400 sq. ft. was added to the original plan. OPEN HOUSE SUNDAY 3/12/17 1:00-3:00\"\n    },\n    {\n      \"id\": 24,\n      \"remarks\": \"Designed for Generous Space and Flexibility for Family or Lifestyle! This Midcentury Modern Pool Home offers over 3000 sf of upgrades & classic design on almost 1/2 acre. Original Hardwood Floors, Lots of Natural Light, Freshly Painted Interior, Custom Kitchen, Granite countertops, Newer AC & New Carpet upstairs. Spacious rooms throughout include Living room w/Fireplace, Formal Dining and even larger Casual Dining, Breakfast room or Office. Family room with built-ins & pool bath could also be Mother-in-Law Suite with private bath or 4th Bedroom. Perfect Home for Entertaining with Private Backyard, Majestic Oaks, Expansive multi-level patio & Sparkling Pool. Plenty of room for RV/Boat Parking. All this in Desirable Beauclerc location convenient to I-295, Downtown, nearby Shops & Restaurants\"\n    },\n    {\n      \"id\": 25,\n      \"remarks\": \"Welcome to your new home in James Island. Easy commuting around the City, close to Town Center and JTB takes you to the beaches. You have it all with this home - Owner Suite is on the first floor, large bonus room upstairs with full bath, office, formal dining room, living room, and family room with fireplace. Amazing owner bath and large owner suite with beautiful ceilings. Split floor plan for the other two bedrooms which share a Jack and Jill bathroom. High ceilings, crown molding and so much more. Tile and wood flooring downstairs, gas range, granite countertops, fenced backyard, welcoming front entrance and large covered patio. Seller will consider reasonable offers. With accepted offer seller will provide credits for the fogged windows and a replacement stainless steel oven.\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import data bulk confirm specific value exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].remarks.includes(\"Lovely updated home\")).to.be.true;",
											"    pm.expect(jsonData[0].id).to.eql(10);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() =>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"long_text\",\n  \"hash_attribute\": \"id\",\n  \"hash_values\":[10],\n  \"get_attributes\": [\"id\", \"remarks\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Search and confirm row 10 exists in schema dev table long_text\n"
							},
							"response": []
						},
						{
							"name": "Import data bulk insert into call.aggr",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"inserted 25\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 10')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"call\",\n    \"table\":\"aggr\",\n    \"records\": [\n    \t{\n        \"all\" : 1,\n        \"dog_name\" : \"Penny\",\n        \"owner_name\": \"Kyle\",\n        \"breed_id\":154,\n        \"age\":5,\n        \"weight_lbs\":35,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 2,\n        \"dog_name\" : \"Harper\",\n        \"owner_name\": \"Stephen\",\n        \"breed_id\":346,\n        \"age\":5,\n        \"weight_lbs\":55,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 3,\n        \"dog_name\" : \"Alby\",\n        \"owner_name\": \"Kaylan\",\n        \"breed_id\":348,\n        \"age\":5,\n        \"weight_lbs\":84,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 4,\n        \"dog_name\" : \"Billy\",\n        \"owner_name\": \"Zach\",\n        \"breed_id\":347,\n        \"age\":4,\n        \"weight_lbs\":60,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 5,\n        \"dog_name\" : \"Rose Merry\",\n        \"owner_name\": \"Zach\",\n        \"breed_id\":348,\n        \"age\":6,\n        \"weight_lbs\":15,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 6,\n        \"dog_name\" : \"Kato\",\n        \"owner_name\": \"Kyle\",\n        \"breed_id\":351,\n        \"age\":4,\n        \"weight_lbs\":28,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 7,\n        \"dog_name\" : \"Simon\",\n        \"owner_name\": \"Fred\",\n        \"breed_id\":349,\n        \"age\":1,\n        \"weight_lbs\":35,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 8,\n        \"dog_name\" : \"Gemma\",\n        \"owner_name\": \"Stephen\",\n        \"breed_id\":350,\n        \"age\":3,\n        \"weight_lbs\":55,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 9,\n        \"dog_name\" : \"Gertrude\",\n        \"owner_name\": \"Eli\",\n        \"breed_id\":158,\n        \"age\":5,\n        \"weight_lbs\":70,\n        \"adorable\":true\n      },\n      {\n        \"all\" : 10,\n        \"dog_name\" : \"Big Louie\",\n        \"owner_name\": \"Eli\",\n        \"breed_id\":241,\n        \"age\":11,\n        \"weight_lbs\":20,\n        \"adorable\":true\n      }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert dot & double dot data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"inserted 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 1')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"call\",\n    \"table\":\"aggr\",\n    \"records\": [\n    \t{\n        \"all\" : 11,\n        \"dog_name\" : \".\",\n        \"owner_name\": \"..\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert confirm dot & double data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].all).to.eql(11);",
											"    pm.expect(jsonData[0].dog_name).to.eql(\".\");",
											"    pm.expect(jsonData[0].owner_name).to.eql(\"..\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_attribute\": \"all\",\n  \"hash_values\":[11],\n  \"get_attributes\": [\"all\", \"dog_name\", \"owner_name\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Search and confirm that insert dot & double data worked as expected. "
							},
							"response": []
						},
						{
							"name": "Insert attributes into DropAttributeTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"inserted 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 2')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"AttributeDropTest\",\n    \"records\": [\n    \t{\n        \"hashid\" : 1,\n        \"some_attribute\" : \"some_att1\",\n        \"another_attribute\": \"1\"\n      },\n      {\n        \"hashid\" : 2,\n        \"some_attribute\" : \"some_att2\",\n        \"another_attribute\": \"1\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert confirm attributes added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonDataKeys = Object.keys(jsonData[0])",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    pm.expect(jsonDataKeys.includes(\"hashid\")).to.be.true;",
											"    pm.expect(jsonDataKeys.includes(\"some_attribute\")).to.be.true;",
											"    pm.expect(jsonDataKeys.includes(\"another_attribute\")).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 200)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"AttributeDropTest\",\n  \"hash_attribute\": \"hashid\",\n  \"hash_values\":[1, 2],\n  \"get_attributes\": [\"hashid\", \"some_attribute\", \"another_attribute\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Search and confirm that insert attributes worked as expected."
							},
							"response": []
						},
						{
							"name": "Import data bulk insert into dev.remarks_blob table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"inserted 11\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 11')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"remarks_blob\",\n   \n\"records\": [\n    {\n        \"id\": 1,\n        \"length\": 238,\n        \"remarks\":\"Beautiful pool home that has all the upgrades you're looking for. 4 Bedroom/2.5+ bath with updated kitchen with granite countertops, stainless steel appliances including a Bosch dishwasher and double ovens. Formal Living room, dining room.\"\n    },\n    {\n        \"id\": 2,\n        \"length\": 248,\n        \"remarks\":\"Beautiful pool home that has all the upgrades you're looking for.  4 Bedroom/2.5+ bath with updated kitchen with granite countertops, stainless steel appliances including a Bosch dishwasher and double ovens.  Formal Living room, dining room and stuff.\"\n    },\n    {\n        \"id\": 3,\n        \"length\": 788,\n        \"remarks\": \"Beautiful pool home that has all the upgrades you're looking for.  4 Bedroom/2.5+ bath with updated kitchen with granite countertops, stainless steel appliances including a Bosch dishwasher and double ovens.  Formal Living room, dining room & separate family room with vauled ceilings. Family room is wired for speakers. Tile floors in kitchen & b'fast area.  Hardwood floors are found in the family room and 2 bedrooms.  The master bedroom has french doors out to the screened pool area.  The bath has separate vanities with granite tops, remodeled shower with a seat & his and hers closets.  There is a pool and spa.  Both are heated using solar panels, no gas heater.  There is a Soothing waterfall feature that makes this outdoor area perfect for entertaining.  Fenced back yard as well.\"\n    },\n    {\n        \"id\": 4,\n        \"length\": 701,\n        \"remarks\": \"This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.  This amazing home includes impressive Brazilian hardwood floors, plantation shutters throughout, granite countertops, triple tray and wood beam ceilings and so much more.  Builder's touches include 24'' tiles, rounded corner walls, 5'' baseboards, 10 ft. ceilings, in-wall vacuum system and many more unique upgrades.  There are extensive custom touches on this property from the mailbox to the unique 3000 sq. ft. two level 3-stall barn with tons of storage space.\"\n    },\n    {\n        \"id\": 5,\n        \"length\": 234,\n        \"remarks\": \"This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.\"\n    },\n    {\n        \"id\": 6,\n        \"length\": 779,\n        \"remarks\": \"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...THRUOUT THE HOME*LARGE OFFICE W/GLASS FRENCH DOORS*FORMAL DINING ROOM W/PICTURE FRAME MOLDING*GOURMET KITCHEN W/42''CUSTOM CABINETRY & GRANITE COUNTERTOPS, STAINLESS STEEL APPLIANCES, & HUGE ISLAND OPEN TO THE GREAT ROOM W/TRAY CEILING & SURROUND SOUND SPEAKERS*MASTER BEDROOM SUITE W/TRAY CEILING W/BEADBOARD INSET AND SHOWER W/OVERHEAD RAINFOREST HEAD*2 MORE BEDROOMS & OPEN ''FLEX'' AREA*COVERED LANAI OVERLOOKING THE HUGE FENCED BACKYARD*3-CAR GARAGE*''NEST'' THERMOSTAT & AT&T HOME SECURITY W/WIFI ACCESS*WATER SOFTENER*LOTS MORE!!!\"\n    },\n{\n        \"id\": 7,\n        \"length\": 243,\n        \"remarks\": \"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...\"\n    },\n    {\n        \"id\": 8,\n        \"length\": 802,\n        \"remarks\": \"**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA. Beautiful tiled kitchen has granite countertops, island, newer refrigerator, cooktop, oven & convection microwave (2 yrs), breakfast bar & nook. Separate DR, LR & Fam Rm all w/crown molding & wood laminate flrs; FP in Fam Rm. Remodeled BA w/granite countertops & gorgeous travertine tiled showers & flrs. New Roof 6/2014 & New upgraded AC system 10/2015. Huge owner suite w/Jacuzzi tub, sep. shower, 2 walk-in closets & bonus rm w/French doors. Relaxing back porch w/phantom retractable screen overlooks the charming patio & huge stunning backyard!**\"\n    },\n    {\n        \"id\": 9,\n        \"length\": 251,\n        \"remarks\": \"**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.\"\n    },\n    {\n        \"id\": 10,\n        \"length\": 560,\n        \"remarks\": \"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades: GRANITE countertops,upgraded kitchen cabs w/crown molding, st steel appl, New carpets,New exterior and interior paint,Rain soft water softner, tile floors, bay windows, addtl loft + sep. Internet center, fireplace, lots of arches& niches, 2 story family room, huge covered porch overlooking, Planing to put the new sod in the front and sides, landscaped backyard and much more! MUST SEE!\"\n    },\n\n    {\n        \"id\": 11,\n        \"length\": 172,\n        \"remarks\": \"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into dev.dog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"inserted 9 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 9')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"dog\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"breed_id\": 154,\n        \"weight_lbs\": 35,\n        \"dog_name\": \"Penny\",\n        \"age\": 5,\n        \"adorable\": true,\n        \"owner_id\": 2\n    },\n    {\n        \"id\": 2,\n        \"breed_id\": 346,\n        \"weight_lbs\": 55,\n        \"dog_name\": \"Harper\",\n        \"age\": 5,\n        \"adorable\": true,\n        \"owner_id\": 3\n    },\n    {\n        \"id\": 3,\n        \"breed_id\": 348,\n        \"weight_lbs\": 84,\n        \"dog_name\": \"Alby\",\n        \"age\": 5,\n        \"adorable\": true,\n        \"owner_id\": 4\n    },\n    {\n        \"id\": 4,\n        \"breed_id\": 347,\n        \"weight_lbs\": 60,\n        \"dog_name\": \"Billy\",\n        \"age\": 4,\n        \"adorable\": true,\n        \"owner_id\": 1\n    },\n    {\n        \"id\": 5,\n        \"breed_id\": 348,\n        \"weight_lbs\": 15,\n        \"dog_name\": \"Rose Merry\",\n        \"age\": 6,\n        \"adorable\": true,\n        \"owner_id\": 2\n    },\n    {\n        \"id\": 6,\n        \"breed_id\": 351,\n        \"weight_lbs\": 28,\n        \"dog_name\": \"Kato\",\n        \"age\": 4,\n        \"adorable\": true,\n        \"owner_id\": 3\n    },\n    {\n        \"id\": 7,\n        \"breed_id\": 349,\n        \"weight_lbs\": 35,\n        \"dog_name\": \"Simon\",\n        \"age\": 1,\n        \"adorable\": true,\n        \"owner_id\": 4\n    },\n    {\n        \"id\": 8,\n        \"breed_id\": 250,\n        \"weight_lbs\": 55,\n        \"dog_name\": \"Gemma\",\n        \"age\": 3,\n        \"adorable\": true,\n        \"owner_id\": 1\n    },\n    {\n        \"id\": 9,\n        \"breed_id\": 104,\n        \"weight_lbs\": 75,\n        \"dog_name\": \"Bode\",\n        \"age\": 8,\n        \"adorable\": true\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into dev.breed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"inserted 350 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 350')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"breed\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"name\": \"ENGLISH POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"ENGLISH SETTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"KERRY BLUE TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"CAIRN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/004g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"ENGLISH COCKER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/005g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"GORDON SETTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/006g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"AIREDALE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/007g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"AUSTRALIAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/008g03.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"BEDLINGTON TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/009g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"BORDER TERRIER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/011g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"FOX TERRIER (SMOOTH)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/012g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"ENGLISH TOY TERRIER (BLACK &TAN)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/013g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"SWEDISH VALLHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/014g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"BELGIAN SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"OLD ENGLISH SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/016g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"GRIFFON NIVERNAIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/017g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"BRIQUET GRIFFON VENDEEN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/019g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"ARIEGEOIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/020g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 20,\n        \"name\": \"GASCON SAINTONGEOIS\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 21,\n        \"name\": \"GREAT GASCONY BLUE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/022g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 22,\n        \"name\": \"POITEVIN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/024g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 23,\n        \"name\": \"BILLY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/025g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 24,\n        \"name\": \"ARTOIS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/028g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 25,\n        \"name\": \"PORCELAINE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/030g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 26,\n        \"name\": \"SMALL BLUE GASCONY BLUE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"BLUE GASCONY GRIFFON\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 28,\n        \"name\": \"GRAND BASSET GRIFFON VENDEEN\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 29,\n        \"name\": \"NORMAN ARTESIEN BASSET\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 30,\n        \"name\": \"BLUE GASCONY BASSET\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 31,\n        \"name\": \"BASSET FAUVE DE BRETAGNE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 32,\n        \"name\": \"PORTUGUESE WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/037g08.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 33,\n        \"name\": \"WELSH CORGI CARDIGAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/038g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 34,\n        \"name\": \"WELSH CORGI PEMBROKE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/039g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 35,\n        \"name\": \"IRISH SOFT COATED WHEATEN TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 36,\n        \"name\": \"YUGOSLAVIAN SHEPHERD DOG - SHARPLANINA\",\n        \"image\": \" SERBIA\",\n        \"country\": \"MACEDONIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 37,\n        \"name\": \"JÄMTHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/042g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 38,\n        \"name\": \"BASENJI\",\n        \"image\": null,\n        \"country\": \"CENTRAL AFRICA\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 39,\n        \"name\": \"BERGER DE BEAUCE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 40,\n        \"name\": \"BERNESE MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/045g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 41,\n        \"name\": \"APPENZELL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 42,\n        \"name\": \"ENTLEBUCH CATTLE DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/047g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 43,\n        \"name\": \"KARELIAN BEAR DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/048g05-1.jpg\",\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 44,\n        \"name\": \"FINNISH SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/049g05-1.jpg\",\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 45,\n        \"name\": \"NEWFOUNDLAND\",\n        \"image\": null,\n        \"country\": \"CANADA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 46,\n        \"name\": \"FINNISH HOUND\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 47,\n        \"name\": \"POLISH HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/052g06.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 48,\n        \"name\": \"KOMONDOR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/053g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 49,\n        \"name\": \"KUVASZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/054g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 50,\n        \"name\": \"PULI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/055g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 51,\n        \"name\": \"PUMI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/056g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 52,\n        \"name\": \"HUNGARIAN SHORT-HAIRED POINTER (VIZSLA)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/057g07.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 53,\n        \"name\": \"GREAT SWISS MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/058g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 54,\n        \"name\": \"SWISS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/059g06-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 55,\n        \"name\": \"SMALL SWISS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/060g06-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 56,\n        \"name\": \"ST. BERNARD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/061g02-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 57,\n        \"name\": \"COARSE-HAIRED STYRIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/062g06.jpg\",\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 58,\n        \"name\": \"AUSTRIAN BLACK AND TAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/063g06.jpg\",\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 59,\n        \"name\": \"AUSTRIAN  PINSCHER\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 60,\n        \"name\": \"MALTESE\",\n        \"image\": null,\n        \"country\": \"CENTRAL MEDITERRANEAN BASIN\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 61,\n        \"name\": \"FAWN BRITTANY GRIFFON\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/066g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 62,\n        \"name\": \"PETIT BASSET GRIFFON VENDEEN\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 63,\n        \"name\": \"TYROLEAN HOUND\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 64,\n        \"name\": \"LAKELAND TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/070g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 65,\n        \"name\": \"MANCHESTER TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/071g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 66,\n        \"name\": \"NORWICH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/072g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 67,\n        \"name\": \"SCOTTISH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/073g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 68,\n        \"name\": \"SEALYHAM TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/074g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 69,\n        \"name\": \"SKYE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/075g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 70,\n        \"name\": \"STAFFORDSHIRE BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/076g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 71,\n        \"name\": \"CONTINENTAL TOY SPANIEL\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Continental Toy Spaniel and Russian Toy\"\n    },\n    {\n        \"id\": 72,\n        \"name\": \"WELSH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/078g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 73,\n        \"name\": \"GRIFFON BRUXELLOIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/080g09-1.jpg\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 74,\n        \"name\": \"GRIFFON BELGE\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 75,\n        \"name\": \"PETIT BRABANÇON\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 76,\n        \"name\": \"SCHIPPERKE\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 77,\n        \"name\": \"BLOODHOUND\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 78,\n        \"name\": \"WEST HIGHLAND WHITE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/085g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 79,\n        \"name\": \"YORKSHIRE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/086g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 80,\n        \"name\": \"CATALAN SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 81,\n        \"name\": \"SHETLAND SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/088g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 82,\n        \"name\": \"IBIZAN PODENCO\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 83,\n        \"name\": \"BURGOS POINTING DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 84,\n        \"name\": \"SPANISH MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 85,\n        \"name\": \"PYRENEAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 86,\n        \"name\": \"PORTUGUESE SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/093g01.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 87,\n        \"name\": \"PORTUGUESE WARREN HOUND-PORTUGUESE PODENGO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/094g05-1.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 88,\n        \"name\": \"BRITTANY SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/095g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 89,\n        \"name\": \"RAFEIRO OF ALENTEJO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/096g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 90,\n        \"name\": \"GERMAN SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/097g05-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"European Spitz\"\n    },\n    {\n        \"id\": 91,\n        \"name\": \"GERMAN WIRE- HAIRED POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/098g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 92,\n        \"name\": \"WEIMARANER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 93,\n        \"name\": \"WESTPHALIAN DACHSBRACKE\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 94,\n        \"name\": \"FRENCH BULLDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/101g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 95,\n        \"name\": \"KLEINER MÜNSTERLÄNDER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 96,\n        \"name\": \"GERMAN HUNTING TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/103g03-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 97,\n        \"name\": \"GERMAN SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/104g08.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 98,\n        \"name\": \"FRENCH WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/105g08.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 99,\n        \"name\": \"BLUE PICARDY SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 100,\n        \"name\": \"WIRE-HAIRED POINTING GRIFFON KORTHALS\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 101,\n        \"name\": \"PICARDY SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 102,\n        \"name\": \"CLUMBER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/109g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 103,\n        \"name\": \"CURLY COATED RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/110g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 104,\n        \"name\": \"GOLDEN RETRIEVER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 105,\n        \"name\": \"BRIARD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/113g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 106,\n        \"name\": \"PONT-AUDEMER SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 107,\n        \"name\": \"SAINT GERMAIN POINTER\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 108,\n        \"name\": \"DOGUE DE BORDEAUX\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/116g02.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 109,\n        \"name\": \"DEUTSCH LANGHAAR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/117g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 110,\n        \"name\": \"LARGE MUNSTERLANDER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/118g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 111,\n        \"name\": \"GERMAN SHORT- HAIRED POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/119g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 112,\n        \"name\": \"IRISH RED SETTER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 113,\n        \"name\": \"FLAT COATED RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/121g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 114,\n        \"name\": \"LABRADOR RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/122g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 115,\n        \"name\": \"FIELD SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/123g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 116,\n        \"name\": \"IRISH WATER SPANIEL\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 117,\n        \"name\": \"ENGLISH SPRINGER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/125g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 118,\n        \"name\": \"WELSH SPRINGER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/126g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 119,\n        \"name\": \"SUSSEX SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/127g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 120,\n        \"name\": \"KING CHARLES SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/128g09.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"English Toy Spaniels\"\n    },\n    {\n        \"id\": 121,\n        \"name\": \"SMÅLANDSSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/129g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 122,\n        \"name\": \"DREVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/130g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 123,\n        \"name\": \"SCHILLERSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/131g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 124,\n        \"name\": \"HAMILTONSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/132g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 125,\n        \"name\": \"FRENCH POINTING DOG - GASCOGNE TYPE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 126,\n        \"name\": \"FRENCH POINTING DOG - PYRENEAN TYPE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 127,\n        \"name\": \"SWEDISH LAPPHUND\",\n        \"image\": null,\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 128,\n        \"name\": \"CAVALIER KING CHARLES SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/136g09.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"English Toy Spaniels\"\n    },\n    {\n        \"id\": 129,\n        \"name\": \"PYRENEAN MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/137g02.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 130,\n        \"name\": \"PYRENEAN SHEEPDOG - SMOOTH FACED\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/138g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 131,\n        \"name\": \"IRISH TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 132,\n        \"name\": \"BOSTON TERRIER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 133,\n        \"name\": \"LONG-HAIRED PYRENEAN SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/141g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 134,\n        \"name\": \"SLOVAKIAN CHUVACH\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 135,\n        \"name\": \"DOBERMANN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/143g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 136,\n        \"name\": \"BOXER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/144g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 137,\n        \"name\": \"LEONBERGER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 138,\n        \"name\": \"RHODESIAN RIDGEBACK\",\n        \"image\": null,\n        \"country\": \"SOUTH AFRICA\",\n        \"section\": \"Related breeds\"\n    },\n    {\n        \"id\": 139,\n        \"name\": \"ROTTWEILER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 140,\n        \"name\": \"DACHSHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/148g04-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"None\"\n    },\n    {\n        \"id\": 141,\n        \"name\": \"BULLDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/149g02.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 142,\n        \"name\": \"SERBIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/150g06.jpg\",\n        \"country\": \"SERBIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 143,\n        \"name\": \"ISTRIAN SHORT-HAIRED HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/151g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 144,\n        \"name\": \"ISTRIAN WIRE-HAIRED HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/152g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 145,\n        \"name\": \"DALMATIAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/153g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Related breeds\"\n    },\n    {\n        \"id\": 146,\n        \"name\": \"POSAVATZ HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/154g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 147,\n        \"name\": \"BOSNIAN BROKEN-HAIRED HOUND - CALLED BARAK\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/155g06.jpg\",\n        \"country\": \"BOSNIA AND HERZEGOVINA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 148,\n        \"name\": \"COLLIE ROUGH\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/156g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 149,\n        \"name\": \"BULLMASTIFF\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 150,\n        \"name\": \"GREYHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/158g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 151,\n        \"name\": \"ENGLISH FOXHOUND\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 152,\n        \"name\": \"IRISH WOLFHOUND\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Rough-haired Sighthounds\"\n    },\n    {\n        \"id\": 153,\n        \"name\": \"BEAGLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/161g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 154,\n        \"name\": \"WHIPPET\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/162g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 155,\n        \"name\": \"BASSET HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/163g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 156,\n        \"name\": \"DEERHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/164g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Rough-haired Sighthounds\"\n    },\n    {\n        \"id\": 157,\n        \"name\": \"ITALIAN SPINONE\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 158,\n        \"name\": \"GERMAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/166g01-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 159,\n        \"name\": \"AMERICAN COCKER SPANIEL\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 160,\n        \"name\": \"DANDIE DINMONT TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/168g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 161,\n        \"name\": \"FOX TERRIER (WIRE)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/169g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 162,\n        \"name\": \"CASTRO LABOREIRO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/170g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 163,\n        \"name\": \"BOUVIER DES ARDENNES\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 164,\n        \"name\": \"POODLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/172g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Poodle\"\n    },\n    {\n        \"id\": 165,\n        \"name\": \"ESTRELA MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/173g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 166,\n        \"name\": \"FRENCH SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/175g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 167,\n        \"name\": \"PICARDY SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 168,\n        \"name\": \"ARIEGE POINTING DOG\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 169,\n        \"name\": \"BOURBONNAIS POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/179g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 170,\n        \"name\": \"AUVERGNE POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/180g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 171,\n        \"name\": \"GIANT SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/181g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 172,\n        \"name\": \"SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/182g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 173,\n        \"name\": \"MINIATURE SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/183g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 174,\n        \"name\": \"GERMAN PINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/184g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 175,\n        \"name\": \"MINIATURE PINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/185g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 176,\n        \"name\": \"AFFENPINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/186g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 177,\n        \"name\": \"PORTUGUESE POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/187g07.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 178,\n        \"name\": \"SLOUGHI\",\n        \"image\": null,\n        \"country\": \"MOROCCO\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 179,\n        \"name\": \"FINNISH LAPPHUND\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 180,\n        \"name\": \"HOVAWART\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 181,\n        \"name\": \"BOUVIER DES FLANDRES\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 182,\n        \"name\": \"KROMFOHRLÄNDER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/192g09.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Kromfohrländer\"\n    },\n    {\n        \"id\": 183,\n        \"name\": \"BORZOI - RUSSIAN HUNTING SIGHTHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/193g10.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 184,\n        \"name\": \"BERGAMASCO SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/194g01-1.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 185,\n        \"name\": \"ITALIAN VOLPINO\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"European Spitz\"\n    },\n    {\n        \"id\": 186,\n        \"name\": \"BOLOGNESE\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 187,\n        \"name\": \"NEAPOLITAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 188,\n        \"name\": \"ITALIAN ROUGH-HAIRED SEGUGIO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/198g06.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 189,\n        \"name\": \"CIRNECO DELL'ETNA\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 190,\n        \"name\": \"ITALIAN GREYHOUND\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 191,\n        \"name\": \"MAREMMA AND THE ABRUZZES SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 192,\n        \"name\": \"ITALIAN POINTING DOG\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 193,\n        \"name\": \"NORWEGIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/203g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 194,\n        \"name\": \"SPANISH HOUND\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 195,\n        \"name\": \"CHOW CHOW\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/205g05.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 196,\n        \"name\": \"JAPANESE CHIN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/206g09.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Japan Chin and Pekingese\"\n    },\n    {\n        \"id\": 197,\n        \"name\": \"PEKINGESE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/207g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Japan Chin and Pekingese\"\n    },\n    {\n        \"id\": 198,\n        \"name\": \"SHIH TZU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/208g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 199,\n        \"name\": \"TIBETAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/209g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 200,\n        \"name\": \"SAMOYED\",\n        \"image\": \" SIBERIA\",\n        \"country\": \"NORTHERN RUSSIA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 201,\n        \"name\": \"HANOVERIAN SCENTHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/213g06-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 202,\n        \"name\": \"HELLENIC HOUND\",\n        \"image\": null,\n        \"country\": \"GREECE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 203,\n        \"name\": \"BICHON FRISE\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 204,\n        \"name\": \"PUDELPOINTER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 205,\n        \"name\": \"BAVARIAN MOUNTAIN SCENT HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/217g06.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 206,\n        \"name\": \"CHIHUAHUA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/218g09-1.jpg\",\n        \"country\": \"MEXICO\",\n        \"section\": \"Chihuahueno\"\n    },\n    {\n        \"id\": 207,\n        \"name\": \"FRENCH TRICOLOUR HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 208,\n        \"name\": \"FRENCH WHITE & BLACK HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/220g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 209,\n        \"name\": \"FRISIAN WATER DOG\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 210,\n        \"name\": \"STABIJHOUN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/222g07-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 211,\n        \"name\": \"DUTCH SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/223g01-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 212,\n        \"name\": \"DRENTSCHE PARTRIDGE DOG\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 213,\n        \"name\": \"FILA BRASILEIRO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/225g02.jpg\",\n        \"country\": \"BRAZIL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 214,\n        \"name\": \"LANDSEER (EUROPEAN CONTINENTAL TYPE)\",\n        \"image\": \" SWITZERLAND\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 215,\n        \"name\": \"LHASA APSO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/227g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 216,\n        \"name\": \"AFGHAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/228g10.jpg\",\n        \"country\": \"AFGHANISTAN\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 217,\n        \"name\": \"SERBIAN TRICOLOUR HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/229g06.jpg\",\n        \"country\": \"SERBIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 218,\n        \"name\": \"TIBETAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 219,\n        \"name\": \"TIBETAN SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/231g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 220,\n        \"name\": \"DEUTSCH STICHELHAAR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/232g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 221,\n        \"name\": \"LITTLE LION DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/233g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 222,\n        \"name\": \"XOLOITZCUINTLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/234g05-1.jpg\",\n        \"country\": \"MEXICO\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 223,\n        \"name\": \"GREAT DANE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/235g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 224,\n        \"name\": \"AUSTRALIAN SILKY TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/236g03.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 225,\n        \"name\": \"NORWEGIAN BUHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/237g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 226,\n        \"name\": \"MUDI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/238g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 227,\n        \"name\": \"HUNGARIAN WIRE-HAIRED POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/239g07.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 228,\n        \"name\": \"HUNGARIAN GREYHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/240g10.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 229,\n        \"name\": \"HUNGARIAN HOUND - TRANSYLVANIAN SCENT HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/241g06.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 230,\n        \"name\": \"NORWEGIAN ELKHOUND GREY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/242g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 231,\n        \"name\": \"ALASKAN MALAMUTE\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 232,\n        \"name\": \"SLOVAKIAN HOUND\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 233,\n        \"name\": \"BOHEMIAN WIRE-HAIRED POINTING GRIFFON\",\n        \"image\": null,\n        \"country\": \"CZECH REPUBLIC\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 234,\n        \"name\": \"CESKY TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/246g03.jpg\",\n        \"country\": \"CZECH REPUBLIC\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 235,\n        \"name\": \"ATLAS MOUNTAIN DOG (AIDI)\",\n        \"image\": null,\n        \"country\": \"MOROCCO\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 236,\n        \"name\": \"PHARAOH HOUND\",\n        \"image\": null,\n        \"country\": \"MALTA\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 237,\n        \"name\": \"MAJORCA MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 238,\n        \"name\": \"HAVANESE\",\n        \"image\": null,\n        \"country\": \"WESTERN MEDITERRANEAN BASIN\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 239,\n        \"name\": \"POLISH LOWLAND SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/251g01.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 240,\n        \"name\": \"TATRA SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/252g01.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 241,\n        \"name\": \"PUG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/253g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 242,\n        \"name\": \"ALPINE DACHSBRACKE\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 243,\n        \"name\": \"AKITA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/255g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 244,\n        \"name\": \"SHIBA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/257g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 245,\n        \"name\": \"JAPANESE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/259g03.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 246,\n        \"name\": \"TOSA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/260g02.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 247,\n        \"name\": \"HOKKAIDO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/261g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 248,\n        \"name\": \"JAPANESE SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/262g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 249,\n        \"name\": \"CHESAPEAKE BAY RETRIEVER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 250,\n        \"name\": \"MASTIFF\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 251,\n        \"name\": \"NORWEGIAN LUNDEHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/265g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 252,\n        \"name\": \"HYGEN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/266g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 253,\n        \"name\": \"HALDEN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/267g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 254,\n        \"name\": \"NORWEGIAN ELKHOUND BLACK\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/268g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 255,\n        \"name\": \"SALUKI\",\n        \"image\": null,\n        \"country\": \"MIDDLE EAST\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 256,\n        \"name\": \"SIBERIAN HUSKY\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 257,\n        \"name\": \"BEARDED COLLIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/271g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 258,\n        \"name\": \"NORFOLK TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/272g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 259,\n        \"name\": \"CANAAN DOG\",\n        \"image\": null,\n        \"country\": \"ISRAEL\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 260,\n        \"name\": \"GREENLAND DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/274g05.jpg\",\n        \"country\": \"GREENLAND\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 261,\n        \"name\": \"NORRBOTTENSPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/276g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 262,\n        \"name\": \"CROATIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/277g01.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 263,\n        \"name\": \"KARST SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/278g02.jpg\",\n        \"country\": \"SLOVENIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 264,\n        \"name\": \"MONTENEGRIN MOUNTAIN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/279g06.jpg\",\n        \"country\": \"MONTENEGRO\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 265,\n        \"name\": \"OLD DANISH POINTING DOG\",\n        \"image\": null,\n        \"country\": \"DENMARK\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 266,\n        \"name\": \"GRAND GRIFFON VENDEEN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/282g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 267,\n        \"name\": \"COTON DE TULEAR\",\n        \"image\": null,\n        \"country\": \"MADAGASCAR\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 268,\n        \"name\": \"LAPPONIAN HERDER\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 269,\n        \"name\": \"SPANISH GREYHOUND\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 270,\n        \"name\": \"AMERICAN STAFFORDSHIRE TERRIER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 271,\n        \"name\": \"AUSTRALIAN CATTLE DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/287g01.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 272,\n        \"name\": \"CHINESE CRESTED DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/288g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Hairless Dogs\"\n    },\n    {\n        \"id\": 273,\n        \"name\": \"ICELANDIC SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/289g05.jpg\",\n        \"country\": \"ICELAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 274,\n        \"name\": \"BEAGLE HARRIER\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 275,\n        \"name\": \"EURASIAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/291g05.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 276,\n        \"name\": \"DOGO ARGENTINO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/292g02.jpg\",\n        \"country\": \"ARGENTINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 277,\n        \"name\": \"AUSTRALIAN KELPIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/293g01.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 278,\n        \"name\": \"OTTERHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/294g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 279,\n        \"name\": \"HARRIER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 280,\n        \"name\": \"COLLIE SMOOTH\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/296g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 281,\n        \"name\": \"BORDER COLLIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/297g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 282,\n        \"name\": \"ROMAGNA WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/298g08-01.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 283,\n        \"name\": \"GERMAN HOUND\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 284,\n        \"name\": \"BLACK AND TAN COONHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/300g06.jpg\",\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 285,\n        \"name\": \"AMERICAN WATER SPANIEL\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 286,\n        \"name\": \"IRISH GLEN OF IMAAL TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 287,\n        \"name\": \"AMERICAN FOXHOUND\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 288,\n        \"name\": \"RUSSIAN-EUROPEAN LAIKA\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 289,\n        \"name\": \"EAST SIBERIAN LAIKA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/305g05-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 290,\n        \"name\": \"WEST SIBERIAN LAIKA\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 291,\n        \"name\": \"AZAWAKH\",\n        \"image\": null,\n        \"country\": \"MALI\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 292,\n        \"name\": \"DUTCH SMOUSHOND\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 293,\n        \"name\": \"SHAR PEI\",\n        \"image\": null,\n        \"country\": \"CHINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 294,\n        \"name\": \"PERUVIAN HAIRLESS DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/310g05.jpg\",\n        \"country\": \"PERU\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 295,\n        \"name\": \"SAARLOOS WOLFHOND\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 296,\n        \"name\": \"NOVA SCOTIA DUCK TOLLING RETRIEVER\",\n        \"image\": null,\n        \"country\": \"CANADA\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 297,\n        \"name\": \"DUTCH SCHAPENDOES\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/313g01.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 298,\n        \"name\": \"NEDERLANDSE KOOIKERHONDJE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/314g08-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 299,\n        \"name\": \"BROHOLMER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/315g02.jpg\",\n        \"country\": \"DENMARK\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 300,\n        \"name\": \"FRENCH WHITE AND ORANGE HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 301,\n        \"name\": \"KAI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/317g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 302,\n        \"name\": \"KISHU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/318g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 303,\n        \"name\": \"SHIKOKU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/319g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 304,\n        \"name\": \"WIREHAIRED SLOVAKIAN POINTER\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 305,\n        \"name\": \"MAJORCA SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 306,\n        \"name\": \"GREAT ANGLO-FRENCH TRICOLOUR HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 307,\n        \"name\": \"GREAT ANGLO-FRENCH WHITE AND BLACK HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/323g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 308,\n        \"name\": \"GREAT ANGLO-FRENCH WHITE & ORANGE HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 309,\n        \"name\": \"MEDIUM-SIZED ANGLO-FRENCH HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 310,\n        \"name\": \"SOUTH RUSSIAN SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 311,\n        \"name\": \"RUSSIAN BLACK TERRIER\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 312,\n        \"name\": \"CAUCASIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/328g02.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 313,\n        \"name\": \"CANARIAN WARREN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/329g05.jpg\",\n        \"country\": \"SPAIN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 314,\n        \"name\": \"IRISH RED AND WHITE SETTER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 315,\n        \"name\": \"ANATOLIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/331g02.jpg\",\n        \"country\": \"ANATOLIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 316,\n        \"name\": \"CZECHOSLOVAKIAN WOLFDOG\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 317,\n        \"name\": \"POLISH GREYHOUND\",\n        \"image\": null,\n        \"country\": \"POLAND\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 318,\n        \"name\": \"KOREA JINDO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/334g05.jpg\",\n        \"country\": \"REPUBLIC OF KOREA\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 319,\n        \"name\": \"CENTRAL ASIA SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/335g02-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 320,\n        \"name\": \"SPANISH WATER DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 321,\n        \"name\": \"ITALIAN SHORT-HAIRED SEGUGIO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/337g06.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 322,\n        \"name\": \"THAI RIDGEBACK DOG\",\n        \"image\": null,\n        \"country\": \"THAILAND\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 323,\n        \"name\": \"PARSON RUSSELL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/339g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 324,\n        \"name\": \"SAINT MIGUEL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 325,\n        \"name\": \"BRAZILIAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/341g03.jpg\",\n        \"country\": \"BRAZIL\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 326,\n        \"name\": \"AUSTRALIAN SHEPHERD\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 327,\n        \"name\": \"ITALIAN CORSO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/343g02.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 328,\n        \"name\": \"AMERICAN AKITA\",\n        \"image\": null,\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 329,\n        \"name\": \"JACK RUSSELL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/345g03-2.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 330,\n        \"name\": \"DOGO CANARIO\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 331,\n        \"name\": \"WHITE SWISS SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/347g01-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 332,\n        \"name\": \"TAIWAN DOG\",\n        \"image\": null,\n        \"country\": \"TAIWAN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 333,\n        \"name\": \"ROMANIAN MIORITIC SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"ROMANIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 334,\n        \"name\": \"ROMANIAN CARPATHIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/350g01.jpg\",\n        \"country\": \"ROMANIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 335,\n        \"name\": \"AUSTRALIAN STUMPY TAIL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 336,\n        \"name\": \"RUSSIAN TOY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/352g09-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Continental Toy Spaniel and Russian Toy\"\n    },\n    {\n        \"id\": 337,\n        \"name\": \"CIMARRÓN URUGUAYO\",\n        \"image\": null,\n        \"country\": \"URUGUAY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 338,\n        \"name\": \"POLISH HUNTING DOG\",\n        \"image\": null,\n        \"country\": \"POLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 339,\n        \"name\": \"BOSNIAN AND HERZEGOVINIAN - CROATIAN SHEPHERD DOG\",\n        \"image\": \" CROATIA\",\n        \"country\": \"BOSNIA AND HERZEGOVINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 340,\n        \"name\": \"DANISH-SWEDISH FARMDOG\",\n        \"image\": \" SWEDEN\",\n        \"country\": \"DENMARK\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 341,\n        \"name\": \"SOUTHEASTERN EUROPEAN SHEPHERD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/357g02.jpg\",\n        \"country\": \"SOUTH-EASTERN EUROPE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 342,\n        \"name\": \"THAI BANGKAEW DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/358g05.jpg\",\n        \"country\": \"THAILAND\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 343,\n        \"name\": \"MINIATURE BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/359g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 344,\n        \"name\": \"LANCASHIRE HEELER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/360g01.jpg\",\n        \"country\": \"ENGLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 345,\n        \"name\": \"LABRADOR RETRIEVER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 346,\n        \"name\": \"HUSKY MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 347,\n        \"name\": \"LABRADOR / GREAT DANE MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 348,\n        \"name\": \"TERRIER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 349,\n        \"name\": \"BEAGLE MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 350,\n        \"name\": \"SHORT HAIRED SETTER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into dev.owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"inserted 4 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 4')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"owner\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"name\": \"Sam\",\n        \"best_friend\": \"Charlie\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Kyle\",\n        \"best_friend\": \"Stephen\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"David\",\n        \"best_friend\": \"Sam\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Kaylan\",\n        \"best_friend\": \"Stephen\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into other.owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"inserted 4 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 4')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"other\",\n    \"table\":\"owner\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"name\": \"Sam\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Kyle\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"David\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Kaylan\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into another.breed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"inserted 350 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('inserted 350')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"another\",\n    \"table\":\"breed\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"name\": \"ENGLISH POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"ENGLISH SETTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"KERRY BLUE TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"CAIRN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/004g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"ENGLISH COCKER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/005g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"GORDON SETTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/006g07.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"AIREDALE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/007g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"AUSTRALIAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/008g03.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"BEDLINGTON TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/009g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"BORDER TERRIER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/011g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"FOX TERRIER (SMOOTH)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/012g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"ENGLISH TOY TERRIER (BLACK &TAN)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/013g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"SWEDISH VALLHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/014g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"BELGIAN SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"OLD ENGLISH SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/016g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"GRIFFON NIVERNAIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/017g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"BRIQUET GRIFFON VENDEEN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/019g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"ARIEGEOIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/020g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 20,\n        \"name\": \"GASCON SAINTONGEOIS\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 21,\n        \"name\": \"GREAT GASCONY BLUE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/022g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 22,\n        \"name\": \"POITEVIN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/024g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 23,\n        \"name\": \"BILLY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/025g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 24,\n        \"name\": \"ARTOIS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/028g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 25,\n        \"name\": \"PORCELAINE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/030g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 26,\n        \"name\": \"SMALL BLUE GASCONY BLUE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"BLUE GASCONY GRIFFON\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 28,\n        \"name\": \"GRAND BASSET GRIFFON VENDEEN\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 29,\n        \"name\": \"NORMAN ARTESIEN BASSET\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 30,\n        \"name\": \"BLUE GASCONY BASSET\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 31,\n        \"name\": \"BASSET FAUVE DE BRETAGNE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 32,\n        \"name\": \"PORTUGUESE WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/037g08.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 33,\n        \"name\": \"WELSH CORGI CARDIGAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/038g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 34,\n        \"name\": \"WELSH CORGI PEMBROKE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/039g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 35,\n        \"name\": \"IRISH SOFT COATED WHEATEN TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 36,\n        \"name\": \"YUGOSLAVIAN SHEPHERD DOG - SHARPLANINA\",\n        \"image\": \" SERBIA\",\n        \"country\": \"MACEDONIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 37,\n        \"name\": \"JÄMTHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/042g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 38,\n        \"name\": \"BASENJI\",\n        \"image\": null,\n        \"country\": \"CENTRAL AFRICA\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 39,\n        \"name\": \"BERGER DE BEAUCE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 40,\n        \"name\": \"BERNESE MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/045g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 41,\n        \"name\": \"APPENZELL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 42,\n        \"name\": \"ENTLEBUCH CATTLE DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/047g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 43,\n        \"name\": \"KARELIAN BEAR DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/048g05-1.jpg\",\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 44,\n        \"name\": \"FINNISH SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/049g05-1.jpg\",\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 45,\n        \"name\": \"NEWFOUNDLAND\",\n        \"image\": null,\n        \"country\": \"CANADA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 46,\n        \"name\": \"FINNISH HOUND\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 47,\n        \"name\": \"POLISH HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/052g06.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 48,\n        \"name\": \"KOMONDOR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/053g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 49,\n        \"name\": \"KUVASZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/054g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 50,\n        \"name\": \"PULI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/055g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 51,\n        \"name\": \"PUMI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/056g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 52,\n        \"name\": \"HUNGARIAN SHORT-HAIRED POINTER (VIZSLA)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/057g07.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 53,\n        \"name\": \"GREAT SWISS MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/058g02.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Swiss Mountain- and Cattledogs\"\n    },\n    {\n        \"id\": 54,\n        \"name\": \"SWISS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/059g06-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 55,\n        \"name\": \"SMALL SWISS HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/060g06-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 56,\n        \"name\": \"ST. BERNARD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/061g02-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 57,\n        \"name\": \"COARSE-HAIRED STYRIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/062g06.jpg\",\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 58,\n        \"name\": \"AUSTRIAN BLACK AND TAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/063g06.jpg\",\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 59,\n        \"name\": \"AUSTRIAN  PINSCHER\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 60,\n        \"name\": \"MALTESE\",\n        \"image\": null,\n        \"country\": \"CENTRAL MEDITERRANEAN BASIN\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 61,\n        \"name\": \"FAWN BRITTANY GRIFFON\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/066g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 62,\n        \"name\": \"PETIT BASSET GRIFFON VENDEEN\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 63,\n        \"name\": \"TYROLEAN HOUND\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 64,\n        \"name\": \"LAKELAND TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/070g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 65,\n        \"name\": \"MANCHESTER TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/071g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 66,\n        \"name\": \"NORWICH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/072g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 67,\n        \"name\": \"SCOTTISH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/073g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 68,\n        \"name\": \"SEALYHAM TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/074g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 69,\n        \"name\": \"SKYE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/075g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 70,\n        \"name\": \"STAFFORDSHIRE BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/076g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 71,\n        \"name\": \"CONTINENTAL TOY SPANIEL\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Continental Toy Spaniel and Russian Toy\"\n    },\n    {\n        \"id\": 72,\n        \"name\": \"WELSH TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/078g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 73,\n        \"name\": \"GRIFFON BRUXELLOIS\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/080g09-1.jpg\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 74,\n        \"name\": \"GRIFFON BELGE\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 75,\n        \"name\": \"PETIT BRABANÇON\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Small Belgian Dogs\"\n    },\n    {\n        \"id\": 76,\n        \"name\": \"SCHIPPERKE\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 77,\n        \"name\": \"BLOODHOUND\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 78,\n        \"name\": \"WEST HIGHLAND WHITE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/085g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 79,\n        \"name\": \"YORKSHIRE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/086g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 80,\n        \"name\": \"CATALAN SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 81,\n        \"name\": \"SHETLAND SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/088g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 82,\n        \"name\": \"IBIZAN PODENCO\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 83,\n        \"name\": \"BURGOS POINTING DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 84,\n        \"name\": \"SPANISH MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 85,\n        \"name\": \"PYRENEAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 86,\n        \"name\": \"PORTUGUESE SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/093g01.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 87,\n        \"name\": \"PORTUGUESE WARREN HOUND-PORTUGUESE PODENGO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/094g05-1.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 88,\n        \"name\": \"BRITTANY SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/095g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 89,\n        \"name\": \"RAFEIRO OF ALENTEJO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/096g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 90,\n        \"name\": \"GERMAN SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/097g05-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"European Spitz\"\n    },\n    {\n        \"id\": 91,\n        \"name\": \"GERMAN WIRE- HAIRED POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/098g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 92,\n        \"name\": \"WEIMARANER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 93,\n        \"name\": \"WESTPHALIAN DACHSBRACKE\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 94,\n        \"name\": \"FRENCH BULLDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/101g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 95,\n        \"name\": \"KLEINER MÜNSTERLÄNDER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 96,\n        \"name\": \"GERMAN HUNTING TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/103g03-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 97,\n        \"name\": \"GERMAN SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/104g08.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 98,\n        \"name\": \"FRENCH WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/105g08.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 99,\n        \"name\": \"BLUE PICARDY SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 100,\n        \"name\": \"WIRE-HAIRED POINTING GRIFFON KORTHALS\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 101,\n        \"name\": \"PICARDY SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 102,\n        \"name\": \"CLUMBER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/109g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 103,\n        \"name\": \"CURLY COATED RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/110g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 104,\n        \"name\": \"GOLDEN RETRIEVER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 105,\n        \"name\": \"BRIARD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/113g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 106,\n        \"name\": \"PONT-AUDEMER SPANIEL\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 107,\n        \"name\": \"SAINT GERMAIN POINTER\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 108,\n        \"name\": \"DOGUE DE BORDEAUX\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/116g02.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 109,\n        \"name\": \"DEUTSCH LANGHAAR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/117g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 110,\n        \"name\": \"LARGE MUNSTERLANDER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/118g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 111,\n        \"name\": \"GERMAN SHORT- HAIRED POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/119g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 112,\n        \"name\": \"IRISH RED SETTER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 113,\n        \"name\": \"FLAT COATED RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/121g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 114,\n        \"name\": \"LABRADOR RETRIEVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/122g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 115,\n        \"name\": \"FIELD SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/123g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 116,\n        \"name\": \"IRISH WATER SPANIEL\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 117,\n        \"name\": \"ENGLISH SPRINGER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/125g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 118,\n        \"name\": \"WELSH SPRINGER SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/126g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 119,\n        \"name\": \"SUSSEX SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/127g08.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 120,\n        \"name\": \"KING CHARLES SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/128g09.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"English Toy Spaniels\"\n    },\n    {\n        \"id\": 121,\n        \"name\": \"SMÅLANDSSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/129g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 122,\n        \"name\": \"DREVER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/130g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 123,\n        \"name\": \"SCHILLERSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/131g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 124,\n        \"name\": \"HAMILTONSTÖVARE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/132g06.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 125,\n        \"name\": \"FRENCH POINTING DOG - GASCOGNE TYPE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 126,\n        \"name\": \"FRENCH POINTING DOG - PYRENEAN TYPE\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 127,\n        \"name\": \"SWEDISH LAPPHUND\",\n        \"image\": null,\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 128,\n        \"name\": \"CAVALIER KING CHARLES SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/136g09.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"English Toy Spaniels\"\n    },\n    {\n        \"id\": 129,\n        \"name\": \"PYRENEAN MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/137g02.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 130,\n        \"name\": \"PYRENEAN SHEEPDOG - SMOOTH FACED\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/138g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 131,\n        \"name\": \"IRISH TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 132,\n        \"name\": \"BOSTON TERRIER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 133,\n        \"name\": \"LONG-HAIRED PYRENEAN SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/141g01.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 134,\n        \"name\": \"SLOVAKIAN CHUVACH\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 135,\n        \"name\": \"DOBERMANN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/143g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 136,\n        \"name\": \"BOXER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/144g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 137,\n        \"name\": \"LEONBERGER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 138,\n        \"name\": \"RHODESIAN RIDGEBACK\",\n        \"image\": null,\n        \"country\": \"SOUTH AFRICA\",\n        \"section\": \"Related breeds\"\n    },\n    {\n        \"id\": 139,\n        \"name\": \"ROTTWEILER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 140,\n        \"name\": \"DACHSHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/148g04-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"None\"\n    },\n    {\n        \"id\": 141,\n        \"name\": \"BULLDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/149g02.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 142,\n        \"name\": \"SERBIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/150g06.jpg\",\n        \"country\": \"SERBIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 143,\n        \"name\": \"ISTRIAN SHORT-HAIRED HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/151g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 144,\n        \"name\": \"ISTRIAN WIRE-HAIRED HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/152g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 145,\n        \"name\": \"DALMATIAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/153g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Related breeds\"\n    },\n    {\n        \"id\": 146,\n        \"name\": \"POSAVATZ HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/154g06.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 147,\n        \"name\": \"BOSNIAN BROKEN-HAIRED HOUND - CALLED BARAK\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/155g06.jpg\",\n        \"country\": \"BOSNIA AND HERZEGOVINA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 148,\n        \"name\": \"COLLIE ROUGH\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/156g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 149,\n        \"name\": \"BULLMASTIFF\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 150,\n        \"name\": \"GREYHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/158g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 151,\n        \"name\": \"ENGLISH FOXHOUND\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 152,\n        \"name\": \"IRISH WOLFHOUND\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Rough-haired Sighthounds\"\n    },\n    {\n        \"id\": 153,\n        \"name\": \"BEAGLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/161g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 154,\n        \"name\": \"WHIPPET\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/162g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 155,\n        \"name\": \"BASSET HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/163g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 156,\n        \"name\": \"DEERHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/164g10.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Rough-haired Sighthounds\"\n    },\n    {\n        \"id\": 157,\n        \"name\": \"ITALIAN SPINONE\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 158,\n        \"name\": \"GERMAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/166g01-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 159,\n        \"name\": \"AMERICAN COCKER SPANIEL\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 160,\n        \"name\": \"DANDIE DINMONT TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/168g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 161,\n        \"name\": \"FOX TERRIER (WIRE)\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/169g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 162,\n        \"name\": \"CASTRO LABOREIRO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/170g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 163,\n        \"name\": \"BOUVIER DES ARDENNES\",\n        \"image\": null,\n        \"country\": \"BELGIUM\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 164,\n        \"name\": \"POODLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/172g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Poodle\"\n    },\n    {\n        \"id\": 165,\n        \"name\": \"ESTRELA MOUNTAIN DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/173g02.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 166,\n        \"name\": \"FRENCH SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/175g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 167,\n        \"name\": \"PICARDY SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 168,\n        \"name\": \"ARIEGE POINTING DOG\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 169,\n        \"name\": \"BOURBONNAIS POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/179g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 170,\n        \"name\": \"AUVERGNE POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/180g07.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 171,\n        \"name\": \"GIANT SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/181g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 172,\n        \"name\": \"SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/182g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 173,\n        \"name\": \"MINIATURE SCHNAUZER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/183g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 174,\n        \"name\": \"GERMAN PINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/184g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 175,\n        \"name\": \"MINIATURE PINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/185g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 176,\n        \"name\": \"AFFENPINSCHER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/186g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 177,\n        \"name\": \"PORTUGUESE POINTING DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/187g07.jpg\",\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 178,\n        \"name\": \"SLOUGHI\",\n        \"image\": null,\n        \"country\": \"MOROCCO\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 179,\n        \"name\": \"FINNISH LAPPHUND\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 180,\n        \"name\": \"HOVAWART\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 181,\n        \"name\": \"BOUVIER DES FLANDRES\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 182,\n        \"name\": \"KROMFOHRLÄNDER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/192g09.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Kromfohrländer\"\n    },\n    {\n        \"id\": 183,\n        \"name\": \"BORZOI - RUSSIAN HUNTING SIGHTHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/193g10.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 184,\n        \"name\": \"BERGAMASCO SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/194g01-1.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 185,\n        \"name\": \"ITALIAN VOLPINO\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"European Spitz\"\n    },\n    {\n        \"id\": 186,\n        \"name\": \"BOLOGNESE\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 187,\n        \"name\": \"NEAPOLITAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 188,\n        \"name\": \"ITALIAN ROUGH-HAIRED SEGUGIO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/198g06.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 189,\n        \"name\": \"CIRNECO DELL'ETNA\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 190,\n        \"name\": \"ITALIAN GREYHOUND\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 191,\n        \"name\": \"MAREMMA AND THE ABRUZZES SHEEPDOG\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 192,\n        \"name\": \"ITALIAN POINTING DOG\",\n        \"image\": null,\n        \"country\": \"ITALY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 193,\n        \"name\": \"NORWEGIAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/203g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 194,\n        \"name\": \"SPANISH HOUND\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 195,\n        \"name\": \"CHOW CHOW\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/205g05.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 196,\n        \"name\": \"JAPANESE CHIN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/206g09.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Japan Chin and Pekingese\"\n    },\n    {\n        \"id\": 197,\n        \"name\": \"PEKINGESE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/207g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Japan Chin and Pekingese\"\n    },\n    {\n        \"id\": 198,\n        \"name\": \"SHIH TZU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/208g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 199,\n        \"name\": \"TIBETAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/209g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 200,\n        \"name\": \"SAMOYED\",\n        \"image\": \" SIBERIA\",\n        \"country\": \"NORTHERN RUSSIA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 201,\n        \"name\": \"HANOVERIAN SCENTHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/213g06-1.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 202,\n        \"name\": \"HELLENIC HOUND\",\n        \"image\": null,\n        \"country\": \"GREECE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 203,\n        \"name\": \"BICHON FRISE\",\n        \"image\": \" FRANCE\",\n        \"country\": \"BELGIUM\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 204,\n        \"name\": \"PUDELPOINTER\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 205,\n        \"name\": \"BAVARIAN MOUNTAIN SCENT HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/217g06.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 206,\n        \"name\": \"CHIHUAHUA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/218g09-1.jpg\",\n        \"country\": \"MEXICO\",\n        \"section\": \"Chihuahueno\"\n    },\n    {\n        \"id\": 207,\n        \"name\": \"FRENCH TRICOLOUR HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 208,\n        \"name\": \"FRENCH WHITE & BLACK HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/220g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 209,\n        \"name\": \"FRISIAN WATER DOG\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 210,\n        \"name\": \"STABIJHOUN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/222g07-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 211,\n        \"name\": \"DUTCH SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/223g01-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 212,\n        \"name\": \"DRENTSCHE PARTRIDGE DOG\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 213,\n        \"name\": \"FILA BRASILEIRO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/225g02.jpg\",\n        \"country\": \"BRAZIL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 214,\n        \"name\": \"LANDSEER (EUROPEAN CONTINENTAL TYPE)\",\n        \"image\": \" SWITZERLAND\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 215,\n        \"name\": \"LHASA APSO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/227g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 216,\n        \"name\": \"AFGHAN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/228g10.jpg\",\n        \"country\": \"AFGHANISTAN\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 217,\n        \"name\": \"SERBIAN TRICOLOUR HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/229g06.jpg\",\n        \"country\": \"SERBIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 218,\n        \"name\": \"TIBETAN MASTIFF\",\n        \"image\": null,\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 219,\n        \"name\": \"TIBETAN SPANIEL\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/231g09.jpg\",\n        \"country\": \"Tibet (China)\",\n        \"section\": \"Tibetan breeds\"\n    },\n    {\n        \"id\": 220,\n        \"name\": \"DEUTSCH STICHELHAAR\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/232g07.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 221,\n        \"name\": \"LITTLE LION DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/233g09.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 222,\n        \"name\": \"XOLOITZCUINTLE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/234g05-1.jpg\",\n        \"country\": \"MEXICO\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 223,\n        \"name\": \"GREAT DANE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/235g02.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 224,\n        \"name\": \"AUSTRALIAN SILKY TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/236g03.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Toy Terriers\"\n    },\n    {\n        \"id\": 225,\n        \"name\": \"NORWEGIAN BUHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/237g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 226,\n        \"name\": \"MUDI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/238g01.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 227,\n        \"name\": \"HUNGARIAN WIRE-HAIRED POINTER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/239g07.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 228,\n        \"name\": \"HUNGARIAN GREYHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/240g10.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 229,\n        \"name\": \"HUNGARIAN HOUND - TRANSYLVANIAN SCENT HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/241g06.jpg\",\n        \"country\": \"HUNGARY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 230,\n        \"name\": \"NORWEGIAN ELKHOUND GREY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/242g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 231,\n        \"name\": \"ALASKAN MALAMUTE\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 232,\n        \"name\": \"SLOVAKIAN HOUND\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 233,\n        \"name\": \"BOHEMIAN WIRE-HAIRED POINTING GRIFFON\",\n        \"image\": null,\n        \"country\": \"CZECH REPUBLIC\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 234,\n        \"name\": \"CESKY TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/246g03.jpg\",\n        \"country\": \"CZECH REPUBLIC\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 235,\n        \"name\": \"ATLAS MOUNTAIN DOG (AIDI)\",\n        \"image\": null,\n        \"country\": \"MOROCCO\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 236,\n        \"name\": \"PHARAOH HOUND\",\n        \"image\": null,\n        \"country\": \"MALTA\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 237,\n        \"name\": \"MAJORCA MASTIFF\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 238,\n        \"name\": \"HAVANESE\",\n        \"image\": null,\n        \"country\": \"WESTERN MEDITERRANEAN BASIN\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 239,\n        \"name\": \"POLISH LOWLAND SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/251g01.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 240,\n        \"name\": \"TATRA SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/252g01.jpg\",\n        \"country\": \"POLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 241,\n        \"name\": \"PUG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/253g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Small Molossian type Dogs\"\n    },\n    {\n        \"id\": 242,\n        \"name\": \"ALPINE DACHSBRACKE\",\n        \"image\": null,\n        \"country\": \"AUSTRIA\",\n        \"section\": \"Leash (scent) Hounds\"\n    },\n    {\n        \"id\": 243,\n        \"name\": \"AKITA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/255g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 244,\n        \"name\": \"SHIBA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/257g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 245,\n        \"name\": \"JAPANESE TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/259g03.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 246,\n        \"name\": \"TOSA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/260g02.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 247,\n        \"name\": \"HOKKAIDO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/261g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 248,\n        \"name\": \"JAPANESE SPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/262g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 249,\n        \"name\": \"CHESAPEAKE BAY RETRIEVER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 250,\n        \"name\": \"MASTIFF\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 251,\n        \"name\": \"NORWEGIAN LUNDEHUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/265g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 252,\n        \"name\": \"HYGEN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/266g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 253,\n        \"name\": \"HALDEN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/267g06.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 254,\n        \"name\": \"NORWEGIAN ELKHOUND BLACK\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/268g05.jpg\",\n        \"country\": \"NORWAY\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 255,\n        \"name\": \"SALUKI\",\n        \"image\": null,\n        \"country\": \"MIDDLE EAST\",\n        \"section\": \"Long-haired or fringed Sighthounds\"\n    },\n    {\n        \"id\": 256,\n        \"name\": \"SIBERIAN HUSKY\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 257,\n        \"name\": \"BEARDED COLLIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/271g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 258,\n        \"name\": \"NORFOLK TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/272g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 259,\n        \"name\": \"CANAAN DOG\",\n        \"image\": null,\n        \"country\": \"ISRAEL\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 260,\n        \"name\": \"GREENLAND DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/274g05.jpg\",\n        \"country\": \"GREENLAND\",\n        \"section\": \"Nordic Sledge Dogs\"\n    },\n    {\n        \"id\": 261,\n        \"name\": \"NORRBOTTENSPITZ\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/276g05.jpg\",\n        \"country\": \"SWEDEN\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 262,\n        \"name\": \"CROATIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/277g01.jpg\",\n        \"country\": \"CROATIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 263,\n        \"name\": \"KARST SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/278g02.jpg\",\n        \"country\": \"SLOVENIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 264,\n        \"name\": \"MONTENEGRIN MOUNTAIN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/279g06.jpg\",\n        \"country\": \"MONTENEGRO\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 265,\n        \"name\": \"OLD DANISH POINTING DOG\",\n        \"image\": null,\n        \"country\": \"DENMARK\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 266,\n        \"name\": \"GRAND GRIFFON VENDEEN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/282g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 267,\n        \"name\": \"COTON DE TULEAR\",\n        \"image\": null,\n        \"country\": \"MADAGASCAR\",\n        \"section\": \"Bichons and related breeds\"\n    },\n    {\n        \"id\": 268,\n        \"name\": \"LAPPONIAN HERDER\",\n        \"image\": null,\n        \"country\": \"FINLAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 269,\n        \"name\": \"SPANISH GREYHOUND\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 270,\n        \"name\": \"AMERICAN STAFFORDSHIRE TERRIER\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 271,\n        \"name\": \"AUSTRALIAN CATTLE DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/287g01.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 272,\n        \"name\": \"CHINESE CRESTED DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/288g09.jpg\",\n        \"country\": \"CHINA\",\n        \"section\": \"Hairless Dogs\"\n    },\n    {\n        \"id\": 273,\n        \"name\": \"ICELANDIC SHEEPDOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/289g05.jpg\",\n        \"country\": \"ICELAND\",\n        \"section\": \"Nordic Watchdogs and Herders\"\n    },\n    {\n        \"id\": 274,\n        \"name\": \"BEAGLE HARRIER\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 275,\n        \"name\": \"EURASIAN\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/291g05.jpg\",\n        \"country\": \"GERMANY\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 276,\n        \"name\": \"DOGO ARGENTINO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/292g02.jpg\",\n        \"country\": \"ARGENTINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 277,\n        \"name\": \"AUSTRALIAN KELPIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/293g01.jpg\",\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 278,\n        \"name\": \"OTTERHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/294g06.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 279,\n        \"name\": \"HARRIER\",\n        \"image\": null,\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 280,\n        \"name\": \"COLLIE SMOOTH\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/296g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 281,\n        \"name\": \"BORDER COLLIE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/297g01.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 282,\n        \"name\": \"ROMAGNA WATER DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/298g08-01.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 283,\n        \"name\": \"GERMAN HOUND\",\n        \"image\": null,\n        \"country\": \"GERMANY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 284,\n        \"name\": \"BLACK AND TAN COONHOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/300g06.jpg\",\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 285,\n        \"name\": \"AMERICAN WATER SPANIEL\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 286,\n        \"name\": \"IRISH GLEN OF IMAAL TERRIER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 287,\n        \"name\": \"AMERICAN FOXHOUND\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 288,\n        \"name\": \"RUSSIAN-EUROPEAN LAIKA\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 289,\n        \"name\": \"EAST SIBERIAN LAIKA\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/305g05-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 290,\n        \"name\": \"WEST SIBERIAN LAIKA\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Nordic Hunting Dogs\"\n    },\n    {\n        \"id\": 291,\n        \"name\": \"AZAWAKH\",\n        \"image\": null,\n        \"country\": \"MALI\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 292,\n        \"name\": \"DUTCH SMOUSHOND\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 293,\n        \"name\": \"SHAR PEI\",\n        \"image\": null,\n        \"country\": \"CHINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 294,\n        \"name\": \"PERUVIAN HAIRLESS DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/310g05.jpg\",\n        \"country\": \"PERU\",\n        \"section\": \"Primitive type\"\n    },\n    {\n        \"id\": 295,\n        \"name\": \"SAARLOOS WOLFHOND\",\n        \"image\": null,\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 296,\n        \"name\": \"NOVA SCOTIA DUCK TOLLING RETRIEVER\",\n        \"image\": null,\n        \"country\": \"CANADA\",\n        \"section\": \"Retrievers\"\n    },\n    {\n        \"id\": 297,\n        \"name\": \"DUTCH SCHAPENDOES\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/313g01.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 298,\n        \"name\": \"NEDERLANDSE KOOIKERHONDJE\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/314g08-1.jpg\",\n        \"country\": \"THE NETHERLANDS\",\n        \"section\": \"Flushing Dogs\"\n    },\n    {\n        \"id\": 299,\n        \"name\": \"BROHOLMER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/315g02.jpg\",\n        \"country\": \"DENMARK\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 300,\n        \"name\": \"FRENCH WHITE AND ORANGE HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 301,\n        \"name\": \"KAI\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/317g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 302,\n        \"name\": \"KISHU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/318g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 303,\n        \"name\": \"SHIKOKU\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/319g05.jpg\",\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 304,\n        \"name\": \"WIREHAIRED SLOVAKIAN POINTER\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Continental Pointing Dogs\"\n    },\n    {\n        \"id\": 305,\n        \"name\": \"MAJORCA SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 306,\n        \"name\": \"GREAT ANGLO-FRENCH TRICOLOUR HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 307,\n        \"name\": \"GREAT ANGLO-FRENCH WHITE AND BLACK HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/323g06.jpg\",\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 308,\n        \"name\": \"GREAT ANGLO-FRENCH WHITE & ORANGE HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 309,\n        \"name\": \"MEDIUM-SIZED ANGLO-FRENCH HOUND\",\n        \"image\": null,\n        \"country\": \"FRANCE\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 310,\n        \"name\": \"SOUTH RUSSIAN SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 311,\n        \"name\": \"RUSSIAN BLACK TERRIER\",\n        \"image\": null,\n        \"country\": \"RUSSIA\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 312,\n        \"name\": \"CAUCASIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/328g02.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 313,\n        \"name\": \"CANARIAN WARREN HOUND\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/329g05.jpg\",\n        \"country\": \"SPAIN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 314,\n        \"name\": \"IRISH RED AND WHITE SETTER\",\n        \"image\": null,\n        \"country\": \"IRELAND\",\n        \"section\": \"British and Irish Pointers and Setters\"\n    },\n    {\n        \"id\": 315,\n        \"name\": \"ANATOLIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/331g02.jpg\",\n        \"country\": \"ANATOLIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 316,\n        \"name\": \"CZECHOSLOVAKIAN WOLFDOG\",\n        \"image\": null,\n        \"country\": \"SLOVAKIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 317,\n        \"name\": \"POLISH GREYHOUND\",\n        \"image\": null,\n        \"country\": \"POLAND\",\n        \"section\": \"Short-haired Sighthounds\"\n    },\n    {\n        \"id\": 318,\n        \"name\": \"KOREA JINDO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/334g05.jpg\",\n        \"country\": \"REPUBLIC OF KOREA\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 319,\n        \"name\": \"CENTRAL ASIA SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/335g02-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 320,\n        \"name\": \"SPANISH WATER DOG\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Water Dogs\"\n    },\n    {\n        \"id\": 321,\n        \"name\": \"ITALIAN SHORT-HAIRED SEGUGIO\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/337g06.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 322,\n        \"name\": \"THAI RIDGEBACK DOG\",\n        \"image\": null,\n        \"country\": \"THAILAND\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 323,\n        \"name\": \"PARSON RUSSELL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/339g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 324,\n        \"name\": \"SAINT MIGUEL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"PORTUGAL\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 325,\n        \"name\": \"BRAZILIAN TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/341g03.jpg\",\n        \"country\": \"BRAZIL\",\n        \"section\": \"Large and medium sized Terriers\"\n    },\n    {\n        \"id\": 326,\n        \"name\": \"AUSTRALIAN SHEPHERD\",\n        \"image\": null,\n        \"country\": \"UNITED STATES OF AMERICA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 327,\n        \"name\": \"ITALIAN CORSO DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/343g02.jpg\",\n        \"country\": \"ITALY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 328,\n        \"name\": \"AMERICAN AKITA\",\n        \"image\": null,\n        \"country\": \"JAPAN\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 329,\n        \"name\": \"JACK RUSSELL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/345g03-2.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Small sized Terriers\"\n    },\n    {\n        \"id\": 330,\n        \"name\": \"DOGO CANARIO\",\n        \"image\": null,\n        \"country\": \"SPAIN\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 331,\n        \"name\": \"WHITE SWISS SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/347g01-1.jpg\",\n        \"country\": \"SWITZERLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 332,\n        \"name\": \"TAIWAN DOG\",\n        \"image\": null,\n        \"country\": \"TAIWAN\",\n        \"section\": \"Primitive type - Hunting Dogs\"\n    },\n    {\n        \"id\": 333,\n        \"name\": \"ROMANIAN MIORITIC SHEPHERD DOG\",\n        \"image\": null,\n        \"country\": \"ROMANIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 334,\n        \"name\": \"ROMANIAN CARPATHIAN SHEPHERD DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/350g01.jpg\",\n        \"country\": \"ROMANIA\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 335,\n        \"name\": \"AUSTRALIAN STUMPY TAIL CATTLE DOG\",\n        \"image\": null,\n        \"country\": \"AUSTRALIA\",\n        \"section\": \"Cattledogs (except Swiss Cattledogs)\"\n    },\n    {\n        \"id\": 336,\n        \"name\": \"RUSSIAN TOY\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/352g09-1.jpg\",\n        \"country\": \"RUSSIA\",\n        \"section\": \"Continental Toy Spaniel and Russian Toy\"\n    },\n    {\n        \"id\": 337,\n        \"name\": \"CIMARRÓN URUGUAYO\",\n        \"image\": null,\n        \"country\": \"URUGUAY\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 338,\n        \"name\": \"POLISH HUNTING DOG\",\n        \"image\": null,\n        \"country\": \"POLAND\",\n        \"section\": \"Scent hounds\"\n    },\n    {\n        \"id\": 339,\n        \"name\": \"BOSNIAN AND HERZEGOVINIAN - CROATIAN SHEPHERD DOG\",\n        \"image\": \" CROATIA\",\n        \"country\": \"BOSNIA AND HERZEGOVINA\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 340,\n        \"name\": \"DANISH-SWEDISH FARMDOG\",\n        \"image\": \" SWEDEN\",\n        \"country\": \"DENMARK\",\n        \"section\": \"Pinscher and Schnauzer type\"\n    },\n    {\n        \"id\": 341,\n        \"name\": \"SOUTHEASTERN EUROPEAN SHEPHERD\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/357g02.jpg\",\n        \"country\": \"SOUTH-EASTERN EUROPE\",\n        \"section\": \"Molossian type\"\n    },\n    {\n        \"id\": 342,\n        \"name\": \"THAI BANGKAEW DOG\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/358g05.jpg\",\n        \"country\": \"THAILAND\",\n        \"section\": \"Asian Spitz and related breeds\"\n    },\n    {\n        \"id\": 343,\n        \"name\": \"MINIATURE BULL TERRIER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/359g03.jpg\",\n        \"country\": \"GREAT BRITAIN\",\n        \"section\": \"Bull type Terriers\"\n    },\n    {\n        \"id\": 344,\n        \"name\": \"LANCASHIRE HEELER\",\n        \"image\": \"http://www.fci.be/Nomenclature/Illustrations/360g01.jpg\",\n        \"country\": \"ENGLAND\",\n        \"section\": \"Sheepdogs\"\n    },\n    {\n        \"id\": 345,\n        \"name\": \"LABRADOR RETRIEVER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 346,\n        \"name\": \"HUSKY MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 347,\n        \"name\": \"LABRADOR / GREAT DANE MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 348,\n        \"name\": \"TERRIER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 349,\n        \"name\": \"BEAGLE MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    },\n    {\n        \"id\": 350,\n        \"name\": \"SHORT HAIRED SETTER MIX\",\n        \"image\": null,\n        \"country\": \"NA\",\n        \"section\": \"Mutt\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CSV Bulk Load Tests",
					"item": [
						{
							"name": "Invalid Attribute Check",
							"item": [
								{
									"name": "csv_data_load with invalid attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check for job message\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
													"    ",
													"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"csv_file_load with invalid attributes\");",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\": \"csv_data_load\",\n\t\"schema\": \"dev\",\n\t\"action\": \"insert\",\n\t\"table\": \"invalid_attribute\",\n\t\"data\": \"id,s/ome=attribute\\n1,cheeseburger\\n2,hamburger with cheese\\n3,veggie burger\\n\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										},
										"description": "Checks to confirm that a 500 status and error msg are returned when an invalid attribute name is used"
									},
									"response": []
								},
								{
									"name": "csv_file_load with invalid attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check for job message\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
													"    ",
													"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, null);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\": \"csv_file_load\",\n\t\"action\": \"insert\",\n\t\"schema\": \"dev\",\n\t\"table\": \"invalid_attribute\",\n\t\"file_path\": \"{{files_location}}InvalidAttributes.csv\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										},
										"description": "Checks to confirm that a 500 status and error msg are returned when invalid attribute names are used"
									},
									"response": []
								},
								{
									"name": "Check Job Failed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test Job Found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.length).to.eql(1);",
													"    ",
													"    pm.expect(jsonData[0]).to.have.property('status');",
													"    ",
													"    const status = jsonData[0].status;",
													"    ",
													"    //",
													"    ",
													"    switch(status){",
													"        case 'ERROR':",
													"            console.log(jsonData[0]);",
													"            pm.expect(jsonData[0].message).to.contain('Invalid column name');",
													"            if(pm.environment.get(\"next_request\")){",
													"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
													"            }",
													"            break;",
													"        case 'COMPLETE':",
													"        case 'IN_PROGRESS':",
													"            console.log('in progress, checking again');",
													"            setTimeout(()=>{}, 1000);",
													"            postman.setNextRequest('Check Job Failed');",
													"            break;",
													"        default:",
													"            postman.setNextRequest('Check Job Failed');",
													"            break;",
													"    }",
													"    ",
													"    //THIS MUST BE AT THE END!",
													"    pm.expect(status).to.be.oneOf(['ERROR', 'IN_PROGRESS']);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=>{}, 200);",
													"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"function:getJobId\", (jsonData, next_req)=>{",
											"    let id_index = jsonData.message.indexOf('id ');",
											"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"    pm.environment.set(\"job_id\", parsedId);",
											"    pm.environment.set(\"next_request\", next_req);",
											"    postman.setNextRequest(\"Check Job Failed\");",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "search for specific value from CSV load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].supplierid).to.eql(10);",
											"    pm.expect(jsonData[0].contactname).to.eql(\"Carlos Diaz\");",
											"    pm.expect(jsonData[0].companyname).to.eql(\"Refrescos Americanas LTDA\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"hash_attribute\": \"{{supp_id}}\",\n  \"hash_values\":[10],\n  \"get_attributes\": [\"supplierid\", \"companyname\", \"contactname\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Search for supplier id 10 and confirm it matches the source CSV file"
							},
							"response": []
						},
						{
							"name": "search for random value from CSV load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    var randomNumber = Math.floor(Math.random() * 29);",
											"    pm.expect(jsonData[randomNumber]).to.not.eql(null)",
											"    pm.expect(jsonData.length).to.eql(29);",
											"    let keys = Object.keys(jsonData[randomNumber]);",
											"    //because helium has 2 extra keys we need to check for them",
											"    if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
											"        pm.expect(keys.length).to.eql(14);",
											"    } else{",
											"        pm.expect(keys.length).to.eql(12);",
											"    }",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{supp_tb}}\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "SQL select all from supplier table and confirm that a random row exists and attributes match source file."
							},
							"response": []
						},
						{
							"name": "check error on invalid file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"insert array into table confirm\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error.includes(\"No such file or directory\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"file_path\":\"{{files_location}}Suppliers_wrong.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Should abort CSV upload and return error message"
							},
							"response": []
						},
						{
							"name": "csv bulk load update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    let message_parts = jsonData.message.split(' ');",
											"    pm.environment.set('job_id', message_parts[4]);",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"action\": \"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"data\":\"supplierid,companyname\\n19,The Chum Bucket\\n\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "update a table with csv data uplaod"
							},
							"response": []
						},
						{
							"name": "wait for csv bulk load update to complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"let status = response[0].status;",
											"",
											"switch(status){",
											"    case 'IN_PROGRESS':",
											"        console.log('Wating for CSV bulk load update to complete');",
											"        setTimeout(() => {}, 2000);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        break;",
											"",
											"    case 'COMPLETE':",
											"        pm.test(\"CSV bulk load update has completed\", () => {",
											"            pm.expect(status).to.equal('COMPLETE');",
											"        });",
											"        break;",
											"",
											"    case 'ERROR':",
											"        pm.test(\"CSV bulk load update has failed\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"        ",
											"    default:",
											"        pm.test(\"CSV bulk load update unknow status\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "update a table with csv data uplaod"
							},
							"response": []
						},
						{
							"name": "csv bulk load update confirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify csv data load was successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].supplierid).to.eql(19);",
											"    pm.expect(jsonData[0].contactname).to.eql(\"Robb Merchant\");",
											"    pm.expect(jsonData[0].companyname).to.eql(\"The Chum Bucket\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"hash_attribute\": \"{{supp_id}}\",\n  \"hash_values\":[19],\n  \"get_attributes\": [\"supplierid\", \"companyname\", \"contactname\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "confirm that table was actually updated"
							},
							"response": []
						}
					],
					"description": "Test a designated and random row from bulk CSV upload"
				},
				{
					"name": "Insert object into table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert object into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"TEST1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"postalcode\": { \"house\": 30, \"street\": \"South St\"},\n\t\t\t\"customerid\": \"TEST1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Insert object into northnwd.customers and confirm error"
					},
					"response": []
				},
				{
					"name": "Insert object confirm ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert object into table confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].postalcode).to.eql({ \"house\": 30, \"street\": \"South St\"});",
									"    pm.expect(jsonData[0].customerid).to.eql(\"TEST1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"hash_attribute\": \"{{supp_id}}\",\n  \"hash_values\":[\"TEST1\"],\n  \"get_attributes\": [\"postalcode\", \"customerid\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that the array from previous test was inserted into table as expected."
					},
					"response": []
				},
				{
					"name": "Insert array into table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert array into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"TEST2\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"postalcode\": [1, 2, 3],\n\t\t\t\"customerid\": \"TEST2\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Insert an array into northnwd.customers table and confirm error"
					},
					"response": []
				},
				{
					"name": "Insert array confirm ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert array into table confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].postalcode).to.eql([1, 2, 3]);",
									"    pm.expect(jsonData[0].customerid).to.eql(\"TEST2\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"hash_attribute\": \"{{supp_id}}\",\n  \"hash_values\":[\"TEST2\"],\n  \"get_attributes\": [\"postalcode\", \"customerid\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm that the array from previous test was inserted into table as expected."
					},
					"response": []
				},
				{
					"name": "Insert value into schema that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"insert non existent schema\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"database 'not_a_schema' does not exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"not_a_schema\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"Harper\",\n\t\t\t\"customerid\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert value into table that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"insert non existent table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Table 'northnwd.not_a_table' does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"not_a_table\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"Harper\",\n\t\t\t\"customerid\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Update value in schema that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"insert non existent schema\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"database 'not_a_schema' does not exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"not_a_schema\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"Harper\",\n\t\t\t\"customerid\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Update value in table that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"insert non existent table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Table 'northnwd.not_a_table' does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"not_a_table\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"Harper\",\n\t\t\t\"customerid\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Set attribute to number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert array into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(25);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\": \"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"firstname\":\"Test for number attribute\",\n    \"4289\" :\"Mutt\",\n    \"employeeid\":25\n  }\n]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Set an attribute to a number."
					},
					"response": []
				},
				{
					"name": "Set attribute to number confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"set attribute to number confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    var found = false",
									"    jsonData.attributes.forEach((obj) => {",
									"        if( Object.values(obj)[0] === '4289' ) {",
									"            found = true;",
									"        }",
									"    });",
									"    pm.expect(found).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"schema\":\"{{schema}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm number from previous test was successfully set as an attribute in table as expected."
					},
					"response": []
				},
				{
					"name": "Set attribute name greater than 250 bytes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"attribute too long error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    var longAttribute = \"transaction aborted due to attribute name IIetmyLabradorcomeoutsidewithmewhenIwastakingthebinsoutonemorningIlethimgoforawanderthinkinghewasjustgoingtopeeonthetelegraphpoleattheendofourdrivewaylikehealwaysdoesInsteadhesawhisopportunityandseizeditHekeptwalkingpastthetelegraphpolepasttheborderofour being too long. Attribute names cannot be longer than 250 bytes.\"",
									"    pm.expect(jsonData.error).to.eql(longAttribute);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\": \"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"firstname\":\"Test for number attribute\",\n    \"4289\" :\"Mutt\",\n    \"employeeid\":31,\n    \"IIetmyLabradorcomeoutsidewithmewhenIwastakingthebinsoutonemorningIlethimgoforawanderthinkinghewasjustgoingtopeeonthetelegraphpoleattheendofourdrivewaylikehealwaysdoesInsteadhesawhisopportunityandseizeditHekeptwalkingpastthetelegraphpolepasttheborderofour\":\"a story about a dog\"\n  }\n]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Attribute can not be larger than 250 bytes. Here we try and set attribute to a value greater than 250 bytes and confirm error message."
					},
					"response": []
				},
				{
					"name": "insert valid records into dev.invalid_attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted 2 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('inserted 2');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \"id\" : 100,\n        \"some_attribute\" : \"some_att1\",\n        \"another_attribute\": \"another_1\"\n      },\n      {\n        \"id\" : 101,\n        \"some_attribute\" : \"some_att2\",\n        \"another_attribute\": \"another_2\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "insert records into dev.leading_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted 3 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('inserted 3');",
									"});",
									"",
									"pm.test(\"inserted hashes\", function () {",
									"    const respMsg = pm.response.json().inserted_hashes;",
									"    pm.expect(respMsg).to.eql([ 0,\"011\", \"00011\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"leading_zero\",\n    \"records\": [\n    \t{\n        \"id\" : 0,\n        \"some_attribute\" : \"some_att1\",\n        \"another_attribute\": \"another_1\"\n      },\n      {\n        \"id\" : \"011\",\n        \"some_attribute\" : \"some_att2\",\n        \"another_attribute\": \"another_2\"\n      },\n      {\n        \"id\" : \"00011\",\n        \"some_attribute\" : \"some_att3\",\n        \"another_attribute\": \"another_3\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "insert test records into dev.rando",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted 4 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('inserted 4');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"rando\",\n    \"records\": [\n    \t{\n        \"id\" : 987654321,\n        \"name\" : \"Cool Dawg\"\n      },\n      {\n        \"id\" : 987654322,\n        \"name\" : \"The Coolest Dawg\"\n      },\n      {\n        \"id\" : 987654323,\n        \"name\" : \"Sup Dawg\"\n      },\n      {\n        \"id\" : 987654324,\n        \"name\" : \"Snoop Dawg\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "test SQL updating with numeric hash in single quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"updated 2 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('updated 2');",
									"});",
									"",
									"pm.test(\"update_hashes has correct hashes\", function () {",
									"    const updated = pm.response.json().update_hashes;",
									"    pm.expect(updated).to.have.members([987654321, 987654322]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"sql\",\n    \"sql\": \"UPDATE dev.rando set active = true WHERE id IN ('987654321', '987654322')\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Upsert dog data for conditions search tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Insert validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.upserted_hashes.length).to.eql(11);",
									"    pm.expect(jsonData.skipped_hashes).to.eql(undefined);",
									"    pm.expect(jsonData.message).to.eql(\"upserted 11 of 11 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"upsert\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"records\": [\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"breed_id\": 154,\n\t\t\t\"weight_lbs\": 35,\n\t\t\t\"dog_name\": \"Penny\",\n\t\t\t\"age\": 5,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": 2,\n\t\t\t\"group\": \"A\",\n\t\t\t\"location\": \"Denver, NC\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 2,\n\t\t\t\"breed_id\": 346,\n\t\t\t\"weight_lbs\": 55,\n\t\t\t\"dog_name\": \"Harper\",\n\t\t\t\"age\": 5,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": 3,\n\t\t\t\"group\": \"A\",\n\t\t\t\"location\": \"Denver, CO\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 3,\n\t\t\t\"breed_id\": 348,\n\t\t\t\"weight_lbs\": 84,\n\t\t\t\"dog_name\": \"Alby\",\n\t\t\t\"age\": 8,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": 4,\n\t\t\t\"group\": \"A\",\n\t\t\t\"location\": \"Portland, OR\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 4,\n\t\t\t\"breed_id\": 347,\n\t\t\t\"weight_lbs\": 60,\n\t\t\t\"dog_name\": \"Billy\",\n\t\t\t\"age\": 4,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": 1,\n\t\t\t\"group\": \"B\",\n\t\t\t\"location\": \"Evergreen, CO\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 5,\n\t\t\t\"breed_id\": 348,\n\t\t\t\"weight_lbs\": 15,\n\t\t\t\"dog_name\": \"Rose Merry\",\n\t\t\t\"age\": 6,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": 2,\n\t\t\t\"group\": \"B\",\n\t\t\t\"location\": \"Denver, CO\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 6,\n\t\t\t\"breed_id\": 351,\n\t\t\t\"weight_lbs\": 28,\n\t\t\t\"dog_name\": \"Kato\",\n\t\t\t\"age\": 4,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": 3,\n\t\t\t\"group\": \"A\",\n\t\t\t\"location\": \"Charlotte, NC\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 7,\n\t\t\t\"breed_id\": 349,\n\t\t\t\"weight_lbs\": 35,\n\t\t\t\"dog_name\": \"Simon\",\n\t\t\t\"age\": 1,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": 4,\n\t\t\t\"group\": \"C\",\n\t\t\t\"location\": \"Denver, CO\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 8,\n\t\t\t\"breed_id\": 250,\n\t\t\t\"weight_lbs\": 55,\n\t\t\t\"dog_name\": \"Gemma\",\n\t\t\t\"age\": 3,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": 1,\n\t\t\t\"group\": \"A\",\n\t\t\t\"location\": \"Denver, NC\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 9,\n\t\t\t\"breed_id\": 104,\n\t\t\t\"weight_lbs\": 75,\n\t\t\t\"dog_name\": \"Bode\",\n\t\t\t\"age\": 9,\n\t\t\t\"adorable\": true,\n\t\t\t\"owner_id\": null,\n\t\t\t\"group\": \"C\",\n\t\t\t\"location\": \"Boulder, CO\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 10,\n\t\t\t\"breed_id\": null,\n\t\t\t\"weight_lbs\": null,\n\t\t\t\"dog_name\": null,\n\t\t\t\"age\": 7,\n\t\t\t\"adorable\": null,\n\t\t\t\"owner_id\": null,\n\t\t\t\"group\": \"D\",\n\t\t\t\"location\": \"Boulder, CO\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 11,\n\t\t\t\"breed_id\": null,\n\t\t\t\"weight_lbs\": null,\n\t\t\t\"dog_name\": null,\n\t\t\t\"age\": null,\n\t\t\t\"adorable\": null,\n\t\t\t\"owner_id\": null,\n\t\t\t\"group\": \"C\",\n\t\t\t\"location\": \"Denver, CO\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert test records into 123.4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted 4 records in number schema table\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('inserted 4');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\": \"123\",\n    \"table\": \"4\",\n    \"records\": [\n    \t{\n        \"id\" : 987654321,\n        \"name\" : \"Cool Dawg\"\n      },\n      {\n        \"id\" : 987654322,\n        \"name\" : \"The Coolest Dawg\"\n      },\n      {\n        \"id\" : 987654323,\n        \"name\" : \"Sup Dawg\"\n      },\n      {\n        \"id\" : 987654324,\n        \"name\" : \"Snoop Dawg\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Insert records into 123.4 number schema table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Inserted records when schema table are numbers\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('inserted 1');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\": 123,\n    \"table\": 4,\n    \"records\": [\n    \t{\n        \"name\" : \"Hot Dawg\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Update test records in 123.4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"update 1 record in number schema table\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('updated 1');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"update\",\n    \"schema\": \"123\",\n    \"table\": \"4\",\n    \"records\": [\n    \t{\n        \"id\" : 987654321,\n        \"name\" : \"Hot Dawg\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Update records in 123.4 number schema table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"update 1 record in number schema table\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('updated 1');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"update\",\n    \"schema\": 123,\n    \"table\": 4,\n    \"records\": [\n    \t{\n        \"id\" : 987654321,\n        \"name\" : \"Hot Diddy Dawg\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Insert records missing table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"table required error is returned\", function () {",
									"    const respMsg = pm.response.json();",
									"    pm.expect(respMsg.error).to.equal(\"'table' is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\": \"123\",\n    \"records\": [\n    \t{\n        \"id\" : 987654321,\n        \"name\" : \"Cool Dawg\"\n      },\n      {\n        \"id\" : 987654322,\n        \"name\" : \"The Coolest Dawg\"\n      },\n      {\n        \"id\" : 987654323,\n        \"name\" : \"Sup Dawg\"\n      },\n      {\n        \"id\" : 987654324,\n        \"name\" : \"Snoop Dawg\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Insert records missing records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"records required error is returned\", function () {",
									"    const respMsg = pm.response.json();",
									"    pm.expect(respMsg.error).to.equal(\"'records' is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\": \"123\",\n    \"table\": \"4\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Upsert records missing table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"table required error is returned\", function () {",
									"    const respMsg = pm.response.json();",
									"    pm.expect(respMsg.error).to.equal(\"'table' is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"upsert\",\n    \"schema\": \"123\",\n    \"records\": [\n    \t{\n        \"id\" : 987654321,\n        \"name\" : \"Cool Dawg\"\n      },\n      {\n        \"id\" : 987654322,\n        \"name\" : \"The Coolest Dawg\"\n      },\n      {\n        \"id\" : 987654323,\n        \"name\" : \"Sup Dawg\"\n      },\n      {\n        \"id\" : 987654324,\n        \"name\" : \"Snoop Dawg\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Upsert records missing records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"records required error is returned\", function () {",
									"    const respMsg = pm.response.json();",
									"    pm.expect(respMsg.error).to.equal(\"'records' is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"upsert\",\n    \"schema\": \"123\",\n    \"table\": \"4\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Update records missing table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"table required error is returned\", function () {",
									"    const respMsg = pm.response.json();",
									"    pm.expect(respMsg.error).to.equal(\"'table' is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"update\",\n    \"schema\": \"123\",\n    \"records\": [\n    \t{\n        \"id\" : 987654321,\n        \"name\" : \"Cool Dawg\"\n      },\n      {\n        \"id\" : 987654322,\n        \"name\" : \"The Coolest Dawg\"\n      },\n      {\n        \"id\" : 987654323,\n        \"name\" : \"Sup Dawg\"\n      },\n      {\n        \"id\" : 987654324,\n        \"name\" : \"Snoop Dawg\"\n      }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "Update records missing records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"records required error is returned\", function () {",
									"    const respMsg = pm.response.json();",
									"    pm.expect(respMsg.error).to.equal(\"'records' is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"upsert\",\n    \"schema\": \"123\",\n    \"table\": \"4\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				}
			]
		},
		{
			"name": "3. SQLTests",
			"item": [
				{
					"name": "Invalid Attribute Check",
					"item": [
						{
							"name": "insert invalid attribute name - single row",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"INSERT INTO dev.invalid_attribute (id, `some/attribute`) VALUES ('1', 'some_attribute')\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update single row w/ invalid attribute name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"sql\",\n\t\"sql\": \"UPDATE dev.invalid_attribute SET `some/attribute` = 'some attribute' WHERE id = 100\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "insert all invalid attribute names - multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"INSERT INTO dev.invalid_attribute (id, `some/attribute1`, `some_/attribute2`, `some_attribute/3`) VALUES ('1', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('2', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('3', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('4', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('5', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('6', 'some_attribute', 'another_attribute', 'some_other_attribute')\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update multiple rows with invalid attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"UPDATE dev.invalid_attribute SET `/some_attribute` = 'new_value' WHERE id IN(100, 101)\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "insert some invalid attribute names - multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid SQL error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"INSERT INTO dev.invalid_attribute (id, some_attribute, another_attribute, `some_/other_attribute`) VALUES ('1', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('2', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('3', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('4', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('5', 'some_attribute', 'another_attribute', 'some_other_attribute'), ('6', 'some_attribute', 'another_attribute', 'some_other_attribute')\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Search Response Data Type Check",
					"item": [
						{
							"name": "select by hash no result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an empty array was returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = 190\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "confirm select with no result returns an empty array"
							},
							"response": []
						},
						{
							"name": "select by hash one result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = 3\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "confirm select with one result returns an array with single object"
							},
							"response": []
						},
						{
							"name": "select by hash multiple results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with two object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"    pm.expect((typeof jsonData[1])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = 3 OR {{emps_id}} = 5\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "confirm select with multiple results returns an array with multiple objects"
							},
							"response": []
						}
					],
					"description": "Test that response from search is object array "
				},
				{
					"name": "Date Function Check",
					"item": [
						{
							"name": "insert initial date function data into table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL insert successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"inserted 4 of 4 records\");",
											"    pm.expect(jsonData.inserted_hashes[0]).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"INSERT INTO dev.time_functions (id, c_date, c_time, c_timestamp, getdate, now) VALUES (1, CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP, GETDATE(), NOW()), (2, CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP, GETDATE(), NOW()), (3, CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP, GETDATE(), NOW()), (4, CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP, GETDATE(), NOW())\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check initial date function data in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 4 rows with correct date/time formats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"    var current_date = new Date().getUTCDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect([1,2,3,4]).to.include(row.id);",
											"        pm.expect(new Date(row.now).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.now.toString().length).to.equal(13);",
											"        pm.expect(new Date(row.getdate).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.getdate.toString().length).to.equal(13);",
											"        pm.expect(row.getdate.toString().length).to.equal(13);",
											"        pm.expect(new Date(row.c_timestamp).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.c_timestamp.toString().length).to.equal(13);",
											"        pm.expect(row.c_timestamp.toString().length).to.equal(13);",
											"        pm.expect(row.c_date).to.match(/\\d{4}-[01]{1}\\d{1}-[0-3]{1}\\d{1}$/);",
											"        pm.expect(row.c_time).to.match(/^[0-2]{1}\\d{1}:[0-6]{1}\\d{1}:[0-6]{1}\\d{1}.\\d{3}$/);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update w/ date function data to null in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 4 of 4 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.time_functions SET c_date = null, c_time = null, c_timestamp = null, getdate = null, now = null\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check data set to null in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 4 rows with correct date/time formats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"    var current_date = new Date().getDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect([1,2,3,4]).to.include(row.id);",
											"        pm.expect(row.now).to.be.null;",
											"        pm.expect(row.getdate).to.be.null;",
											"        pm.expect(row.c_timestamp).to.be.null;",
											"        pm.expect(row.c_date).to.be.null;",
											"        pm.expect(row.c_time).to.be.null;",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update w/ new date function data in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 4 of 4 records\");",
											"    pm.expect(jsonData.update_hashes.length).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.time_functions SET c_date = CURRENT_DATE(), c_time = CURRENT_TIME(), c_timestamp = CURRENT_TIMESTAMP, getdate = GETDATE(), now = NOW()\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check data updated to correct date values in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 4 rows with correct date/time formats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"    var current_date = new Date().getUTCDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect([1,2,3,4]).to.include(row.id);",
											"        pm.expect(new Date(row.now).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.now.toString().length).to.equal(13)",
											"        pm.expect(new Date(row.getdate).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.getdate.toString().length).to.equal(13)",
											"        pm.expect(new Date(row.c_timestamp).getUTCDate()).to.equal(current_date);",
											"        pm.expect(row.c_timestamp.toString().length).to.equal(13)",
											"        pm.expect(row.c_date).to.match(/\\d{4}-[01]{1}\\d{1}-[0-3]{1}\\d{1}$/);",
											"        pm.expect(row.c_time).to.match(/^[0-2]{1}\\d{1}:[0-6]{1}\\d{1}:[0-6]{1}\\d{1}.\\d{3}$/);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update w/ other date functions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 4 of 4 records\");",
											"    pm.expect(jsonData.update_hashes.length).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.time_functions SET today = NOW(), add_day = DATE_ADD(CURRENT_TIMESTAMP, 1, 'days'), sub_3_years = DATE_SUB('2020-4-1', 3, 'years'), server_time = GET_SERVER_TIME(), offset_utc = OFFSET_UTC(NOW(), -6)\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check other date function updates are correct in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 4 rows with correct date/time formats\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"    ",
											"    var current_date = new Date();",
											"    var current_day = current_date.getUTCDate();",
											"    var c_date_plus1 = current_date.setUTCDate(current_day + 1);",
											"    var c_day_plus1 = new Date(c_date_plus1).getUTCDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect(row.c_timestamp).to.match(/\\d{13}$/);",
											"        pm.expect(new Date(row.add_day).getUTCDate()).to.equal(c_day_plus1);",
											"        pm.expect(row.add_day).to.match(/\\d{13}$/);",
											"        pm.expect(new Date(row.sub_3_years).getFullYear()).to.equal(2017);",
											"        pm.expect(row.sub_3_years).to.match(/\\d{13}$/);",
											"        pm.expect(new Date(row.today).getUTCDate()).to.equal(current_day);",
											"        pm.expect(row.today).to.match(/\\d{13}$/);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 400);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update w/ other date functions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 2 of 2 records\");",
											"    pm.expect(jsonData.update_hashes.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.time_functions SET add_day = DATE_ADD(DATE(), 5, 'days'), tomorrow_epoch = DATE_FORMAT(DATE_ADD(NOW(), 1, 'days'), 'x') WHERE id > 2\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "select with date function in WHERE returns correct rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 2 rows with correct add_day values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    var current_date = new Date().getDate();",
											"    var date_plus_5 = new Date(new Date().setDate(current_date + 5));",
											"    jsonData.forEach(row => {",
											"        pm.expect([3,4]).to.include(row.id);",
											"        pm.expect(new Date(row.add_day).getDate()).to.equal(date_plus_5.getDate());",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions WHERE DATE_DIFF(add_day, c_timestamp, 'days') > 3 AND tomorrow_epoch > NOW()\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "delete with date function in WHERE deletes correct rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL delete successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"2 of 2 records successfully deleted\");",
											"    pm.expect(jsonData.deleted_hashes.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"DELETE FROM dev.time_functions WHERE DATE_DIFF(add_day, c_timestamp, 'days') < 3\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check that correct rows were deleted based on date function",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 2 rows with correct add_day values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    var current_date = new Date().getDate();",
											"    var date_plus_3 = new Date().setDate(current_date + 3);",
											"    jsonData.forEach(row => {",
											"        pm.expect([3,4]).to.include(row.id);",
											"        pm.expect(row.add_day).to.be.above(date_plus_3);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.time_functions\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "check that DATE(__createdtime__) returns correct value w/ correct alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select returns 2 rows with correct DATE values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    var current_date = new Date().getDate();",
											"    jsonData.forEach(row => {",
											"        pm.expect([3,4]).to.include(row.id);",
											"        pm.expect(new Date(row.updatedtime).getDate()).to.eql(current_date);",
											"        pm.expect(new Date(row['DATE(__createdtime__)']).getDate()).to.eql(current_date);",
											"        pm.expect(row.updatedtime).to.match(/\\d{4}-[01]{1}\\d{1}-[0-3]{1}\\d{1}T[0-2]{1}\\d{1}:[0-6]{1}\\d{1}:[0-6]{1}\\d{1}.\\d{3}[+|-][0-1][0-9][0-5][0-9]$/);",
											"        pm.expect(row['DATE(__createdtime__)']).to.match(/\\d{4}-[01]{1}\\d{1}-[0-3]{1}\\d{1}T[0-2]{1}\\d{1}:[0-6]{1}\\d{1}:[0-6]{1}\\d{1}.\\d{3}[+|-][0-1][0-9][0-5][0-9]$/);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT id, DATE(__createdtime__), DATE(__updatedtime__) as updatedtime FROM dev.time_functions WHERE id = 3 OR id = 4\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SEARCH_JSON calls",
					"item": [
						{
							"name": "count movies where movie.keyword starts with super",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select verify count is 161\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect(jsonData[0].count).to.eql(161);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT count(*) AS `count` from dev.movie where search_json('$[$substring(name,0, 5) = \\\"super\\\"].name', keywords) is not null\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "return array of just movie keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select verify keywords\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    jsonData.forEach(data=>{",
											"        pm.expect(Array.isArray(data.keywords)).to.eql(true);",
											"        pm.expect(typeof data.keywords[0] === 'string').to.eql(true);",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT title, search_json('name', keywords) as keywords from dev.movie where title Like '%Avengers%'\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "filter on credits.cast with join to movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL select verify movie titles\", function () {",
											"    let titles = [",
											"  \"Out of Sight\",",
											"  \"Iron Man\",",
											"  \"Captain America: The First Avenger\",",
											"  \"In Good Company\",",
											"  \"Zodiac\",",
											"  \"The Spirit\",",
											"  \"S.W.A.T.\",",
											"  \"Iron Man 2\",",
											"  \"Thor\",",
											"  \"The Avengers\",",
											"  \"Iron Man 3\",",
											"  \"Thor: The Dark World\",",
											"  \"Avengers: Age of Ultron\",",
											"  \"Captain America: The Winter Soldier\",",
											"  \"Captain America: Civil War\"",
											"];",
											"    ",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(data=>{",
											"        pm.expect(titles.indexOf(data.title)).to.be.gt(-1);",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT m.title, m.overview, m.release_date, search_json('$[name in [\\\"Robert Downey Jr.\\\", \\\"Chris Evans\\\", \\\"Scarlett Johansson\\\", \\\"Mark Ruffalo\\\", \\\"Chris Hemsworth\\\", \\\"Jeremy Renner\\\", \\\"Clark Gregg\\\", \\\"Samuel L. Jackson\\\", \\\"Gwyneth Paltrow\\\", \\\"Don Cheadle\\\"]].{\\\"actor\\\": name, \\\"character\\\": character}', c.`cast`) as characters from dev.credits c inner join dev.movie m on c.movie_id = m.id where search_json('$count($[name in [\\\"Robert Downey Jr.\\\", \\\"Chris Evans\\\", \\\"Scarlett Johansson\\\", \\\"Mark Ruffalo\\\", \\\"Chris Hemsworth\\\", \\\"Jeremy Renner\\\", \\\"Clark Gregg\\\", \\\"Samuel L. Jackson\\\", \\\"Gwyneth Paltrow\\\", \\\"Don Cheadle\\\"]])', c.`cast`) >= 2\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "SQL INSERT/UPDATE with Expressions & Functions",
					"item": [
						{
							"name": "insert values into table dev.sql_function",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL insert successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"inserted 2 of 2 records\");",
											"    pm.expect(jsonData.inserted_hashes[0]).to.eql(1);",
											"    pm.expect(jsonData.inserted_hashes[1]).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"INSERT INTO dev.sql_function (id, rando, week_day) VALUES (1, FLOOR(RANDOM() * (10 - 1)) + 1, date_format(NOW(), 'dddd')), (2, FLOOR(RANDOM() * (10 - 1)) + 1, date_format(NOW(), 'dddd'))\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "SELECT inserted values FROM dev.sql_function",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"validate select results\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"",
											"    jsonData.forEach(record => {",
											"        pm.expect(typeof record.week_day).to.eql(\"string\");",
											"        pm.expect(typeof record.rando).to.eql(\"number\");",
											"        pm.expect(record.rando >= 1 && record.rando <= 10).to.eql(true);",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => { }, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.sql_function\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update values into table dev.sql_function",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL insert successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 2 of 2 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
											"    pm.expect(jsonData.update_hashes[1]).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.sql_function SET rando = rando * 10, upper_week_day = UPPER(week_day)\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "SELECT updated values FROM dev.sql_function",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"validate select results length\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    ",
											"});",
											"",
											"pm.test(\"validate rando\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].rando >= 10 && jsonData[0].rando <= 100).to.eql(true);",
											"    pm.expect(jsonData[1].rando >= 10 && jsonData[1].rando <= 100).to.eql(true);",
											"});",
											"",
											"pm.test(\"validate upper_week_day\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].upper_week_day === jsonData[0].week_day.toUpperCase()).to.eql(true);",
											"    pm.expect(jsonData[1].upper_week_day === jsonData[1].week_day.toUpperCase()).to.eql(true);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => { }, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.sql_function\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update value in table for non-existent row",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update reponse message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 0 of 0 records\");",
											"    pm.expect(jsonData.skipped_hashes).to.eql([]);",
											"    pm.expect(jsonData.update_hashes).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE northnwd.customers SET companyname = 'Google' WHERE customerid = -100\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Update a value in a table and test for success message"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Restricted Keywords",
					"item": [
						{
							"name": "Create table keywords for SQL tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"dev\",\n    \"table\": \"keywords\",\n    \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Upsert keywords data for SQL tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify data was upserted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.upserted_hashes).to.have.length(10);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"dev\",\n    \"table\": \"keywords\",\n    \"records\": [\n        {\n            \"ALL\": \"yes\",\n            \"Inserted\": true,\n            \"__createdtime__\": 1605111134623,\n            \"__updatedtime__\": 1605111134623,\n            \"group\": \"A\",\n            \"id\": 1\n        },\n        {\n            \"ALL\": \"no\",\n            \"Inserted\": false,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"B\",\n            \"id\": 2\n        },\n        {\n            \"ALL\": \"yes\",\n            \"Inserted\": true,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"C\",\n            \"id\": 3\n        },\n        {\n            \"ALL\": \"no\",\n            \"Inserted\": false,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"A\",\n            \"id\": 4\n        },\n        {\n            \"ALL\": \"yes\",\n            \"Inserted\": true,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"B\",\n            \"id\": 5\n        },\n        {\n            \"ALL\": \"no\",\n            \"Inserted\": false,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"C\",\n            \"id\": 6\n        },\n        {\n            \"ALL\": \"yes\",\n            \"Inserted\": true,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"A\",\n            \"id\": 7\n        },\n        {\n            \"ALL\": \"no\",\n            \"Inserted\": false,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"B\",\n            \"id\": 8\n        },\n        {\n            \"ALL\": \"yes\",\n            \"Inserted\": true,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"C\",\n            \"id\": 9\n        },\n        {\n            \"ALL\": \"no\",\n            \"Inserted\": false,\n            \"__createdtime__\": 1605111134624,\n            \"__updatedtime__\": 1605111134624,\n            \"group\": \"D\",\n            \"id\": 10\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "update a table with csv data uplaod"
							},
							"response": []
						},
						{
							"name": "Delete row from table with reserverd word in WHERE clause",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL delete successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"1 of 1 record successfully deleted\");",
											"    pm.expect(jsonData.deleted_hashes[0]).to.eql(10);",
											"    pm.expect(jsonData.deleted_hashes).to.have.length(1);",
											"    pm.expect(jsonData.skipped_hashes).to.have.length(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"DELETE FROM dev.keywords WHERE `group` = 'D'\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete row from table with multiple reserverd words in WHERE clause",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL delete successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"2 of 2 records successfully deleted\");",
											"    pm.expect(jsonData.deleted_hashes[0]).to.eql(1);",
											"    pm.expect(jsonData.deleted_hashes[1]).to.eql(7);",
											"    pm.expect(jsonData.deleted_hashes).to.have.length(2);",
											"    pm.expect(jsonData.skipped_hashes).to.have.length(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"DELETE FROM dev.keywords WHERE `group` = 'A' AND [Inserted] = true\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Using SQL, delete a value and confirm success response"
							},
							"response": []
						},
						{
							"name": "UPDATE rows from table with reserved word in SET and WHERE clause",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 4 of 4 records\");",
											"    pm.expect(jsonData.update_hashes).to.have.length(4);",
											"    pm.expect(jsonData.skipped_hashes).to.have.length(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.keywords SET `group` = 'D' WHERE [ALL] = 'no'\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Using SQL, delete a value and confirm success response"
							},
							"response": []
						},
						{
							"name": "Drop table keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully deleted table 'dev.keywords'\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"drop_table\",\n    \"schema\": \"dev\",\n    \"table\": \"keywords\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SQL Update dev.cat",
					"item": [
						{
							"name": "Create table dev.cat for Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Tests successfully created table\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"table 'dev.cat' successfully created.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"cat\",\n\t\"hash_attribute\": \"id\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data into dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"inserted 9 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"inserted 9 of 9 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"cat\",\n\t\"records\": [\n    {\n        \"id\": 1,\n        \"weight_lbs\": 8,\n        \"cat_name\": \"Sophie\",\n        \"age\": 21,\n        \"adorable\": true,\n        \"outdoor_privilages\": null,\n        \"owner_id\": 2\n    },\n    {\n        \"id\": 2,\n        \"weight_lbs\": 12,\n        \"cat_name\": \"George\",\n        \"age\": 11,\n        \"adorable\": true,\n        \"outdoor_privilages\": null,\n        \"owner_id\": 2\n    },\n    {\n        \"id\": 3,\n        \"weight_lbs\": 20,\n        \"cat_name\": \"Biggie Paws\",\n        \"age\": 5,\n        \"adorable\": true,\n        \"outdoor_privilages\": null,\n        \"owner_id\": 4\n    },\n    {\n        \"id\": 4,\n        \"weight_lbs\": 6,\n        \"cat_name\": \"Willow\",\n        \"age\": 4,\n        \"adorable\": true,\n        \"outdoor_privilages\": null,\n        \"owner_id\": 1\n    },\n    {\n        \"id\": 5,\n        \"weight_lbs\": 15,\n        \"cat_name\": \"Bird\",\n        \"age\": 6,\n        \"adorable\": true,\n        \"outdoor_privilages\": null,\n        \"owner_id\": 2\n    },\n    {\n        \"id\": 6,\n        \"weight_lbs\": 8,\n        \"cat_name\": \"Murph\",\n        \"age\": 4,\n        \"adorable\": true,\n        \"outdoor_privilages\": null,\n        \"owner_id\": 3\n    },\n    {\n        \"id\": 7,\n        \"weight_lbs\": 16,\n        \"cat_name\": \"Simba\",\n        \"age\": 1,\n        \"adorable\": true,\n        \"outdoor_privilages\": null,\n        \"owner_id\": 4\n    },\n    {\n        \"id\": 8,\n        \"weight_lbs\": 12,\n        \"cat_name\": \"Gemma\",\n        \"age\": 3,\n        \"adorable\": true,\n        \"outdoor_privilages\": null,\n        \"owner_id\": 1\n    },\n    {\n        \"id\": 9,\n        \"weight_lbs\": 10,\n        \"cat_name\": \"Bob\",\n        \"age\": 8,\n        \"adorable\": true,\n        \"outdoor_privilages\": null\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update record basic where dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(9);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.cat SET cat_name = 'Bobby' WHERE id = 9\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm update record basic where dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update value exists\", function () {",
											"    const jsonData = pm.response.json()[0];",
											"    ",
											"    pm.expect(jsonData.id).equals(9);",
											"    pm.expect(jsonData.weight_lbs).equals(10);",
											"    pm.expect(jsonData.cat_name).to.eql(\"Bobby\");",
											"    pm.expect(jsonData.age).equals(8);",
											"});",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT cat_name, weight_lbs, age, id FROM dev.cat WHERE id = 9\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update record \"where x != y\" dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 5 of 5 records\");",
											"    pm.expect(jsonData.update_hashes).to.contain(3,4,6,7,8);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.cat SET adorable = false WHERE owner_id != 2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm update record \"where x != y\" dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update value exists\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.equal(5)",
											"",
											"   jsonData.forEach(obj => {",
											"        pm.expect(Object.keys(obj).length).equals(3)",
											"        pm.expect(obj.adorable).to.equal(false)",
											"        pm.expect(obj.cat_name).to.be.oneOf([\"Biggie Paws\", \"Willow\", \"Murph\", \"Simba\", \"Gemma\"])",
											"        pm.expect(obj.id).to.be.oneOf([3,4,6,7,8])",
											"    })",
											"});",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT cat_name, adorable, id FROM dev.cat WHERE owner_id != 2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update record No where dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful reponse\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 9 of 9 records\");",
											"    pm.expect(jsonData.update_hashes).to.contain(1,2,3,4,5,6,7,8,9);",
											"    pm.expect(jsonData.skipped_hashes).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.cat SET adorable = true\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm update record No where dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL updated all records in dev.cat\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).equals(9);",
											"",
											"    jsonData.forEach(obj => {",
											"        pm.expect(Object.keys(obj).length).equals(3)",
											"        pm.expect(obj.adorable).to.equal(true)",
											"        pm.expect(obj.cat_name).to.be.oneOf([\"Sophie\", \"George\", \"Biggie Paws\", \"Willow\", \"Bird\", \"Murph\", \"Simba\", \"Gemma\", \"Bobby\"])",
											"        pm.expect(obj.id).to.be.oneOf([1,2,3,4,5,6,7,8,9])",
											"    })",
											"});",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT cat_name, adorable, id FROM dev.cat\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update record multiple wheres, multiple columns dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.cat SET outdoor_privilages = false, weight_lbs = 6 WHERE owner_id = 2 AND cat_name = 'Sophie'\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm update record multiple wheres, multiple columns dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update value exists\", function () {",
											"    const jsonData = pm.response.json()[0];",
											"    ",
											"    pm.expect(jsonData.id).equals(1);",
											"    pm.expect(jsonData.weight_lbs).equals(6);",
											"    pm.expect(jsonData.cat_name).to.eql(\"Sophie\");",
											"    pm.expect(jsonData.owner_id).equals(2);",
											"    pm.expect(jsonData.outdoor_privilages).equals(false);",
											"    ",
											"});",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT cat_name, weight_lbs, owner_id, outdoor_privilages, id FROM dev.cat WHERE owner_id = 2 AND cat_name = 'Sophie'\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update record \"where x is NULL\" dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update successful response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.message).to.eql(\"updated 8 of 8 records\");",
											"    pm.expect(jsonData.update_hashes).to.contain(2,3,4,5,6,7,8,9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.cat SET outdoor_privilages = true WHERE outdoor_privilages IS null\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm update record \"where x is NULL\" dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update null values no longer exist\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData).to.eql([]);",
											"});",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT cat_name, outdoor_privilages, id FROM dev.cat WHERE outdoor_privilages IS null\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update record with nonexistant id dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update unsuccessful response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 0 of 0 records\");",
											"    pm.expect(jsonData.update_hashes).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE dev.cat SET cat_name = 'Garfield' WHERE id = 75\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm update record with nonexistant id dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SQL update with nonexistant value returns empty array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([]);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT cat_name, weight_lbs, age FROM dev.cat WHERE id = 75\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop table cat from dev.cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Tests successfully deleted table\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted table 'dev.cat'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"operation\": \"drop_table\",\n     \"schema\": \"dev\",\n     \"table\": \"cat\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Geospatial",
					"item": [
						{
							"name": "Create table 'geo'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Geo table created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"table 'data.geo' successfully created.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"table\":\"geo\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert values into 'geo' table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Records inserted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"inserted 8 of 8 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n\t\"operation\":\"insert\",\n\t\"table\":\"geo\",\n\t\"records\": [\n        {\n            \"id\": 1,\n            \"name\": \"Wellington\",\n            \"geo_point\" : {\n                \"type\": \"Point\",\n                \"coordinates\": [174.776230, -41.286461]\n            },\n            \"geo_poly\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[ // 167,980,385.88 m²\n                    [174.615474867904,-41.34148585702194],\n                    [174.8800567396483,-41.31574371071801],\n                    [174.6896944170223,-41.19759744824616],\n                    [174.615474867904,-41.34148585702194]\n                ]]\n            },\n            \"geo_line\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [\n                    [174.615474867904,-41.34148585702194],\n                    [174.8800567396483,-41.31574371071801]\n                ]\n            }\n        },\n        {\n            \"id\": 2,\n            \"name\": \"North Adams\",\n            \"geo_point\" : {\n                \"type\": \"Point\",\n                \"coordinates\": [-73.108704, 42.700539]\n            },\n            \"geo_poly\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[ // 2,079,394.35 m²\n                    [-73.12391499193579,42.70656096680374],\n                    [-73.12255557219314,42.69646774251972],\n                    [-73.09908993001123,42.6984753377431],\n                    [-73.10369107948782,42.70876034407737],\n                    [-73.12391499193579,42.70656096680374]\n                ]]\n            }\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Denver\",\n            \"geo_point\" : {\n                \"type\": \"Point\",\n                \"coordinates\": [-104.990250, 39.739235]\n            },\n            \"geo_poly\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[ // 53,824,797.22 m²\n                    [-105.0487835030464,39.77676227285275],\n                    [-105.0175466672944,39.68744341857906],\n                    [-104.9113967289065,39.74637288224356],\n                    [-105.0487835030464,39.77676227285275]\n                ]]\n            }\n        },\n        {\n            \"id\": 4,\n            \"name\": \"New York City\",\n            \"geo_point\" : {\n                \"type\": \"Point\",\n                \"coordinates\": [-74.005974, 40.712776]\n            },\n            \"geo_poly\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[ // 6,140,626.38 m²\n                    [-74.00852603549784,40.73107908806126],\n                    [-74.03702059033735,40.70472625054263],\n                    [-73.98786450714653,40.70419899758365],\n                    [-74.00852603549784,40.73107908806126]\n                ]]\n            }\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Salt Lake City\",\n            \"geo_point\" : {\n                \"type\": \"Point\",\n                \"coordinates\": [-111.920485, 40.7766079]\n            },\n            \"geo_poly\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[ // 13,966,557,738.41 m²\n                    [-112.8291507578281,40.88206673094385],\n                    [-112.8956858211181,40.30332102898777],\n                    [-111.6032172200158,40.02757615254776],\n                    [-111.1456265349256,40.95908300700454],\n                    [-111.9047878338339,41.3291504973315],\n                    [-112.8291507578281,40.88206673094385]\n                ]]\n            },\n            \"geo_line\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [// 13,966,557,738.41 m² 365.1 km\n                    [-112.8291507578281,40.88206673094385],\n                    [-112.8956858211181,40.30332102898777],\n                    [-111.6032172200158,40.02757615254776],\n                    [-111.1456265349256,40.95908300700454],\n                    [-111.9047878338339,41.3291504973315],\n                    [-112.8291507578281,40.88206673094385]\n                ]\n            }\n        },\n        {\n            \"id\": 6,\n            \"name\": \"Null Island\",\n            \"geo_point\" : {\n                \"type\": \"Point\",\n                \"coordinates\": [null, null]\n            },\n            \"geo_poly\": null,\n            \"geo_line\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [\n                    [-112.8291507578281,40.88206673094385],\n                    [null, null]\n                ]\n            }\n        },\n        {\n            \"id\": 7\n        },\n        {\n            \"id\": 8,\n            \"name\": \"Hobbiton\",\n            \"geo_point\" : [174.776230, -41.286461],\n            \"geo_poly\": \"Somewhere in the shire\",\n            \"geo_line\": {\n                \"type\": \"LineString\"\n            }\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoArea test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"All records returned with area\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 6,",
											"        \"name\": \"Null Island\"",
											"    },",
											"    {",
											"        \"id\": 7,",
											"        \"name\": null",
											"    },",
											"    {",
											"        \"id\": 8,",
											"        \"name\": \"Hobbiton\"",
											"    },",
											"    {",
											"        \"id\": 2,",
											"        \"name\": \"North Adams\",",
											"        \"area\": 2084050.5321900067",
											"    },",
											"    {",
											"        \"id\": 4,",
											"        \"name\": \"New York City\",",
											"        \"area\": 6153970.008639627",
											"    },",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\",",
											"        \"area\": 53950986.64863105",
											"    },",
											"    {",
											"        \"id\": 1,",
											"        \"name\": \"Wellington\",",
											"        \"area\": 168404308.63474682",
											"    },",
											"    {",
											"        \"id\": 5,",
											"        \"name\": \"Salt Lake City\",",
											"        \"area\": 14011200847.709723",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name, geoArea(geo_poly) as area FROM data.geo ORDER BY area ASC\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoArea test 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Two records are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 1,",
											"        \"name\": \"Wellington\"",
											"    },",
											"    {",
											"        \"id\": 5,",
											"        \"name\": \"Salt Lake City\"",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name FROM data.geo where geoArea(geo_poly) > 53950986.64863106\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoArea test 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Passing geo data in SQL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"geoArea('{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[0,0],[0.123456,0],[0.123456,0.123456],[0,0.123456]]]}}')\": 188871526.05092356",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT geoArea('{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[0,0],[0.123456,0],[0.123456,0.123456],[0,0.123456]]]}}')\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoLength test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Passing geo data in SQL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"geoLength('{\\\"type\\\": \\\"Feature\\\",\\\"geometry\\\": {\\\"type\\\": \\\"LineString\\\",\\\"coordinates\\\": [[-104.97963309288025,39.76163265441438],[-104.9823260307312,39.76365323407955],[-104.99193906784058,39.75616442110704]]}}')\": 1.491544504248235",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT geoLength('{\\\"type\\\": \\\"Feature\\\",\\\"geometry\\\": {\\\"type\\\": \\\"LineString\\\",\\\"coordinates\\\": [[-104.97963309288025,39.76163265441438],[-104.9823260307312,39.76365323407955],[-104.99193906784058,39.75616442110704]]}}')\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoLength test 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"All records com back, some with length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 1,",
											"        \"name\": \"Wellington\",",
											"        \"geoLength(geo_line,\\\"miles\\\")\": 13.842468187961332",
											"    },",
											"    {",
											"        \"id\": 2,",
											"        \"name\": \"North Adams\"",
											"    },",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\"",
											"    },",
											"    {",
											"        \"id\": 4,",
											"        \"name\": \"New York City\"",
											"    },",
											"    {",
											"        \"id\": 5,",
											"        \"name\": \"Salt Lake City\",",
											"        \"geoLength(geo_line,\\\"miles\\\")\": 283.9341846273217",
											"    },",
											"    {",
											"        \"id\": 6,",
											"        \"name\": \"Null Island\",",
											"        \"geoLength(geo_line,\\\"miles\\\")\": 7397.000649273201",
											"    },",
											"    {",
											"        \"id\": 7,",
											"        \"name\": null",
											"    },",
											"    {",
											"        \"id\": 8,",
											"        \"name\": \"Hobbiton\"",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name, geoLength(geo_line, 'miles') FROM data.geo\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoLength test 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"One record comes back\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 1,",
											"        \"name\": \"Wellington\"",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name FROM data.geo WHERE geoLength(geo_line, 'miles') < 100\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoDifference test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoDifference to be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"geoDifference('{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\":\\\"Colorado\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"Polygon\\\",\\\"coordinates\\\": [[[-109.072265625,37.00255267215955],[-102.01904296874999,37.00255267215955],[-102.01904296874999,41.0130657870063],[-109.072265625,41.0130657870063],[-109.072265625,37.00255267215955]]]}}','{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\":\\\"City Park\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"Polygon\\\",\\\"coordinates\\\": [[[-104.95973110198975,39.7543828214657],[-104.95955944061278,39.744781185675386],[-104.95904445648193,39.74422022399989],[-104.95835781097412,39.74402223643582],[-104.94097709655762,39.74392324244047],[-104.9408483505249,39.75434982844515],[-104.95973110198975,39.7543828214657]]]}}')\": {",
											"            \"type\": \"Feature\",",
											"            \"properties\": {",
											"                \"name\": \"Colorado\"",
											"            },",
											"            \"geometry\": {",
											"                \"type\": \"Polygon\",",
											"                \"coordinates\": [",
											"                    [",
											"                        [",
											"                            -109.072265625,",
											"                            37.00255267215955",
											"                        ],",
											"                        [",
											"                            -102.01904296874999,",
											"                            37.00255267215955",
											"                        ],",
											"                        [",
											"                            -102.01904296874999,",
											"                            41.0130657870063",
											"                        ],",
											"                        [",
											"                            -109.072265625,",
											"                            41.0130657870063",
											"                        ],",
											"                        [",
											"                            -109.072265625,",
											"                            37.00255267215955",
											"                        ]",
											"                    ],",
											"                    [",
											"                        [",
											"                            -104.95973110198975,",
											"                            39.7543828214657",
											"                        ],",
											"                        [",
											"                            -104.9408483505249,",
											"                            39.75434982844515",
											"                        ],",
											"                        [",
											"                            -104.94097709655762,",
											"                            39.74392324244047",
											"                        ],",
											"                        [",
											"                            -104.95835781097412,",
											"                            39.74402223643582",
											"                        ],",
											"                        [",
											"                            -104.95904445648193,",
											"                            39.74422022399989",
											"                        ],",
											"                        [",
											"                            -104.95955944061278,",
											"                            39.744781185675386",
											"                        ],",
											"                        [",
											"                            -104.95973110198975,",
											"                            39.7543828214657",
											"                        ]",
											"                    ]",
											"                ]",
											"            }",
											"        }",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT geoDifference('{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\":\\\"Colorado\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"Polygon\\\",\\\"coordinates\\\": [[[-109.072265625,37.00255267215955],[-102.01904296874999,37.00255267215955],[-102.01904296874999,41.0130657870063],[-109.072265625,41.0130657870063],[-109.072265625,37.00255267215955]]]}}','{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\":\\\"City Park\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"Polygon\\\",\\\"coordinates\\\": [[[-104.95973110198975,39.7543828214657],[-104.95955944061278,39.744781185675386],[-104.95904445648193,39.74422022399989],[-104.95835781097412,39.74402223643582],[-104.94097709655762,39.74392324244047],[-104.9408483505249,39.75434982844515],[-104.95973110198975,39.7543828214657]]]}}')\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoDifference test 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoDifference with null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {}",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT geoDifference('{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\":\\\"Colorado\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"Polygon\\\",\\\"coordinates\\\": [[[-109.072265625,37.00255267215955],[-102.01904296874999,37.00255267215955],[-102.01904296874999,41.0130657870063],[-109.072265625,41.0130657870063],[-109.072265625,37.00255267215955]]]}}', null)\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoDistance test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoDistance with in SQL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"geoDistance('[-104.979127,39.761563]','[-77.035248,38.889475]','miles')\": 1488.6913067538915",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT geoDistance('[-104.979127,39.761563]', '[-77.035248,38.889475]', 'miles')\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoDistance test 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoDistance returns one record\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\",",
											"        \"distance\": 1.6520011088478226",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name, geoDistance('[-104.979127,39.761563]', geo_point, 'miles') as distance FROM data.geo WHERE geoDistance('[-104.979127,39.761563]', geo_point, 'kilometers') < 40 ORDER BY distance ASC\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoDistance test 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoDistance returns all records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 1,",
											"        \"name\": \"Wellington\",",
											"        \"distance\": 7525.228704326891",
											"    },",
											"    {",
											"        \"id\": 2,",
											"        \"name\": \"North Adams\",",
											"        \"distance\": 1658.5109905949885",
											"    },",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\",",
											"        \"distance\": 1.6520011088478226",
											"    },",
											"    {",
											"        \"id\": 4,",
											"        \"name\": \"New York City\",",
											"        \"distance\": 1626.4974205601618",
											"    },",
											"    {",
											"        \"id\": 5,",
											"        \"name\": \"Salt Lake City\",",
											"        \"distance\": 372.4978228173876",
											"    },",
											"    {",
											"        \"id\": 6,",
											"        \"name\": \"Null Island\",",
											"        \"distance\": 7010.231359296063",
											"    },",
											"    {",
											"        \"id\": 7,",
											"        \"name\": null",
											"    },",
											"    {",
											"        \"id\": 8,",
											"        \"name\": \"Hobbiton\",",
											"        \"distance\": 7525.228704326891",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name, geoDistance('[-104.979127,39.761563]', geo_point, 'miles') as distance FROM data.geo\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoNear test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoNear returns one record\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\"",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name FROM data.geo WHERE geoNear('[-104.979127,39.761563]', geo_point, 50, 'miles')\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoNear test 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoNear returns two records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\",",
											"        \"distance\": 1.6520011088478226",
											"    },",
											"    {",
											"        \"id\": 5,",
											"        \"name\": \"Salt Lake City\",",
											"        \"distance\": 372.4978228173876",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name, geoDistance('[-104.979127,39.761563]', geo_point, 'miles') as distance FROM data.geo WHERE geoNear('[-104.979127,39.761563]', geo_point, 20, 'degrees') ORDER BY distance ASC\"}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoContains test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoContains returns one record\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\"",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name FROM data.geo WHERE geoContains('{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\":\\\"Colorado\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"Polygon\\\",\\\"coordinates\\\": [[[-109.072265625,37.00255267],[-102.01904296874999,37.00255267],[-102.01904296874999,41.01306579],[-109.072265625,41.01306579],[-109.072265625,37.00255267]]]}}', geo_point)\"\n    }\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoContains test 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoContains returns one record\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\"",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name FROM data.geo WHERE geoContains(geo_poly, '{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\": \\\"HarperDB Headquarters\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"Polygon\\\",\\\"coordinates\\\": [[[-104.98060941696167,39.760704817357905],[-104.98053967952728,39.76065120861263],[-104.98055577278137,39.760642961109674],[-104.98037070035934,39.76049450588716],[-104.9802714586258,39.76056254790385],[-104.9805235862732,39.76076461167841],[-104.98060941696167,39.760704817357905]]]}}')\"\n    }\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoEqual test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoEqual returns no records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT * FROM data.geo WHERE geoEqual(geo_poly, '{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\": \\\"HarperDB Headquarters\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"Polygon\\\",\\\"coordinates\\\": [[[-104.98060941696167,39.760704817357905],[-104.98053967952728,39.76065120861263],[-104.98055577278137,39.760642961109674],[-104.98037070035934,39.76049450588716],[-104.9802714586258,39.76056254790385],[-104.9805235862732,39.76076461167841],[-104.98060941696167,39.760704817357905]]]}}')\"\n    }\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoCrosses test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoCrosses returns Denver\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"id\": 3,",
											"        \"name\": \"Denver\"",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT id, name FROM data.geo WHERE geoCrosses(geo_poly,'{\\\"type\\\": \\\"Feature\\\",\\\"properties\\\": {\\\"name\\\": \\\"Highway I-25\\\"},\\\"geometry\\\": {\\\"type\\\": \\\"LineString\\\",\\\"coordinates\\\": [[-104.9139404296875,41.00477542222947],[-105.0238037109375,39.715638134796336],[-104.853515625,39.53370327008705],[-104.853515625,38.81403111409755],[-104.61181640625,38.39764411353178],[-104.8974609375,37.68382032669382],[-104.501953125,37.00255267215955]]}}')\"\n}\n\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "geoConvert test 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"geoConvert returns the goods\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([",
											"    {",
											"        \"geoConvert('[-104.979127,39.761563]','point','{\\\"name\\\": \\\"HarperDB Headquarters\\\"}')\": {",
											"            \"type\": \"Feature\",",
											"            \"properties\": \"{\\\"name\\\": \\\"HarperDB Headquarters\\\"}\",",
											"            \"geometry\": {",
											"                \"type\": \"Point\",",
											"                \"coordinates\": [",
											"                    -104.979127,",
											"                    39.761563",
											"                ]",
											"            }",
											"        }",
											"    }",
											"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT geoConvert('[-104.979127,39.761563]','point','{\\\"name\\\": \\\"HarperDB Headquarters\\\"}')\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop table 'geo'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Geo table dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted table 'data.geo'\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 100);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_table\",\n  \"schema\": \"data\",\n  \"table\":\"geo\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "insert value into table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"TEST3\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"INSERT INTO northnwd.customers (customerid, postalcode, companyname) VALUES ('TEST3', 11385, 'Microsoft')\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "insert value into table confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert value exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].customerid).to.eql(\"TEST3\");",
									"    pm.expect(jsonData[0].postalcode).to.eql(11385);",
									"    pm.expect(jsonData[0].companyname).to.eql(\"Microsoft\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT customerid, postalcode, companyname FROM northnwd.customers WHERE customerid = 'TEST3'\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm inserted value exists in table."
					},
					"response": []
				},
				{
					"name": "update value in table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL update successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(\"TEST3\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE northnwd.customers SET companyname = 'Google' WHERE customerid = 'TEST3'\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update a value in a table and test for success message"
					},
					"response": []
				},
				{
					"name": "update value in table confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert value exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].customerid).to.eql(\"TEST3\");",
									"    pm.expect(jsonData[0].postalcode).to.eql(11385);",
									"    pm.expect(jsonData[0].companyname).to.eql(\"Google\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT customerid, postalcode, companyname FROM northnwd.customers WHERE customerid = 'TEST3'\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm updated value exists in table."
					},
					"response": []
				},
				{
					"name": "attempt to update __createdtime__ in table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL update successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(\"TEST3\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"UPDATE northnwd.customers SET __createdtime__ = 'bad value' WHERE customerid = 'TEST3'\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update a value in a table and test for success message"
					},
					"response": []
				},
				{
					"name": "Confirm __createdtime__ did not get changed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert value exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].__createdtime__).to.not.eql(\"bad value\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT __createdtime__ FROM northnwd.customers WHERE customerid = 'TEST3'\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm updated value exists in table."
					},
					"response": []
				},
				{
					"name": "delete value from table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL delete successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"successfully deleted\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"DELETE FROM northnwd.customers WHERE customerid = 'TEST3'\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Using SQL, delete a value and confirm success response"
					},
					"response": []
				},
				{
					"name": "delete value from table confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL delete value does not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT customerid, postalcode, companyname FROM northnwd.customers WHERE companyname = 'Microsoft'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm deleted value does not exist in table."
					},
					"response": []
				},
				{
					"name": "select w/ where in numeric values as strings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test rows have correct id\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((row, i) => {",
									"        pm.expect(row.id).to.eql(i + 1);    ",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE id IN('1','2','3') ORDER BY id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where between",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test rows have correct id\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((row, i) => {",
									"        pm.expect(row.id).to.eql(i + 1);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE id BETWEEN 1 AND 3 ORDER BY id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where not between",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 47 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(47);",
									"});",
									"",
									"pm.test(\"test rows have correct id\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((row, i) => {",
									"        pm.expect(row.id).to.be.above(3);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE id NOT BETWEEN 1 AND 3 ORDER BY id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where value equals 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 15 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"test rows have books_count = 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.books_count).to.eql(0);    ",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE books_count = 0 \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ where value equals \"false\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 25 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(25);",
									"});",
									"",
									"pm.test(\"test rows have nytimes_best_seller = false\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.nytimes_best_seller).to.eql(false);    ",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.books WHERE nytimes_best_seller = 'false' \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select employees orderby id asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test employeeid order is asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(10);",
									"    pm.expect(jsonData[0].employeeid).to.eql(1);",
									"    pm.expect(jsonData[1].employeeid).to.eql(2);",
									"    pm.expect(jsonData[8].employeeid).to.eql(9);",
									"    pm.expect(jsonData[9].employeeid).to.eql(25);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{emps_id}}, * from {{schema}}.{{emps_tb}} order by {{emps_id}} asc \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select 2 + 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test calculator\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0][\"2 + 2\"]).to.eql(4);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select 2 + 2 \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * FROM orders - test no schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test select table no schema\", function () {",
									"    pm.response.to.have.status(500);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql('schema not defined for table orders');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM orders\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * from call.aggr - reserved words",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test bad response\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from call.aggr\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * from `call`.`aggr` - reserved words",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test good response\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].all).to.eql(11);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select age AS `alter`, * from `call`.`aggr` as `and` WHERE `all` > 3 ORDER BY `and`.`all` desc\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * from call.aggr where id = 11 - select dot & double dot",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test good response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 object in array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test owner_name is .. and dog_name is .\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].owner_name).to.eql(\"..\");",
									"    pm.expect(jsonData[0].dog_name).to.eql(\".\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from `call`.`aggr` where `all` = 11\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * from invalid schema - expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test error response\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"test schema does not exist error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"database 'braaah' does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from `braaah`.`aggr`\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * from invalid table - expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test error response\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"test schema does not exist error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Table 'call.braaaah' does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from `call`.`braaaah`\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select orders orderby id desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id desc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].orderid).to.eql(11077);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{ords_id}}, * from {{schema}}.{{ords_tb}} order by {{ords_id}} desc \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select count(*) orders where shipregion is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order where shipregion is null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].count).to.eql(414);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select count(*) as `count` from {{schema}}.{{ords_tb}} where shipregion IS NULL\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select count(*) orders where shipregion is not null",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order where shipregion is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].count).to.eql(416);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select count(*) AS `count` from {{schema}}.{{ords_tb}} where shipregion is not null\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select most buyer orderby price asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql test most buyer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].companyname).to.eql(\"Berglunds snabbk\\ufffdp\");",
									"    pm.expect(jsonData[1].companyname).to.eql(\"Great Lakes Food Market\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{ords_id}}, a.productid, d.companyname, d.contactmame, b.productname, sum(a.unitprice) as unitprice, sum(a.quantity), sum(a.discount) from {{schema}}.{{ordd_tb}} a join {{schema}}.{{prod_tb}} b on a.{{prod_id}}=b.{{prod_id}} join {{schema}}.{{ords_tb}} c on a.{{ords_id}}=c.{{ords_id}} join {{schema}}.{{cust_tb}} d on c.{{cust_id}}=d.{{cust_id}} group by a.{{ords_id}}, a.productid, d.companyname, d.contactmame, b.productname order by unitprice desc, d.companyname \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select most buyer orderby price asc & companyname alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql test most buyer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].compname).to.eql(\"Berglunds snabbk\\ufffdp\");",
									"    pm.expect(jsonData[1].compname).to.eql(\"Great Lakes Food Market\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{ords_id}}, a.productid, d.companyname as compname, d.contactmame, b.productname, sum(a.unitprice) as unitprice, sum(a.quantity), sum(a.discount) from {{schema}}.{{ordd_tb}} a join {{schema}}.{{prod_tb}} b on a.{{prod_id}}=b.{{prod_id}} join {{schema}}.{{ords_tb}} c on a.{{ords_id}}=c.{{ords_id}} join {{schema}}.{{cust_tb}} d on c.{{cust_id}}=d.{{cust_id}} group by a.{{ords_id}}, a.productid, d.companyname, d.contactmame, b.productname order by unitprice desc, compname \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select most buyer orderby order_id asc & product_id desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql test lowest order id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].ords_id).to.eql(10248);",
									"    pm.expect(jsonData[1].ords_id).to.eql(10248);",
									"    pm.expect(jsonData[19].ords_id).to.eql(10254);",
									"    pm.expect(jsonData[0].companyname).to.eql(\"Vins et alcools Chevalier\");",
									"    pm.expect(jsonData[19].companyname).to.eql(\"Chop-suey Chinese\");",
									"});",
									"",
									"pm.test(\"sql test highest product id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productid).to.eql(72);",
									"    pm.expect(jsonData[1].productid).to.eql(42);",
									"    pm.expect(jsonData[19].productid).to.eql(24);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{ords_id}} as ords_id, a.productid, d.companyname as companyname, d.contactmame, b.productname, sum(a.unitprice) as unitprice, sum(a.quantity), sum(a.discount) from {{schema}}.{{ordd_tb}} a join {{schema}}.{{prod_tb}} b on a.{{prod_id}}=b.{{prod_id}} join {{schema}}.{{ords_tb}} c on a.{{ords_id}}=c.{{ords_id}} join {{schema}}.{{cust_tb}} d on c.{{cust_id}}=d.{{cust_id}} group by a.{{ords_id}}, a.productid, d.companyname, d.contactmame, b.productname order by ords_id, a.productid desc\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select product orderby id asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productid).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{prod_id}}, * from {{schema}}.{{prod_tb}} order by {{prod_id}} asc \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select customers orderby id asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].customerid).to.eql(\"ALFKI\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{cust_id}}, * from {{schema}}.{{cust_tb}} order by {{cust_id}} asc \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select all details join 5 table where customername",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql join 5 table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].customerid).to.eql(\"ALFKI\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{cust_id}}, a.companyname, a.contactmame, b.{{ords_id}}, b.shipname, d.productid, d.productname, d.unitprice, c.quantity, c.discount, e.employeeid, e.firstname, e.lastname from {{schema}}.{{cust_tb}} a join {{schema}}.{{ords_tb}} b on a.{{cust_id}}=b.{{cust_id}} join {{schema}}.{{ordd_tb}} c on b.{{ordd_id}}=c.{{ordd_id}} join {{schema}}.{{prod_tb}} d on c.{{prod_id}}=d.{{prod_id}} join {{schema}}.{{emps_tb}} e on b.{{emps_id}}=e.{{emps_id}}  where a.companyname='Alfreds Futterkiste' \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * with LEFT OUTER JOIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test good response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 351 objects in array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(351);",
									"});",
									"",
									"pm.test(\"test all attrs returned with no undefined values\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        const keys = Object.keys(row);",
									"        pm.expect(keys.length).to.eql(16);",
									"        Object.keys(row).forEach(key => {",
									"            pm.expect(row[key]).to.not.eql(undefined);",
									"        })",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT * FROM dev.breed b LEFT JOIN dev.dog d ON b.id = d.breed_id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select specific columns with LEFT OUTER JOIN Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test good response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 351 objects in array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(351);",
									"});",
									"",
									"pm.test(\"test all attrs returned with no undefined values\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        const keys = Object.keys(row);",
									"        pm.expect(keys.length).to.eql(11);",
									"        Object.keys(row).forEach(key => {",
									"            pm.expect(row[key]).to.not.eql(undefined);",
									"        })",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\": \"SELECT b.name, b.id, d.* FROM dev.breed b LEFT JOIN dev.dog d ON b.id = d.breed_id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select order details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id desc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].orderid).to.eql(10248);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select {{ordd_id}}, productid, unitprice,quantity, discount from {{schema}}.{{ordd_tb}} order by {{ordd_id}} asc\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select count groupby country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select order by id desc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].country).to.eql('USA');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select count({{cust_id}}) as counter,country from {{schema}}.{{cust_tb}} group by country order by counter desc\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select most have the extension employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"sql select count group by last_name order by age asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].firstname).to.eql(\"Nancy\")",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select extension,* from {{schema}}.{{emps_tb}} order by extension desc\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select top 10 most price of product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select count where age > 30 group by last_name order by age asc\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productname).to.equal(\"C\\ufffdte de Blaye\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select categoryid,productname,quantityperunit,unitprice,* from {{schema}}.{{prod_tb}}  order by unitprice desc limit 10 \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select count min max avg sum price of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select count min max avg sum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].allproducts).to.equal(77);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select count(unitprice) as allproducts, min(unitprice) as minprice, max(unitprice) as maxprice, avg(unitprice) as avgprice, sum(unitprice) as sumprice from {{schema}}.{{prod_tb}} \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select round unit price using alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    var objKeysData = Object.keys(jsonData[0]);",
									"    pm.expect(objKeysData[0]).to.eql('Price');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT ROUND(unitprice) AS Price FROM {{schema}}.{{prod_tb}} GROUP BY ROUND(unitprice)\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select where (like)and(<=>)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select where (like) and (unitprice>100)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].unitprice > 100).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where (productname like 'T%') and (unitprice>100) \"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr < comparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select - where attr < comparator\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice < 81).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice < 81\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr <= comparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select - where attr <= comparator\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice <= 81).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice <= 81\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr > comparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select - where attr > comparator\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice > 81).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 81\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr >= comparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select - where attr >= comparator\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice >= 81).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice >= 81\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where attr w/ multiple comparators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select - where attr w/ multiple comparators\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice > 20).to.be.true;",
									"        pm.expect(record.unitprice <= 81).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 20 AND unitprice <= 81\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where w/ multiple attr comparators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select - where w/ multiple attr comparators\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice > 10).to.be.true;",
									"        pm.expect(record.unitprice <= 81).to.be.true;",
									"        pm.expect(record.unitsinstock).to.eql(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 10 AND unitprice <=81 AND unitsinstock = 0\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where w/ multiple comparators for multiple attrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select - where w/ multiple comparators for multiple attrs\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice > 10).to.be.true;",
									"        pm.expect(record.unitprice <= 81).to.be.true;",
									"        pm.expect(record.unitsinstock > 10).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 10 AND unitprice <=81 AND unitsinstock > 10\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select - where w/ IN() and multiple of comparators for multiple attrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sql select - where w/ IN() and multiple of comparators for multiple attrs\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.unitprice > 10).to.be.true;",
									"        pm.expect(record.unitprice <= 81).to.be.true;",
									"        pm.expect(record.unitsinstock > 10).to.be.true;",
									"        pm.expect(record.supplierid).to.be.oneOf([1,2,3,4]);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{prod_tb}} where unitprice > 10 AND unitprice <=81 AND unitsinstock > 10 AND supplierid IN(1,2,3,4)\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update SQL employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update {{schema}}.{{emps_tb}} set address = 'abc1234' where {{emps_id}} = 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select verify SQL update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"verify SQL update worked\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].address).to.eql('abc1234');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select address from {{schema}}.{{emps_tb}} where {{emps_id}} = 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.long_text",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test all 25 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(25);",
									"});",
									"",
									"pm.test(\"test all remarks greater than 255 characters\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.remarks.length).to.gt(255);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.long_text\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.long_text regexp",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test all remarks contain word dock\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        pm.expect(record.remarks.indexOf('dock')).to.gte(0);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.long_text where remarks regexp 'dock'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update employee with falsey data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"address is false and hireDate is 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"UPDATE {{schema}}.{{emps_tb}} SET address = false, hireDate = 0, notes = null, birthdate = undefined WHERE {{emps_id}} = 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes to false/0/null/undefined to validate values are stored correctly."
					},
					"response": []
				},
				{
					"name": "select employee to confirm falsey update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"address is false and hireDate is 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].address).to.be.false;",
									"    pm.expect(jsonData[0].hireDate).to.eql(0);",
									"});",
									"",
									"pm.test(\"notes and birthdate do not exist afting being set to null and undefined\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.have.property('notes');",
									"    pm.expect(jsonData).to.not.have.property('birthdate');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM {{schema}}.{{emps_tb}} WHERE {{emps_id}} = 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "setup for next test - insert array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert array into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"arrayTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"array\":  [\"arr1\",\"arr2\",\"arr3\"],\n\t\t\t\"customerid\": \"arrayTest\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Inserting an array into table with NoSQL as it is needed for following test."
					},
					"response": []
				},
				{
					"name": "select array from table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"select array from table with SQL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].array).to.eql([\"arr1\",\"arr2\",\"arr3\"]);",
									"    pm.expect(jsonData[0].customerid).to.eql(\"arrayTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{cust_tb}} where {{cust_id}} = 'arrayTest'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Retrieve array from table"
					},
					"response": []
				},
				{
					"name": "setup for next test - insert object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert object into table\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"objTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{cust_tb}}\",\n\t\"records\": [\n\t\t{\n\t\t\t\"object\": {\"red\": \"1\", \"white\": \"2\", \"blue\": \"3\"},\n\t\t\t\"customerid\": \"objTest\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Inserting an object into table with NoSQL as it is needed for following test."
					},
					"response": []
				},
				{
					"name": "select object from table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"select object from table with SQL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].object).to.eql({\"red\": \"1\", \"white\": \"2\", \"blue\": \"3\"});",
									"    pm.expect(jsonData[0].customerid).to.eql(\"objTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{cust_tb}} where {{cust_id}} = 'objTest'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Retrieve object from table"
					},
					"response": []
				},
				{
					"name": "select without sql parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"that error message is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"The 'sql' parameter is missing from the request body\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"slq\":\"select * from {{schema}}.{{cust_tb}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "check that correct error is returned when query is sent without sql parameter "
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test all remarks contain '4 Bedroom/2.5+ bath'\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('4 Bedroom/2.5+ bath')).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like '%4 Bedroom/2.5+ bath%'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 2 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test all remarks contain provided text\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.')).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like 'This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.%'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 2 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test all remarks contain provided text\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:')).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like '%...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:%'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 1 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test all remarks contain provided text\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.')).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like '**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * dev.remarks_blob like w/ special chars pt5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 11 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(11);",
									"});",
									"",
									"pm.test(\"test all remarks contain 3 attribute values\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM dev.remarks_blob where remarks like '%'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * FROM {{schema}}.{{ords_tb}} LIMIT 100 OFFSET 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 100 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(100);",
									"});",
									"",
									"pm.test(\"test first & last orderids\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].orderid).to.eql(10248);",
									"    pm.expect(jsonData[99].orderid).to.eql(10347);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM {{schema}}.{{ords_tb}} LIMIT 100 OFFSET 0\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select * FROM {{schema}}.{{ords_tb}} LIMIT 100 OFFSET 0 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 100 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(100);",
									"});",
									"",
									"pm.test(\"test first & last orderids\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].orderid).to.eql(10348);",
									"    pm.expect(jsonData[99].orderid).to.eql(10447);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * FROM {{schema}}.{{ords_tb}} LIMIT 100 OFFSET 100\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select AVE(rating) w/ join, group by and order by (1 of 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 26 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(26);",
									"});",
									"",
									"pm.test(\"test ratings listed in correct order\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].rating).to.eql(4.46);",
									"    pm.expect(jsonData[1].rating).to.eql(4.42);",
									"    pm.expect(jsonData[25].rating).to.eql(2.77);",
									"});",
									"",
									"pm.test(\"test authors listed in correct order\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].authors).to.eql(\"J.K. Rowling, Mary GrandPré, Rufus Beck\");",
									"    pm.expect(jsonData[1].authors).to.eql(\"Gabriel García Márquez, Gregory Rabassa\");",
									"    pm.expect(jsonData[25].authors).to.eql(\"Henry James, Patricia Crick\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.authors as authors, AVG(r.rating) as rating from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.authors order by rating desc\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select AVE(rating) w/ join, group by and order by (2 of 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 50 records returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(50);",
									"});",
									"",
									"pm.test(\"test first & last ids in correct order\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(1);",
									"    pm.expect(jsonData[49].id).to.eql(50);",
									"});",
									"",
									"pm.test(\"random tests for correct values in correct order\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[5].id).to.eql(6);",
									"    pm.expect(jsonData[5].authors).to.eql(\"J.K. Rowling, Mary GrandPré\");",
									"    pm.expect(jsonData[5][`AVG(r.rating)`]).to.eql(4.09);",
									"    pm.expect(jsonData[21].id).to.eql(22);",
									"    pm.expect(jsonData[21].authors).to.eql(\"Edward P. Jones\");",
									"    pm.expect(jsonData[21][`AVG(r.rating)`]).to.eql(3.73);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.id, b.authors as authors, AVG(r.rating) from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.authors, b.id order by b.id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select AVE(rating) w/ join and group by (1 of 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 50 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(50);",
									"});",
									"",
									"pm.test(\"test first & last row objects for 3 key/values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData[0]).length).to.eql(3);",
									"    pm.expect(Object.keys(jsonData[49]).length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.id, b.authors as authors, AVG(r.rating) from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.authors, b.id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select AVE(rating) w/ join, gb, ob, and LIMIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 10 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"test first & last ids\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(1);",
									"    pm.expect(jsonData[9].id).to.eql(10);",
									"});",
									"",
									"pm.test(\"test for 3 values in row\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData[0]).length).to.eql(3);",
									"    pm.expect(Object.keys(jsonData[8]).length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.id as id, b.authors as authors, AVG(r.rating) as rating from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.id, b.authors order by id limit 10\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select COUNT(rating) w/ join, gb, ob, limit, and OFFSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 15 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(15);",
									"});",
									"",
									"pm.test(\"test first & last authors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].authors).to.eql(\"Frank Herbert\");",
									"    pm.expect(jsonData[14].authors).to.eql(\"Marguerite Duras, Barbara Bray, Maxine Hong Kingston\");",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[9].authors).to.eql(\"J.K. Rowling, Mary GrandPré\");",
									"    pm.expect(jsonData[0].rating_count).to.eql(400);",
									"    pm.expect(jsonData[11].rating_count).to.eql(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select b.authors as authors, COUNT(r.rating) as rating_count from dev.ratings as r join dev.books as b on r.book_id = b.id group by b.authors order by b.authors limit 15 offset 5\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ function alias in ORDER BY and LIMIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 15 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(25);",
									"});",
									"",
									"pm.test(\"test first & last ords_id and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].ords_id).to.eql(10518);",
									"    pm.expect(jsonData[0].unitprice).to.eql(264);",
									"    pm.expect(jsonData[24].ords_id).to.eql(10510);",
									"    pm.expect(jsonData[24].unitprice).to.eql(124);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[15].unitprice).to.eql(264);",
									"    pm.expect(jsonData[16].unitprice).to.eql(211);",
									"    pm.expect(jsonData[20].unitprice).to.eql(211);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select a.{{ords_id}} as ords_id, a.productid, d.companyname as companyname, d.contactmame, b.productname, ROUND(a.unitprice) as unitprice from {{schema}}.{{ordd_tb}} a join {{schema}}.{{prod_tb}} b on a.{{prod_id}}=b.{{prod_id}} join {{schema}}.{{ords_tb}} c on a.{{ords_id}}=c.{{ords_id}} join {{schema}}.{{cust_tb}} d on c.{{cust_id}}=d.{{cust_id}} order by unitprice DESC LIMIT 25\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ inconsistent table refs & ORDER BY column not in SELECT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 2155 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2155);",
									"});",
									"",
									"pm.test(\"test first, second, forth productid and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productid).to.eql(2);",
									"    pm.expect(jsonData[0].unitprice).to.eql(19);",
									"    pm.expect(jsonData[1].productid).to.eql(3);",
									"    pm.expect(jsonData[1].unitprice).to.eql(10);",
									"    pm.expect(jsonData[3].productid).to.eql(6);",
									"    pm.expect(jsonData[3].unitprice).to.eql(25);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[15].unitprice).to.eql(9.65);",
									"    pm.expect(jsonData[996].unitprice).to.eql(18);",
									"    pm.expect(jsonData[1255].unitprice).to.eql(9.5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT a.productid, a.unitprice as unitprice FROM {{schema}}.{{ordd_tb}} a ORDER BY a.{{ords_id}} DESC\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ inconsistent table refs, ORDER BY column not in SELECT & LIMIT/OFFSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 250 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(250);",
									"});",
									"",
									"pm.test(\"test first, second, forth productid and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].productid).to.eql(8);",
									"    pm.expect(jsonData[0].unitprice).to.eql(40);",
									"    pm.expect(jsonData[1].productid).to.eql(10);",
									"    pm.expect(jsonData[1].unitprice).to.eql(31);",
									"    pm.expect(jsonData[5].productid).to.eql(16);",
									"    pm.expect(jsonData[5].unitprice).to.eql(17.45);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[10].unitprice).to.eql(9.65);",
									"    pm.expect(jsonData[216].unitprice).to.eql(7.75);",
									"    pm.expect(jsonData[249].unitprice).to.eql(17.45);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT productid, a.unitprice as unitprice FROM {{schema}}.{{ordd_tb}} a ORDER BY {{ords_id}} DESC LIMIT 250 OFFSET 5\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ inconsistent table refs & second ORDER BY column not included in SELECT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 2155 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2155);",
									"});",
									"",
									"pm.test(\"test first, second, forth ords_id and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].ords_id).to.eql(11077);",
									"    pm.expect(jsonData[0].unitprice).to.eql(13);",
									"    pm.expect(jsonData[1].ords_id).to.eql(11068);",
									"    pm.expect(jsonData[1].unitprice).to.eql(13);",
									"    pm.expect(jsonData[3].ords_id).to.eql(11015);",
									"    pm.expect(jsonData[3].unitprice).to.eql(13);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[15].unitprice).to.eql(13);",
									"    pm.expect(jsonData[996].unitprice).to.eql(46);",
									"    pm.expect(jsonData[1255].unitprice).to.eql(14.4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT a.{{ords_id}} as ords_id, a.unitprice as unitprice FROM {{schema}}.{{ordd_tb}} a ORDER BY productid DESC, a.{{ords_id}} DESC\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "select w/ inconsistent table refs, second ORDER BY column not included in SELECT & LIMIT/OFFSETS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 205 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(205);",
									"});",
									"",
									"pm.test(\"test first, second, forth ords_id and unitprice\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].ords_id).to.eql(10808);",
									"    pm.expect(jsonData[0].unitprice).to.eql(18);",
									"    pm.expect(jsonData[1].ords_id).to.eql(10749);",
									"    pm.expect(jsonData[1].unitprice).to.eql(18);",
									"    pm.expect(jsonData[3].ords_id).to.eql(10732);",
									"    pm.expect(jsonData[3].unitprice).to.eql(18);",
									"});",
									"",
									"pm.test(\"test random unitprice values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[16].unitprice).to.eql(14.4);",
									"    pm.expect(jsonData[66].unitprice).to.eql(6.2);",
									"    pm.expect(jsonData[204].unitprice).to.eql(15);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT a.{{ords_id}} as ords_id, a.unitprice as unitprice FROM {{schema}}.{{ordd_tb}} a ORDER BY productid DESC, a.{{ords_id}} DESC LIMIT 205 OFFSET 50\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select * on 3 table INNER JOIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 7 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"test for duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.id2).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"        pm.expect(row.name1).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name1).to.eql(\"Sam\");",
									"    pm.expect(jsonData[1].id2).to.eql(1);",
									"    pm.expect(jsonData[4].id1).to.eql(154);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT `d`.*, `b`.*, `o`.* FROM `dev`.`dog` AS `d` INNER JOIN `dev`.`breed` AS `b` ON `d`.`breed_id` = `b`.`id` INNER JOIN `dev`.`owner` AS `o` ON `d`.`owner_id` = `o`.`id` ORDER BY `dog_name`\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with basic CROSS SCHEMA JOIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 8 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(8);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.dog_name).to.exist;",
									"        pm.expect(row.age).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name).to.eql(\"David\");",
									"    pm.expect(jsonData[1].id1).to.eql(3);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with complex CROSS SCHEMA JOIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test  records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.dog_name).to.exist;",
									"        pm.expect(row.age).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test first and last row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql(\"David\");",
									"    pm.expect(jsonData[0].id).to.eql(6);",
									"    pm.expect(jsonData[0].id1).to.eql(3);",
									"    pm.expect(jsonData[4].name).to.eql(\"Kyle\");",
									"    pm.expect(jsonData[4].id).to.eql(5);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.* FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id ORDER BY o.name, o.id LIMIT 5 OFFSET 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with basic CROSS 3 SCHEMA JOINS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 7 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.id2).to.exist;",
									"        pm.expect(row.dog_name).to.exist;",
									"        pm.expect(row.age).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"        pm.expect(row.name1).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name).to.eql(\"David\");",
									"    pm.expect(jsonData[1].id1).to.eql(3);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"    pm.expect(jsonData[6].id1).to.eql(1);",
									"    pm.expect(jsonData[6].name1).to.eql(\"MASTIFF\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name, b.id, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with complex CROSS 3 SCHEMA JOINS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 7 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.dog_age).to.exist;",
									"        pm.expect(row.dog_weight).to.exist;",
									"        pm.expect(row.owner_name).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test first and last row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].dog_age).to.eql(1);",
									"    pm.expect(jsonData[0].dog_weight).to.eql(35);",
									"    pm.expect(jsonData[0].owner_name).to.eql(\"Kaylan\");",
									"    pm.expect(jsonData[0].name).to.eql(\"BEAGLE MIX\");",
									"    pm.expect(jsonData[6].dog_age).to.eql(5);",
									"    pm.expect(jsonData[6].dog_weight).to.eql(35);",
									"    pm.expect(jsonData[6].owner_name).to.eql(\"Kyle\");",
									"    pm.expect(jsonData[6].name).to.eql(\"WHIPPET\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.age AS dog_age, AVG(d.weight_lbs) AS dog_weight, o.name AS owner_name, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id GROUP BY o.name, b.name, d.age ORDER BY b.name\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test for all columns exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(Object.keys(row).length).to.equal(9);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.dog\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query w/ * and alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test for all columns exist and alias is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(Object.keys(row).length).to.equal(9);",
									"        pm.expect(row.dname).to.exist;",
									"        pm.expect(row.dog_name).to.not.exist;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT *, dog_name as dname FROM dev.dog\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query w/ single alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test that single column exist and alias is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(Object.keys(row).length).to.equal(1);",
									"        pm.expect(row.dname).to.exist;",
									"        pm.expect(row.dog_name).to.not.exist;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT dog_name as dname FROM dev.dog\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query w/ multiple aliases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test for all columns exist and aliases are correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(Object.keys(row).length).to.equal(3);",
									"        pm.expect(row.dname).to.exist;",
									"        pm.expect(row.dog_name).to.not.exist;",
									"        pm.expect(row.dog_id).to.exist;",
									"        pm.expect(row.id).to.not.exist;",
									"        pm.expect(row.dog_age).to.exist;",
									"        pm.expect(row.age).to.not.exist;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT id as dog_id, dog_name as dname, age as dog_age FROM dev.dog\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - simple full table query from leading_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 3 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test for correct ids\", function () {",
									"    var jsonData = pm.response.json();",
									"    let ids = [];",
									"    let expected_ids = [0, \"00011\", \"011\"];",
									"    jsonData.forEach(row => {",
									"        ids.push(row.id);",
									"    });",
									"",
									"    pm.expect(ids).to.eql(expected_ids);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.leading_zero\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - basic self JOIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"test 1 records returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct id\", function () {",
									"    pm.expect(jsonData[0].id).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT a.* FROM dev.owner as a INNER JOIN dev.owner as b ON a.name = b.best_friend\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select - basic self JOIN - reverse scenario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"test 1 records returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct id\", function () {",
									"    pm.expect(jsonData[0].id).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT b.* FROM dev.owner as a INNER JOIN dev.owner as b ON a.name = b.best_friend\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "query from leading_zero where id = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.leading_zero where id = 0\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "query from leading_zero where id = '011'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql('011');",
									"    pm.expect(record.another_attribute).to.eql(\"another_2\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.leading_zero where id = '011'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "query from leading_zero where id = 011",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 0 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT * FROM dev.leading_zero where id = 011\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "insert record with dog_name =  single space value & empty string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 2 of 2 records\");",
									"    pm.expect(jsonData.inserted_hashes).to.eql([1111, 2222]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"INSERT INTO dev.dog (id, dog_name) VALUES (1111, ' '), (2222, '')\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SELECT record with dog_name = single space and validate value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL select successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql([{id: 1111, dog_name: ' '}]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT id, dog_name FROM dev.dog  WHERE dog_name = ' '\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SELECT record with dog_name = empty string and validate value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL select successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql([{id: 2222, dog_name: ''}]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT id, dog_name FROM dev.dog  WHERE dog_name = ''\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete dev.dog records previously created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL delete successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted_hashes).to.eql([1111,2222]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"DELETE FROM dev.dog WHERE id IN (1111, 2222)\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. NoSQL Tests",
			"item": [
				{
					"name": "Invalid Attribute Check",
					"item": [
						{
							"name": "insert invalid attribute name - single row",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \"id\" : 1,\n        \"some`$`attribute\" : \"some_attribute\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update single row w/ invalid attribute name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"update\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \"id\" : 100,\n        \"some/attribute\" : \"some_attribute\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "insert all invalid attribute names - multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \t\"id\" : 1,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 2,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 3,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 4,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 5,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 6,\n        \t\"some/attribute1\" : \"some_attribute1\",\n        \t\"some/attribute2\" : \"some_attribute2\",\n        \t\"some/attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "update multiple rows with invalid attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"dev\",\n    \"table\": \"invalid_attribute\",\n    \"records\": [\n        {\n            \"id\": 100,\n            \"some/attribute\": \"some_attribute\"\n        },\n        {\n            \"id\": 101,\n            \"some-`attribute`\": \"some_attribute\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "upsert multiple rows with invalid attribute key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"dev\",\n    \"table\": \"invalid_attribute\",\n    \"records\": [\n        {\n            \"id\": 100,\n            \"some/attribute\": \"some_attribute\"\n        },\n        {\n            \"id\": 101,\n            \"some-`attribute`\": \"some_attribute\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "insert some invalid attribute names - multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Receives invalid attribute name error msg\", function () {",
											"    const errorMsg = pm.response.json().error;",
											"    pm.expect(errorMsg).to.equal(",
											"        \"Attribute names cannot include backticks or forward slashes\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\" :  \"dev\",\n    \"table\":\"invalid_attribute\",\n    \"records\": [\n    \t{\n        \t\"id\" : 1,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"$ome-attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 2,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"$ome-attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 3,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"some-attribute3\" : \"some_attribute3\",\n        \t\"some_attribute4/\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 4,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"some-attribute3/\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 5,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"some-attribute3\" : \"some_attribute3\",\n        \t\"some_`attribute4`\" : \"some_attribute4\"\n    \t},    \t\n    \t{\n        \t\"id\" : 6,\n        \t\"some_attribute1\" : \"some_attribute1\",\n        \t\"some_attribute2\" : \"some_attribute2\",\n        \t\"some-attribute3`\" : \"some_attribute3\",\n        \t\"some_attribute4\" : \"some_attribute4\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							}
						]
					}
				},
				{
					"name": "Search Response Data Type Check",
					"item": [
						{
							"name": "NoSQL search by hash no result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an empty array was returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[100],\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by hash no result returns empty array"
							},
							"response": []
						},
						{
							"name": "NoSQL search by hash one result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by hash one result returns array with single object"
							},
							"response": []
						},
						{
							"name": "NoSQL search by hash multiple results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"    pm.expect((typeof jsonData[1])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1, 5],\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by hash multiple results returns array with N objects"
							},
							"response": []
						},
						{
							"name": "NoSQL search by value no result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an empty array was returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_value\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"search_attribute\":\"lastname\",\n  \"search_value\":\"Xyz\",\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by value no result returns empty array"
							},
							"response": []
						},
						{
							"name": "NoSQL search by value one result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_value\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"search_attribute\":\"lastname\",\n  \"search_value\":\"King\",\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by value one result returns an array with single object"
							},
							"response": []
						},
						{
							"name": "NoSQL search by value multiple results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify an array with one object\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    pm.expect((typeof jsonData[0])).to.eql(\"object\");",
											"    pm.expect((typeof jsonData[1])).to.eql(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_value\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"search_attribute\":\"lastname\",\n  \"search_value\":\"D*\",\n  \"get_attributes\": [\"firstname\", \"lastname\"]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm search by value multiple results returns an array with N objects"
							},
							"response": []
						}
					],
					"description": "Test that search returns object array",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test desc / offset / limit",
					"item": [
						{
							"name": "NoSQL search by value limit 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test 20 records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(20);",
											"});",
											"",
											"pm.test(\"test order of records\", function () {",
											"    let ids = [10248,10249,10250,10251,10252,10253,10254,10255,10256,10257,10258,10259,10260,10261,10262,10263,10264,10265,10266,10267];",
											"    var jsonData = pm.response.json();",
											"",
											"    for(let x = 0, length = ids.length; x < length; x++){",
											"        pm.expect(jsonData[x].orderid).to.eql(ids[x]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{ords_tb}}\",\n\t\"search_attribute\":\"{{ordd_id}}\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"],\n    \"limit\": 20\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "NoSQL search by value offset 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test 810 records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(810);",
											"});",
											"",
											"pm.test(\"test order of records\", function () {",
											"    let ids = [10268,10269,10270,10271,10272,10273,10274,10275,10276,10277,10278,10279,10280,10281,10282,10283,10284,10285,10286,10287,10288,10289,10290,10291,10292,10293,10294,10295,10296,10297,10298,10299,10300,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10313,10314,10315,10316,10317,10318,10319,10320,10321,10322,10323,10324,10325,10326,10327,10328,10329,10330,10331,10332,10333,10334,10335,10336,10337,10338,10339,10340,10341,10342,10343,10344,10345,10346,10347,10348,10349,10350,10351,10352,10353,10354,10355,10356,10357,10358,10359,10360,10361,10362,10363,10364,10365,10366,10367,10368,10369,10370,10371,10372,10373,10374,10375,10376,10377,10378,10379,10380,10381,10382,10383,10384,10385,10386,10387,10388,10389,10390,10391,10392,10393,10394,10395,10396,10397,10398,10399,10400,10401,10402,10403,10404,10405,10406,10407,10408,10409,10410,10411,10412,10413,10414,10415,10416,10417,10418,10419,10420,10421,10422,10423,10424,10425,10426,10427,10428,10429,10430,10431,10432,10433,10434,10435,10436,10437,10438,10439,10440,10441,10442,10443,10444,10445,10446,10447,10448,10449,10450,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,10476,10477,10478,10479,10480,10481,10482,10483,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,10494,10495,10496,10497,10498,10499,10500,10501,10502,10503,10504,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10555,10556,10557,10558,10559,10560,10561,10562,10563,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,10590,10591,10592,10593,10594,10595,10596,10597,10598,10599,10600,10601,10602,10603,10604,10605,10606,10607,10608,10609,10610,10611,10612,10613,10614,10615,10616,10617,10618,10619,10620,10621,10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10649,10650,10651,10652,10653,10654,10655,10656,10657,10658,10659,10660,10661,10662,10663,10664,10665,10666,10667,10668,10669,10670,10671,10672,10673,10674,10675,10676,10677,10678,10679,10680,10681,10682,10683,10684,10685,10686,10687,10688,10689,10690,10691,10692,10693,10694,10695,10696,10697,10698,10699,10700,10701,10702,10703,10704,10705,10706,10707,10708,10709,10710,10711,10712,10713,10714,10715,10716,10717,10718,10719,10720,10721,10722,10723,10724,10725,10726,10727,10728,10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741,10742,10743,10744,10745,10746,10747,10748,10749,10750,10751,10752,10753,10754,10755,10756,10757,10758,10759,10760,10761,10762,10763,10764,10765,10766,10767,10768,10769,10770,10771,10772,10773,10774,10775,10776,10777,10778,10779,10780,10781,10782,10783,10784,10785,10786,10787,10788,10789,10790,10791,10792,10793,10794,10795,10796,10797,10798,10799,10800,10801,10802,10803,10804,10805,10806,10807,10808,10809,10810,10811,10812,10813,10814,10815,10816,10817,10818,10819,10820,10821,10822,10823,10824,10825,10826,10827,10828,10829,10830,10831,10832,10833,10834,10835,10836,10837,10838,10839,10840,10841,10842,10843,10844,10845,10846,10847,10848,10849,10850,10851,10852,10853,10854,10855,10856,10857,10858,10859,10860,10861,10862,10863,10864,10865,10866,10867,10868,10869,10870,10871,10872,10873,10874,10875,10876,10877,10878,10879,10880,10881,10882,10883,10884,10885,10886,10887,10888,10889,10890,10891,10892,10893,10894,10895,10896,10897,10898,10899,10900,10901,10902,10903,10904,10905,10906,10907,10908,10909,10910,10911,10912,10913,10914,10915,10916,10917,10918,10919,10920,10921,10922,10923,10924,10925,10926,10927,10928,10929,10930,10931,10932,10933,10934,10935,10936,10937,10938,10939,10940,10941,10942,10943,10944,10945,10946,10947,10948,10949,10950,10951,10952,10953,10954,10955,10956,10957,10958,10959,10960,10961,10962,10963,10964,10965,10966,10967,10968,10969,10970,10971,10972,10973,10974,10975,10976,10977,10978,10979,10980,10981,10982,10983,10984,10985,10986,10987,10988,10989,10990,10991,10992,10993,10994,10995,10996,10997,10998,10999,11000,11001,11002,11003,11004,11005,11006,11007,11008,11009,11010,11011,11012,11013,11014,11015,11016,11017,11018,11019,11020,11021,11022,11023,11024,11025,11026,11027,11028,11029,11030,11031,11032,11033,11034,11035,11036,11037,11038,11039,11040,11041,11042,11043,11044,11045,11046,11047,11048,11049,11050,11051,11052,11053,11054,11055,11056,11057,11058,11059,11060,11061,11062,11063,11064,11065,11066,11067,11068,11069,11070,11071,11072,11073,11074,11075,11076,11077];",
											"    var jsonData = pm.response.json();",
											"",
											"    for(let x = 0, length = ids.length; x < length; x++){",
											"        pm.expect(jsonData[x].orderid).to.eql(ids[x]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{ords_tb}}\",\n\t\"search_attribute\":\"{{ordd_id}}\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"],\n    \"offset\": 20\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "NoSQL search by value limit 20 offset 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test 20 records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(20);",
											"});",
											"",
											"pm.test(\"test order of records\", function () {",
											"    let ids = [10268,10269,10270,10271,10272,10273,10274,10275,10276,10277,10278,10279,10280,10281,10282,10283,10284,10285,10286,10287];",
											"    var jsonData = pm.response.json();",
											"",
											"    for(let x = 0, length = ids.length; x < length; x++){",
											"        pm.expect(jsonData[x].orderid).to.eql(ids[x]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{ords_tb}}\",\n\t\"search_attribute\":\"{{ordd_id}}\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"],\n    \"limit\": 20,\n    \"offset\": 20\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "NoSQL search by value reverse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test 830 records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(830);",
											"});",
											"",
											"pm.test(\"test order of records\", function () {",
											"    let ids = [11077,11076,11075,11074,11073,11072,11071,11070,11069,11068,11067,11066,11065,11064,11063,11062,11061,11060,11059,11058,11057,11056,11055,11054,11053,11052,11051,11050,11049,11048,11047,11046,11045,11044,11043,11042,11041,11040,11039,11038,11037,11036,11035,11034,11033,11032,11031,11030,11029,11028,11027,11026,11025,11024,11023,11022,11021,11020,11019,11018,11017,11016,11015,11014,11013,11012,11011,11010,11009,11008,11007,11006,11005,11004,11003,11002,11001,11000,10999,10998,10997,10996,10995,10994,10993,10992,10991,10990,10989,10988,10987,10986,10985,10984,10983,10982,10981,10980,10979,10978,10977,10976,10975,10974,10973,10972,10971,10970,10969,10968,10967,10966,10965,10964,10963,10962,10961,10960,10959,10958,10957,10956,10955,10954,10953,10952,10951,10950,10949,10948,10947,10946,10945,10944,10943,10942,10941,10940,10939,10938,10937,10936,10935,10934,10933,10932,10931,10930,10929,10928,10927,10926,10925,10924,10923,10922,10921,10920,10919,10918,10917,10916,10915,10914,10913,10912,10911,10910,10909,10908,10907,10906,10905,10904,10903,10902,10901,10900,10899,10898,10897,10896,10895,10894,10893,10892,10891,10890,10889,10888,10887,10886,10885,10884,10883,10882,10881,10880,10879,10878,10877,10876,10875,10874,10873,10872,10871,10870,10869,10868,10867,10866,10865,10864,10863,10862,10861,10860,10859,10858,10857,10856,10855,10854,10853,10852,10851,10850,10849,10848,10847,10846,10845,10844,10843,10842,10841,10840,10839,10838,10837,10836,10835,10834,10833,10832,10831,10830,10829,10828,10827,10826,10825,10824,10823,10822,10821,10820,10819,10818,10817,10816,10815,10814,10813,10812,10811,10810,10809,10808,10807,10806,10805,10804,10803,10802,10801,10800,10799,10798,10797,10796,10795,10794,10793,10792,10791,10790,10789,10788,10787,10786,10785,10784,10783,10782,10781,10780,10779,10778,10777,10776,10775,10774,10773,10772,10771,10770,10769,10768,10767,10766,10765,10764,10763,10762,10761,10760,10759,10758,10757,10756,10755,10754,10753,10752,10751,10750,10749,10748,10747,10746,10745,10744,10743,10742,10741,10740,10739,10738,10737,10736,10735,10734,10733,10732,10731,10730,10729,10728,10727,10726,10725,10724,10723,10722,10721,10720,10719,10718,10717,10716,10715,10714,10713,10712,10711,10710,10709,10708,10707,10706,10705,10704,10703,10702,10701,10700,10699,10698,10697,10696,10695,10694,10693,10692,10691,10690,10689,10688,10687,10686,10685,10684,10683,10682,10681,10680,10679,10678,10677,10676,10675,10674,10673,10672,10671,10670,10669,10668,10667,10666,10665,10664,10663,10662,10661,10660,10659,10658,10657,10656,10655,10654,10653,10652,10651,10650,10649,10648,10647,10646,10645,10644,10643,10642,10641,10640,10639,10638,10637,10636,10635,10634,10633,10632,10631,10630,10629,10628,10627,10626,10625,10624,10623,10622,10621,10620,10619,10618,10617,10616,10615,10614,10613,10612,10611,10610,10609,10608,10607,10606,10605,10604,10603,10602,10601,10600,10599,10598,10597,10596,10595,10594,10593,10592,10591,10590,10589,10588,10587,10586,10585,10584,10583,10582,10581,10580,10579,10578,10577,10576,10575,10574,10573,10572,10571,10570,10569,10568,10567,10566,10565,10564,10563,10562,10561,10560,10559,10558,10557,10556,10555,10554,10553,10552,10551,10550,10549,10548,10547,10546,10545,10544,10543,10542,10541,10540,10539,10538,10537,10536,10535,10534,10533,10532,10531,10530,10529,10528,10527,10526,10525,10524,10523,10522,10521,10520,10519,10518,10517,10516,10515,10514,10513,10512,10511,10510,10509,10508,10507,10506,10505,10504,10503,10502,10501,10500,10499,10498,10497,10496,10495,10494,10493,10492,10491,10490,10489,10488,10487,10486,10485,10484,10483,10482,10481,10480,10479,10478,10477,10476,10475,10474,10473,10472,10471,10470,10469,10468,10467,10466,10465,10464,10463,10462,10461,10460,10459,10458,10457,10456,10455,10454,10453,10452,10451,10450,10449,10448,10447,10446,10445,10444,10443,10442,10441,10440,10439,10438,10437,10436,10435,10434,10433,10432,10431,10430,10429,10428,10427,10426,10425,10424,10423,10422,10421,10420,10419,10418,10417,10416,10415,10414,10413,10412,10411,10410,10409,10408,10407,10406,10405,10404,10403,10402,10401,10400,10399,10398,10397,10396,10395,10394,10393,10392,10391,10390,10389,10388,10387,10386,10385,10384,10383,10382,10381,10380,10379,10378,10377,10376,10375,10374,10373,10372,10371,10370,10369,10368,10367,10366,10365,10364,10363,10362,10361,10360,10359,10358,10357,10356,10355,10354,10353,10352,10351,10350,10349,10348,10347,10346,10345,10344,10343,10342,10341,10340,10339,10338,10337,10336,10335,10334,10333,10332,10331,10330,10329,10328,10327,10326,10325,10324,10323,10322,10321,10320,10319,10318,10317,10316,10315,10314,10313,10312,10311,10310,10309,10308,10307,10306,10305,10304,10303,10302,10301,10300,10299,10298,10297,10296,10295,10294,10293,10292,10291,10290,10289,10288,10287,10286,10285,10284,10283,10282,10281,10280,10279,10278,10277,10276,10275,10274,10273,10272,10271,10270,10269,10268,10267,10266,10265,10264,10263,10262,10261,10260,10259,10258,10257,10256,10255,10254,10253,10252,10251,10250,10249,10248];",
											"    var jsonData = pm.response.json();",
											"",
											"    for(let x = 0, length = ids.length; x < length; x++){",
											"        pm.expect(jsonData[x].orderid).to.eql(ids[x]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{ords_tb}}\",\n\t\"search_attribute\":\"{{ordd_id}}\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"],\n    \"reverse\": true\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "NoSQL search by value reverse offset 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test 810 records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(810);",
											"});",
											"",
											"pm.test(\"test order of records\", function () {",
											"    let ids = [11057,11056,11055,11054,11053,11052,11051,11050,11049,11048,11047,11046,11045,11044,11043,11042,11041,11040,11039,11038,11037,11036,11035,11034,11033,11032,11031,11030,11029,11028,11027,11026,11025,11024,11023,11022,11021,11020,11019,11018,11017,11016,11015,11014,11013,11012,11011,11010,11009,11008,11007,11006,11005,11004,11003,11002,11001,11000,10999,10998,10997,10996,10995,10994,10993,10992,10991,10990,10989,10988,10987,10986,10985,10984,10983,10982,10981,10980,10979,10978,10977,10976,10975,10974,10973,10972,10971,10970,10969,10968,10967,10966,10965,10964,10963,10962,10961,10960,10959,10958,10957,10956,10955,10954,10953,10952,10951,10950,10949,10948,10947,10946,10945,10944,10943,10942,10941,10940,10939,10938,10937,10936,10935,10934,10933,10932,10931,10930,10929,10928,10927,10926,10925,10924,10923,10922,10921,10920,10919,10918,10917,10916,10915,10914,10913,10912,10911,10910,10909,10908,10907,10906,10905,10904,10903,10902,10901,10900,10899,10898,10897,10896,10895,10894,10893,10892,10891,10890,10889,10888,10887,10886,10885,10884,10883,10882,10881,10880,10879,10878,10877,10876,10875,10874,10873,10872,10871,10870,10869,10868,10867,10866,10865,10864,10863,10862,10861,10860,10859,10858,10857,10856,10855,10854,10853,10852,10851,10850,10849,10848,10847,10846,10845,10844,10843,10842,10841,10840,10839,10838,10837,10836,10835,10834,10833,10832,10831,10830,10829,10828,10827,10826,10825,10824,10823,10822,10821,10820,10819,10818,10817,10816,10815,10814,10813,10812,10811,10810,10809,10808,10807,10806,10805,10804,10803,10802,10801,10800,10799,10798,10797,10796,10795,10794,10793,10792,10791,10790,10789,10788,10787,10786,10785,10784,10783,10782,10781,10780,10779,10778,10777,10776,10775,10774,10773,10772,10771,10770,10769,10768,10767,10766,10765,10764,10763,10762,10761,10760,10759,10758,10757,10756,10755,10754,10753,10752,10751,10750,10749,10748,10747,10746,10745,10744,10743,10742,10741,10740,10739,10738,10737,10736,10735,10734,10733,10732,10731,10730,10729,10728,10727,10726,10725,10724,10723,10722,10721,10720,10719,10718,10717,10716,10715,10714,10713,10712,10711,10710,10709,10708,10707,10706,10705,10704,10703,10702,10701,10700,10699,10698,10697,10696,10695,10694,10693,10692,10691,10690,10689,10688,10687,10686,10685,10684,10683,10682,10681,10680,10679,10678,10677,10676,10675,10674,10673,10672,10671,10670,10669,10668,10667,10666,10665,10664,10663,10662,10661,10660,10659,10658,10657,10656,10655,10654,10653,10652,10651,10650,10649,10648,10647,10646,10645,10644,10643,10642,10641,10640,10639,10638,10637,10636,10635,10634,10633,10632,10631,10630,10629,10628,10627,10626,10625,10624,10623,10622,10621,10620,10619,10618,10617,10616,10615,10614,10613,10612,10611,10610,10609,10608,10607,10606,10605,10604,10603,10602,10601,10600,10599,10598,10597,10596,10595,10594,10593,10592,10591,10590,10589,10588,10587,10586,10585,10584,10583,10582,10581,10580,10579,10578,10577,10576,10575,10574,10573,10572,10571,10570,10569,10568,10567,10566,10565,10564,10563,10562,10561,10560,10559,10558,10557,10556,10555,10554,10553,10552,10551,10550,10549,10548,10547,10546,10545,10544,10543,10542,10541,10540,10539,10538,10537,10536,10535,10534,10533,10532,10531,10530,10529,10528,10527,10526,10525,10524,10523,10522,10521,10520,10519,10518,10517,10516,10515,10514,10513,10512,10511,10510,10509,10508,10507,10506,10505,10504,10503,10502,10501,10500,10499,10498,10497,10496,10495,10494,10493,10492,10491,10490,10489,10488,10487,10486,10485,10484,10483,10482,10481,10480,10479,10478,10477,10476,10475,10474,10473,10472,10471,10470,10469,10468,10467,10466,10465,10464,10463,10462,10461,10460,10459,10458,10457,10456,10455,10454,10453,10452,10451,10450,10449,10448,10447,10446,10445,10444,10443,10442,10441,10440,10439,10438,10437,10436,10435,10434,10433,10432,10431,10430,10429,10428,10427,10426,10425,10424,10423,10422,10421,10420,10419,10418,10417,10416,10415,10414,10413,10412,10411,10410,10409,10408,10407,10406,10405,10404,10403,10402,10401,10400,10399,10398,10397,10396,10395,10394,10393,10392,10391,10390,10389,10388,10387,10386,10385,10384,10383,10382,10381,10380,10379,10378,10377,10376,10375,10374,10373,10372,10371,10370,10369,10368,10367,10366,10365,10364,10363,10362,10361,10360,10359,10358,10357,10356,10355,10354,10353,10352,10351,10350,10349,10348,10347,10346,10345,10344,10343,10342,10341,10340,10339,10338,10337,10336,10335,10334,10333,10332,10331,10330,10329,10328,10327,10326,10325,10324,10323,10322,10321,10320,10319,10318,10317,10316,10315,10314,10313,10312,10311,10310,10309,10308,10307,10306,10305,10304,10303,10302,10301,10300,10299,10298,10297,10296,10295,10294,10293,10292,10291,10290,10289,10288,10287,10286,10285,10284,10283,10282,10281,10280,10279,10278,10277,10276,10275,10274,10273,10272,10271,10270,10269,10268,10267,10266,10265,10264,10263,10262,10261,10260,10259,10258,10257,10256,10255,10254,10253,10252,10251,10250,10249,10248];",
											"    var jsonData = pm.response.json();",
											"",
											"    for(let x = 0, length = ids.length; x < length; x++){",
											"        pm.expect(jsonData[x].orderid).to.eql(ids[x]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{ords_tb}}\",\n\t\"search_attribute\":\"{{ordd_id}}\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"],\n    \"reverse\": true,\n    \"offset\": 20\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "NoSQL search by value reverse limit 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test 20 records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(20);",
											"});",
											"",
											"pm.test(\"test order of records\", function () {",
											"    let ids = [11077,11076,11075,11074,11073,11072,11071,11070,11069,11068,11067,11066,11065,11064,11063,11062,11061,11060,11059,11058];",
											"    var jsonData = pm.response.json();",
											"",
											"    for(let x = 0, length = ids.length; x < length; x++){",
											"        pm.expect(jsonData[x].orderid).to.eql(ids[x]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{ords_tb}}\",\n\t\"search_attribute\":\"{{ordd_id}}\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"],\n    \"reverse\": true,\n    \"limit\": 20\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "NoSQL search by value reverse offset 20 limit 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test 20 records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(20);",
											"});",
											"",
											"pm.test(\"test order of records\", function () {",
											"    let ids = [11057,11056,11055,11054,11053,11052,11051,11050,11049,11048,11047,11046,11045,11044,11043,11042,11041,11040,11039,11038];",
											"    var jsonData = pm.response.json();",
											"",
											"    for(let x = 0, length = ids.length; x < length; x++){",
											"        pm.expect(jsonData[x].orderid).to.eql(ids[x]);",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{ords_tb}}\",\n\t\"search_attribute\":\"{{ordd_id}}\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"],\n    \"reverse\": true,\n    \"offset\":20,\n    \"limit\": 20\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update NoSQL employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"{{schema}}\",\n    \"table\": \"{{emps_tb}}\",\n    \"records\": [\n        {\n            \"{{emps_id}}\": 1,\n            \"address\": \"def1234\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update NoSQL employee confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value from previous test update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].employeeid).to.eql(1);",
									"    pm.expect(jsonData[0].address).to.eql(\"def1234\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_attribute\": \"{{emps_id}}\",\n\t\"hash_values\":[1],\n\t\"get_attributes\": [\"{{emps_id}}\", \"address\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "update NoSQL call.aggr set data to dot & double dot",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update aggr id 4 dog_name, owner_name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(4);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"call\",\n\"table\":\"aggr\",\n\"records\": [\n  {\n    \"all\": 4,\n    \"dog_name\": \".\",\n    \"owner_name\": \"..\"\n  }\n]\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update NoSQL employee add new attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function pausecomp(millis)",
									" {",
									"  var date = new Date();",
									"  var curDate = null;",
									"  do { curDate = new Date(); }",
									"  while(curDate-date < millis);",
									"}",
									"",
									"pausecomp(100);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"{{emps_id}}\": 1,\n    \"address\": \"def1234\",\n    \"test_record\":\"I'mATest\"\n  }\n]\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert with duplicate records to make sure both are not added",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.skipped_hashes[0]).to.eql(212);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"records\": [\n\t  {\n\t    \"{{emps_id}}\": 212,\n\t    \"address\": \"def1234\",\n\t    \"lastname\":\"dobolina\",\n\t    \"firstname\":\"bob\"\n\t  },\n\t  {\n\t    \"{{emps_id}}\": 212,\n\t    \"address\": \"def1234\",\n\t    \"lastname\":\"dobolina2\",\n\t    \"firstname\":\"bob\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert with no hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Insert with no hash\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inserted_hashes.length).to.eql(1);",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"records\": [\n\t  {\n\t    \"address\": \"1 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert with empty hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Insert with no hash\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inserted_hashes.length).to.eql(1);",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"records\": [\n\t  {\n\t  \t\"{{emps_id}}\": \"\",\n\t    \"address\": \"23 North Street\",\n\t    \"lastname\":\"Cat\",\n\t    \"firstname\":\"Brian\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].address).to.eql('def1234');",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked, new attribute added\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].test_record).to.eql(\"I'mATest\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"address\", \"test_record\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash - check dot & double dot",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked check dot\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].dog_name).to.eql('.');",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked, check double dot\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].owner_name).to.eql(\"..\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_values\":[4],\n  \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash no schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"database 'callABC' does not exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"callABC\",\n  \"table\":\"aggr\",\n  \"hash_values\":[4],\n  \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash no table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Table 'call.aggrABC' does not exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggrABC\",\n  \"hash_values\":[4],\n  \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash hash_value bad data type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"'hash_values' must be an array\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_values\":4,\n  \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash get_attributes bad data type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"verify proper error message is given\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"'get_attributes' must be an array\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"call\",\n  \"table\":\"aggr\",\n  \"hash_values\":[4],\n  \"get_attributes\": \"*\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update NoSQL employee with falsey attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Update employee id 2 address, hireDate, notes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"{{emps_id}}\": 2,\n    \"address\": 0,\n    \"hireDate\": null,\n    \"notes\": false\n  }\n]\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes to false/0/null/undefined to validate values are stored correctly."
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash to confirm falsey update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify NoSQL falsey update worked as expected\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].address).to.eql(0);",
									"    pm.expect(jsonData[0].hireDate).to.eql(null);",
									"    pm.expect(jsonData[0].notes).to.eql(false);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[2],\n  \"get_attributes\": [\"address\", \"hireDate\", \"notes\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Search for employee id 2 and confirm that false/0/null attributes have been updated"
					},
					"response": []
				},
				{
					"name": "update NoSQL one employee record with no hash attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Valid error message is recieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"a valid hash attribute must be provided with update record, check log for more info\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"address\": \"3000 Dog Place\"\n  }\n]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes without providing a primary key/hash and check for error."
					},
					"response": []
				},
				{
					"name": "update NoSQL one employee record with empty hash attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Valid error message is recieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"a valid hash attribute must be provided with update record, check log for more info\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n {\n    \"{{emps_id}}\": \"\",\n    \"address\": \"123 North Blvd\",\n    \"notes\": \"This guy is the real deal\"\n  }\n]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes without providing a primary key/hash and check for error."
					},
					"response": []
				},
				{
					"name": "update NoSQL multiple employee records with no hash attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Valid error message is recieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"a valid hash attribute must be provided with update record, check log for more info\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n {\n    \"{{emps_id}}\": 2,\n    \"address\": \"123 North Blvd\",\n    \"notes\": \"This guy is the real deal\"\n  },\n  {\n    \"address\": \"45 Lost St\",\n    \"notes\": \"This person doesn't even have an id!\"\n  }, \n  {\n    \"{{emps_id}}\": 3,\n    \"address\": \"1 Main St\",\n    \"notes\": \"This guy okay\"\n  }\n]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Update employee attributes without providing a primary key/hash and check for error."
					},
					"response": []
				},
				{
					"name": "update NoSQL employee with valid nonexistent hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"update with nonexistent hash skips hash\", function () {",
									"    var jsonData = pm.response.json();",
									"    if(jsonData.message === \"updated 0 of 1 records\"){",
									"        pm.expect(jsonData.message).to.eql(\"updated 0 of 1 records\");",
									"        pm.expect(jsonData.update_hashes).to.eql([]);",
									"        pm.expect(jsonData.skipped_hashes[0]).to.eql(\"There is no way this exists\");",
									"    } else if(jsonData.message === \"updated 1 of 1 records\"){",
									"        pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"        pm.expect(jsonData.update_hashes[0]).to.eql(\"There is no way this exists\");",
									"        pm.expect(jsonData.skipped_hashes).to.eql([]);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"{{emps_id}}\": \"There is no way this exists\",\n    \"notes\": \"who is this fella?\"\n  }\n]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Try to update employee record with valid nonexistent hash. "
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - * at end",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 2 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes('Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:')).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"Location ... Location ...GOURGEOUS HOME in a Heart of MANDARIN,Next to Loretto Magnet schoolClose to I-295, shopping & entertainment. Gated community! Loaded with upgrades:*\",\n\t\"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - * at start",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes(\"*DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...\")).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"**DON'T MISS THIS BEAUTIFUL DAVID WEEKLEY BELMONTE MODEL*ONE OF THE LARGEST LOTS IN CROSSWATER*GREAT FOR OUTDOOR FUN!*LUXURIOUS LIVING!*HIGH TECH HOME*CROWN MOLDING, CUSTOM PLANTATION SHUTTERS, 18'' TILE & CUSTOM WHITE OAK HARDWOOD FLOORING...\",\n\t\"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - * at start and end",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 3 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"test all remarks contain exact value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes(\"4 Bedroom/2.5+\")).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"*4 Bedroom/2.5+*\",\n\t\"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - * as search_value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 11 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(11);",
									"});",
									"",
									"pm.test(\"test all remarks contain all attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"*\",\n\t\"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value - *** at start",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test all remarks contain value provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((record)=>{",
									"        let keys = Object.keys(record);",
									"        if(keys.indexOf('__updatedtime__') > -1 && keys.indexOf('__createdtime__') > -1){",
									"            pm.expect(keys.length).to.eql(5);",
									"        } else{",
									"            pm.expect(keys.length).to.eql(3);",
									"        }",
									"        pm.expect(record.remarks.includes(\"**Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.\")).to.eql(true);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"remarks_blob\",\n\t\"search_attribute\":\"remarks\",\n    \"search_value\":\"***Spacious & updated 2-story home on large preserve lot nearly 1/2 acre! Concrete block constr. & desirable ICW location near JTB, shopping, dining & the beach! Great split BD flrpln w/soaring ceilings features 4BD + office, upstairs loft & 3 full BA.\",\n\t\"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash on leading_zero, value = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"leading_zero\",\n  \"hash_attribute\": \"id\",\n  \"hash_values\":[0],\n  \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by hash on leading_zero, values '011', '00011'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 2 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(\"011\");",
									"    pm.expect(record.another_attribute).to.eql(\"another_2\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att2\");",
									"",
									"    let record2 = jsonData[1];    ",
									"",
									"    pm.expect(record2.id).to.eql(\"00011\");",
									"    pm.expect(record2.another_attribute).to.eql(\"another_3\");",
									"    pm.expect(record2.some_attribute).to.eql(\"some_att3\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"dev\",\n  \"table\":\"leading_zero\",\n  \"hash_attribute\": \"id\",\n  \"hash_values\":[\"011\", \"00011\"],\n  \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value leading_zero - value = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql(0);",
									"    pm.expect(record.another_attribute).to.eql(\"another_1\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"search_attribute\":\"id\",\n    \"search_value\":0,\n\t\"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value leading_zero - value = \"011\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 1 record returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record = jsonData[0];    ",
									"",
									"    pm.expect(record.id).to.eql('011');",
									"    pm.expect(record.another_attribute).to.eql(\"another_2\");",
									"    pm.expect(record.some_attribute).to.eql(\"some_att2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"search_attribute\":\"id\",\n    \"search_value\":\"011\",\n\t\"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL search by value leading_zero - value = \"0*\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 2 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"test for correct values\", function () {",
									"    var jsonData = pm.response.json();",
									"    let record2 = jsonData[0];    ",
									"",
									"    pm.expect(record2.id).to.eql(\"00011\");",
									"    pm.expect(record2.another_attribute).to.eql(\"another_3\");",
									"    pm.expect(record2.some_attribute).to.eql(\"some_att3\");",
									"    ",
									"    let record1 = jsonData[1];    ",
									"",
									"    pm.expect(record1.id).to.eql(\"011\");",
									"    pm.expect(record1.another_attribute).to.eql(\"another_2\");",
									"    pm.expect(record1.some_attribute).to.eql(\"some_att2\");",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"leading_zero\",\n\t\"search_attribute\":\"id\",\n    \"search_value\":\"0*\",\n\t\"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Upsert into products 1 new record & 2 that exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Insert validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.upserted_hashes.length).to.eql(3);",
									"    pm.expect(jsonData.upserted_hashes).to.eql([1, 100, 101]);",
									"    pm.expect(jsonData.skipped_hashes).to.eql(undefined);",
									"    pm.expect(jsonData.message).to.eql(\"upserted 3 of 3 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"{{schema}}\",\n    \"table\": \"{{prod_tb}}\",\n    \"records\": [\n        {\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39,\n            \"supplierid\": 1,\n            \"productid\": 1,\n            \"discontinued\": true,\n            \"reorderlevel\": 10,\n            \"productname\": \"Chai\",\n            \"quantityperunit\": \"10 boxes x 20 bags\",\n            \"unitprice\": 18\n        },\n        {\n            \"productid\": 100,\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39,\n            \"supplierid\": 1,\n            \"discontinued\": true,\n            \"reorderlevel\": 10,\n            \"productname\": \"Chai\",\n            \"quantityperunit\": \"10 boxes x 20 bags\",\n            \"unitprice\": 18\n        },\n        {\n            \"productid\": 101,\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39,\n            \"supplierid\": 1,\n            \"discontinued\": true,\n            \"reorderlevel\": 10,\n            \"productname\": \"Chai\",\n            \"quantityperunit\": \"10 boxes x 20 bags\",\n            \"unitprice\": 18\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm upserted records exist and are updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results include correct 3 records\", function () {",
									"    var jsonData = pm.response.json();",
									"    const expectedHashes = [1, 100, 101];",
									"    jsonData.forEach(row => {",
									"        pm.expect(expectedHashes.includes(row.productid)).to.be.true;",
									"        pm.expect(row.discontinued).to.be.true;    ",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"search_by_value\",\n    \"schema\": \"{{schema}}\",\n    \"table\": \"{{prod_tb}}\",\n    \"search_attribute\": \"discontinued\",\n    \"search_value\": true,\n    \"get_attributes\": [\n        \"*\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Upsert into products 3 new records w/o hash vals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Insert validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.upserted_hashes.length).to.eql(3);",
									"    pm.expect(jsonData.skipped_hashes).to.eql(undefined);",
									"    pm.expect(jsonData.message).to.eql(\"upserted 3 of 3 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"{{schema}}\",\n    \"table\": \"{{prod_tb}}\",\n    \"records\": [\n        {\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39,\n            \"supplierid\": 1,\n            \"discontinued\": \"True\",\n            \"reorderlevel\": 10,\n            \"productname\": \"Chai\",\n            \"quantityperunit\": \"10 boxes x 20 bags\",\n            \"unitprice\": 18\n        },\n        {\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39,\n            \"supplierid\": 1,\n            \"discontinued\": \"True\",\n            \"reorderlevel\": 10,\n            \"productname\": \"Chai\",\n            \"quantityperunit\": \"10 boxes x 20 bags\",\n            \"unitprice\": 18\n        },\n        {\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39,\n            \"supplierid\": 1,\n            \"discontinued\": \"True\",\n            \"reorderlevel\": 10,\n            \"productname\": \"Chai\",\n            \"quantityperunit\": \"10 boxes x 20 bags\",\n            \"unitprice\": 18\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove added record from products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Delete validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted_hashes.length).to.eql(1);",
									"    pm.expect(jsonData.deleted_hashes).to.eql([100]);",
									"    pm.expect(jsonData.skipped_hashes.length).to.eql(0);",
									"    pm.expect(jsonData.skipped_hashes).to.eql([]);",
									"    pm.expect(jsonData.message).to.eql(\"1 of 1 record successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{prod_tb}}\",\n\t\"hash_values\": [100]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Update products 1 existing record & one that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Update validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes.length).to.eql(1);",
									"    pm.expect(jsonData.update_hashes).to.eql([1]);",
									"    pm.expect(jsonData.skipped_hashes.length).to.eql(1);",
									"    pm.expect(jsonData.skipped_hashes).to.eql([100]);",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{prod_tb}}\",\n\t\"records\": [\n\t  {\n        \"productid\": 1,\n        \"discontinued\": true\n    },\n\t{\n        \"categoryid\": 1,\n        \"unitsnnorder\": 0,\n        \"unitsinstock\": 39,\n        \"supplierid\": 1,\n        \"productid\": 100,\n        \"discontinued\": \"False\",\n        \"reorderlevel\": 10,\n        \"productname\": \"Chai\",\n        \"quantityperunit\": \"10 boxes x 20 bags\",\n        \"unitprice\": 18\n    }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Restore Product record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Update validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes.length).to.eql(1);",
									"    pm.expect(jsonData.update_hashes).to.eql([1]);",
									"    pm.expect(jsonData.skipped_hashes.length).to.eql(0);",
									"    pm.expect(jsonData.skipped_hashes).to.eql([]);",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{prod_tb}}\",\n\t\"records\": [\n\t  {\n        \"productid\": 1,\n        \"discontinued\": \"False\"\n    }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "attempt to update __createdtime__",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update employee id 1 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"update\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"{{emps_id}}\": 1,\n    \"__createdtime__\": \"bad value\"\n  }\n]\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "confirm __createdtime__ did not change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value from previous test update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].employeeid).to.eql(1);",
									"    pm.expect(jsonData[0].__createdtime__).to.not.eql(\"bad value\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_attribute\": \"{{emps_id}}\",\n\t\"hash_values\":[1],\n\t\"get_attributes\": [\"{{emps_id}}\", \"__createdtime__\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "insert record with dog_name =  single space value & empty string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 2 of 2 records\");",
									"    pm.expect(jsonData.inserted_hashes).to.eql([1111, 2222]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog\",\n\t\"records\": [\n\t\t{\n\t\t\t\"id\": 1111,\n\t\t\t\"dog_name\": \" \"\n\t\t},\n\t\t{\n\t\t\t\"id\": 2222,\n\t\t\t\"dog_name\": \"\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "search by value dog_name = single space string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by value successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql([{id: 1111, dog_name: ' '}]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog\",\n\t\"search_attribute\": \"dog_name\",\n\t\"search_value\": \" \",\n\t\"get_attributes\": [\"id\", \"dog_name\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "search by value dog_name = empty string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by value successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql([{id: 2222, dog_name: ''}]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog\",\n\t\"search_attribute\": \"dog_name\",\n\t\"search_value\": \"\",\n\t\"get_attributes\": [\"id\", \"dog_name\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "Delete dev.dog records previously created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"delete successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted_hashes).to.eql([1111,2222]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog\",\n\t\"hash_values\": [1111,2222]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "Search by value 123.4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by value number schema/table successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql([{id: 987654321, name: \"Hot Diddy Dawg\"}]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"123\",\n\t\"table\":\"4\",\n\t\"search_attribute\": \"name\",\n\t\"search_value\": \"Hot Diddy Dawg\",\n\t\"get_attributes\": [\"id\", \"name\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "Search by hash 123.4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by hash number schema/table successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql([{name: \"Hot Diddy Dawg\"}]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"123\",\n  \"table\":\"4\",\n  \"hash_values\":[ 987654321 ],\n  \"get_attributes\": [\"name\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "Delete 123.4 record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"One record is delete from number schema/table\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"1 of 1 record successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"123\",\n\t\"table\":\"4\",\n\t\"hash_values\": [987654321]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Confirm employee table has been updated with specific value."
					},
					"response": []
				},
				{
					"name": "search by conditions - equals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns two rows\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect([1,2].includes(row.id)).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"equals\",\n\t\t\"search_value\": 5\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - contains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 6 rows with Denver in location\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(6);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.location.includes('Denver')).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"location\",\n\t\t\"search_type\": \"contains\",\n\t\t\"search_value\": \"Denver\"\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 6 rows with location that start with Denver\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(6);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.location.startsWith('Denver')).to.equal(true);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"location\",\n\t\t\"search_type\": \"starts_with\",\n\t\t\"search_value\": \"Denver\"\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - ends_with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 4 rows with dog names ending w/ 'y'\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(4);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect([...row.dog_name].pop()).to.equal('y');",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"dog_name\",\n\t\t\"search_type\": \"ends_with\",\n\t\t\"search_value\": \"y\"\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - greater_than",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 6 rows with age greater than 4\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(6);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age > 4).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"greater_than\",\n\t\t\"search_value\": 4\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - greater_than_equal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 8 rows with age greater than or equal to 4\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(8);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age >= 4).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"greater_than_equal\",\n\t\t\"search_value\": 4\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - less_than",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 2 rows with age less than 4\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age < 4).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"less_than\",\n\t\t\"search_value\": 4\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - less_than_equal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 4 rows with age less than or equal to 4\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(4);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age <= 4).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"less_than_equal\",\n\t\t\"search_value\": 4\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - between",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 5 rows with age between 2 & 5\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(5);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age <= 5 && row.age >= 2).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"between\",\n\t\t\"search_value\": [2,5]\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - between using same value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 2 rows with age equal to 5\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age).to.equal(5);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"between\",\n\t\t\"search_value\": [5,5]\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - between w/ alpha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 7 rows with group A or B\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect([\"A\", \"B\"].includes(row.group)).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"group\",\n\t\t\"search_type\": \"between\",\n\t\t\"search_value\": [\"A\", \"B\"]\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - equals & equals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 2 rows group A and age equal to 5\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age === 5 && row.group === \"A\").to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"*\"\n\t],\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"equals\",\n\t\t\t\"search_value\": \"A\"\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"age\",\n\t\t\t\"search_type\": \"equals\",\n\t\t\t\"search_value\": 5\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - equals || equals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 7 rows with group A or B\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(7);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect([\"A\", \"B\"].includes(row.group)).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"*\"\n\t],\n\t\"operator\": \"OR\",\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"equals\",\n\t\t\t\"search_value\": \"A\"\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"equals\",\n\t\t\t\"search_value\": \"B\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - equals & contains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 2 rows group B and CO in location\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.group).to.equal(\"B\");",
									"\t\tpm.expect(row.location.includes('CO')).to.be.true; ",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"location\",\n\t\t\"search_type\": \"contains\",\n\t\t\"search_value\": \"CO\"\n\t},\n\t{\n\t\t\"search_attribute\": \"group\",\n\t\t\"search_type\": \"equals\",\n\t\t\"search_value\": \"B\"\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - equals & ends_with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 2 rows group B and CO in location\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.group).to.equal(\"B\");",
									"\t\tpm.expect(row.location.split(', ')[1]).to.equal('CO'); ",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"location\",\n\t\t\"search_type\": \"ends_with\",\n\t\t\"search_value\": \"CO\"\n\t},\n\t{\n\t\t\"search_attribute\": \"group\",\n\t\t\"search_type\": \"equals\",\n\t\t\"search_value\": \"B\"\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - greater_than_equal & starts_with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 3 with Denver in location and age >= 5\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age).to.be.gte(5);",
									"\t\tpm.expect(row.location.split(',')[0]).to.equal('Denver'); ",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"location\",\n\t\t\"search_type\": \"starts_with\",\n\t\t\"search_value\": \"Denver\"\n\t},\n\t{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"greater_than_equal\",\n\t\t\"search_value\": 5\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - less_than_equal ||  greater_than",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 8 with age <= 4 or > 5\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(8);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.age <=4 || row.age > 5).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"operator\": \"OR\",\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"less_than_equal\",\n\t\t\"search_value\": 4\n\t},\n\t{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"greater_than\",\n\t\t\"search_value\": 5\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - contains || contains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 10 with NC or CO in location\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(10);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect(row.location.includes('CO') || row.location.includes('NC')).to.be.true;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"*\"\n\t],\n\t\"operator\": \"OR\",\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"contains\",\n\t\t\t\"search_value\": \"NC\"\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"contains\",\n\t\t\t\"search_value\": \"CO\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - contains & between",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 6 sorted rows with Denver in location and in group A-C\", function () {",
									"    const expected_hash_order = [1,2,8,5,7,11];",
									"\tconst jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(6);",
									"\tjsonData.forEach((row, i) => {",
									"\t\tpm.expect([\"A\", \"B\", \"C\"].includes(row.group)).to.be.true;",
									"\t\tpm.expect(row.location.split(',')[0]).to.equal('Denver');",
									"\t\tpm.expect(row.id).to.equal(expected_hash_order[i]);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"id\", \"age\", \"group\", \"location\"\n\t],\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"between\",\n\t\t\t\"search_value\": [\n\t\t\t\t\"A\",\n\t\t\t\t\"C\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"contains\",\n\t\t\t\"search_value\": \"Denver\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with 'AND' between",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 6 sorted rows with Denver in location and in group A-C\", function () {",
									"    const expected_hash_order = [1,2,5,7,8,11];",
									"\tconst jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(6);",
									"\tjsonData.forEach((row, i) => {",
									"\t\tpm.expect([\"A\", \"B\", \"C\"].includes(row.group)).to.be.true;",
									"\t\tpm.expect(row.location.split(',')[0]).to.equal('Denver');",
									"\t\tpm.expect(row.id).to.equal(expected_hash_order[i]);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\"sort\":{\"attribute\":\"id\"},\n\t\"get_attributes\": [\n\t\t\"id\", \"age\", \"location\", \"group\"\n\t],\n\t\"operator\": \"AND\",\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"between\",\n\t\t\t\"search_value\": [\n\t\t\t\t\"A\",\n\t\t\t\t\"C\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"starts_with\",\n\t\t\t\"search_value\": \"Denver\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with & between w/ offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 5 sorted rows with Denver in location and in group A-C\", function () {",
									"    const expected_hash_order = [2,5,7,8,11];",
									"\tconst jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(5);",
									"\tjsonData.forEach((row, i) => {",
									"\t\tpm.expect([\"A\", \"B\", \"C\"].includes(row.group)).to.be.true;",
									"\t\tpm.expect(row.location.split(',')[0]).to.equal('Denver');",
									"\t\tpm.expect(row.id).to.equal(expected_hash_order[i]);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\"sort\":{\"attribute\":\"id\"},\n\t\"get_attributes\": [\n\t\t\"id\", \"age\", \"location\", \"group\"\n\t],\n\t\"offset\": 1,\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"between\",\n\t\t\t\"search_value\": [\n\t\t\t\t\"A\",\n\t\t\t\t\"C\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"starts_with\",\n\t\t\t\"search_value\": \"Denver\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with & between limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 4 sorted rows with Denver in location and in group A-C\", function () {",
									"    const expected_hash_order = [1,2,5,7];",
									"\tconst jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(4);",
									"\tjsonData.forEach((row, i) => {",
									"\t\tpm.expect([\"A\", \"B\", \"C\"].includes(row.group)).to.be.true;",
									"\t\tpm.expect(row.location.split(',')[0]).to.equal('Denver');",
									"\t\tpm.expect(row.id).to.equal(expected_hash_order[i]);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\"sort\":{\"attribute\":\"id\"},\n\t\"get_attributes\": [\n\t\t\"id\", \"age\", \"location\", \"group\"\n\t],\n\t\"limit\": 4,\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"between\",\n\t\t\t\"search_value\": [\n\t\t\t\t\"A\",\n\t\t\t\t\"C\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"starts_with\",\n\t\t\t\"search_value\": \"Denver\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with & between offset, limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 3 sorted rows with Denver in location and in group A-C\", function () {",
									"    const expected_hash_order = [2,5,7];",
									"\tconst jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(expected_hash_order.length);",
									"\tjsonData.forEach((row, i) => {",
									"\t\tpm.expect([\"A\", \"B\", \"C\"].includes(row.group)).to.be.true;",
									"\t\tpm.expect(row.location.split(',')[0]).to.equal('Denver');",
									"\t\tpm.expect(row.id).to.equal(expected_hash_order[i]);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\"sort\":{\"attribute\":\"id\"},\n\t\"get_attributes\": [\n\t\t\"id\", \"age\", \"location\", \"group\"\n\t],\n\t\"offset\": 1,\n\t\"limit\": 3,\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"between\",\n\t\t\t\"search_value\": [\n\t\t\t\t\"A\",\n\t\t\t\t\"C\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"starts_with\",\n\t\t\t\"search_value\": \"Denver\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with condition, offset, limit of 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 3 sorted rows with Denver in location and in group A-C\", function () {",
									"    const expected_hash_order = [11,1];",
									"\tconst jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(expected_hash_order.length);",
									"\tjsonData.forEach((row, i) => {",
									"\t\tpm.expect(row.location.split(',')[0]).to.equal('Denver');",
									"\t\tpm.expect(row.id).to.equal(expected_hash_order[i]);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"id\", \"age\", \"location\", \"group\"\n\t],\n\t\"offset\": 3,\n\t\"limit\": 2,\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"starts_with\",\n\t\t\t\"search_value\": \"Denver\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with condition, offset, limit of 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 3 sorted rows with location that starts with Denver\", function () {",
									"    const expected_hash_order = [11,1,8];",
									"\tconst jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"\tjsonData.forEach((row, i) => {",
									"\t\tpm.expect(row.location.split(',')[0]).to.equal('Denver');",
									"\t\tpm.expect(row.id).to.equal(expected_hash_order[i]);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"id\", \"age\", \"location\", \"group\"\n\t],\n\t\"offset\": 3,\n\t\"limit\": 10,\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"starts_with\",\n\t\t\t\"search_value\": \"Denver\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - ends_with condition, offset, limit of 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 3 sorted rows with a location that ends with CO\", function () {",
									"    const expected_hash_order = [7,9,10];",
									"\tconst jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(expected_hash_order.length);",
									"\tjsonData.forEach((row, i) => {",
									"\t\tpm.expect(row.location.split(', ')[1]).to.equal('CO');",
									"\t\tpm.expect(row.id).to.equal(expected_hash_order[i]);",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"id\", \"age\", \"location\", \"group\"\n\t],\n\t\"offset\": 3,\n\t\"limit\": 3,\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"ends_with\",\n\t\t\t\"search_value\": \"CO\"\n\t\t}\n\t],\n\"sort\":{\"attribute\":\"id\"}\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. NoSQL Role Testing",
			"item": [
				{
					"name": "Bulk Load Perms Tests",
					"item": [
						{
							"name": "Add non-SU bulk_load_role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"add_role\",\n    \"role\": \"bulk_load_role\",\n    \"permission\": {\n        \"super_user\": false,\n        \"{{schema}}\": {\n            \"tables\": {\n                \"{{supp_tb}}\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"companyname\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        }\n                    ]\n                },\n                \"{{csv_tb}}\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"name\",\n                            \"read\": false,\n                            \"insert\": true,\n                            \"update\": false\n                        },\n                        {\n                            \"attribute_name\": \"section\",\n                            \"read\": true,\n                            \"insert\": false,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"image\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        }\n                    ]\n                }\n            }\n        },\n        \"dev\": {\n            \"tables\": {\n                \"books\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"books_count\",\n                            \"read\": true,\n                            \"insert\": false,\n                            \"update\": true\n                        }\n                    ]\n                },\n                \"dog\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"dog_name\",\n                            \"read\": false,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"age\",\n                            \"read\": true,\n                            \"insert\": false,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"adorable\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": false\n                        },\n                        {\n                            \"attribute_name\": \"owner_id\",\n                            \"read\": true,\n                            \"insert\": false,\n                            \"update\": false\n                        }\n                    ]\n                },\n                \"owner\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"name\",\n                            \"read\": true,\n                            \"insert\": false,\n                            \"update\": false\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add user with new bulk_load_role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"add_user\",\n    \"role\": \"bulk_load_role\",\n    \"username\": \"bulk_load_user\",\n    \"password\": \"{{password}}\",\n    \"active\": true\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "CSV Data Load  update to table w/ new attr & restricted attrs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = JSON.parse(responseBody);",
											"",
											"let id_index = responseData.message.indexOf('id ');",
											"let parsedId = responseData.message.substr(id_index + 3, responseData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"action\": \"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"data\":\"supplierid,companyname, rando\\n19,The Chum Bucket, Another attr value\\n\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "update a table with csv data uplaod"
							},
							"response": []
						},
						{
							"name": "Check Data CSV job - update - perms error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            const msg = jsonData[0].message;",
											"            ",
											"            pm.expect(status).to.eql('ERROR');",
											"            pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"job_id\"));",
											"            pm.expect(msg.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"",
											"            pm.expect(msg.unauthorized_access.length).to.eql(0);",
											"            pm.expect(msg.invalid_schema_items.length).to.eql(1);",
											"            pm.expect(msg.invalid_schema_items[0]).to.eql(\"Attribute ' rando' does not exist on 'northnwd.suppliers'\");",
											"",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            ",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check Data CSV job - update - perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Data CSV job - update - perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV Data Load - upsert - to table w/ some restricted attrs & new attr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = JSON.parse(responseBody);",
											"",
											"let id_index = responseData.message.indexOf('id ');",
											"let parsedId = responseData.message.substr(id_index + 3, responseData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"action\": \"upsert\",\n  \"schema\":\"dev\",\n  \"table\":\"dog\",\n  \"data\":\"id,dog_name,adorable,age,rando\\n19,doggy,true,22,Another attr value\\n\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "update a table with csv data uplaod"
							},
							"response": []
						},
						{
							"name": "Check Data CSV job - upsert - perms error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            const msg = jsonData[0].message;",
											"            ",
											"            pm.expect(status).to.eql('ERROR');",
											"            pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"job_id\"));",
											"            pm.expect(msg.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"",
											"            pm.expect(msg.unauthorized_access.length).to.eql(1);",
											"            const unauth_obj = msg.unauthorized_access[0];",
											"            pm.expect(unauth_obj.schema).to.eql(\"dev\");",
											"            pm.expect(unauth_obj.table).to.eql(\"dog\");",
											"            pm.expect(unauth_obj.required_table_permissions.length).to.eql(0);",
											"            pm.expect(unauth_obj.required_attribute_permissions.length).to.eql(2);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].attribute_name).to.eql(\"adorable\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
											"",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].attribute_name).to.eql(\"age\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions[0]).to.eql(\"insert\");",
											"",
											"            pm.expect(msg.invalid_schema_items.length).to.eql(1);",
											"            pm.expect(msg.invalid_schema_items[0]).to.eql(\"Attribute 'rando' does not exist on 'dev.dog'\");",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            ",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check Data CSV job - upsert - perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Data CSV job - upsert - perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV URL Load - upsert - to table w/ restricted attrs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let id_index = jsonData.message.indexOf('id ');",
											"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"upsert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb}}\",\n  \"csv_url\":\"https://harperdb-integration-test-data.s3.us-east-2.amazonaws.com/breeds.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "CSV Data Load",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"dev\",\n  \"action\": \"insert\",\n  \"table\":\"breed\",\n  \"data\":\"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}"
										},
										"url": {
											"raw": "{{HDB_ENDPOINT}}",
											"host": [
												"{{HDB_ENDPOINT}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "71",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Mon, 09 Jul 2018 20:07:14 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"47-FY/m86hgW/48m7lLK1CpL02xrIw\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check URL CSV job  - upsert -  perms error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            const msg = jsonData[0].message;",
											"            ",
											"            pm.expect(status).to.eql('ERROR');",
											"            pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"job_id\"));",
											"            pm.expect(msg.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"",
											"            pm.expect(msg.unauthorized_access.length).to.eql(1);",
											"            const unauth_obj = msg.unauthorized_access[0];",
											"            pm.expect(unauth_obj.schema).to.eql(\"northnwd\");",
											"            pm.expect(unauth_obj.table).to.eql(\"url_csv_data\");",
											"            pm.expect(unauth_obj.required_table_permissions.length).to.eql(0);",
											"            pm.expect(unauth_obj.required_attribute_permissions.length).to.eql(2);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].attribute_name).to.eql(\"name\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
											"",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].attribute_name).to.eql(\"section\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions[0]).to.eql(\"insert\");",
											"",
											"            pm.expect(msg.invalid_schema_items.length).to.eql(1);",
											"            pm.expect(msg.invalid_schema_items[0]).to.eql(\"Attribute 'country' does not exist on 'northnwd.url_csv_data'\");",
											"",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check URL CSV job  - upsert -  perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check URL CSV job  - upsert -  perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV URL Load - update - to table w/ restricted attrs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let id_index = jsonData.message.indexOf('id ');",
											"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{csv_tb}}\",\n  \"csv_url\":\"https://harperdb-integration-test-data.s3.us-east-2.amazonaws.com/breeds.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": [
								{
									"name": "CSV Data Load",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"dev\",\n  \"action\": \"insert\",\n  \"table\":\"breed\",\n  \"data\":\"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}"
										},
										"url": {
											"raw": "{{HDB_ENDPOINT}}",
											"host": [
												"{{HDB_ENDPOINT}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "71",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Mon, 09 Jul 2018 20:07:14 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"47-FY/m86hgW/48m7lLK1CpL02xrIw\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check URL CSV job  - update -  perms error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            const msg = jsonData[0].message;",
											"            ",
											"            pm.expect(status).to.eql('ERROR');",
											"            pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"job_id\"));",
											"            pm.expect(msg.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"",
											"            pm.expect(msg.unauthorized_access.length).to.eql(1);",
											"            const unauth_obj = msg.unauthorized_access[0];",
											"            pm.expect(unauth_obj.schema).to.eql(\"northnwd\");",
											"            pm.expect(unauth_obj.table).to.eql(\"url_csv_data\");",
											"            pm.expect(unauth_obj.required_table_permissions.length).to.eql(0);",
											"            pm.expect(unauth_obj.required_attribute_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].attribute_name).to.eql(\"name\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions[0]).to.eql(\"update\");",
											"",
											"            pm.expect(msg.invalid_schema_items.length).to.eql(1);",
											"            pm.expect(msg.invalid_schema_items[0]).to.eql(\"Attribute 'country' does not exist on 'northnwd.url_csv_data'\");",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check URL CSV job  - update -  perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check URL CSV job  - update -  perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV File Load to table w/ restricted attrs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let id_index = jsonData.message.indexOf('id ');",
											"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"dev\",\n  \"table\":\"books\",\n  \"file_path\":\"{{files_location}}Books.csv\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Import data csv files into orders table"
							},
							"response": []
						},
						{
							"name": "Check File CSV job perms error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            const msg = jsonData[0].message;",
											"            ",
											"            pm.expect(status).to.eql('ERROR');",
											"            pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"job_id\"));",
											"            pm.expect(msg.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"",
											"            pm.expect(msg.unauthorized_access.length).to.eql(1);",
											"            const unauth_obj = msg.unauthorized_access[0];",
											"            pm.expect(unauth_obj.schema).to.eql(\"dev\");",
											"            pm.expect(unauth_obj.table).to.eql(\"books\");",
											"            pm.expect(unauth_obj.required_table_permissions.length).to.eql(0);",
											"            pm.expect(unauth_obj.required_attribute_permissions.length).to.eql(2);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].attribute_name).to.eql(\"id\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
											"",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].attribute_name).to.eql(\"books_count\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions[0]).to.eql(\"insert\");",
											"",
											"            pm.expect(msg.invalid_schema_items.length).to.eql(17);",
											"            const expected_invalid_items = [",
											"                \"Attribute 'authors' does not exist on 'dev.books'\",",
											"                \"Attribute 'original_publication_year' does not exist on 'dev.books'\",",
											"                \"Attribute 'original_title' does not exist on 'dev.books'\",",
											"                \"Attribute 'title' does not exist on 'dev.books'\",",
											"                \"Attribute 'language_code' does not exist on 'dev.books'\",",
											"                \"Attribute 'average_rating' does not exist on 'dev.books'\",",
											"                \"Attribute 'ratings_count' does not exist on 'dev.books'\",",
											"                \"Attribute 'work_ratings_count' does not exist on 'dev.books'\",",
											"                \"Attribute 'work_text_reviews_count' does not exist on 'dev.books'\",",
											"                \"Attribute 'ratings_1' does not exist on 'dev.books'\",",
											"                \"Attribute 'ratings_2' does not exist on 'dev.books'\",",
											"                \"Attribute 'ratings_3' does not exist on 'dev.books'\",",
											"                \"Attribute 'ratings_4' does not exist on 'dev.books'\",",
											"                \"Attribute 'ratings_5' does not exist on 'dev.books'\",",
											"                \"Attribute 'nytimes_best_seller' does not exist on 'dev.books'\",",
											"                \"Attribute 'image_url' does not exist on 'dev.books'\",",
											"                \"Attribute 'small_image_url' does not exist on 'dev.books'\"",
											"            ];",
											"            msg.invalid_schema_items.forEach(item => {",
											"                pm.expect(expected_invalid_items.includes(item)).to.be.true;",
											"            });",
											"",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check File CSV job perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check File CSV job perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import CSV from S3 to table w/ restricted attrs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let id_index = jsonData.message.indexOf('id ');",
											"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/dogs.csv\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 CSV job perms error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            const msg = jsonData[0].message;",
											"            ",
											"            pm.expect(status).to.eql('ERROR');",
											"            pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"job_id\"));",
											"            pm.expect(msg.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"",
											"            pm.expect(msg.unauthorized_access.length).to.eql(1);",
											"            const unauth_obj = msg.unauthorized_access[0];",
											"            pm.expect(unauth_obj.schema).to.eql(\"dev\");",
											"            pm.expect(unauth_obj.table).to.eql(\"dog\");",
											"            pm.expect(unauth_obj.required_table_permissions.length).to.eql(0);",
											"            pm.expect(unauth_obj.required_attribute_permissions.length).to.eql(2);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].attribute_name).to.eql(\"owner_id\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
											"",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].attribute_name).to.eql(\"age\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions[0]).to.eql(\"insert\");",
											"",
											"            pm.expect(msg.invalid_schema_items.length).to.eql(2);",
											"            const expected_invalid_items = [",
											"                \"Attribute 'breed_id' does not exist on 'dev.dog'\",",
											"                \"Attribute 'weight_lbs' does not exist on 'dev.dog'\"",
											"            ];",
											"            msg.invalid_schema_items.forEach(item => {",
											"                pm.expect(expected_invalid_items.includes(item)).to.be.true;",
											"            });",
											"",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 CSV job perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 CSV job perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import JSON from S3 - upsert - to table w/ restricted attrs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let id_index = jsonData.message.indexOf('id ');",
											"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"upsert\",\n\t\"schema\":\"dev\",\n\t\"table\":\"owner\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/owners_update.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 JSON upsert perms error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"",
											"    let status = jsonData[0].status;",
											"",
											"    switch (status) {",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            const msg = jsonData[0].message;",
											"",
											"            pm.expect(status).to.eql('ERROR');",
											"            pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"job_id\"));",
											"            pm.expect(msg.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"",
											"            pm.expect(msg.unauthorized_access.length).to.eql(1);",
											"            const unauth_obj = msg.unauthorized_access[0];",
											"            pm.expect(unauth_obj.schema).to.eql(\"dev\");",
											"            pm.expect(unauth_obj.table).to.eql(\"owner\");",
											"            pm.expect(unauth_obj.required_table_permissions.length).to.eql(0);",
											"            pm.expect(unauth_obj.required_attribute_permissions.length).to.eql(2);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].attribute_name).to.eql(\"id\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions.length).to.eql(2);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions[1]).to.eql(\"update\");",
											"",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].attribute_name).to.eql(\"name\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions.length).to.eql(2);",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions[0]).to.eql(\"insert\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions[1]).to.eql(\"update\");",
											"",
											"            pm.expect(msg.invalid_schema_items.length).to.eql(0);",
											"",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 JSON upsert perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 JSON upsert perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import JSON from S3 - insert - to table w/ restricted attrs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let id_index = jsonData.message.indexOf('id ');",
											"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"dev\",\n\t\"table\":\"owner\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/owners_update.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 JSON insert perms error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            const msg = jsonData[0].message;",
											"            ",
											"            pm.expect(status).to.eql('ERROR');",
											"            pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"job_id\"));",
											"            pm.expect(msg.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"",
											"            pm.expect(msg.unauthorized_access.length).to.eql(1);",
											"            const unauth_obj = msg.unauthorized_access[0];",
											"            pm.expect(unauth_obj.schema).to.eql(\"dev\");",
											"            pm.expect(unauth_obj.table).to.eql(\"owner\");",
											"            pm.expect(unauth_obj.required_table_permissions.length).to.eql(0);",
											"            pm.expect(unauth_obj.required_attribute_permissions.length).to.eql(2);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].attribute_name).to.eql(\"id\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[0].required_permissions[0]).to.eql(\"insert\");",
											"",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].attribute_name).to.eql(\"name\");",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions.length).to.eql(1);",
											"            pm.expect(unauth_obj.required_attribute_permissions[1].required_permissions[0]).to.eql(\"insert\");",
											"",
											"            pm.expect(msg.invalid_schema_items.length).to.eql(0);",
											"",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            pm.expect(status).to.not.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 JSON insert perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 JSON insert perms error');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Alter non-SU bulk_load_role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"alter_role\",\n    \"id\": \"{{role_id}}\",\n    \"role\": \"bulk_load_role\",\n    \"permission\": {\n        \"super_user\": false,\n        \"{{schema}}\": {\n            \"tables\": {\n                \"{{supp_tb}}\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": []\n                }\n            }\n        },\n        \"dev\": {\n            \"tables\": {\n                \"dog\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"dog_name\",\n                            \"read\": false,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"age\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"adorable\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"owner_id\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"weight_lbs\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"breed_id\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"__updatedtime__\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": false\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "CSV Data Load  upsert to table w/ full perms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = JSON.parse(responseBody);",
											"",
											"let id_index = responseData.message.indexOf('id ');",
											"let parsedId = responseData.message.substr(id_index + 3, responseData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 400);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"action\": \"upsert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"data\":\"companyname, new_attr\\nThe Chum Bucket, Another attr value\\n\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "update a table with csv data uplaod"
							},
							"response": []
						},
						{
							"name": "Check Data CSV upsert job completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"",
											"            pm.expect(jsonData[0].message).to.contain(\"successfully loaded 1 of 1 records\");",
											"            pm.expect(status).to.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check Data CSV upsert job completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Data CSV upsert job completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check row from Data CSV job was upserted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test correct new row count on table\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].row_count).to.eql(30);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\": \"SELECT count(*) AS row_count FROM {{schema}}.{{supp_tb}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import CSV from S3 to table w/ full attr perms - update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let id_index = jsonData.message.indexOf('id ');",
											"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
											"pm.environment.set(\"job_id\", parsedId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "bulk_load_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"update\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/dogs.csv\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 CSV update job completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            pm.expect(jsonData[0].message).to.contain(\"successfully loaded 9 of 12 records\");",
											"            pm.expect(status).to.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 CSV update job completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 CSV update job completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check rows from S3 update were updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test all rows on table have new __updatedtime__ value\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(row => {",
											"        pm.expect(row.__updatedtime__).to.be.greaterThan(row.__createdtime__);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\": \"SELECT * FROM dev.dog\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop bulk_load_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message\", function () {",
											"    pm.response.to.have.jsonBody('message');",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain('successfully deleted');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQ="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"bulk_load_user\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
							},
							"response": []
						},
						{
							"name": "Drop bulk_load_user role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message\", function () {",
											"    pm.response.to.have.jsonBody('message');",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain('successfully deleted');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQ="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
							},
							"response": []
						}
					]
				},
				{
					"name": "Authentication - bad username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Login failed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bad_name",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"auth\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Authentication - bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Login failed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "badPassword",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"auth\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "NoSQL Add non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"add_role\",\n\t\"role\": \"developer_test_5\",\n\t\"permission\": {\n\t\t\"super_user\": false,\n\t\t\"northnwd\": {\n\t\t\t\"tables\": {\n\t\t\t\t\"customers\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\"delete\": true,\n\t\t\t\t\t\"attribute_permissions\": []\n\t\t\t\t},\n\t\t\t\t\"suppliers\": {\n\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": []\n\t\t\t\t},\n\t\t\t\t\"region\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"regiondescription\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\t\t\"delete\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"territories\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"territorydescription\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\t\t\"delete\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"categories\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"description\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\t\t\"delete\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"shippers\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\"delete\": true,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"companyname\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\t\t\"delete\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"dev\": {\n\t\t\t\"tables\": {\n\t\t\t\t\"dog\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\"delete\": true,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"__createdtime__\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"__updatedtime__\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"age\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"dog_name\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"adorable\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"owner_id\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"breed\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\"delete\": true,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"__createdtime__\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"__updatedtime__\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"dog_conditions\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"age\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"group\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"breed_id\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"dog_name\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"id\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"location\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Add User with new Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"add_user\",\n\t\"role\": \"developer_test_5\",\n\t\"username\": \"test_user\",\n\t\"password\": \"{{password}}\",\n\t\"active\": true\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL try to get user info as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct op restricted to SU error msg in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'listUsersExternal' is restricted to 'super_user' roles\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"list_users\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for getting user info.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'user_info'</li>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read suppliers table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{supp_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{supp_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"{{supp_id}}\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read FULLY restricted suppliers table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'northnwd.suppliers' does not exist\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{supp_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{supp_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"{{supp_id}}\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read region table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{regi_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{regi_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{regi_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{regi_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into region table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"records\": [\n    {\n      \"{{regi_id}}\":16,\n      \"regiondescription\":\"test description\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into insert restricted region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('insert');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('northnwd');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('region');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"records\": [\n    {\n      \"{{regi_id}}\":17,\n      \"regiondescription\":\"test description\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert FULLY restricted attribute in categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'categoryname' does not exist on 'northnwd.categories'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\":9,\n      \"categoryname\":\"test name\",\n      \"description\":\"test description\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into territories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"records\": [\n    {\n      \"{{terr_id}}\":123456,\n      \"territorydescription\":\"test description\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert into territories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"records\": [\n    {\n      \"{{terr_id}}\":1234567,\n      \"territorydescription\":\"test description\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update territories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"records\": [\n    {\n      \"{{terr_id}}\":123456,\n      \"territorydescription\":\"test description updated\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update restricted territories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('update');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('northnwd');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('territories');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{terr_tb}}\",\n  \"records\": [\n    {\n      \"{{terr_id}}\":1234567,\n      \"territorydescription\":\"test description updated\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\":1,\n      \"description\":\"test description updated\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update categories table with new attr as test_user - expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Update validation error response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'active' does not exist on 'northnwd.categories'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\":1,\n      \"description\":\"test description updated\",\n      \"active\": true\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update FULLY restricted attrs in categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'categoryname' does not exist on 'northnwd.categories'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'picture' does not exist on 'northnwd.categories'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\": 1,\n      \"categoryname\": \"test name\",\n      \"description\":\"test description updated\",\n      \"picture\": \"test picture\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Try to delete from categories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"delete\",\n  \"table\":\"{{cate_tb}}\",\n  \"schema\":\"{{schema}}\",\n  \"hash_values\":[1]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to delete from restricted categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('delete');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('northnwd');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('categories');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"delete\",\n  \"table\":\"{{cate_tb}}\",\n  \"schema\":\"{{schema}}\",\n  \"hash_values\":[2]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read shippers table FULLY restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'shipperid' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'companyname' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{ship_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{ship_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"companyname\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to read ALL shippers table FULLY restricted attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'shipperid' does not exist on 'northnwd.shippers'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"search_by_value\",\n\"table\":\"{{ship_tb}}\",\n\"schema\":\"{{schema}}\",\n\"hash_attribute\":\"id\",\n\"search_attribute\":\"{{ship_id}}\",\n\"search_value\":\"*\",\n\"get_attributes\":[\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update shippers table FULLY restricted attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'shipperid' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'companyname' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ship_tb}}\",\n  \"records\": [{\n    \"{{ship_id}}\": 1,\n    \"companyname\": \"bad update name\"\n  }]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert shippers table restricted attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(3);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'shipperid' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'companyname' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'phone' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{ship_tb}}\",\n  \"records\": [{\n      \"{{ship_id}}\": 1,\n      \"companyname\": \"bad update name\",\n      \"phone\": \"(503) 555-9831\"\n    }]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert to categories table with FULLY restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'categoryname' does not exist on 'northnwd.categories'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [{\n      \"{{cate_id}}\": 4,\n      \"categoryname\": \"bad update name\"\n    }]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert categories table unrestricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [{\n      \"{{cate_id}}\": 1,\n      \"description\": \"Cheese and cheese and cheese\"\n    }]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update categories table unrestricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"update\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [{\n      \"{{cate_id}}\": 2,\n      \"description\": \"Meats and cheeses\"\n    }]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to insert to categories table FULLY restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'categoryname' does not exist on 'northnwd.categories'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [{\n      \"{{cate_id}}\": 1,\n      \"categoryname\": \"Stuff and things\"\n    }]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL create_schema - non-SU expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct op restricted to SU error msg in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'createSchema' is restricted to 'super_user' roles\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"create_schema\",\n    \"schema\":\"test-schema\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL create_schema - SU expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"create_schema\",\n    \"schema\":\"test-schema\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL create_table - non-SU expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct op restricted to SU error msg in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'createTable' is restricted to 'super_user' roles\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"create_table\",\n    \"schema\":\"test-schema\",\n    \"table\":\"test-table\",\n    \"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL create_table - SU expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 400);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"create_table\",\n    \"schema\":\"test-schema\",\n    \"table\":\"test-table\",\n    \"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Insert record to evaluate dropAttribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"insert\",\n  \"schema\":\"test-schema\",\n  \"table\":\"test-table\",\n  \"records\": [{\n      \"id\": 1,\n      \"test_attribute\": \"Stuff and things\"\n    }]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop_attribute - non-SU expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct op restricted to SU error msg in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'dropAttribute' is restricted to 'super_user' roles\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"test-schema\",\n\t\"table\":\"test-table\",\n\t\"attribute\":\"test_attribute\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop_attribute - SU expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"test-schema\",\n\t\"table\":\"test-table\",\n\t\"attribute\":\"test_attribute\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop_table - non-SU expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct op restricted to SU error msg in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'dropTable' is restricted to 'super_user' roles\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"test-schema\",\n\t\"table\":\"test-table\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop_table - SU expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"test-schema\",\n\t\"table\":\"test-table\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop_schema - non-SU expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct op restricted to SU error msg in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'dropSchema' is restricted to 'super_user' roles\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"test-schema\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop_schema - SU expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"test-schema\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update timestamp value on dog table as test_user - expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"Internal timestamp attributes - '__createdtime_' and '__updatedtime__' - cannot be inserted to or updated by HDB users.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"dev\",\n    \"table\": \"dog\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"__createdtime__\": \"Stuff and things\"\n        },\n        {\n            \"id\": 2,\n            \"__updatedtime__\": \"Stuff and other things\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update attr w/ timestamp value in update row as SU  - expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Correct update message included\", function () {",
									"    pm.expect(jsonData.message).to.eql(\"updated 2 of 2 records\");",
									"});",
									"",
									"pm.test(\"Hashes included in 'updated_hashes' array\", function () {",
									"    pm.expect(jsonData.update_hashes.length).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"dev\",\n    \"table\": \"dog\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"adorable\": false,\n            \"__createdtime__\": \"Stuff and things\"\n        },\n        {\n            \"id\": 2,\n            \"adorable\": false,\n            \"__updatedtime__\": \"Stuff and other things\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Try to update timestamp value on dog table as SU - expect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Correct update message included\", function () {",
									"    pm.expect(jsonData.message).to.eql(\"updated 2 of 2 records\");",
									"});",
									"",
									"pm.test(\"Hashes included in 'updated_hashes' array\", function () {",
									"    pm.expect(jsonData.update_hashes.length).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"dev\",\n    \"table\": \"dog\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"__createdtime__\": \"Stuff and things\"\n        },\n        {\n            \"id\": 2,\n            \"__updatedtime__\": \"Stuff and other things\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL - Upsert - table perms true/no attribute perms set - expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Upsert validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.upserted_hashes.length).to.eql(2);",
									"    pm.expect(jsonData.upserted_hashes.includes('FURIB')).to.be.true;",
									"    pm.expect(jsonData.skipped_hashes).to.eql(undefined);",
									"    pm.expect(jsonData.message).to.eql(\"upserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"upsert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"records\": [\n    {\n      \"{{cust_id}}\": \"FURIB\",\n      \"region\":\"Durkastan\",\n      \"contactmame\": \"Hans Blix\"\n    },\n    {\n      \"region\":\"Durkastan\",\n      \"contactmame\": \"Hans Blix\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL - Upsert - table perms true/attr perms true - expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Upsert validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.upserted_hashes.length).to.eql(2);",
									"    pm.expect(jsonData.upserted_hashes.includes(8)).to.be.true;",
									"    pm.expect(jsonData.skipped_hashes).to.eql(undefined);",
									"    pm.expect(jsonData.message).to.eql(\"upserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"upsert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\": 8,\n      \"description\":\"Seaweed and fishies\"\n    },\n    {\n      \"description\":\"Junk food\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL - Upsert - table perms true/no attr perms and new attribute included - expect success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Upsert validate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.upserted_hashes.length).to.eql(2);",
									"    pm.expect(jsonData.upserted_hashes.includes('FURIB')).to.be.true;",
									"    pm.expect(jsonData.skipped_hashes).to.eql(undefined);",
									"    pm.expect(jsonData.message).to.eql(\"upserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"upsert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"records\": [\n    {\n      \"{{cust_id}}\": \"FURIB\",\n      \"region\":\"Durkastan\",\n      \"contactmame\": \"Hans Blix\",\n      \"active\": false\n    },\n    {\n      \"region\":\"Durkastan\",\n      \"contactmame\": \"Sam Johnson\",\n      \"active\": true\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL - Upsert - table perms true/false  - expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Validate - upsert error response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql(\"northnwd\");",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql(\"territories\");",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql(\"update\");",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"{{schema}}\",\n    \"table\": \"{{terr_tb}}\",\n    \"records\": [\n        {\n            \"regionid\": 1,\n            \"territorydescription\": \"Westboro\",\n            \"territoryid\": 1581\n        },\n        {\n            \"regionid\": 55,\n            \"territorydescription\": \"Denver Metro\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL - Upsert - table perms true/attr perms true but new attribute included - expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Validate - upsert error response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'active' does not exist on 'northnwd.categories'\");",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"upsert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cate_tb}}\",\n  \"records\": [\n    {\n      \"{{cate_id}}\": 8,\n      \"description\":\"Seaweed and fishies\",\n      \"active\": true\n    },\n    {\n      \"description\":\"Junk food\",\n      \"active\": false\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL - Upsert - table perms true/some attr perms false - expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Validate - upsert error response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"    ",
									"    const expected_attr_perm_errs = {",
									"        dog_name: \"insert\",",
									"        age: \"update\"",
									"    }",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql(\"dev\");",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql(\"dog\");",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(0);",
									"    pm.expect(jsonData.unauthorized_access[0].required_attribute_permissions.length).to.eql(2);",
									"    jsonData.unauthorized_access[0].required_attribute_permissions.forEach(attr_perm_err => {",
									"        pm.expect(attr_perm_err.required_permissions[0]).to.eql(expected_attr_perm_errs[attr_perm_err.attribute_name]);    ",
									"    })",
									"    ",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'birthday' does not exist on 'dev.dog'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"dev\",\n    \"table\": \"dog\",\n    \"records\": [\n        {\n            \"adorable\": true,\n            \"dog_name\": \"Penny\",\n            \"owner_id\": 2,\n            \"age\": 5,\n            \"id\": 10\n        },\n        {\n            \"adorable\": true,\n            \"dog_name\": \"Penny\",\n            \"owner_id\": 2,\n            \"age\": 5,\n            \"id\": 2\n        },\n        {\n            \"adorable\": true,\n            \"dog_name\": \"Penny\",\n            \"owner_id\": 2,\n            \"age\": 5,\n            \"id\": 10,\n            \"birthday\": \"10/11/19\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL - Upsert - w/ null value as hash- expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Validate - upsert error response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Invalid hash value: 'null' is not a valid hash attribute value, check log for more info\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"upsert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"records\": [\n    {\n      \"{{cust_id}}\": \"null\",\n      \"region\":\"Durkastan\",\n      \"contactmame\": \"Hans Blix\",\n      \"active\": false\n    },\n    {\n      \"region\":\"Durkastan\",\n      \"contactmame\": \"Sam Johnson\",\n      \"active\": true\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL - Upsert - w/ invalid attr name - expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Validate - upsert error response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Attribute names cannot include backticks or forward slashes\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"upsert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{cust_tb}}\",\n  \"records\": [\n    {\n      \"{{cust_id}}\": \"FURIB\",\n      \"region\":\"Durkastan\",\n      \"contactmame\": \"Hans Blix\",\n      \"active/not active\": false\n    },\n    {\n      \"region\":\"Durkastan\",\n      \"contactmame\": \"Sam Johnson\",\n      \"active/not active\": false\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - equals - allowed attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns two rows with permitted attrs\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect([1,2].includes(row.id)).to.be.true;",
									"\t\tpm.expect(row.location).to.be.undefined;",
									"\t\tpm.expect(row.breed_id).to.be.undefined;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"age\",\n\t\t\"search_type\": \"equals\",\n\t\t\"search_value\": 5\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - ends_with - allowed attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"search by condition returns 4 rows with dog names ending w/ 'y' and only permitted attrs\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(4);",
									"\tjsonData.forEach(row => {",
									"\t\tpm.expect([...row.dog_name].pop()).to.equal('y');",
									"\t\tpm.expect(row.location).to.be.undefined;",
									"\t\tpm.expect(row.breed_id).to.be.undefined;",
									"\t})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"dog_name\",\n\t\t\"search_type\": \"ends_with\",\n\t\t\"search_value\": \"y\"\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - equals - restricted attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'location' does not exist on 'dev.dog_conditions'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"location\",\n\t\t\"search_type\": \"equals\",\n\t\t\"search_value\": \"Denver, CO\"\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - contains - restricted attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'location' does not exist on 'dev.dog_conditions'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [\n\t\t{\n\t\t\"search_attribute\": \"location\",\n\t\t\"search_type\": \"contains\",\n\t\t\"search_value\": \"Denver\"\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with - non-existent attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'random_attr' does not exist on 'dev.dog_conditions'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"random_attr\",\n\t\t\"search_type\": \"starts_with\",\n\t\t\"search_value\": 1\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with - unauth'd attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"unauthorized_access is NOT empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"\tpm.expect(jsonData.unauthorized_access[0].schema).to.eql(\"dev\");",
									"\tpm.expect(jsonData.unauthorized_access[0].table).to.eql(\"dog_conditions\");",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions.length).to.eql(1);",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"breed_id\");",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"*\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"breed_id\",\n\t\t\"search_type\": \"starts_with\",\n\t\t\"search_value\": 1\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with - unauth'd attrs in get/search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'location' does not exist on 'dev.dog_conditions'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is NOT empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"\tpm.expect(jsonData.unauthorized_access[0].schema).to.eql(\"dev\");",
									"\tpm.expect(jsonData.unauthorized_access[0].table).to.eql(\"dog_conditions\");",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions.length).to.eql(1);",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"breed_id\");",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"schema\":\"dev\",\n\t\"table\":\"dog_conditions\",\n\t\"get_attributes\": [\"id\", \"dog_name\", \"location\"],\n\t\"conditions\": [{\n\t\t\"search_attribute\": \"breed_id\",\n\t\t\"search_type\": \"starts_with\",\n\t\t\"search_value\": 1\n\t}]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - equals & contains - restricted attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'location' does not exist on 'dev.dog_conditions'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"*\"\n\t],\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"equals\",\n\t\t\t\"search_value\": \"A\"\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"contains\",\n\t\t\t\"search_value\": \"CO\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - starts_with & between w/ sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'location' does not exist on 'dev.dog_conditions'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"*\"\n\t],\n\t\"sort_attributes\": [\n\t\t{\n\t\t\t\"attribute\": \"age\",\n\t\t\t\"desc\": false\n\t\t},\n\t\t{\n\t\t\t\"attribute\": \"location\",\n\t\t\t\"desc\": true\n\t\t}\n\t],\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group\",\n\t\t\t\"search_type\": \"between\",\n\t\t\t\"search_value\": [\n\t\t\t\t\"A\",\n\t\t\t\t\"C\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"starts_with\",\n\t\t\t\"search_value\": \"Denver\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - 4 conditions - restricted attrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'group_id' does not exist on 'dev.dog_conditions'\");",
									"\tpm.expect(jsonData.invalid_schema_items[1]).to.eql(\"Attribute 'location' does not exist on 'dev.dog_conditions'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"*\"\n\t],\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group_id\",\n\t\t\t\"search_type\": \"between\",\n\t\t\t\"search_value\": [\n\t\t\t\t0,\n\t\t\t\t100\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"dog_name\",\n\t\t\t\"search_type\": \"ends_with\",\n\t\t\t\"search_value\": \"y\"\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"contains\",\n\t\t\t\"search_value\": \"enve\"\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"age\",\n\t\t\t\"search_type\": \"greater_than\",\n\t\t\t\"search_value\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search by conditions - 4 conditions - restricted/unauth'd attrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'group_id' does not exist on 'dev.dog_conditions'\");",
									"\tpm.expect(jsonData.invalid_schema_items[1]).to.eql(\"Attribute 'location' does not exist on 'dev.dog_conditions'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is NOT empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"\tpm.expect(jsonData.unauthorized_access[0].schema).to.eql(\"dev\");",
									"\tpm.expect(jsonData.unauthorized_access[0].table).to.eql(\"dog_conditions\");",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions.length).to.eql(1);",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].attribute_name).to.eql(\"breed_id\");",
									"\tpm.expect(jsonData.unauthorized_access[0].required_attribute_permissions[0].required_permissions[0]).to.eql(\"read\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"search_by_conditions\",\n\t\"schema\": \"dev\",\n\t\"table\": \"dog_conditions\",\n\t\"get_attributes\": [\n\t\t\"*\"\n\t],\n\t\"conditions\": [\n\t\t{\n\t\t\t\"search_attribute\": \"group_id\",\n\t\t\t\"search_type\": \"between\",\n\t\t\t\"search_value\": [\n\t\t\t\t0,\n\t\t\t\t100\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"breed_id\",\n\t\t\t\"search_type\": \"equals\",\n\t\t\t\"search_value\": 5\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"age\",\n\t\t\t\"search_type\": \"less_than\",\n\t\t\t\"search_value\": 100\n\t\t},\n\t\t{\n\t\t\t\"search_attribute\": \"location\",\n\t\t\t\"search_type\": \"contains\",\n\t\t\t\"search_value\": \"enver,\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Alter non-SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// responseData = JSON.parse(responseBody);",
									"// postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"alter_role\",\n    \"id\": \"{{role_id}}\",\n    \"role\": \"developer_test_5\",\n    \"permission\": {\n        \"super_user\": false,\n        \"northnwd\": {\n            \"tables\": {\n                \"customers\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": []\n                },\n                \"suppliers\": {\n                    \"read\": false,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": []\n                },\n                \"region\": {\n                    \"read\": true,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"regiondescription\",\n                            \"read\": true,\n                            \"insert\": false,\n                            \"update\": false,\n                            \"delete\": false\n                        }\n                    ]\n                },\n                \"territories\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"territorydescription\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": false,\n                            \"delete\": false\n                        }\n                    ]\n                },\n                \"categories\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"description\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true,\n                            \"delete\": false\n                        }\n                    ]\n                },\n                \"shippers\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"companyname\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": false,\n                            \"delete\": false\n                        }\n                    ]\n                }\n            }\n        },\n        \"dev\": {\n            \"tables\": {\n                \"dog\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"__createdtime__\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"__updatedtime__\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        }\n                    ]\n                },\n                \"breed\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"__createdtime__\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"__updatedtime__\",\n                            \"read\": false,\n                            \"insert\": true,\n                            \"update\": true\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL drop test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL Add cluster_user Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has id\", ()=>{",
									"    pm.response.to.have.jsonBody('id');",
									"    postman.setEnvironmentVariable(\"cluster_user_role_id\", pm.response.json().id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"test_cluster_user_role\",\n\"permission\":{\n  \"cluster_user\": true\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Add cluster_user with another permission, expect fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseData = pm.response.json();",
									"",
									"pm.test(\"Response has roler permission error msg\", function() {",
									"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\");",
									"});",
									"",
									"pm.test(\"Main perms error array includes cluster/super user mixed error message\", function() {",
									"    pm.expect(responseData.main_permissions.length).to.equal(1);",
									"    pm.expect(responseData.main_permissions[0]).to.equal(\"Roles cannot have both 'super_user' and 'cluster_user' values included in their permissions set.\");",
									"})",
									"",
									"pm.test(\"Schema perms error array is empty\", function() {",
									"    pm.expect(Object.keys(responseData.schema_permissions).length).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"cluster_user_bad\",\n\"permission\":{\n  \"cluster_user\": true,\n  \"super_user\":true\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Add User with cluster_user Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.response.to.have.jsonBody('message');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain('successfully added');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"test_cluster_user_role\",\n\"username\":\"test_cluster_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL alter cluster user, change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.response.to.have.jsonBody('message');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain('updated 1 of 1 records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"alter_user\",\n\"username\":\"test_cluster_user\",\n\"password\":\"{{password}}111\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop test_cluster_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.response.to.have.jsonBody('message');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain('successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_cluster_user\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "NoSQL drop cluster_user role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.response.to.have.jsonBody('message');",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain('successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{cluster_user_role_id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				}
			]
		},
		{
			"name": "6. SQL Role Testing",
			"item": [
				{
					"name": "SQL Add non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test_5\",\n   \"permission\":{\n   \"super_user\": false,\n   \"northnwd\":{\n      \"tables\": {\n         \"customers\": {\n            \"read\":true,\n            \"insert\":true,\n            \"update\":true,\n            \"delete\":true,\n            \"attribute_permissions\":[]\n         },\n         \"suppliers\": {\n            \"read\":false,\n            \"insert\":false,\n            \"update\":false,\n            \"delete\":false,\n            \"attribute_permissions\":[]\n         },\n         \"region\": {\n            \"read\":true,\n            \"insert\":false,\n            \"update\":false,\n            \"delete\":false,\n            \"attribute_permissions\":[\n               {\n                  \"attribute_name\": \"regiondescription\",\n                  \"read\":true,\n                  \"insert\":false,\n                  \"update\":false\n               }]\n         },\n         \"territories\": {\n            \"read\":true,\n            \"insert\":true,\n            \"update\":false,\n            \"delete\":false,\n            \"attribute_permissions\":[\n               {\n                  \"attribute_name\": \"territorydescription\",\n                  \"read\":true,\n                  \"insert\":true,\n                  \"update\":false\n               }\n            ]\n         },\n         \"categories\": {\n            \"read\":true,\n            \"insert\":true,\n            \"update\":true,\n            \"delete\":false,\n            \"attribute_permissions\":[\n               {\n                  \"attribute_name\": \"description\",\n                  \"read\":true,\n                  \"insert\":true,\n                  \"update\":true\n               }\n            ]\n         },\n         \"shippers\": {\n            \"read\":true,\n            \"insert\":true,\n            \"update\":true,\n            \"delete\":true,\n            \"attribute_permissions\":[\n               {\n                  \"attribute_name\": \"companyname\",\n                  \"read\":false,\n                  \"insert\":false,\n                  \"update\":false\n               }\n            ]\n            }\n         }\n      },\n      \"dev\": {\n         \"tables\": {\n            \"dog\": {\n               \"read\": true,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": true,\n               \"attribute_permissions\": []\n            }\n         }\n      },\n      \"other\": {\n         \"tables\": {\n            \"owner\": {\n               \"read\": true,\n               \"insert\": false,\n               \"update\": true,\n               \"delete\": false,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      },\n      \"another\": {\n         \"tables\": {\n            \"breed\": {\n               \"read\": false,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": true,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"image\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL Add User with new Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test user added successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"test_user successfully added\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"developer_test_5\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Add user that already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Test user exists error message is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"User test_user already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"developer_test_5\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Add user bad role name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Test invalid role error message is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Role is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"add_user\",\n    \"role\":\"developer_test 5\",\n    \"username\":\"test_user1\",\n    \"password\":\"{{password}}\", \n    \"active\":true\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "get user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"responseData = JSON.parse(responseBody);",
									"for(let user of responseData) {",
									"    if(user.username === 'test_user') {",
									"        postman.setEnvironmentVariable(\"user_role_id\", user.role.id);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"list_users\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for getting user info.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'user_info'</li>"
					},
					"response": []
				},
				{
					"name": "try to set bad role to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"Update failed.  Requested 'blahblah' role not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"alter_user\",\n\t\"role\": \"blahblah\",\n\t\"username\": \"test_user\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for altering users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  Use this method to change password as well.  \n\n<ul>\n\n<li><b>operation</b> <i>(required)</i> - must always be 'alter_user'</li>\n\n<li><b>role</b> <i>(optional) </i>- id of the role you wish to assign to the user.  See add_role for more detail. </li> \n\n<li><b>username </b><i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li> <b>password</b><i> (optional) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n</ul>"
					},
					"response": []
				},
				{
					"name": "get user info make sure role was not changed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"responseData = JSON.parse(responseBody);",
									"pm.test(\"ensure role not changed\", function () {",
									"    for(let user of responseData) {",
									"    if(user.username === 'test_user') {",
									"        pm.expect(postman.getEnvironmentVariable(\"user_role_id\")).to.eql(user.role.id);",
									"    }",
									"}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"list_users\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for getting user info.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'user_info'</li>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read suppliers table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{supp_tb}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read FULLY restricted suppliers table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'northnwd.suppliers' does not exist\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{supp_tb}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read region table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{regi_tb}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var permitted_attrs = [\"regiondescription\", \"regionid\"];",
									"",
									"pm.test(\"Only permitted attributes are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(obj => {",
									"        Object.keys(obj).forEach(attr_name => {",
									"            pm.expect(permitted_attrs.includes(attr_name))    ",
									"        })",
									"    })",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{regi_tb}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into region table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.region (regionid, regiondescription) values ('16', 'test description');\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into restricted region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('insert');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('northnwd');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('region');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.region (regionid, regiondescription) values ('17', 'test description');\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into territories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.territories (regionid, territoryid, territorydescription) values ('1', '65', 'Im a test');\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into territories table with restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'regionid' does not exist on 'northnwd.territories'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.territories (regionid, territoryid, territorydescription) values ('1', '65', 'Im a test');\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into territories table with allowed attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New record inserted\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
									"    pm.expect(jsonData.inserted_hashes[0]).to.eql(165);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.territories (territoryid, territorydescription) values (165, 'Im a test');\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to update territories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.territories set territorydescription = 'update test' where territoryid = 65\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to update restricted territories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('update');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('northnwd');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('territories');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.territories set territorydescription = 'update test' where territoryid = 65\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to update categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.categories set description = 'update test' where categoryid = 2\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to update restricted attr in categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'picture' does not exist on 'northnwd.categories'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.categories set description = 'update test', picture = 'test picture' where categoryid = 2\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL Try to delete from categories table as SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"operation\":\"sql\",\n  \"sql\":\"delete from northnwd.categories where categoryid = 2\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to delete from restricted categories table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('delete');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('northnwd');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('categories');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"operation\":\"sql\",\n  \"sql\":\"delete from northnwd.categories where categoryid = 2\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read shippers table w/ FULLY restricted attributes as test_user - expect empty array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an empty array\", function () {",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from {{schema}}.{{ship_tb}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL Try to update shippers table restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Attribute 'companyname' does not exist on 'northnwd.shippers'\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"update northnwd.{{ship_tb}} set companyname = 'bad update name' where {{ship_id}} = 1\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert into shippers table w/ FULLY restricted attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(3);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'shipperid' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'companyname' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'phone' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.shippers (shipperid, companyname, phone) values ('1', 'bad update name', '(503) 555-9831');\"\n}\n\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to insert categories table unrestricted attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"insert into northnwd.categories (categoryid, description) values ('9', 'Other food stuff');\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL Try to read shippers table as test_user with restricted attribute in WHERE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(3);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'shipperid' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'phone' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'companyname' does not exist on 'northnwd.shippers'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select shipperid from {{schema}}.{{ship_tb}} WHERE (phone IS NOT NULL AND shipperid = 0) OR companyname IS NOT NULL\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with restricted CROSS SCHEMA JOIN as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'id' does not exist on 'other.owner'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'name' does not exist on 'other.owner'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select * with restricted CROSS SCHEMA JOIN as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'id' does not exist on 'other.owner'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'name' does not exist on 'other.owner'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.*, o.* FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id ORDER BY o.name, o.id LIMIT 5 OFFSET 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select restricted attrs in CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('read');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('another');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('breed');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'id' does not exist on 'other.owner'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'name' does not exist on 'other.owner'\")).to.eql(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name, b.id, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with complex CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('read');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('another');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('breed');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'id' does not exist on 'other.owner'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'name' does not exist on 'other.owner'\")).to.eql(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.age AS dog_age, AVG(d.weight_lbs) AS dog_weight, o.name AS owner_name, b.name, b.image FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id GROUP BY o.name, b.name, d.age ORDER BY b.name\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select * w/ two table CROSS SCHEMA JOIN on table with FULLY restricted attributes as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(2);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'name' does not exist on 'other.owner'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'id' does not exist on 'other.owner'\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.*, o.* FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id ORDER BY o.name, o.id LIMIT 5 OFFSET 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL ALTER non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"alter_role\",\n   \"role\":\"developer_test_5\",\n   \"id\": \"{{role_id}}\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n            \"customers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[]\n            },\n            \"suppliers\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[]\n            },\n            \"region\": {\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"regiondescription\",\n                     \"read\":true,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            },\n            \"territories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"territorydescription\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false\n                  }\n               ]\n            },\n            \"categories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"description\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":true\n                  }\n               ]\n            },\n            \"shippers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"companyname\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      },\n      \"dev\": {\n         \"tables\": {\n            \"dog\": {\n               \"read\": true,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": true,\n               \"attribute_permissions\": []\n            }\n         }\n      },\n      \"other\": {\n         \"tables\": {\n            \"owner\": {\n               \"read\": true,\n               \"insert\": false,\n               \"update\": true,\n               \"delete\": false,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":true,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      },\n      \"another\": {\n         \"tables\": {\n            \"breed\": {\n               \"read\": true,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": true,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":true,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select two table CROSS SCHEMA JOIN as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"test 9 records returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"var expected_attributes = [\"id\", \"dog_name\", \"age\", \"adorable\", \"id1\", \"name\"]",
									"",
									"//Important to test that only the id (returned as id1) and name attributes come back for 'other.owner' since user only has access to those two attributes",
									"pm.test(\"test for all columns returned including duplicate 'id' column with name numbering\", function () {",
									"    jsonData.forEach(row => {",
									"        expected_attributes.forEach(attr => {",
									"            pm.expect(row[attr]).to.exist;",
									"        })",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    pm.expect(jsonData[1].name).to.eql(\"Kyle\");",
									"    pm.expect(jsonData[3].id1).to.eql(1);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select * w/ two table CROSS SCHEMA JOIN as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var expected_names = [\"David\", \"Kaylan\", \"Kyle\", \"Kyle\", \"Kyle\"];",
									"var expected_attrs = [\"__createdtime__\", \"age\", \"dog_name\", \"adorable\", \"owner_id\", \"__updatedtime__\", \"id\", \"weight_lbs\", \"breed_id\", \"name\", \"id1\"]",
									"",
									"pm.test(\"Returns merged table data in correct order\", function () {",
									"    pm.expect(jsonData.length).to.eql(5);",
									"    jsonData.forEach((obj, i) => {",
									"        pm.expect(obj.name).to.eql(expected_names[i]);",
									"        Object.keys(k => {",
									"            pm.expect(expected_attrs.includes(k)).to.eql(true);",
									"        })",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.*, o.* FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id ORDER BY o.name, o.id LIMIT 5 OFFSET 1\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select w/ CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.id).to.exist;",
									"        pm.expect(row.id1).to.exist;",
									"        pm.expect(row.id2).to.exist;",
									"        pm.expect(row.dog_name).to.exist;",
									"        pm.expect(row.age).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"        pm.expect(row.name1).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test random row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name).to.eql(\"Kyle\");",
									"    pm.expect(jsonData[1].id1).to.eql(2);",
									"    pm.expect(jsonData[4].id1).to.eql(2);",
									"    pm.expect(jsonData[6].id1).to.eql(4);",
									"    pm.expect(jsonData[6].name1).to.eql(\"BEAGLE MIX\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.id, d.dog_name, d.age, d.adorable, o.id, o.name, b.id, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with complex CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test 9 records returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"test for all columns exist including duplicate column name numbering\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(row => {",
									"        pm.expect(row.dog_age).to.exist;",
									"        pm.expect(row.dog_weight).to.exist;",
									"        pm.expect(row.owner_name).to.exist;",
									"        pm.expect(row.name).to.exist;",
									"    })",
									"});",
									"",
									"pm.test(\"test first and last row values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].dog_age).to.eql(3);",
									"    pm.expect(jsonData[0].dog_weight).to.eql(35);",
									"    pm.expect(jsonData[0].owner_name).to.eql(\"Kaylan\");",
									"    pm.expect(jsonData[0].name).to.eql(\"BEAGLE MIX\");",
									"    pm.expect(jsonData[6].dog_age).to.eql(8);",
									"    pm.expect(jsonData[6].dog_weight).to.eql(15);",
									"    pm.expect(jsonData[6].owner_name).to.eql(\"Kyle\");",
									"    pm.expect(jsonData[6].name).to.eql(\"TERRIER MIX\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.age AS dog_age, AVG(d.weight_lbs) AS dog_weight, o.name AS owner_name, b.name FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id GROUP BY o.name, b.name, d.age ORDER BY b.name\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL ALTER non SU role with multi table join restrictions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"alter_role\",\n   \"role\":\"developer_test_5\",\n   \"id\": \"{{role_id}}\",\n   \"permission\":{\n      \"super_user\": false,\n      \"dev\": {\n         \"tables\": {\n            \"dog\": {\n               \"read\": false,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": false,\n               \"attribute_permissions\": []\n            }\n         }\n      },\n      \"other\": {\n         \"tables\": {\n            \"owner\": {\n               \"read\": true,\n               \"insert\": false,\n               \"update\": true,\n               \"delete\": false,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      },\n      \"another\": {\n         \"tables\": {\n            \"breed\": {\n               \"read\": true,\n               \"insert\": false,\n               \"update\": false,\n               \"delete\": false,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":true,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Select with ALL RESTRICTED complex CROSS 3 SCHEMA JOINS as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('read');",
									"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('dev');",
									"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('dog');",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(3);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'id' does not exist on 'other.owner'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'name' does not exist on 'other.owner'\")).to.eql(true);",
									"    pm.expect(jsonData.invalid_schema_items.includes(\"Attribute 'country' does not exist on 'another.breed'\")).to.eql(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"SELECT d.age AS dog_age, AVG(d.weight_lbs) AS dog_weight, o.name AS owner_name, b.name, b.country FROM dev.dog AS d INNER JOIN other.owner AS o ON d.owner_id = o.id INNER JOIN another.breed AS b ON d.breed_id = b.id GROUP BY o.name, b.name, d.age ORDER BY b.name\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL drop test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes correct message\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.equal(",
									"        \"test_user successfully deleted\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Drop non-existent user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body includes correct message\", function () {",
									"    const respMsg = pm.response.json().error;",
									"    pm.expect(respMsg).to.equal(",
									"        \"User test_user does not exist\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "SQL drop_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes correct message\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.equal(",
									"        \"developer_test_5 successfully deleted\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Drop non-existent role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body includes correct message\", function () {",
									"    const respMsg = pm.response.json().error;",
									"    pm.expect(respMsg).to.equal(",
									"        \"Role not found\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "7. Jobs & Job Role Testing",
			"item": [
				{
					"name": "S3 Operations",
					"item": [
						{
							"name": "Create schema for S3 test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"S3_DATA\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create dogs table for S3 test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"S3_DATA\",\n  \"table\":\"dogs\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create breed table for S3 test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"S3_DATA\",\n  \"table\":\"breed\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create owners table for S3 test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"S3_DATA\",\n  \"table\":\"owners\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create sensor table for S3 test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"S3_DATA\",\n  \"table\":\"sensor\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import dogs.xlsx from S3 - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check for correct file ext error msg\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"S3 key must include one of the following valid file extensions - '.csv', '.json'\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"dogs\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/dogs.xlsx\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import dogs.csv from S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Import owners.json from S3\");",
											"    } else {",
											"        postman.setNextRequest(\"Import owners.json from S3\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"dogs\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/dogs.csv\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 dog data loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 12 of 12 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 dog data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 dog data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import owners.json from S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Import breed.json from S3\");",
											"    } else {",
											"        postman.setNextRequest(\"Import breed.json from S3\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"owners\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/owners.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 owners data loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 4 of 4 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 owners data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 owners data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import breed.json from S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Import does_not_exist.csv from S3 - expect fail\");",
											"    } else {",
											"        postman.setNextRequest(\"Import does_not_exist.csv from S3 - expect fail\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"breed\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/breed.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 breed data loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 350 of 350 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 breed data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 breed data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import does_not_exist.csv from S3 - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Import dogs_update.csv from S3\");",
											"    } else {",
											"        postman.setNextRequest(\"Import dogs_update.csv from S3\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"owners\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/does_not_exist.csv\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check for error from S3 does_not_exist.csv import",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error correctly found in response checking invalid S3 import job.\")",
											"            pm.expect(jsonData[0].message).to.eql(\"The specified key does not exist.\");",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(status).to.eql(['ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check for error from S3 does_not_exist.csv import');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check for error from S3 does_not_exist.csv import');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import dogs_update.csv from S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Import owners_update.json from S3\");",
											"    } else {",
											"        postman.setNextRequest(\"Import owners_update.json from S3\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"update\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"dogs\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/dogs_update.csv\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 dogs update loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 12 of 12 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 dogs update loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 dogs update loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import owners_update.json from S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Import large sensor_data.json from S3\");",
											"    } else {",
											"        postman.setNextRequest(\"Import large sensor_data.json from S3\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"update\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"owners\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/owners_update.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 owners update loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 4 of 4 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 owners update loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 owners update loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import large sensor_data.json from S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Import large sensor_data.json for UPSERT from S3\");",
											"    } else {",
											"        postman.setNextRequest(\"Import large sensor_data.json for UPSERT from S3\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"sensor\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/sensor_data.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 large sensor_data loaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 20020 of 20020 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 large sensor_data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 large sensor_data loaded');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import large sensor_data.json for UPSERT from S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Import does_not_exist_UPDATE.csv from S3 - expect fail\");",
											"    } else {",
											"        postman.setNextRequest(\"Import does_not_exist_UPDATE.csv from S3 - expect fail\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"upsert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"sensor\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/sensor_data.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 large sensor_data upserted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message).to.eql(\"successfully loaded 20020 of 20020 records\");",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 large sensor_data upserted');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 large sensor_data upserted');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 2000);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check rows from S3 upsert were updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test all rows on table have new __updatedtime__ value\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(row => {",
											"        pm.expect(row.__updatedtime__).to.be.greaterThan(row.__createdtime__);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\": \"SELECT * FROM S3_DATA.sensor\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import does_not_exist_UPDATE.csv from S3 - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jobMsgIndex = jsonData.message.indexOf('Starting job');",
											"",
											"    if (jobMsgIndex === 0) {",
											"        pm.expect(jobMsgIndex).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Export to S3\");",
											"    } else {",
											"        pm.expect(jobMsgIndex).to.eql(0);",
											"        postman.setNextRequest(\"Export to S3\");",
											"    }",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"        eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Export to S3\");",
											"    } else {",
											"        postman.setNextRequest(\"Export to S3\");",
											"        pm.expect(jsonData).to.have.message;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"update\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"owners\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/does_not_exist_UPDATE.csv\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check for error from S3 does_not_exist_UPDATE.csv import",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error correctly found in response checking invalid S3 import job.\")",
											"            pm.expect(jsonData[0].message).to.eql(\"The specified key does not exist.\");",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"           ",
											"            pm.expect(status).to.eql(['ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check for error from S3 does_not_exist_UPDATE.csv import');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check for error from S3 does_not_exist_UPDATE.csv import');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Export to S3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Create S3 test table\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"export_to_s3\",\n\t\"format\":\"csv\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/test_export\",\n        \"region\": \"us-east-2\"\n\t},\n\t\"search_operation\":{\n\t\t\"operation\": \"sql\",\n\t\t\"sql\": \"SELECT * FROM S3_DATA.dogs LIMIT 1\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"                pm.environment.set(\"next_request\", \"Create S3 test table\");",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].result.ETag).to.exist;",
											"            pm.expect(jsonData[0].result.VersionId).to.exist;",
											"            pm.expect(status).to.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 export');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 export');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Export to S3 search_by_conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Create S3 test table\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"export_to_s3\",\n\t\"format\":\"csv\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/test_export\",\n        \"region\": \"us-east-2\"\n\t},\n\t\"search_operation\":{\n    \"operation\": \"search_by_conditions\",\n    \"database\": \"S3_DATA\",\n    \"table\": \"dogs\",\n    \"operator\": \"and\",\n    \"get_attributes\": [\n        \"*\"\n    ],\n    \"conditions\": [{\n        \"search_attribute\": \"breed_id\",\n        \"search_type\": \"between\",\n        \"search_value\": [\n            199, 280\n        ]\n    }\n    ]\n    }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check S3 export search_by_conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking S3 import job.\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"                pm.environment.set(\"next_request\", \"Export local search_by_conditions\");",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].result.ETag).to.exist;",
											"            pm.expect(jsonData[0].result.VersionId).to.exist;",
											"            pm.expect(status).to.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check S3 export search_by_conditions');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check S3 export search_by_conditions');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Export local search_by_conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobId\"))(jsonData, \"Create S3 test table\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\": \"./\",\n    \"format\": \"json\",\n    \"filename\": \"integration-test\",\n\t\"search_operation\":{\n    \"operation\": \"search_by_conditions\",\n    \"database\": \"S3_DATA\",\n    \"table\": \"dogs\",\n    \"operator\": \"and\",\n    \"get_attributes\": [\n        \"*\"\n    ],\n    \"conditions\": [{\n        \"search_attribute\": \"breed_id\",\n        \"search_type\": \"between\",\n        \"search_value\": [\n            199, 200\n        ]\n    }\n    ]\n    }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check export local search_by_conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            console.log(\"Error checking export local search_by_conditions\")",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"                pm.environment.set(\"next_request\", \"Create S3 test table\");",
											"            }",
											"           ",
											"            pm.expect(jsonData[0].message.message).to.equal(\"Successfully exported JSON locally.\")",
											"            pm.expect(jsonData[0].type).to.equal(\"export_local\");",
											"            pm.expect(status).to.eql('COMPLETE');",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check export local search_by_conditions');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check export local search_by_conditions');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create S3 test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"S3_DATA\",\n  \"table\":\"s3_test\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create S3 CSV import test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"S3_DATA\",\n  \"table\":\"s3_test_csv_import\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create S3 JSON import test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"S3_DATA\",\n  \"table\":\"s3_test_json_import\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert records S3 test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"All records are inserted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(3);",
											"    pm.expect(jsonData.message).to.eql(\"inserted 3 of 3 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"S3_DATA\",\n    \"table\":\"s3_test\",\n    \"records\": [\n      {\n        \"id\": \"a\",\n        \"address\": \"1 North Street\",\n        \"lastname\":\"Dog\",\n        \"firstname\":\"Harper\",\n        \"one\": \"only one\"\n      },\n      {\n        \"id\": \"b\",\n        \"object\": {\"name\":\"object\", \"number\": 1, \"array\": [1, \"two\"]},\n        \"array\": [1, 2, \"three\"],\n        \"firstname\":\"Harper\"\n      },\n      {\n          \"id\": \"c\",\n          \"object_array\": [\n              {\"number\": 1},\n              {\"number\": \"two\", \"count\": 2}\n          ]\n      }\n\n    ]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Export S3 test table CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    let message_parts = jsonData.message.split(' ');",
											"    pm.environment.set('job_id', message_parts[4]);",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"export_to_s3\",\n\t\"format\":\"csv\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/test_export_csv\",\n        \"region\": \"us-east-2\"\n\t},\n\t\"search_operation\":{\n\t\t\"operation\": \"sql\",\n\t\t\"sql\": \"SELECT * FROM S3_DATA.s3_test\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Wait for CSV export to complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"let status = response[0].status;",
											"",
											"switch(status){",
											"    case 'IN_PROGRESS':",
											"        console.log('Wating for S3 CSV export to complete');",
											"        setTimeout(() => {}, 2000);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        break;",
											"",
											"    case 'COMPLETE':",
											"        pm.test(\"Export CSV to S3 has completed\", () => {",
											"            pm.expect(status).to.equal('COMPLETE');",
											"        });",
											"        break;",
											"",
											"    case 'ERROR':",
											"        pm.test(\"Export CSV to S3 has failed\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"        ",
											"    default:",
											"        pm.test(\"Export CSV to S3 unknow status\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import S3 test table CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    let message_parts = jsonData.message.split(' ');",
											"    pm.environment.set('job_id', message_parts[4]);",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"s3_test_csv_import\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/test_export_csv.csv\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Wait for CSV import to complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"let status = response[0].status;",
											"",
											"switch(status){",
											"    case 'IN_PROGRESS':",
											"        console.log('Wating for S3 CSV import to complete');",
											"        setTimeout(() => {}, 2000);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        break;",
											"",
											"    case 'COMPLETE':",
											"        pm.test(\"Import CSV to S3 has completed\", () => {",
											"            pm.expect(status).to.equal('COMPLETE');",
											"        });",
											"        break;",
											"",
											"    case 'ERROR':",
											"        pm.test(\"Import CSV to S3 has failed\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"        ",
											"    default:",
											"        pm.test(\"Import CSV to S3 unknow status\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm CSV records import",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let expected_res = [",
											"    {",
											"        \"one\": \"only one\",",
											"        \"object_array\": \"\",",
											"        \"id\": \"a\",",
											"        \"address\": \"1 North Street\",",
											"        \"object\": \"\",",
											"        \"lastname\": \"Dog\",",
											"        \"firstname\": \"Harper\",",
											"        \"array\": \"\"",
											"    },",
											"    {",
											"        \"one\": \"\",",
											"        \"object_array\": \"\",",
											"        \"id\": \"b\",",
											"        \"address\": \"\",",
											"        \"object\": {",
											"            \"name\": \"object\",",
											"            \"number\": 1,",
											"            \"array\": [",
											"                1,",
											"                \"two\"",
											"            ]",
											"        },",
											"        \"lastname\": \"\",",
											"        \"firstname\": \"Harper\",",
											"        \"array\": [",
											"            1,",
											"            2,",
											"            \"three\"",
											"        ]",
											"    },",
											"    {",
											"        \"one\": \"\",",
											"        \"object_array\": [",
											"            {",
											"                \"number\": 1",
											"            },",
											"            {",
											"                \"number\": \"two\",",
											"                \"count\": 2",
											"            }",
											"        ],",
											"        \"id\": \"c\",",
											"        \"address\": \"\",",
											"        \"object\": \"\",",
											"        \"lastname\": \"\",",
											"        \"firstname\": \"\",",
											"        \"array\": \"\"",
											"    }",
											"]",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"All records are inserted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(expected_res);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select `one`, `object_array`, `id`, `address`, `object`, `lastname`, `firstname`, `array` FROM S3_DATA.s3_test_csv_import ORDER BY id ASC\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Export S3 test table JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    let message_parts = jsonData.message.split(' ');",
											"    pm.environment.set('job_id', message_parts[4]);",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"export_to_s3\",\n\t\"format\":\"json\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/test_export_json\",\n        \"region\": \"us-east-2\"\n\t},\n\t\"search_operation\":{\n\t\t\"operation\": \"sql\",\n\t\t\"sql\": \"SELECT * FROM S3_DATA.s3_test\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Wait for JSON export to complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"let status = response[0].status;",
											"",
											"switch(status){",
											"    case 'IN_PROGRESS':",
											"        console.log('Wating for S3 JSON export to complete');",
											"        setTimeout(() => {}, 2000);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        break;",
											"",
											"    case 'COMPLETE':",
											"        pm.test(\"Export JSON to S3 has completed\", () => {",
											"            pm.expect(status).to.equal('COMPLETE');",
											"        });",
											"        break;",
											"",
											"    case 'ERROR':",
											"        pm.test(\"Export JSON to S3 has failed\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"        ",
											"    default:",
											"        pm.test(\"Export JSON to S3 unknow status\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Import S3 test table JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    let message_parts = jsonData.message.split(' ');",
											"    pm.environment.set('job_id', message_parts[4]);",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"action\": \"insert\",\n\t\"schema\":\"S3_DATA\",\n\t\"table\":\"s3_test_json_import\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/test_export_json.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Wait for JSON import to complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"let status = response[0].status;",
											"",
											"switch(status){",
											"    case 'IN_PROGRESS':",
											"        console.log('Wating for S3 JSON import to complete');",
											"        setTimeout(() => {}, 2000);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        break;",
											"",
											"    case 'COMPLETE':",
											"        pm.test(\"Import JSON to S3 has completed\", () => {",
											"            pm.expect(status).to.equal('COMPLETE');",
											"        });",
											"        break;",
											"",
											"    case 'ERROR':",
											"        pm.test(\"Import JSON to S3 has failed\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"        ",
											"    default:",
											"        pm.test(\"Import JSON to S3 unknow status\", () => {",
											"            pm.expect(true).to.be.false;",
											"        });",
											"        break;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm JSON records import",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let expected_res = [",
											"    {",
											"        \"one\": \"only one\",",
											"        \"object_array\": \"\",",
											"        \"id\": \"a\",",
											"        \"address\": \"1 North Street\",",
											"        \"object\": \"\",",
											"        \"lastname\": \"Dog\",",
											"        \"firstname\": \"Harper\",",
											"        \"array\": \"\"",
											"    },",
											"    {",
											"        \"one\": \"\",",
											"        \"object_array\": \"\",",
											"        \"id\": \"b\",",
											"        \"address\": \"\",",
											"        \"object\": {",
											"            \"name\": \"object\",",
											"            \"number\": 1,",
											"            \"array\": [",
											"                1,",
											"                \"two\"",
											"            ]",
											"        },",
											"        \"lastname\": \"\",",
											"        \"firstname\": \"Harper\",",
											"        \"array\": [",
											"            1,",
											"            2,",
											"            \"three\"",
											"        ]",
											"    },",
											"    {",
											"        \"one\": \"\",",
											"        \"object_array\": [",
											"            {",
											"                \"number\": 1",
											"            },",
											"            {",
											"                \"number\": \"two\",",
											"                \"count\": 2",
											"            }",
											"        ],",
											"        \"id\": \"c\",",
											"        \"address\": \"\",",
											"        \"object\": \"\",",
											"        \"lastname\": \"\",",
											"        \"firstname\": \"\",",
											"        \"array\": \"\"",
											"    }",
											"]",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"All records are inserted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(expected_res);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job CSV URL load\" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select `one`, `object_array`, `id`, `address`, `object`, `lastname`, `firstname`, `array` FROM S3_DATA.s3_test_csv_import ORDER BY id ASC\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop S3 schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_schema\",\n  \"schema\":\"S3_DATA\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobId\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Jobs - Add non SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test_5\",\n   \"permission\":{\n   \"super_user\": false,\n   \"northnwd\":{\n         \"tables\": {\n            \"customers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[]\n            },\n            \"suppliers\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[]\n            },\n            \"region\": {\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[{\n                     \"attribute_name\": \"regiondescription\",\n                     \"read\":true,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            },\n            \"territories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"territorydescription\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false\n                  }\n               ]\n            },\n            \"categories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"description\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":true\n                  }\n               ]\n            },\n            \"shippers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"companyname\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Jobs - Add User with new Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"developer_test_5\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Add jobs test schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");",
									"",
									"setTimeout(()=>{}, 500);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"test_job\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Add runner table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"setTimeout(()=>{}, 500);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"test_job\",\n  \"table\":\"runner\",\n  \"hash_attribute\": \"runner_id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Insert into runners table",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function pausecomp(millis)",
									" {",
									"  var date = new Date();",
									"  var curDate = null;",
									"  do { curDate = new Date(); }",
									"  while(curDate-date < millis);",
									"}",
									"",
									"pausecomp(100);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_job\",\n\"table\":\"runner\",\n\"records\": [\n  {\n    \"name\":\"Harper\",\n    \"shoes\":\"Nike\",\n    \"runner_id\":\"1\",\n    \"age\":55\n  }\n]\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Validate 1 entry in runners table",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 1 runner\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from test_job.runner\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Test Remove Files Before with test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct message in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'deleteFilesBefore' is restricted to 'super_user' roles\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete_files_before\",\n\t\"date\":\"2018-06-14\",\n\t\"schema\":\"dev\",\n\t\"schema\":\"dog\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Test Remove Files Before with su and store job_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"let id_index = jsonData.message.indexOf('id ');",
									"let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"pm.environment.set(\"job_id\", parsedId);",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"date_tomorrow\", (new Date(new Date().getTime() + 86400000)).toISOString());"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete_files_before\",\n\t\"date\":\"{{date_tomorrow}}\",\n\t\"schema\":\"test_job\",\n\t\"table\":\"runner\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Wait for remove files before",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let status = response[0].status;",
									"",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        console.log('Wating for remove files before to complete');",
									"        setTimeout(() => {}, 2000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.test(\"Remove files before has completed\", () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.test(\"Remove files before has failed\", () => {",
									"            pm.expect(true).to.be.false;",
									"        });",
									"        break;",
									"        ",
									"    default:",
									"        pm.test(\"Remove files before unknow status\", () => {",
									"            pm.expect(true).to.be.false;",
									"        });",
									"        break;",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 2000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Jobs - Validate 0 entry in runners table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test 0 runners\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from test_job.runner\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search Jobs by date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"date_yesterday\", (new Date(new Date().getTime() - 86400000)).toISOString());"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test found jobs\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_jobs_by_start_date\",\n\t\"from_date\": \t\"{{date_yesterday}}\",\n\t\"to_date\": \t\"{{date_tomorrow}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search Jobs by date - non-super user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'handleGetJobsByStartDate' is restricted to 'super_user' roles\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_jobs_by_start_date\",\n\t\"from_date\": \t\"{{date_yesterday}}\",\n\t\"to_date\": \t\"{{date_tomorrow}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search Jobs by job_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test Job Found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search Jobs by job_id - non-super user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test Job Found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Jobs - Bulk CSV load into restricted region table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"data\":\"regionid, regiondescription\\n'17', 'test description'\\n\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Bulk CSV load into restricted region table as su",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"csv_data_load\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{regi_tb}}\",\n  \"data\":\"regionid, regiondescription\\n'17', 'test description'\\n\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Bulk CSV Load - insert suppliers table restricted attribute as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'northnwd.suppliers' does not exist\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"csv_file_load\",\n  \"action\":\"insert\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{supp_tb}}\",\n  \"file_path\":\"{{files_location}}Suppliers.csv\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using SQL as su",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n        \"operation\":\"sql\",\n        \"sql\":\"select * from {{schema}}.{{ship_tb}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using NoSQL as su",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n\t  \"operation\":\"search_by_hash\",\n\t  \"schema\":\"{{schema}}\",\n\t  \"table\":\"{{ship_tb}}\",\n\t  \"hash_attribute\": \"{{ship_id}}\",\n\t  \"hash_values\":[1],\n\t  \"get_attributes\": [\"companyname\"]\n\t}\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using SQL as test_user on table with FULLY restricted attrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n        \"operation\":\"sql\",\n        \"sql\":\"select * from {{schema}}.{{ship_tb}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using SQL on RESTRICTED table as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"invalid_schema_items is not empty\", function () {",
									"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
									"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'northnwd.suppliers' does not exist\");",
									"});",
									"",
									"pm.test(\"unauthorized_access is empty\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n        \"operation\":\"sql\",\n        \"sql\":\"select * from {{schema}}.{{supp_tb}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using SQL as test_user on table w/ two attr perms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export.json\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n        \"operation\":\"sql\",\n        \"sql\":\"select * from {{schema}}.{{regi_tb}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs Test Export To Local using NoSQL as test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Op auth error message\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"unauthorized_access message\", function () {",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'export_local' is restricted to 'super_user' roles\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{test_user_name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export\",\n\t\"format\":\"json\",\n\t\"search_operation\": {\n\t  \"operation\":\"search_by_hash\",\n\t  \"schema\":\"{{schema}}\",\n\t  \"table\":\"{{supp_tb}}\",\n\t  \"hash_attribute\": \"{{supp_id}}\",\n\t  \"hash_values\":[1],\n\t  \"get_attributes\": [\"{{supp_id}}\"]\n\t}\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - drop test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs -  drop_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Jobs - Delete Jobs_test schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"test_job\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(responseBody);"
						]
					}
				}
			]
		},
		{
			"name": "8. Delete Tests",
			"item": [
				{
					"name": "Delete Records Before Tests",
					"item": [
						{
							"name": "create test schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
											"\r",
											"setTimeout(()=>{}, 500);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"test_delete_before\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "create test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"test_delete_before\",\n  \"table\":\"address\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(6);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"address\",\n\"records\": [\n  {\n    \"id\": 1,\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": 2,\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": 3,\n    \"address\": \"19 Broadway\"\n  },\n  {\n    \"id\": 4,\n    \"address\": \"34A Mountain View\"\n  },\n  {\n    \"id\": 5,\n    \"address\": \"234 Curtis St\"\n  },\n  {\n    \"id\": 6,\n    \"address\": \"115 Way Rd\"\n  }\n]\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert additional new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"insert_timestamp\", new Date().toISOString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"address\",\n\"records\": [\n  {\n    \"id\": 11,\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": 12,\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": 13,\n    \"address\": \"19 Broadway\"\n  }\n]\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete records before",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdDelete\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"delete_files_before\",\n\t\"date\":\"{{insert_timestamp}}\",\n\t\"schema\":\"test_delete_before\",\n\t\"table\":\"address\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check Delete Records Before Job Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check Delete Records Before Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Delete Records Before Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify correct number of records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"verify correct records are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var ids = [];",
											"    jsonData.forEach((record) => {",
											"        ids.push(record.id)",
											"    })",
											"    ",
											"    pm.expect(ids.includes(11)).to.be.true;",
											"    pm.expect(ids.includes(12)).to.be.true;",
											"    pm.expect(ids.includes(13)).to.be.true;",
											"    ",
											"    pm.expect(ids.includes(1)).to.be.false;",
											"    pm.expect(ids.includes(2)).to.be.false;",
											"    pm.expect(ids.includes(3)).to.be.false;",
											"    pm.expect(ids.includes(4)).to.be.false;",
											"    pm.expect(ids.includes(5)).to.be.false;",
											"    pm.expect(ids.includes(6)).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"test_delete_before\",\n\t\"table\":\"address\",\n\t\"hash_attribute\": \"id\",\n\t\"hash_values\":[1, 2, 3, 4, 5, 6, 11, 12, 13],\n\t\"get_attributes\": [\"id\", \"address\"]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobIdDelete\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check Delete Records Before Job Completed\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Delete Records Before Alias Tests",
					"item": [
						{
							"name": "Insert new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(6);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"address\",\n\"records\": [\n  {\n    \"id\": \"1a\",\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": \"2a\",\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": \"3a\",\n    \"address\": \"19 Broadway\"\n  },\n  {\n    \"id\": \"4a\",\n    \"address\": \"34A Mountain View\"\n  },\n  {\n    \"id\": \"5a\",\n    \"address\": \"234 Curtis St\"\n  },\n  {\n    \"id\": \"6a\",\n    \"address\": \"115 Way Rd\"\n  }\n]\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert additional new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"insert_timestamp\", new Date().toISOString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"address\",\n\"records\": [\n  {\n    \"id\": \"11a\",\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": \"12a\",\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": \"13a\",\n    \"address\": \"19 Broadway\"\n  }\n]\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete records before",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdDeleteA\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"delete_files_before\",\n\t\"date\":\"{{insert_timestamp}}\",\n\t\"schema\":\"test_delete_before\",\n\t\"table\":\"address\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check Delete Records Before Alias Job Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check Delete Records Before Alias Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Delete Records Before Alias Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify correct number of records returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"verify correct records are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var ids = [];",
											"    jsonData.forEach((record) => {",
											"        ids.push(record.id)",
											"    })",
											"    ",
											"    pm.expect(ids.includes(\"11a\")).to.be.true;",
											"    pm.expect(ids.includes(\"12a\")).to.be.true;",
											"    pm.expect(ids.includes(\"13a\")).to.be.true;",
											"    ",
											"    pm.expect(ids.includes(\"1a\")).to.be.false;",
											"    pm.expect(ids.includes(\"2a\")).to.be.false;",
											"    pm.expect(ids.includes(\"3a\")).to.be.false;",
											"    pm.expect(ids.includes(\"4a\")).to.be.false;",
											"    pm.expect(ids.includes(\"5a\")).to.be.false;",
											"    pm.expect(ids.includes(\"6a\")).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"test_delete_before\",\n\t\"table\":\"address\",\n\t\"hash_attribute\": \"id\",\n\t\"hash_values\":[\"1a\", \"2a\", \"3a\", \"4a\", \"5a\", \"6a\", \"11a\", \"12a\", \"13a\"],\n\t\"get_attributes\": [\"id\", \"address\"]\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobIdDeleteA\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check Delete Records Before Alias Job Completed\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Drop schema tests",
					"item": [
						{
							"name": "Create schema for drop test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response from create schema is correct\", () =>{\r",
											"     var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.message).to.eql(\"database 'drop_schema' successfully created\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{drop_schema}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "Create table for drop test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from create table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"table 'drop_schema.drop_table' successfully created.\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"{{drop_schema}}\",\n  \"table\":\"{{drop_table}}\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert records for drop test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Inserted all records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"{{drop_schema}}\",\n\"table\":\"{{drop_table}}\",\n\"records\": [\n  {\n    \"id\": 4,\n    \"address\": \"194 Greenbrook Drive\"\n  },\n  {\n    \"id\": 7,\n    \"address\": \"195 Greenbrook Lane\"\n  },\n  {\n    \"id\": 9,\n    \"address\": \"196 Greenbrook Lane\"\n  },\n  {\n    \"id\": 0,\n    \"address\": \"197 Greenbrook Drive\"\n  }\n  ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted 'drop_schema'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{drop_schema}}\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm drop schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Schema does not exist error returned\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.error).to.eql(\"database 'drop_schema' does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"describe_schema\",\n    \"schema\": \"{{drop_schema}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create schema again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response from create schema is correct\", () =>{\r",
											"     var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.message).to.eql(\"database 'drop_schema' successfully created\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{drop_schema}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "Create table again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from create table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"table 'drop_schema.drop_table' successfully created.\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"{{drop_schema}}\",\n  \"table\":\"{{drop_table}}\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm correct attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Correct attributes are present\", () =>{",
											"     let jsonData = pm.response.json();",
											"",
											"     pm.expect(jsonData.attributes.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"describe_table\",\n    \"schema\": \"{{drop_schema}}\",\n    \"table\": \"{{drop_table}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Clean up after drop schema tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted 'drop_schema'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{drop_schema}}\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create schema for wildcard test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response from create schema is correct\", () =>{\r",
											"     var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.message).to.eql(\"database 'h*rper%1' successfully created\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"h*rper%1\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "Drop wildcard schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted 'h*rper%1'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"h*rper%1\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop number table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop number table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted table '123.4'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\": \"123\",\n    \"table\": \"4\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop number number table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop number number table is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted table '1123.1'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\": 1123,\n    \"table\": 1\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop number schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop number schema is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted '123'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"123\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop number number schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from drop number number schema is correct\", () =>{",
											"     var jsonData = pm.response.json();",
											"     pm.expect(jsonData.message).to.eql(\"successfully deleted '1123'\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":1123\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post drop attribute tests",
					"item": [
						{
							"name": "create schema drop_attr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"drop_attr\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "create table test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert records into test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Insert some test records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(5);",
											"    pm.expect(jsonData.message).to.eql(\"inserted 5 of 5 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"records\": [\n    {\n        \"id\": 1,\n\t    \"address\": \"5 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 2,\n\t    \"address\": \"4 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 3,\n\t    \"address\": \"3 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 4,\n\t    \"address\": \"2 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 5,\n\t    \"address\": \"1 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    }\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'lastname'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"lastname\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Upsert some values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.upserted_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.upserted_hashes).to.eql([\"123a\"]);",
											"    pm.expect(jsonData.message).to.eql(\"upserted 1 of 1 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"records\": [\n        {\n            \"id\": \"123a\",\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm upsert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect(jsonData[0].id).to.eql(\"123a\");",
											"    pm.expect(jsonData[0].unitsinstock).to.eql(39);",
											"    pm.expect(jsonData[0].unitsnnorder).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[\"123a\"],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute unitsnnorder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'unitsnnorder'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"unitsnnorder\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update some values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.update_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.update_hashes).to.eql([1]);",
											"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"lastname\": \"thor\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect(jsonData[0].id).to.eql(1);",
											"    pm.expect(jsonData[0].lastname).to.eql(\"thor\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'lastname'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"lastname\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete a record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Delete some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.deleted_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.deleted_hashes).to.eql([1]);",
											"    pm.expect(jsonData.message).to.eql(\"1 of 1 record successfully deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"delete\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"hash_values\": [1]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop schema drop_attr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"Create Schema\"] = responseBody.has(\"successfully deleted\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_schema\",\n  \"schema\": \"drop_attr\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						}
					]
				},
				{
					"name": "Post drop attribute tests",
					"item": [
						{
							"name": "create schema drop_attr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"drop_attr\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "create table test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert records into test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Insert some test records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(5);",
											"    pm.expect(jsonData.message).to.eql(\"inserted 5 of 5 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"records\": [\n    {\n        \"id\": 1,\n\t    \"address\": \"5 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 2,\n\t    \"address\": \"4 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 3,\n\t    \"address\": \"3 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 4,\n\t    \"address\": \"2 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 5,\n\t    \"address\": \"1 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    }\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'lastname'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"lastname\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Upsert some values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.upserted_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.upserted_hashes).to.eql([\"123a\"]);",
											"    pm.expect(jsonData.message).to.eql(\"upserted 1 of 1 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"records\": [\n        {\n            \"id\": \"123a\",\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm upsert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect(jsonData[0].id).to.eql(\"123a\");",
											"    pm.expect(jsonData[0].unitsinstock).to.eql(39);",
											"    pm.expect(jsonData[0].unitsnnorder).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[\"123a\"],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute unitsnnorder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'unitsnnorder'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"unitsnnorder\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update some values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.update_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.update_hashes).to.eql([1]);",
											"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"lastname\": \"thor\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect(jsonData[0].id).to.eql(1);",
											"    pm.expect(jsonData[0].lastname).to.eql(\"thor\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'lastname'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"lastname\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete a record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Delete some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.deleted_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.deleted_hashes).to.eql([1]);",
											"    pm.expect(jsonData.message).to.eql(\"1 of 1 record successfully deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"delete\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"hash_values\": [1]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop schema drop_attr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"Create Schema\"] = responseBody.has(\"successfully deleted\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_schema\",\n  \"schema\": \"drop_attr\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						}
					]
				},
				{
					"name": "Post drop attribute tests",
					"item": [
						{
							"name": "create schema drop_attr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"Create Schema\"] = responseBody.has(\"successfully created\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"drop_attr\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						},
						{
							"name": "create table test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert records into test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Insert some test records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(5);",
											"    pm.expect(jsonData.message).to.eql(\"inserted 5 of 5 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"records\": [\n    {\n        \"id\": 1,\n\t    \"address\": \"5 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 2,\n\t    \"address\": \"4 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 3,\n\t    \"address\": \"3 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 4,\n\t    \"address\": \"2 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    },\n    {\n        \"id\": 5,\n\t    \"address\": \"1 North Street\",\n\t    \"lastname\":\"Dog\",\n\t    \"firstname\":\"Harper\"\n    }\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'lastname'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"lastname\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Upsert some values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.upserted_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.upserted_hashes).to.eql([\"123a\"]);",
											"    pm.expect(jsonData.message).to.eql(\"upserted 1 of 1 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"records\": [\n        {\n            \"id\": \"123a\",\n            \"categoryid\": 1,\n            \"unitsnnorder\": 0,\n            \"unitsinstock\": 39\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm upsert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect(jsonData[0].id).to.eql(\"123a\");",
											"    pm.expect(jsonData[0].unitsinstock).to.eql(39);",
											"    pm.expect(jsonData[0].unitsnnorder).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[\"123a\"],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute unitsnnorder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'unitsnnorder'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"unitsnnorder\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update some values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.update_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.update_hashes).to.eql([1]);",
											"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"lastname\": \"thor\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Upsert values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    pm.expect(jsonData[0].id).to.eql(1);",
											"    pm.expect(jsonData[0].lastname).to.eql(\"thor\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop attribute lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Attribute is dropped\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"successfully deleted attribute 'lastname'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"drop_attr\",\n\t\"table\":\"test\",\n\t\"attribute\": \"lastname\" \n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete a record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Delete some values\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.deleted_hashes.length).to.eql(1);",
											"    pm.expect(jsonData.deleted_hashes).to.eql([1]);",
											"    pm.expect(jsonData.message).to.eql(\"1 of 1 record successfully deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"delete\",\n    \"schema\": \"drop_attr\",\n    \"table\": \"test\",\n    \"hash_values\": [1]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Search by hash confirm delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No values come back in search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"drop_attr\",\n  \"table\":\"test\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop schema drop_attr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"Create Schema\"] = responseBody.has(\"successfully deleted\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_schema\",\n  \"schema\": \"drop_attr\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
							},
							"response": []
						}
					]
				},
				{
					"name": "Insert new Employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Insert employee id 924 - 927 address\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inserted_hashes.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"employeeid\": 924,\n    \"address\": \"194 Greenbrook Drive\"\n  },\n  {\n    \"employeeid\": 925,\n    \"address\": \"195 Greenbrook Lane\"\n  },\n  {\n    \"employeeid\": 926,\n    \"address\": \"196 Greenbrook Lane\"\n  },\n  {\n    \"employeeid\": 927,\n    \"address\": \"197 Greenbrook Drive\"\n  }\n]\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records ending in Lane",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"delete from {{schema}}.{{emps_tb}} where address like '%Lane'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Verify records are deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//we want to test that the returned result is an empty array\"",
									"pm.test(\"Verify records deleted\", function(){",
									"    let jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData) && jsonData.length === 0).to.be.true;",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"SELECT * from {{schema}}.{{emps_tb}} where address like '%Lane'\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let expected_result = {",
									"    \"message\": \"2 of 2 records successfully deleted\",",
									"    \"deleted_hashes\": [",
									"        924,",
									"        927",
									"    ],",
									"    \"skipped_hashes\": []",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct response from NoSQL delete\", function () {",
									"   let jsonData = pm.response.json();",
									"   pm.expect(jsonData).to.eql(expected_result);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"delete\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_values\":[924,927]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "NoSQL Verify records are deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//we want to test that the returned result is an empty array\"",
									"pm.test(\"Verify records deleted\", function(){",
									"    let jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData) && jsonData.length === 0).to.be.true;",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_values\":[924,925,926,927],\n\t\"get_attributes\":[\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records with objects and arrays",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Inserted all records\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 4 of 4 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"{{schema}}\",\n\"table\":\"{{emps_tb}}\",\n\"records\": [\n  {\n    \"employeeid\": 7924,\n    \"address\": [{\"height\": 12, \"weight\": 46}, {\"shoe_size\": 12, \"iq\": 46}]\n  },\n  {\n    \"employeeid\": 7925,\n    \"address\": {\"number\": 12, \"age\": 46}\n  },\n  {\n    \"employeeid\": 7926,\n    \"address\": {\"numberArray\": [\"1\", \"2\", \"3\"], \"string\": \"Penny\"}\n  },\n  {\n    \"employeeid\": 7927,\n    \"address\":  [\"1\", \"2\", \"3\"]\n  }\n]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records contaitng objects and arrays",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let expected_result = {",
									"    \"message\": \"4 of 4 records successfully deleted\",",
									"    \"deleted_hashes\": [",
									"        7924,",
									"        7925,",
									"        7926,",
									"        7927",
									"    ],",
									"    \"skipped_hashes\": []",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Deleted all records\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.eql(expected_result);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_values\":[7924, 7925, 7926, 7927]\n}\n\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Verify object and array records deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search finds no records\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.eql([]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\":\"{{schema}}\",\n\t\"table\":\"{{emps_tb}}\",\n\t\"hash_values\":[7924, 7925, 7926, 7925],\n\t\"get_attributes\": [\"employeeid\", \"address\"]\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "test SQL deleteing with numeric hash in single quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"deleted 2 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('2 of 2 records successfully deleted');",
									"});",
									"",
									"pm.test(\"update_hashes has correct hashes\", function () {",
									"    const updated = pm.response.json().deleted_hashes;",
									"    pm.expect(updated).to.have.members([987654321, 987654322]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"sql\",\n    \"sql\": \"DELETE FROM dev.rando WHERE id IN ('987654321', '987654322')\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				},
				{
					"name": "test SQL deleteing with numeric no condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"deleted 2 records\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.contain('2 of 2 records successfully deleted');",
									"});",
									"",
									"pm.test(\"update_hashes has correct hashes\", function () {",
									"    const updated = pm.response.json().deleted_hashes;",
									"    pm.expect(updated).to.have.members([987654323, 987654324]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"sql\",\n    \"sql\": \"DELETE FROM dev.rando\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "These records will be used to test updates with invalid attribute names."
					},
					"response": []
				}
			]
		},
		{
			"name": "8a. Restart HDB to update config",
			"item": [
				{
					"name": "Turn on log audit and custom functions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"set_configuration\",\n    \"logging_auditLog\": true,\n    \"customFunctions_enabled\": true,\n    \"localStudio_enabled\": true,\n    \"clustering_enabled\": true,\n    \"replication_url\": null\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Restart for new settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// This timeout is here to give HDB time to restart before the next text is ran.",
									"setTimeout(() => {}, 60000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9. Transactions",
			"item": [
				{
					"name": "Delete Audit Logs Before Tests",
					"item": [
						{
							"name": "create test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"test_delete_before\",\n  \"table\":\"testerama\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(6);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"testerama\",\n\"records\": [\n  {\n    \"id\": 1,\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": 2,\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": 3,\n    \"address\": \"19 Broadway\"\n  },\n  {\n    \"id\": 4,\n    \"address\": \"34A Mountain View\"\n  },\n  {\n    \"id\": 5,\n    \"address\": \"234 Curtis St\"\n  },\n  {\n    \"id\": 6,\n    \"address\": \"115 Way Rd\"\n  }\n]\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert additional new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"insert_timestamp\", Date.now());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"testerama\",\n\"records\": [\n  {\n    \"id\": 11,\n    \"address\": \"24 South st\"\n  },\n  {\n    \"id\": 12,\n    \"address\": \"6 Truck Lane\"\n  },\n  {\n    \"id\": 13,\n    \"address\": \"19 Broadway\"\n  }\n]\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete records before",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check for job message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.indexOf('Starting job')).to.eql(0);",
											"    ",
											"    eval(pm.globals.get(\"function:getJobIdDelete\"))(jsonData, null);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"delete_audit_logs_before\",\n\t\"timestamp\":\"{{insert_timestamp}}\",\n\t\"schema\":\"test_delete_before\",\n\t\"table\":\"testerama\"\n}\n"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check Delete Audit Logs Job Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"test Job Found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property('status');",
											"    ",
											"    let status = jsonData[0].status;",
											"    ",
											"    switch(status){",
											"        case 'ERROR':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.not.eql('ERROR');",
											"            break;",
											"        case 'COMPLETE':",
											"            console.log(jsonData[0]);",
											"            if(pm.environment.get(\"next_request\")){",
											"                postman.setNextRequest(pm.environment.get(\"next_request\"));",
											"            }",
											"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
											"            break;",
											"        case '0':",
											"        case 0:",
											"        case 'IN_PROGRESS':",
											"            console.log('in progress, checking again');",
											"            setTimeout(()=>{}, 1000);",
											"            postman.setNextRequest('Check Delete Audit Logs Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
											"            break;",
											"        default:",
											"            postman.setNextRequest('Check Delete Audit Logs Job Completed');",
											"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
											"            break;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 200);",
											"console.log(\"Checking Job \" + pm.environment.get(\"job_id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"function:getJobIdDelete\", (jsonData, next_req)=>{",
									"    let id_index = jsonData.message.indexOf('id ');",
									"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
									"    pm.environment.set(\"job_id\", parsedId);",
									"    pm.environment.set(\"next_request\", next_req);",
									"    postman.setNextRequest(\"Check Delete Audit Logs Job Completed\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Read Transaction Logs",
					"item": [
						{
							"name": "create test table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"create_table\",\n  \"schema\":\"test_delete_before\",\n  \"table\":\"test_read\",\n  \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert new records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"test_delete_before\",\n    \"table\": \"test_read\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"name\": \"Penny\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Kato\",\n            \"age\": 6\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert more records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"test_read\",\n\"records\": [{\"id\": 3, \"name\": \"Riley\", \"age\": 7}]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.update_hashes.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"update\",\n\"schema\":\"test_delete_before\",\n\"table\":\"test_read\",\n\"records\": [{\"id\": 1, \"name\": \"Penny B\", \"age\": 8}, {\"id\": 2, \"name\": \"Kato B\"}]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert another record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"test_delete_before\",\n\"table\":\"test_read\",\n\"records\": [{\"id\": \"blerrrrr\", \"name\": \"Rosco\"}]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update a record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check update_hashes array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.update_hashes.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"update\",\n\"schema\":\"test_delete_before\",\n\"table\":\"test_read\",\n\"records\": [{\"id\": \"blerrrrr\", \"breed\": \"Mutt\"}]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Delete some records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check deleted_hashes array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.deleted_hashes.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"delete\",\n\"schema\":\"test_delete_before\",\n\"table\":\"test_read\",\n\"hash_values\": [3,1]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert another record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check inserted_hashed array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.inserted_hashes.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"test_delete_before\",\n    \"table\": \"test_read\",\n    \"records\": [\n        {\n            \"id\": 4,\n            \"name\": \"Griff\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Upsert records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check update_hashes array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.upserted_hashes.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"upsert\",\n    \"schema\": \"test_delete_before\",\n    \"table\": \"test_read\",\n    \"records\": [\n        {\n            \"id\": 4,\n            \"name\": \"Griffy Jr.\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Gizmo\",\n            \"age\": 10\n        },\n        {\n            \"name\": \"Moe\",\n            \"age\": 11\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Check upsert transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check upsert transaction record format/values\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"5\"].length).to.eql(1);",
											"",
											"    const transaction = jsonData[\"5\"][0]",
											"    pm.expect(transaction.operation).to.eql(\"upsert\");",
											"    pm.expect(transaction.records.length).to.eql(1);",
											"    ",
											"    Object.keys(transaction.records[0]).forEach(key => {",
											"        pm.expect([\"id\", \"name\", \"age\", \"__updatedtime__\", \"__createdtime__\"]).includes(key);",
											"    });",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"read_audit_log\",\n    \"schema\": \"test_delete_before\",\n    \"table\": \"test_read\",\n    \"search_type\": \"hash_value\",\n    \"search_values\": [5]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Fetch all Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check array length\", function () {",
											"    pm.expect(jsonData.length).to.eql(8);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check upsert transaction format/random values\", function () {",
											"    const expected_attrs = [\"id\", \"name\", \"__updatedtime__\"];",
											"    const other_attrs = [\"age\", \"__createdtime__\"];",
											"    ",
											"    const upsert_trans = jsonData[7]; console.log(upsert_trans);",
											"    pm.expect(upsert_trans.operation).to.eql(\"upsert\");",
											"    pm.expect(upsert_trans.records.length).to.eql(3);",
											"",
											"    pm.expect(upsert_trans.records[0].id).to.eql(4);",
											"    Object.keys(upsert_trans.records[0]).forEach(key => {",
											"        pm.expect([...expected_attrs, ...other_attrs]).includes(key);",
											"    });",
											"    pm.expect(upsert_trans.records[1].id).to.eql(5);",
											"    Object.keys(upsert_trans.records[1]).forEach(key => {",
											"        pm.expect([...expected_attrs, ...other_attrs]).includes(key);",
											"    });",
											"    pm.expect(upsert_trans.records[2].id).to.be.string;",
											"    Object.keys(upsert_trans.records[2]).forEach(key => {",
											"        pm.expect([...expected_attrs, ...other_attrs]).includes(key);",
											"    });",
											"",
											"});",
											"",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"read_audit_log\",\n\"schema\":\"test_delete_before\",\n\"table\":\"test_read\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Fetch timestamp Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    let user = pm.environment.get(\"username\");",
											"    pm.expect(jsonData.length).to.eql(8);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"read_audit_log\",\n\"schema\":\"test_delete_before\",\n\"table\":\"test_read\",\n\"search_type\": \"timestamp\",\n\"search_values\":[]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Fetch user transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    let user = pm.environment.get(\"username\");",
											"    pm.expect(jsonData[user].length).to.eql(8);",
											"",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"read_audit_log\",\n\"schema\":\"test_delete_before\",\n\"table\":\"test_read\",\n\"search_type\": \"username\",\n\"search_values\":[\"{{username}}\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Fetch hash transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check array length\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"1\"].length).to.eql(3);",
											"    pm.expect(jsonData[\"blerrrrr\"].length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(()=>{}, 100);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"read_audit_log\",\n    \"schema\": \"test_delete_before\",\n    \"table\": \"test_read\",\n    \"search_type\": \"hash_value\",\n    \"search_values\": [\n        1,\n        \"blerrrrr\"\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "drop test_read table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"setTimeout(()=>{}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_table\",\n  \"schema\":\"test_delete_before\",\n  \"table\":\"test_read\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "10. Other Role Tests",
			"item": [
				{
					"name": "Describe ops role testing",
					"item": [
						{
							"name": "super_user tests",
							"item": [
								{
									"name": "Describe schema - SU on system schema",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
													"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Your role does not have permission to view database metadata for 'system'\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\": \"system\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Schema - schema doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"pm.test(\"Should return schema not found error\", function() {",
													"    pm.expect(jsonResponse.error).to.eql(\"database 'blahh' does not exist\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\": \"blahh\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Table - SU on system table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
													"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Your role does not have permission to view database metadata for 'system'\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\": \"system\",\n\t\"table\": \"hdb_user\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Table - schema and table don't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"pm.test(\"Should return table not found error\", function() {",
													"    pm.expect(jsonResponse.error).to.eql(\"database 'blahh' does not exist\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\": \"blahh\",\n\t\"table\": \"blahh\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Table - table doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"pm.test(\"Should return table not found error\", function() {",
													"    pm.expect(jsonResponse.error).to.eql(\"Table 'dev.blahh' does not exist\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\": \"dev\",\n\t\"table\": \"blahh\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "[NOMINAL] Non-SU test_user",
							"item": [
								{
									"name": "Add non-SU role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"responseData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\": \"add_role\",\n\t\"role\": \"test_dev_role\",\n\t\"permission\": {\n\t\t\"super_user\": false,\n\t\t\"northnwd\": {\n\t\t\t\"tables\": {\n\t\t\t\t\"region\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"regiondescription\",\n\t\t\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"territories\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": []\n\t\t\t\t},\n\t\t\t\t\"categories\": {\n\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\"delete\": true,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"description\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\t\t\"delete\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"products\": {\n\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\"update\": false,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"discontinued\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"other\": {\n\t\t\t\"tables\": {\n\t\t\t\t\"owner\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\"delete\": false,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"name\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"another\": {\n\t\t\t\"tables\": {\n\t\t\t\t\"breed\": {\n\t\t\t\t\t\"read\": true,\n\t\t\t\t\t\"insert\": true,\n\t\t\t\t\t\"update\": true,\n\t\t\t\t\t\"delete\": true,\n\t\t\t\t\t\"attribute_permissions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"attribute_name\": \"name\",\n\t\t\t\t\t\t\t\"read\": false,\n\t\t\t\t\t\t\t\"insert\": false,\n\t\t\t\t\t\t\t\"update\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Add User with non-SU role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\": \"add_user\",\n\t\"role\": \"test_dev_role\",\n\t\"username\": \"test_user\",\n\t\"password\": \"{{password}}\",\n\t\"active\": true\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Describe All - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var json_response = pm.response.json();",
													"",
													"pm.test(\"Should return all schemas/tables user has permissions for\", function() {",
													"    pm.expect(Object.keys(json_response).length).to.eql(3);",
													"    pm.expect(json_response).to.haveOwnProperty('another');",
													"    pm.expect(json_response.another).to.haveOwnProperty('breed');",
													"    pm.expect(json_response.another.breed.schema).to.eql('another');",
													"    pm.expect(json_response.another.breed.name).to.eql('breed');",
													"    pm.expect(json_response.another.breed.attributes.length).to.eql(0);",
													"    pm.expect(json_response.another.breed.hash_attribute).to.eql('id');",
													"    pm.expect(json_response.another.breed.record_count).to.eql(350);",
													"    pm.expect(json_response.another.breed).to.haveOwnProperty('clustering_stream_name');",
													"    pm.expect(json_response.another.breed).to.haveOwnProperty('last_updated_record');",
													"    pm.expect(json_response).to.haveOwnProperty('northnwd');",
													"    pm.expect(json_response.northnwd).to.haveOwnProperty('categories');",
													"    pm.expect(json_response.northnwd).to.haveOwnProperty('region');",
													"    pm.expect(json_response.northnwd).to.haveOwnProperty('territories');",
													"    pm.expect(Object.keys(json_response.northnwd).length).to.eql(3);",
													"    pm.expect(Object.keys(json_response.other).length).to.eql(1);",
													"    pm.expect(json_response.other).to.haveOwnProperty('owner');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{test_user_name}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_all\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Schema - restricted perms - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is not empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
													"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"database 'dev' does not exist\");",
													"});",
													"",
													"pm.test(\"unauthorized_access is empty\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{test_user_name}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\": \"dev\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Schema - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"",
													"pm.test(\"Should return all table metadata user has permissions for\", function() {",
													"    var response_arr = Object.values(jsonResponse);",
													"    pm.expect(response_arr.length).to.eql(3);",
													"    pm.expect(jsonResponse).to.haveOwnProperty('categories');",
													"    pm.expect(jsonResponse).to.haveOwnProperty('region');",
													"    pm.expect(jsonResponse).to.haveOwnProperty('territories');",
													"",
													"",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{test_user_name}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\": \"northnwd\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Table - restricted perms - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is not empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
													"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'northnwd.shippers' does not exist\");",
													"});",
													"",
													"pm.test(\"unauthorized_access is empty\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{test_user_name}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\": \"northnwd\",\n\t\"table\": \"shippers\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Table - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"",
													"pm.test(\"Should return metadata for table\", function() {",
													"    pm.expect(jsonResponse).to.haveOwnProperty('schema')",
													"    pm.expect(jsonResponse).to.haveOwnProperty('name')",
													"    pm.expect(jsonResponse).to.haveOwnProperty('attributes')",
													"    pm.expect(jsonResponse).to.haveOwnProperty('hash_attribute')",
													"    pm.expect(jsonResponse).to.haveOwnProperty('clustering_stream_name')",
													"    pm.expect(jsonResponse).to.haveOwnProperty('record_count')",
													"    pm.expect(jsonResponse).to.haveOwnProperty('last_updated_record')",
													"    pm.expect(jsonResponse.attributes.length).to.equal(2)",
													"",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{test_user_name}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\": \"northnwd\",\n\t\"table\": \"region\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe  SYSTEM schema as non-SU",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"Includes correct SU-only op error message included in unauthorized_access\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
													"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Your role does not have permission to view database metadata for 'system'\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{test_user_name}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnJvb3Q="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\"operation\":\"describe_table\", \n\"schema\":\"system\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										},
										"description": "Confirm that a non super user can NOT describe all on system table"
									},
									"response": []
								},
								{
									"name": "Describe  SYSTEM table as non-SU",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"Includes correct SU-only op error message included in unauthorized_access\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
													"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Your role does not have permission to view database metadata for 'system'\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{test_user_name}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnJvb3Q="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\"operation\":\"describe_table\", \n\"table\":\"hdb_user\", \n\"schema\":\"system\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										},
										"description": "Confirm that a non super user can NOT describe all on system table"
									},
									"response": []
								},
								{
									"name": "List Users does not return protected info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"",
													"pm.test(\"Should not return password, hash, or refresh token data for users\", function() {",
													"    jsonResponse.forEach(user => {",
													"            pm.expect(user.password).to.be.undefined;",
													"            pm.expect(user.hash).to.be.undefined;",
													"            pm.expect(user.refresh_token).to.be.undefined;",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"list_users\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Drop test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body includes correct message\", function () {",
													"    const respMsg = pm.response.json().message;",
													"    pm.expect(respMsg).to.equal(",
													"        \"test_user successfully deleted\"",
													"    );",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46cGFzc3dvcmQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Drop_role - non-SU role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body includes correct message\", function () {",
													"    const respMsg = pm.response.json().message;",
													"    pm.expect(respMsg).to.equal(",
													"        \"test_dev_role successfully deleted\"",
													"    );",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46cGFzc3dvcmQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Non-SU role w/ NO PERMS",
							"item": [
								{
									"name": "Add non-SU role with NO PERMS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"responseData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test_no_perms\",\n   \"permission\":{\n      \"super_user\": false\n   }\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Add User with new NO PERMS Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"developer_test_no_perms\",\n\"username\":\"no_perms_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Describe All - test user NO PERMS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"",
													"pm.test(\"Should return empty object\", function() {",
													"    pm.expect(jsonResponse).to.eql({});",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "no_perms_user",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_all\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Schema - test user NO PERMS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is not empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
													"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"database 'northnwd' does not exist\");",
													"});",
													"",
													"pm.test(\"unauthorized_access is empty\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "no_perms_user",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\":\"northnwd\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Table - test user NO PERMS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is not empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
													"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'northnwd.region' does not exist\");",
													"});",
													"",
													"pm.test(\"unauthorized_access is empty\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "no_perms_user",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\":\"northnwd\",\n\t\"table\": \"region\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Drop no_perms_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body includes correct message\", function () {",
													"    const respMsg = pm.response.json().message;",
													"    pm.expect(respMsg).to.equal(",
													"        \"no_perms_user successfully deleted\"",
													"    );",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46cGFzc3dvcmQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"no_perms_user\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Drop_role - NO PERMS role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body includes correct message\", function () {",
													"    const respMsg = pm.response.json().message;",
													"    pm.expect(respMsg).to.equal(",
													"        \"developer_test_no_perms successfully deleted\"",
													"    );",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46cGFzc3dvcmQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operation\":\"drop_role\",\n    \"id\":\"{{role_id}}\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Non-SU role w/ ONE TABLE PERM",
							"item": [
								{
									"name": "Add non-SU role with perm for ONE table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"responseData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test_one_perm\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n            \"employees\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"city\",\n                     \"read\":false,\n                     \"insert\":true,\n                     \"update\":false\n                  },\n                  {\n                     \"attribute_name\": \"firstname\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false\n                  },\n                  {\n                     \"attribute_name\": \"lastname\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false\n                  },\n                  {\n                     \"attribute_name\": \"region\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Add User with new ONE PERM Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\": \"add_user\",\n\t\"role\": \"developer_test_one_perm\",\n\t\"username\": \"one_perm_user\",\n\t\"password\": \"{{password}}\",\n\t\"active\": true\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										},
										"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
									},
									"response": []
								},
								{
									"name": "Describe All - test user ONE TABLE PERM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"",
													"pm.test(\"Should return the ONE schema w/ ONE table user has permissions for\", function() {",
													"    pm.expect(Object.keys(jsonResponse).length).to.eql(1);",
													"    pm.expect(Object.keys(jsonResponse.northnwd).length).to.eql(1);",
													"    pm.expect(Object.keys(jsonResponse.northnwd.employees).length).to.eql(11)",
													"    pm.expect(jsonResponse.northnwd.employees.db_size).to.be.a('number')",
													"    pm.expect(jsonResponse.northnwd.employees.attributes.length).to.eql(4)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "one_perm_user",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_all\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Schema - restricted schema - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is not empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
													"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"database 'dev' does not exist\");",
													"});",
													"",
													"pm.test(\"unauthorized_access is empty\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "one_perm_user",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\": \"dev\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Schema - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"",
													"var expected_schema = {",
													"    northnwd: {",
													"        employees: [\"employeeid\", \"city\", \"firstname\", \"lastname\"]",
													"    }",
													"}",
													"",
													"pm.test(\"Should return all table metadata user has permissions for\", function() {",
													"    var response_arr = Object.values(jsonResponse);",
													"    pm.expect(response_arr.length).to.eql(1);",
													"    response_arr.forEach(table_data => {",
													"        const { name, schema, attributes } = table_data;",
													"        attributes.forEach(attr => {",
													"            pm.expect(expected_schema[schema][name].includes(attr.attribute)).to.eql(true);",
													"        })",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "one_perm_user",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_schema\",\n\t\"schema\": \"northnwd\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Table - restricted table - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Op auth error message\", function () {",
													"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
													"});",
													"",
													"pm.test(\"invalid_schema_items is not empty\", function () {",
													"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
													"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'northnwd.shippers' does not exist\");",
													"});",
													"",
													"pm.test(\"unauthorized_access is empty\", function () {",
													"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "one_perm_user",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\": \"northnwd\",\n\t\"table\": \"shippers\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Describe Table - non-SU test_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonResponse = pm.response.json();",
													"let top_attributes = [\"name\", \"schema\", \"id\", \"hash_attribute\", \"__updatedtime__\", \"__createdtime__\", \"attributes\", \"record_count\"];",
													"var expected_attributes = [\"employeeid\", \"city\", \"firstname\", \"lastname\"];",
													"",
													"pm.test(\"Should return metadata for table\", function() {",
													"    pm.expect(jsonResponse.schema).to.eql('northnwd');",
													"    pm.expect(jsonResponse.name).to.eql('employees');",
													"    jsonResponse.attributes.forEach(attr => {",
													"        pm.expect(expected_attributes.includes(attr.attribute)).to.eql(true);",
													"    })",
													"    pm.expect(jsonResponse.attributes.length).to.equal(4)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "one_perm_user",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\": \"northnwd\",\n\t\"table\": \"employees\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": [
										{
											"name": "Decribe All",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk",
														"name": "Authorization",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\":\"describe_all\"\n\n}"
												},
												"url": {
													"raw": "{{HDB_ENDPOINT}}",
													"host": [
														"{{HDB_ENDPOINT}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "connection",
													"value": "keep-alive",
													"name": "connection",
													"description": ""
												},
												{
													"key": "content-length",
													"value": "568",
													"name": "content-length",
													"description": ""
												},
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8",
													"name": "content-type",
													"description": ""
												},
												{
													"key": "date",
													"value": "Fri, 01 Sep 2017 17:07:00 GMT",
													"name": "date",
													"description": ""
												},
												{
													"key": "etag",
													"value": "W/\"238-gfg0d+lv1qmocnKKFjlrSBm00dM\"",
													"name": "etag",
													"description": ""
												},
												{
													"key": "x-powered-by",
													"value": "HarperDB",
													"name": "x-powered-by",
													"description": ""
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Drop one_perm_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body includes correct message\", function () {",
													"    const respMsg = pm.response.json().message;",
													"    pm.expect(respMsg).to.equal(",
													"        \"one_perm_user successfully deleted\"",
													"    );",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46cGFzc3dvcmQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"one_perm_user\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								},
								{
									"name": "Drop_role - ONE TABLE PERMS role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body includes correct message\", function () {",
													"    const respMsg = pm.response.json().message;",
													"    pm.expect(respMsg).to.equal(",
													"        \"developer_test_one_perm successfully deleted\"",
													"    );",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46cGFzc3dvcmQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operation\":\"drop_role\",\n    \"id\":\"{{role_id}}\"\n}"
										},
										"url": {
											"raw": "{{host}}:{{port}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}"
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Add Role - error checks",
					"item": [
						{
							"name": "Add role with mismatched table/attr READ perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes mismatched perms error for table\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories[0]).to.equal(\"You have a conflict with TABLE permissions for 'northnwd.categories' being false and ATTRIBUTE permissions being true\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":false,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_permissions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true\n            }\n           ]\n      }\n   }\n}\n  }\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with non-boolean READ table perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes non-boolean error for READ perm\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories.length).to.equal(1);",
											"    pm.expect(responseData.schema_permissions.northnwd_categories[0]).to.equal(\"Table READ permission must be a boolean\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":\"Doooooh\",\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_permissions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true\n            }\n           ]\n      }\n   }\n}\n  }\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with non-boolean INSERT/DELETE perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes non-boolean error for INSERT and DELETE table perms\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories.length).to.equal(2);",
											"    pm.expect(responseData.schema_permissions.northnwd_categories).to.includes(\"Table INSERT permission must be a boolean\");",
											"    pm.expect(responseData.schema_permissions.northnwd_categories).to.includes(\"Table DELETE permission must be a boolean\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":true,\n         \"insert\":\"Doooooh\",\n         \"update\":true,\n         \"delete\":\"Doooooh\",\n         \"attribute_permissions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true\n            }\n           ]\n      }\n   }\n}\n  }\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with non-boolean READ and UPDATE attribute perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes mismatched perms error for table\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories.length).to.equal(2);",
											"    pm.expect(responseData.schema_permissions.northnwd_categories).to.include(\"READ attribute permission for 'description' must be a boolean\");",
											"    pm.expect(responseData.schema_permissions.northnwd_categories).to.include(\"UPDATE attribute permission for 'description' must be a boolean\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":true,\n         \"insert\":true,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_permissions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":\"Doooooh\",\n               \"insert\":true,\n               \"update\":\"Doooooh\"\n            }\n           ]\n      }\n   }\n}\n  }\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with mismatched table/attr INSERT perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes mismatched perms error for table\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories[0]).to.equal(\"You have a conflict with TABLE permissions for 'northnwd.categories' being false and ATTRIBUTE permissions being true\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_role\",\n\"role\":\"developer_test\",\n\"permission\":{\n  \"super_user\": false,\n  \"northnwd\":{\n   \"tables\": {\n      \"categories\": {\n         \"read\":true,\n         \"insert\":false,\n         \"update\":true,\n         \"delete\":false,\n         \"attribute_permissions\":[\n           {\n               \"attribute_name\": \"description\",\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true\n            }\n           ]\n      }\n   }\n}\n  }\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with mismatched table/attr UPDATE perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes mismatched perms error for table\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories[0]).to.equal(\"You have a conflict with TABLE permissions for 'northnwd.categories' being false and ATTRIBUTE permissions being true\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n            \"categories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"description\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":true\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with multiple mismatched table/attr perms - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes mismatched perms error for table\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories[0]).to.equal(\"You have a conflict with TABLE permissions for 'northnwd.categories' being false and ATTRIBUTE permissions being true\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n            \"categories\": {\n               \"read\":false,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"description\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":true\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with with misformed attr perms array key  - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes invalid perms key error and missing attr perms key for table\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories).to.include(\"Invalid table permission key value 'attribute_restrictions'\");",
											"    pm.expect(responseData.schema_permissions.northnwd_categories).to.include(\"Missing 'attribute_permissions' array\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n            \"categories\": {\n               \"read\":false,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_restrictions\":[\n                  {\n                     \"attribute_name\": \"description\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":true\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with with missing attr perms for table  - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\")",
											"})",
											"",
											"pm.test(\"Main perms error array is empty\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Schema perms error array includes missing perms key error for table\", function() {",
											"    pm.expect(responseData.schema_permissions.northnwd_categories[0]).to.equal(\"Missing 'attribute_permissions' array\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n            \"categories\": {\n               \"read\":false,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with with perms for non-existent schema  - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\");",
											"})",
											"",
											"pm.test(\"Main perms error array includes schema error message\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(1);",
											"    pm.expect(responseData.main_permissions[0]).to.equal(\"database 'wrong_schema' does not exist\");",
											"})",
											"",
											"pm.test(\"Schema perms error array is empty\", function() {",
											"    pm.expect(Object.keys(responseData.schema_permissions).length).to.equal(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test\",\n   \"permission\":{\n      \"super_user\": false,\n      \"wrong_schema\":{\n         \"tables\": {\n            \"categories\": {\n               \"read\":false,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add role with with perms for non-existent table  - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Perms mismatch error msg is returned\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\",",
											"    \"main_permissions\");",
											"})",
											"",
											"pm.test(\"Main perms error array includes table error message\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(1);",
											"    pm.expect(responseData.main_permissions[0]).to.equal(\"Table 'northnwd.wrong_table' does not exist\");",
											"})",
											"",
											"pm.test(\"Schema perms error array is empty\", function() {",
											"    pm.expect(Object.keys(responseData.schema_permissions).length).to.equal(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n            \"wrong_table\": {\n               \"read\":false,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add SU role with perms  - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test(\"Response has roler permission error msg\", function() {",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\");",
											"});",
											"",
											"pm.test(\"Main perms error array includes super user/perms mixed error message\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(1);",
											"    pm.expect(responseData.main_permissions[0]).to.equal(\"Roles with 'super_user' set to true cannot have other permissions set.\");",
											"})",
											"",
											"pm.test(\"Schema perms error array is empty\", function() {",
											"    pm.expect(Object.keys(responseData.schema_permissions).length).to.equal(0);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test\",\n   \"permission\":{\n      \"super_user\": true,\n      \"northnwd\":{\n         \"tables\": {\n            \"categories\": {\n               \"read\":false,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\": []\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add CU role with perms  - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test(\"Response has roler permission error msg\", function() {",
											"    pm.response.to.have.jsonBody('error');",
											"    pm.expect(responseData.error).to.equal(\"Errors in the role permissions JSON provided\");",
											"});",
											"",
											"pm.test(\"Main perms error array includes cluster user/perms mixed error message\", function() {",
											"    pm.expect(responseData.main_permissions.length).to.equal(1);",
											"    pm.expect(responseData.main_permissions[0]).to.equal(\"Roles with 'cluster_user' set to true cannot have other permissions set.\");",
											"})",
											"",
											"pm.test(\"Schema perms error array is empty\", function() {",
											"    pm.expect(Object.keys(responseData.schema_permissions).length).to.equal(0);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test\",\n   \"permission\":{\n      \"cluster_user\": true,\n      \"northnwd\":{\n         \"tables\": {\n            \"categories\": {\n               \"read\":false,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\": []\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test SU-only Ops Permissions",
					"item": [
						{
							"name": "Add non-SU role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"test_dev_role\",\n   \"permission\":{\n   \"super_user\": false,\n   \"northnwd\":{\n         \"tables\": {\n            \"region\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[{\n                     \"attribute_name\": \"regiondescription\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false\n                  }]\n            },\n            \"territories\": {\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[]\n            },\n            \"categories\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"description\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false,\n                     \"delete\":true\n                  }\n               ]\n            },\n            \"products\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"discontinued\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      },\n       \"other\": {\n         \"tables\": {\n            \"owner\": {\n               \"read\": true,\n               \"insert\": false,\n               \"update\": true,\n               \"delete\": false,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":true\n                  }\n               ]\n            }\n         }\n      },\n      \"another\": {\n         \"tables\": {\n            \"breed\": {\n               \"read\": true,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": true,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add User with non-SU role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"test_dev_role\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "system_information as non-SU - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											"",
											"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
											"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
											"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'systemInformation' is restricted to 'super_user' roles\");",
											"});",
											"",
											"pm.test(\"invalid_schema_items is empty\", function () {",
											"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "test_user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46MTQwMA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"system_information\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
							},
							"response": []
						},
						{
							"name": "Drop test_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body includes correct message\", function () {",
											"    const respMsg = pm.response.json().message;",
											"    pm.expect(respMsg).to.equal(",
											"        \"test_user successfully deleted\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQ="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop_role - non-SU role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body includes correct message\", function () {",
											"    const respMsg = pm.response.json().message;",
											"    pm.expect(respMsg).to.equal(",
											"        \"test_dev_role successfully deleted\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQ="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "System schema role perms tests",
					"item": [
						{
							"name": "Add non-SU role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"test_dev_role\",\n   \"permission\":{\n   \"super_user\": false,\n   \"northnwd\":{\n         \"tables\": {\n            \"region\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[{\n                     \"attribute_name\": \"regiondescription\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false\n                  }]\n            },\n            \"territories\": {\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[]\n            },\n            \"categories\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"description\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false,\n                     \"delete\":true\n                  }\n               ]\n            },\n            \"products\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"discontinued\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      },\n       \"other\": {\n         \"tables\": {\n            \"owner\": {\n               \"read\": true,\n               \"insert\": false,\n               \"update\": true,\n               \"delete\": false,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":true\n                  }\n               ]\n            }\n         }\n      },\n      \"another\": {\n         \"tables\": {\n            \"breed\": {\n               \"read\": true,\n               \"insert\": true,\n               \"update\": true,\n               \"delete\": true,\n               \"attribute_permissions\": [\n                  {\n                     \"attribute_name\": \"name\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add User with non-SU role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"test_dev_role\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Query system table as SU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SU can view system table\", function () {",
											"    var jsonData = pm.response.json();",
											"    var objKeysData = Object.keys(jsonData[0]);",
											"    pm.expect(jsonData[0].username).to.eql(environment[\"username\"]);",
											"    pm.expect(objKeysData.includes(\"password\")).to.be.true;",
											"    pm.expect(objKeysData.includes(\"role\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n  \"operation\": \"search_by_value\", \n  \"table\":\"hdb_user\",\n  \"schema\": \"system\",\n  \"search_attribute\":\"username\",\n  \"search_value\":\"{{username}}\",\n  \"get_attributes\":[\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a super user can query a system table"
							},
							"response": []
						},
						{
							"name": "Query system table non SU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											"",
											"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
											"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
											"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
											"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('read');",
											"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('system');",
											"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('hdb_user');",
											"});",
											"",
											"",
											"pm.test(\"invalid_schema_items is empty\", function () {",
											"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n  \"operation\": \"search_by_value\", \n  \"table\":\"hdb_user\",\n  \"schema\": \"system\",\n  \"search_attribute\":\"username\",\n  \"search_value\":\"{{username}}\",\n  \"get_attributes\":[\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a non super user can NOT query a system table"
							},
							"response": []
						},
						{
							"name": "Insert record system table as non SU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											"",
											"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
											"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
											"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions.length).to.eql(1);",
											"    pm.expect(jsonData.unauthorized_access[0].required_table_permissions[0]).to.eql('insert');",
											"    pm.expect(jsonData.unauthorized_access[0].schema).to.eql('system');",
											"    pm.expect(jsonData.unauthorized_access[0].table).to.eql('hdb_user');",
											"});",
											"",
											"pm.test(\"invalid_schema_items is empty\", function () {",
											"    pm.expect(jsonData.invalid_schema_items.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"insert\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"records\": [\n  {\n\t\"username\": \"admin\",\n    \"role\": \"0bffc136-0b0b-4582-8efe-44031f40d906\",\n    \"password\": \"fakepassword\",\n    \"active\": true\n  }\n]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a non super user can NOT insert record into system table"
							},
							"response": []
						},
						{
							"name": "Update record system table as non SU ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"update\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"records\": [\n  {\n\t\"username\": \"admin\",\n    \"role\": \"0bffc136-0b0b-4582-8efe-44031f40d906\",\n    \"password\": \"fakepassword\",\n    \"active\": true\n  }\n]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a non super user can NOT update record in system table"
							},
							"response": []
						},
						{
							"name": "Delete record system table as non SU ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"delete\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"hash_values\": [\"admin1\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a non super user can NOT delete record from system table"
							},
							"response": []
						},
						{
							"name": "Drop system table as SU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"drop_table\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a super user can NOT drop system table."
							},
							"response": []
						},
						{
							"name": "Drop system table as non SU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"drop_table\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a non super user can NOT drop system table."
							},
							"response": []
						},
						{
							"name": "Drop test_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body includes correct message\", function () {",
											"    const respMsg = pm.response.json().message;",
											"    pm.expect(respMsg).to.equal(",
											"        \"test_user successfully deleted\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQ="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop_role - non-SU role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body includes correct message\", function () {",
											"    const respMsg = pm.response.json().message;",
											"    pm.expect(respMsg).to.equal(",
											"        \"test_dev_role successfully deleted\"",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQ="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "SQL update system table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"UPDATE system.hdb_user SET name = 'jerry' where id = 1\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a super user can NOT update record in system table"
							},
							"response": []
						},
						{
							"name": "SQL delete system table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"delete from system.hdb_user where id = 1\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a super user can NOT update record in system table"
							},
							"response": []
						},
						{
							"name": "Delete attribute from system table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3Q="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"operation\":\"drop_attribute\",\n\"schema\":\"system\",\n\"table\":\"hdb_user\",\n\"attribute\": \"password\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Confirm that a super user can NOT delete record from system table"
							},
							"response": []
						}
					]
				},
				{
					"name": "Search schema error checks",
					"item": [
						{
							"name": "Add non-SU role for schema tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"responseData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"add_role\",\n    \"role\": \"test_schema_user\",\n    \"permission\": {\n        \"super_user\": false,\n        \"northnwd\": {\n            \"tables\": {\n                \"customers\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": []\n                },\n                \"suppliers\": {\n                    \"read\": false,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": []\n                },\n                \"region\": {\n                    \"read\": true,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"regiondescription\",\n                            \"read\": true,\n                            \"insert\": false,\n                            \"update\": false,\n                            \"delete\": false\n                        }\n                    ]\n                },\n                \"territories\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"territorydescription\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": false,\n                            \"delete\": false\n                        }\n                    ]\n                },\n                \"categories\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"description\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true,\n                            \"delete\": false\n                        }\n                    ]\n                },\n                \"shippers\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"companyname\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": false,\n                            \"delete\": false\n                        }\n                    ]\n                }\n            }\n        },\n        \"dev\": {\n            \"tables\": {\n                \"dog\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"__createdtime__\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"__updatedtime__\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"age\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": false\n                        },\n                        {\n                            \"attribute_name\": \"dog_name\",\n                            \"read\": true,\n                            \"insert\": false,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"adorable\",\n                            \"read\": true,\n                            \"insert\": true,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"owner_id\",\n                            \"read\": false,\n                            \"insert\": true,\n                            \"update\": true\n                        }\n                    ]\n                },\n                \"breed\": {\n                    \"read\": true,\n                    \"insert\": true,\n                    \"update\": true,\n                    \"delete\": true,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"__createdtime__\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"__updatedtime__\",\n                            \"read\": false,\n                            \"insert\": true,\n                            \"update\": true\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Add test_user  with new role for schema error tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"add_user\",\n    \"role\": \"test_schema_user\",\n    \"username\": \"test_user\",\n    \"password\": \"{{password}}\",\n    \"active\": true\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "NoSQL - Non-SU search on schema that doesn't exist as test_user - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											"",
											"pm.test(\"Does not include anything in unauthorized_access\", function () {",
											"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Includes search schema in invalid_schema_items array\", function () {",
											"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
											"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"database 'rick_rolled' does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"search_by_value\",\n    \"schema\": \"rick_rolled\",\n    \"table\": \"{{regi_tb}}\",\n    \"hash_attribute\": \"id\",\n    \"search_attribute\": \"id\",\n    \"search_value\": \"*\",\n    \"get_attributes\": [\n        \"*\"\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "NoSQL - SU search on schema that doesn't exist as test_user - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Schema error message included\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"database 'rick_rolled' does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"search_by_value\",\n    \"schema\": \"rick_rolled\",\n    \"table\": \"{{regi_tb}}\",\n    \"hash_attribute\": \"id\",\n    \"search_attribute\": \"id\",\n    \"search_value\": \"*\",\n    \"get_attributes\": [\n        \"*\"\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "NoSQL - Non-SU search on table that doesn't exist as test_user - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											"",
											"pm.test(\"Does not include anything in unauthorized_access\", function () {",
											"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Includes search schema in invalid_schema_items array\", function () {",
											"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
											"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'dev.rick_rolled' does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"search_by_value\",\n    \"schema\": \"dev\",\n    \"table\": \"rick_rolled\",\n    \"hash_attribute\": \"id\",\n    \"search_attribute\": \"id\",\n    \"search_value\": \"*\",\n    \"get_attributes\": [\n        \"*\"\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "NoSQL - SU search on table that doesn't exist as test_user - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Schema error message included\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"Table 'dev.rick_rolled' does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"search_by_value\",\n    \"schema\": \"dev\",\n    \"table\": \"rick_rolled\",\n    \"hash_attribute\": \"id\",\n    \"search_attribute\": \"id\",\n    \"search_value\": \"*\",\n    \"get_attributes\": [\n        \"*\"\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "SQL - Non-SU select on schema that doesn't exist as test_user - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											"",
											"pm.test(\"Does not include anything in unauthorized_access\", function () {",
											"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Includes search schema in invalid_schema_items array\", function () {",
											"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
											"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"database 'rick_rolled' does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT * FROM rick_rolled.{{regi_tb}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "SQL - SU search on schema that doesn't exist as test_user - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Schema error message included\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"database 'rick_rolled' does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT * FROM rick_rolled.{{regi_tb}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "SQL - Non-SU search on table that doesn't exist as test_user - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Op auth error message\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											"",
											"pm.test(\"Does not include anything in unauthorized_access\", function () {",
											"    pm.expect(jsonData.unauthorized_access.length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Includes search schema in invalid_schema_items array\", function () {",
											"    pm.expect(jsonData.invalid_schema_items.length).to.eql(1);",
											"    pm.expect(jsonData.invalid_schema_items[0]).to.eql(\"Table 'dev.rick_rolled' does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{test_user_name}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT * FROM dev.rick_rolled\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "SQL - SU search on table that doesn't exist as test_user - expect error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Schema error message included\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"Table 'dev.rick_rolled' does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"SELECT * FROM dev.rick_rolled\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
							},
							"response": []
						},
						{
							"name": "Drop test_user for search schema error checks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQ="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
							},
							"response": []
						},
						{
							"name": "Drop role for search schema error checks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQ="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"drop_role\",\n    \"id\": \"{{role_id}}\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "string"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "string"
							},
							{
								"key": "saveHelperData",
								"type": "any"
							},
							{
								"key": "showPassword",
								"value": false,
								"type": "boolean"
							}
						]
					}
				},
				{
					"name": "Test modifying system tables",
					"item": [
						{
							"name": "Insert record into table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"inserted 1 of 1 records\");",
											"    pm.expect(jsonData.inserted_hashes[0]).to.eql(\"my-node\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"insert\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_nodes\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"my-node\",\n            \"url\": \"lets-test\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Update record into table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(\"my-node\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"update\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_nodes\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"my-node\",\n            \"url\": \"updated-url\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Confirm record in table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Record exists in table\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"my-node\");",
											"    pm.expect(jsonData[0].url).to.eql(\"updated-url\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"search_by_id\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_nodes\",\n\t\"ids\": [\"my-node\"],\n    \"get_attributes\": [\"*\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Confirm table cant be dropped",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error message is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql( \"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\")",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_nodes\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Insert record into hdb cert doesnt work",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Operation blocked\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"insert\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_certificate\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"my-node\",\n            \"url\": \"lets-test\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Add non-SU role to test with",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"important-role\",\n   \"permission\":{\n        \"structure_user\": true\n   }\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Create user with new role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"add_user\",\n  \"role\": \"important-role\",\n  \"username\": \"important-user\",\n  \"password\": \"password\",\n  \"active\": true\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								}
							},
							"response": []
						},
						{
							"name": "Update role table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(\"important-role\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"update\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_role\",\n\t\"records\": [\n\t\t{\n\t\t\t\"id\": \"important-role\",\n            \"test\": true\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Update user table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
											"    pm.expect(jsonData.update_hashes[0]).to.eql(\"important-user\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"update\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_user\",\n\t\"records\": [\n\t\t{\n\t\t\t\"username\": \"important-user\",\n            \"test\": true\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Test Update role table non-SU doesnt work",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Operation blocked\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "important-user",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"update\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_role\",\n\t\"records\": [\n\t\t{\n\t\t\t\"id\": \"important-role\",\n            \"test\": true\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Test Update user table non-SU doesnt work",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Operation blocked\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "important-user",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"update\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_user\",\n\t\"records\": [\n\t\t{\n\t\t\t\"username\": \"important-user\",\n            \"test\": true\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Test insert when non-SU doesnt work",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Operation blocked\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "important-user",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"insert\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_nodes\",\n\t\"records\": [\n\t\t{\n\t\t\t\"name\": \"my-node\",\n            \"url\": \"no-go\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Test delete when non-SU doesnt work",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Operation blocked\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"The 'system' database, tables and records are used internally by HarperDB and cannot be updated or removed.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "important-user",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"delete\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_nodes\",\n\t\"ids\": [\"my-node\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Delete record from table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"1 of 1 record successfully deleted\");",
											"    pm.expect(jsonData.deleted_hashes[0]).to.eql(\"my-node\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"delete\",\n\t\"database\":\"system\",\n\t\"table\":\"hdb_nodes\",\n\t\"ids\": [\"my-node\"]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Drop user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"important-user successfully deleted\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_user\",\n\t\"username\":\"important-user\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						},
						{
							"name": "Drop role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"important-role successfully deleted\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"drop_role\",\n\t\"id\":\"important-role\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "Insert object into northnwd.customers and confirm error"
							},
							"response": []
						}
					]
				},
				{
					"name": "Add non-SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"test_dev_role\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n         \"customers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[]\n            },\n            \"suppliers\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[]\n            },\n            \"region\": {\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[{\n                     \"attribute_name\": \"regiondescription\",\n                     \"read\":true,\n                     \"insert\":false,\n                     \"update\":false\n                  }]\n            },\n            \"territories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n               {\n                     \"attribute_name\": \"territorydescription\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false\n                  }\n               ]\n            },\n            \"categories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false,\n               \"attribute_permissions\":[\n               {\n                     \"attribute_name\": \"description\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":true\n                  }\n               ]\n            },\n            \"shippers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"companyname\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add non-SU role w/ same name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Role already exists error msg returned\", function() {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error).to.eql(\"A role with name 'test_dev_role' already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"test_dev_role\",\n   \"permission\":{\n      \"super_user\": false\n   }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Query HDB as bad user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Login failed error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Login failed\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "JohnnyBadUser",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"operation\": \"search_by_value\", \n  \"table\":\"hdb_user\",\n  \"schema\": \"system\",\n  \"search_attribute\":\"username\",\n  \"search_value\":\"{{username}}\",\n  \"get_attributes\":[\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "alter_role with bad data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Response includes main permission issues for invalid schema and table\", function () {",
									"    pm.expect(jsonResponse.main_permissions.length).to.eql(2);",
									"    pm.expect(jsonResponse.main_permissions.includes(\"database 'crapschema' does not exist\")).to.eql(true);",
									"    pm.expect(jsonResponse.main_permissions.includes(\"Table 'dev.craptable' does not exist\")).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response includes schema permission issues for invalid attributes\", function () {",
									"    pm.expect(jsonResponse.schema_permissions.dev_dog.length).to.eql(2);",
									"    pm.expect(jsonResponse.schema_permissions.dev_dog.includes(\"Invalid attribute 'name' in 'attribute_permissions'\")).to.eql(true);",
									"    pm.expect(jsonResponse.schema_permissions.dev_dog.includes(\"Invalid attribute 'crapattribute' in 'attribute_permissions'\")).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46ZmFsc2U="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"alter_role\",\n    \"role\": \"bad_user_2\",\n    \"id\": \"{{role_id}}\",\n    \"permission\": {\n        \"super_user\": false,\n        \"crapschema\": {\n            \"tables\": {\n                \"blahblah\": {\n                    \"read\": false,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"name\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true\n                        }\n                    ]\n                }\n            }\n        },\n        \"dev\": {\n            \"tables\": {\n                \"craptable\": {\n                    \"read\": false,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"name\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true\n                        }\n                    ]\n                },\n                \"dog\": {\n                    \"read\": false,\n                    \"insert\": false,\n                    \"update\": false,\n                    \"delete\": false,\n                    \"attribute_permissions\": [\n                        {\n                            \"attribute_name\": \"name\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true\n                        },\n                        {\n                            \"attribute_name\": \"crapattribute\",\n                            \"read\": false,\n                            \"insert\": false,\n                            \"update\": true\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for altering  roles.  Roles are assigned to users to give them specifc permisisons.  \n\n<ul>\n<li><b>operation</b><i> (required)</i> - must always be 'alter_role'</li>\n\n<li><b>role</b><i> (optional)</i> - name of role you are defining </li>\n\n<li><b>permission </b><i>(optional)</i> - object defining permissions for users associated with this role </li>\n\n<li> <b>permission.super_admin (optional) </b> - boolean which if set to true gives users associated with this role full access to all operations and methods. </li>\n\n\n\nTo learn more about managing roles view our help desk article \nhttps://harperdbhelp.zendesk.com/hc/en-us/articles/115010158848"
					},
					"response": []
				},
				{
					"name": "list_roles ensure role not changed",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"found_role\", undefined);",
									"for(let role of pm.response.json()) {",
									"   if(role.role === \"bad_user_2\") {",
									"       pm.environment.set(\"found_role\", role);",
									"   }",
									"}",
									"",
									"pm.test(\"role name was not updated\", function () {",
									"   pm.expect(pm.environment.get(\"found_role\")).to.eql(undefined);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"list_roles\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for listing all roles.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'list_roles'</li>"
					},
					"response": []
				},
				{
					"name": "alter_role good data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Response includes role information that was added\", function () {",
									"    pm.expect(jsonResponse.role).to.eql(\"user_role_update\");",
									"    pm.expect(jsonResponse.id).to.eql(pm.variables.get(\"role_id\"));",
									"    pm.expect(jsonResponse.permission.super_user).to.eql(false);",
									"    pm.expect(jsonResponse.permission.northnwd.tables.customers).to.deep.eql({",
									"                    \"read\": false,",
									"                    \"insert\": false,",
									"                    \"update\": false,",
									"                    \"delete\": false,",
									"                    \"attribute_permissions\": [",
									"                        {",
									"                            \"attribute_name\": \"fax\",",
									"                            \"read\": false,",
									"                            \"insert\": false,",
									"                            \"update\": false",
									"                        }",
									"                    ]",
									"                });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46ZmFsc2U="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\": \"alter_role\",\n  \"role\": \"user_role_update\",\n  \"id\": \"{{role_id}}\",\n  \"permission\": {\n    \"super_user\": false,\n    \"{{schema}}\": {\n      \"tables\": {\n        \"{{cust_tb}}\": {\n          \"read\": false,\n          \"insert\": false,\n          \"update\": false,\n          \"delete\": false,\n          \"attribute_permissions\": [\n            {\n              \"attribute_name\": \"fax\",\n              \"read\": false,\n              \"insert\": false,\n              \"update\": false\n            }\n          ]\n        }\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for altering  roles.  Roles are assigned to users to give them specifc permisisons.  \n\n<ul>\n<li><b>operation</b><i> (required)</i> - must always be 'alter_role'</li>\n\n<li><b>role</b><i> (optional)</i> - name of role you are defining </li>\n\n<li><b>permission </b><i>(optional)</i> - object defining permissions for users associated with this role </li>\n\n<li> <b>permission.super_admin (optional) </b> - boolean which if set to true gives users associated with this role full access to all operations and methods. </li>\n\n\n\nTo learn more about managing roles view our help desk article \nhttps://harperdbhelp.zendesk.com/hc/en-us/articles/115010158848"
					},
					"response": []
				},
				{
					"name": "list_roles ensure role was updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"found_role\", undefined);",
									"for(let role of pm.response.json()) {",
									"       if(role.role === \"user_role_update\") {",
									"           pm.environment.set(\"found_role\", role);",
									"       }",
									"   }",
									"",
									"pm.test(\"role name was updated\", function () {",
									"   pm.expect(pm.environment.get(\"found_role\").role).to.eql(\"user_role_update\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"list_roles\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for listing all roles.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'list_roles'</li>"
					},
					"response": []
				},
				{
					"name": "Drop_role nonexistent role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Role not found error msg returned\", function() {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error).to.eql(\"Role not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"12345\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Drop_role for non-SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				}
			]
		},
		{
			"name": "11. Alter User Tests",
			"item": [
				{
					"name": "Add non-SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"developer_test_5\",\n   \"permission\":{\n      \"super_user\": false,\n      \"northnwd\":{\n         \"tables\": {\n         \"customers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[]\n            },\n            \"suppliers\": {\n               \"read\":false,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[]\n            },\n            \"region\": {\n               \"read\":true,\n               \"insert\":false,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"regiondescription\",\n                     \"read\":true,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            },\n            \"territories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":false,\n               \"delete\":false,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"territorydescription\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":false\n                  }\n               ]\n            },\n            \"categories\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":false,\n               \"attribute_permissions\":[\n               {\n                     \"attribute_name\": \"description\",\n                     \"read\":true,\n                     \"insert\":true,\n                     \"update\":true\n                  }\n               ]\n            },\n            \"shippers\": {\n               \"read\":true,\n               \"insert\":true,\n               \"update\":true,\n               \"delete\":true,\n               \"attribute_permissions\":[\n                  {\n                     \"attribute_name\": \"companyname\",\n                     \"read\":false,\n                     \"insert\":false,\n                     \"update\":false\n                  }\n               ]\n            }\n         }\n      }\n   }\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add User with new Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"developer_test_5\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for adding users.  Users can be assigned roles which provide granular access at a table, operation, and attirbute level.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'add_user'</li>\n\n<li><b>role </b><i>(required) </i>- id of the role you wish to assign to the user.  See add_role for more detail.  </li>\n\n<li><b>username </b> <i>(required)</i> - username assigned to the user.  It can not be altered after adding the user.  It serves as the hash. </li>\n\n<li><b>password </b> <i>(required) </i>- clear text for password.  HarperDB will encrypt the password upon reciept. </li>\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Alter User with empty role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"If role is specified, it cannot be empty.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"alter_user\",\n    \"role\":\"\",\n    \"username\":\"test_user\",\n    \"password\":\"{{password}}\", \n    \"active\":true\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Alter User set active to false.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SQL insert successful reponse\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"updated 1 of 1 records\");",
									"    pm.expect(jsonData.update_hashes[0]).to.eql(\"test_user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"alter_user\",\n    \"username\":\"test_user\",\n    \"password\":\"{{password}}\", \n    \"active\":false\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Check for active=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"for(let user of pm.response.json()) {",
									"   if(user.username === \"test_user\") {",
									"       pm.environment.set(\"found_user\", user);",
									"   }",
									"}",
									"",
									"pm.test(\"user active should be false.\", function () {",
									"    let temp = pm.environment.get(\"found_user\");",
									"   pm.expect(temp.active).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"list_users\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for listing all users.  \n\n<ul>\n<li><b>operation </b> <i>(required) </i> - must always be 'list_users'</li>"
					},
					"response": []
				},
				{
					"name": "Drop test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				},
				{
					"name": "Drop test non-SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used for dropping a role.  \n\n<i>You cannot drop a role with associated users.  </i>\n\n<ul>\n<li><b>operation </b><i>(required)</i> - this must always be drop_role </li>\n<li><b>id </b><i>(required) </i> - this is the id of the role you are dropping\n</ul>"
					},
					"response": []
				}
			]
		},
		{
			"name": "12. Configuration",
			"item": [
				{
					"name": "Create_Attribute tests",
					"item": [
						{
							"name": "Create table for tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Create Table\"] = responseBody.has(\"successfully created.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46MTQwMA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"dev\",\n\t\"table\":\"create_attr_test\",\n    \"hash_attribute\": \"id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
							},
							"response": []
						},
						{
							"name": "Create Attribute for secondary indexing test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"create attribute successful\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"attribute 'dev.create_attr_test.owner_id' successfully created.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46MTQwMA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"create_attribute\",\n\t\"schema\":\"dev\",\n\t\"table\":\"create_attr_test\",\n\t\"attribute\":\"owner_id\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
							},
							"response": []
						},
						{
							"name": "Insert data for secondary indexing test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"inserted 9 records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"inserted 9 of 9 records\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46MTQwMA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"dev\",\n    \"table\": \"create_attr_test\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"dog_name\": \"Penny\",\n            \"age\": 5,\n            \"owner_id\": 1\n        },\n        {\n            \"id\": 2,\n            \"dog_name\": \"Harper\",\n            \"age\": 5,\n            \"owner_id\": 3\n        },\n        {\n            \"id\": 3,\n            \"dog_name\": \"Alby\",\n            \"age\": 5,\n            \"owner_id\": 1\n        },\n        {\n            \"id\": 4,\n            \"dog_name\": \"Billy\",\n            \"age\": 4,\n            \"owner_id\": 1\n        },\n        {\n            \"id\": 5,\n            \"dog_name\": \"Rose Merry\",\n            \"age\": 6,\n            \"owner_id\": 2\n        },\n        {\n            \"id\": 6,\n            \"dog_name\": \"Kato\",\n            \"age\": 4,\n            \"owner_id\": 2\n        },\n        {\n            \"id\": 7,\n            \"dog_name\": \"Simon\",\n            \"age\": 1,\n            \"owner_id\": 2\n        },\n        {\n            \"id\": 8,\n            \"dog_name\": \"Gemma\",\n            \"age\": 3,\n            \"owner_id\": 2\n        },\n        {\n            \"id\": 9,\n            \"dog_name\": \"Bode\",\n            \"age\": 8\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
							},
							"response": []
						},
						{
							"name": "Confirm attribute secondary indexing works",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Three records returned matching wher clase\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46MTQwMA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\":\"sql\",\n  \"sql\":\"select * from dev.create_attr_test where owner_id = 1\"\n}"
								},
								"url": {
									"raw": "{{host}}:{{port}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}"
								},
								"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
							},
							"response": []
						}
					]
				},
				{
					"name": "Describe table DropAttributeTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute another_attribute exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.another_attribute).to.eql(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"table\":\"AttributeDropTest\",\n\t\"schema\":\"dev\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for describing a table. This will return all attributes under the specified table.\n\n<ul>\n<li>\n<b>operation</b> <i> (required) </i> - must always be 'describe_table'\n</li>\n\n<li>\n<b>table</b> <i>(required)</i> - table you wish to describe\n</li>\n\n<li>\n<b>schema </b><i>(required)</i> -schema where the table you wish to describe lives\n</li>\n\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Create Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"create attribute successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal(\"attribute 'dev.AttributeDropTest.created_attribute' successfully created.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_attribute\",\n\t\"schema\":\"dev\",\n\t\"table\":\"AttributeDropTest\",\n\t\"attribute\":\"created_attribute\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Confirm created attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute created_attribute exists\", function () {",
									"    let jsonData = pm.response.json();",
									"    let found = false;",
									"    jsonData.attributes.forEach((attr) => {",
									"        if (attr.attribute === 'created_attribute') {",
									"            found = true;",
									"        }",
									"    });",
									"",
									"    pm.expect(found).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"table\":\"AttributeDropTest\",\n\t\"schema\":\"dev\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Create existing attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"create attribute unsuccessful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.equal(\"attribute 'created_attribute' already exists in dev.AttributeDropTest\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_attribute\",\n\t\"schema\":\"dev\",\n\t\"table\":\"AttributeDropTest\",\n\t\"attribute\":\"created_attribute\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Drop Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"remove successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal(\"successfully deleted attribute 'another_attribute'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_attribute\",\n\t\"schema\":\"dev\",\n\t\"table\":\"AttributeDropTest\",\n\t\"attribute\":\"another_attribute\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Describe table DropAttributeTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute another_attribute exists\", function () {",
									"    let jsonData = pm.response.json();",
									"    let found = false;",
									"    jsonData.attributes.forEach((attr) => {",
									"        if (attr.attribute === 'another_attribute') {",
									"            found = true;",
									"        }",
									"    });",
									"",
									"    pm.expect(found).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"table\":\"AttributeDropTest\",\n\t\"schema\":\"dev\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for describing a table. This will return all attributes under the specified table.\n\n<ul>\n<li>\n<b>operation</b> <i> (required) </i> - must always be 'describe_table'\n</li>\n\n<li>\n<b>table</b> <i>(required)</i> - table you wish to describe\n</li>\n\n<li>\n<b>schema </b><i>(required)</i> -schema where the table you wish to describe lives\n</li>\n\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Get Fingerprint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test fingerprint returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.haveOwnProperty('message');",
									"    pm.expect(jsonData.message).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_fingerprint\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Set License",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"test fingerprint returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['error']).to.equal(\"There was an error parsing the license key.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"set_license\",\n\"key\":\"uFFG7xAZG11ec9d335bfe27c4ec5555310bd4a27f\",\n\"company\":\"harperdb.io\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Get Registration Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"license data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.ownProperty('registered');",
									"   pm.expect(jsonData).to.have.ownProperty('version'); ",
									"   pm.expect(jsonData).to.have.ownProperty('ram_allocation');",
									"   pm.expect(jsonData).to.have.ownProperty('license_expiration_date');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnBhc3N3b3Jk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"registration_info\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "Method for describing a table. This will return all attributes under the specified table.\n\n<ul>\n<li>\n<b>operation</b> <i> (required) </i> - must always be 'describe_table'\n</li>\n\n<li>\n<b>table</b> <i>(required)</i> - table you wish to describe\n</li>\n\n<li>\n<b>schema </b><i>(required)</i> -schema where the table you wish to describe lives\n</li>\n\n\n</ul>"
					},
					"response": []
				},
				{
					"name": "Set License Bad Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"test fingerprint returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['error']).to.equal(\"Invalid key or company specified for license file.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"set_license\",\n\"key\":\"\",\n\"company\":\"harperdb.io\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Get Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test json config is returned\", ()=>{",
									"",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clustering).to.not.be.undefined;",
									"    pm.expect(jsonData.componentsRoot).to.not.be.undefined;",
									"    pm.expect(jsonData.logging).to.not.be.undefined;",
									"    pm.expect(jsonData.localStudio).to.not.be.undefined;",
									"    pm.expect(jsonData.operationsApi).to.not.be.undefined;",
									"    pm.expect(jsonData.operationsApi.network.port).to.not.be.undefined;",
									"    pm.expect(jsonData.threads).to.not.be.undefined;",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"get_configuration\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Cluster set routes hub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test both routes are set\", ()=>{",
									"    const json_data = pm.response.json();",
									"    const expected_result = {",
									"    \"message\": \"cluster routes successfully set\",",
									"    \"set\": [",
									"        {",
									"            \"host\": \"dev.chicken\",",
									"            \"port\": 11334",
									"        },",
									"        {",
									"            \"host\": \"dev.wing\",",
									"            \"port\": 11335",
									"        }",
									"    ],",
									"    \"skipped\": []",
									"    }",
									"",
									"    pm.expect(json_data).to.eql(expected_result);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"cluster_set_routes\",\n    \"server\": \"hub\",\n    \"routes\": [\n        {\n            \"host\": \"dev.chicken\",\n            \"port\": 11334\n        },\n        {\n            \"host\": \"dev.wing\",\n            \"port\": 11335\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Cluster set routes leaf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test both routes are set\", ()=>{",
									"    const json_data = pm.response.json();",
									"    const expected_result = {",
									"    \"message\": \"cluster routes successfully set\",",
									"    \"set\": [",
									"        {",
									"            \"host\": \"dev.pie\",",
									"            \"port\": 11335",
									"        }",
									"    ],",
									"    \"skipped\": [",
									"        {",
									"            \"host\": \"dev.chicken\",",
									"            \"port\": 11334",
									"        }",
									"    ]",
									"}",
									"    pm.expect(json_data).to.eql(expected_result);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"cluster_set_routes\",\n    \"server\": \"leaf\",\n    \"routes\": [\n        {\n            \"host\": \"dev.chicken\",\n            \"port\": 11334\n        },\n        {\n            \"host\": \"dev.pie\",\n            \"port\": 11335\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Confirm routes set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test hub cluster routes are correct\", ()=>{",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.clustering.hubServer.cluster.network.routes).to.eql([",
									"                        {",
									"                            \"host\": \"dev.chicken\",",
									"                            \"port\": 11334",
									"                        },",
									"                        {",
									"                            \"host\": \"dev.wing\",",
									"                            \"port\": 11335",
									"                        }",
									"                    ]);",
									"    pm.expect(json_data.clustering.leafServer.network.routes).to.eql([",
									"                    {",
									"                        \"host\": \"dev.pie\",",
									"                        \"port\": 11335",
									"                    }",
									"                ])",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"get_configuration\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Cluster get routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test hub and leaf routes are returned\", ()=>{",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data).to.eql({",
									"    \"hub\": [",
									"        {",
									"            \"host\": \"dev.chicken\",",
									"            \"port\": 11334",
									"        },",
									"        {",
									"            \"host\": \"dev.wing\",",
									"            \"port\": 11335",
									"        }",
									"    ],",
									"    \"leaf\": [",
									"        {",
									"            \"host\": \"dev.pie\",",
									"            \"port\": 11335",
									"        }",
									"    ]",
									"});",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"cluster_get_routes\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Cluster delete routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test both routes are set\", ()=>{",
									"    const json_data = pm.response.json();",
									"    const expected_result = {",
									"    \"message\": \"cluster routes successfully deleted\",",
									"    \"deleted\": [",
									"        {",
									"            \"host\": \"dev.wing\",",
									"            \"port\": 11335",
									"        },",
									"        {",
									"            \"host\": \"dev.pie\",",
									"            \"port\": 11335",
									"        }",
									"    ],",
									"    \"skipped\": [",
									"        {",
									"            \"host\": \"dev.pie\",",
									"            \"port\": 11221",
									"        }",
									"    ]",
									"    }",
									"   ",
									"    pm.expect(json_data).to.eql(expected_result);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"cluster_delete_routes\",\n    \"routes\": [\n        {\n            \"host\": \"dev.wing\",\n            \"port\": 11335\n        },\n        {\n            \"host\": \"dev.pie\",\n            \"port\": 11335\n        },\n        {\n            \"host\": \"dev.pie\",\n            \"port\": 11221\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Cluster get routes confirm delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test hub and leaf routes are correct after delete\", ()=>{",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data).to.eql({",
									"    \"hub\": [",
									"        {",
									"            \"host\": \"dev.chicken\",",
									"            \"port\": 11334",
									"        }",
									"    ],",
									"    \"leaf\": []",
									"});",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"cluster_get_routes\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Cluster delete last route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test both routes are set\", ()=>{",
									"    const json_data = pm.response.json();",
									"    const expected_result = {",
									"    \"message\": \"cluster routes successfully deleted\",",
									"    \"deleted\": [",
									"        {",
									"            \"host\": \"dev.chicken\",",
									"            \"port\": 11334",
									"        }",
									"    ],",
									"    \"skipped\": []",
									" }",
									"   ",
									"    pm.expect(json_data).to.eql(expected_result);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"cluster_delete_routes\",\n    \"routes\": [\n        {\n            \"host\": \"dev.chicken\",\n            \"port\": 11334\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Read log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test shape of read log response\", ()=>{",
									"    let json_data = pm.response.json();",
									"",
									"    pm.expect(Array.isArray(json_data)).to.be.true;",
									"    pm.expect(json_data[0].hasOwnProperty('level')).to.be.true;",
									"    pm.expect(json_data[0].hasOwnProperty('message')).to.be.true;",
									"    pm.expect(json_data[0].hasOwnProperty('timestamp')).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"read_log\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Set Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct response message from set configuration\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal(\"Configuration successfully set. You must restart HarperDB for new config settings to take effect.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"set_configuration\",\n    \"logging_rotation_maxSize\": \"12M\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test confirms clustering nodename and logging rotation maxsize\", ()=>{",
									"",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.logging.rotation.maxSize).to.equal(\"12M\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_configuration\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Set Configuration Bad Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error message for setConfig with bad data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.equal(\"HarperDB config file validation error: 'http.cors' must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"set_configuration\",\n    \"http_cors\": \"spinach\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add non-SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"responseData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"role_id\", responseData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"operation\":\"add_role\",\n   \"role\":\"test_dev_role\",\n   \"permission\":{\n    \"super_user\": false\n   }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add User with non-SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"add_user\",\n\"role\":\"test_dev_role\",\n\"username\":\"test_user\",\n\"password\":\"{{password}}\", \n\"active\":true\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Configure Cluster non-SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Operation auth error message for setconfig non-SU\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'setConfiguration' is restricted to 'super_user' roles\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "test_user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"set_configuration\",\n    \"clustering_port\": 99999\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Set Configuration non-SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Operation auth error message for setconfig non-SU\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'setConfiguration' is restricted to 'super_user' roles\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "test_user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"set_configuration\",\n    \"clustering_port\": 99999\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Get Configuration non-SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Operation auth error message for getconfig non-SU\", function () {",
									"    pm.expect(jsonData.error).to.eql(\"This operation is not authorized due to role restrictions and/or invalid database items\");",
									"});",
									"",
									"pm.test(\"Includes correct table perm object in unauthorized_access\", function () {",
									"    pm.expect(jsonData.unauthorized_access.length).to.eql(1);",
									"    pm.expect(jsonData.unauthorized_access[0]).to.eql(\"Operation 'getConfiguration' is restricted to 'super_user' roles\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "test_user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"get_configuration\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Drop test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes correct message\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.equal(",
									"        \"test_user successfully deleted\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_user\",\n  \"username\":\"test_user\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop_role - non-SU role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes correct message\", function () {",
									"    const respMsg = pm.response.json().message;",
									"    pm.expect(respMsg).to.equal(",
									"        \"test_dev_role successfully deleted\"",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\":\"drop_role\",\n\"id\":\"{{role_id}}\"\n\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Test local studio HTML is returned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"GET returns local studio HTML\", function () {",
									"    const response = pm.response.text();",
									"     pm.response.to.be.header(\"content-type\", \"text/html; charset=UTF-8\");",
									"    pm.expect(response).to.include('<!doctype html>');",
									"    pm.expect(response).to.include('Studio :: HarperDB');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "13. System Information",
			"item": [
				{
					"name": "Get all System Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"create system info has all attributes\", function () {",
									"    let attributes = ['system', 'time', 'cpu', 'memory', 'disk', 'network', 'harperdb_processes', 'table_size'];",
									"    var jsonData = pm.response.json();",
									"    ",
									"    attributes.forEach(attribute=>{",
									"        pm.expect(jsonData[attribute] !== undefined).to.eql(true);",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"system_information\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Get some System Information (time, memory)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"create system info has some attributes\", function () {",
									"    var results = pm.response.json();",
									"    ",
									"    pm.expect(results.system).to.be.undefined;",
									"    pm.expect(results.cpu).to.be.undefined;",
									"    pm.expect(results.disk).to.be.undefined;",
									"    pm.expect(results.network).to.be.undefined;",
									"    pm.expect(results.harperdb_processes).to.be.undefined;",
									"    pm.expect(results.table_size).to.be.undefined;",
									"    pm.expect(results).to.haveOwnProperty('time');",
									"    pm.expect(results).to.haveOwnProperty('memory');",
									"    pm.expect(results.time).to.haveOwnProperty('current');",
									"    pm.expect(results.time).to.haveOwnProperty('uptime');",
									"    pm.expect(results.time).to.haveOwnProperty('timezone');",
									"    pm.expect(results.time).to.haveOwnProperty('timezoneName');",
									"    pm.expect(results.memory).to.haveOwnProperty('total');",
									"    pm.expect(results.memory).to.haveOwnProperty('free');",
									"    pm.expect(results.memory).to.haveOwnProperty('used');",
									"    pm.expect(results.memory).to.haveOwnProperty('active');",
									"    pm.expect(results.memory).to.haveOwnProperty('swaptotal');",
									"    pm.expect(results.memory).to.haveOwnProperty('swapused');",
									"    pm.expect(results.memory).to.haveOwnProperty('swapfree');",
									"    pm.expect(results.memory).to.haveOwnProperty('available');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46MTQwMA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"system_information\",\n\t\"attributes\": [\"memory\", \"time\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				}
			]
		},
		{
			"name": "14. Token Auth",
			"item": [
				{
					"name": "Call create_authentication_tokens no username/pw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"check error message\", function () {    ",
									"    var jsonData = pm.response.json();    ",
									"    pm.expect(jsonData['error'] === 'username is required').to.eql(true);    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_authentication_tokens\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Call create_authentication_tokens no pw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"check error message\", function () {    ",
									"    var jsonData = pm.response.json();    ",
									"    pm.expect(jsonData['error'] === 'password is required').to.eql(true);    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_authentication_tokens\",\n    \"username\": \"{{username}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Call create_authentication_tokens bad credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"check error message\", function () {    ",
									"    var jsonData = pm.response.json();    ",
									"    pm.expect(jsonData['error'] === 'invalid credentials').to.eql(true);    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_authentication_tokens\",\n    \"username\": \"baduser\",\n    \"password\":\"bad\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "Call create_authentication_tokens happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"check attributes\", function () {",
									"    let attributes = ['operation_token', 'refresh_token'];",
									"    var jsonData = pm.response.json();",
									"    ",
									"    attributes.forEach(attribute=>{",
									"        pm.expect(jsonData[attribute] !== undefined).to.eql(true);",
									"    });",
									"",
									"    pm.collectionVariables.set(\"operation_token\", jsonData.operation_token);",
									"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_authentication_tokens\",\n    \"username\": \"{{username}}\",\n    \"password\":\"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "test search_by_hash with valid jwt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"verify NoSQL update worked, new attribute added\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].employeeid).to.eql(1);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{operation_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "test search_by_hash with invalid jwt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"verify error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql('invalid token');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "BAD_TOKEN",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"search_by_hash\",\n  \"schema\":\"{{schema}}\",\n  \"table\":\"{{emps_tb}}\",\n  \"hash_attribute\": \"{{emps_id}}\",\n  \"hash_values\":[1],\n  \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "test refresh_operation_token with correct token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"check attributes\", function () {",
									"    let attributes = ['operation_token'];",
									"    var jsonData = pm.response.json();",
									"    ",
									"    attributes.forEach(attribute=>{",
									"        pm.expect(jsonData[attribute] !== undefined).to.eql(true);",
									"    });",
									"",
									"    pm.collectionVariables.set(\"operation_token\", jsonData.operation_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{refresh_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"refresh_operation_token\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				},
				{
					"name": "test refresh_operation_token with incorrect token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"check error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.error).to.eql('invalid token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "bad token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"refresh_operation_token\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "We first need to create a Schema.  A Schema can be thought of as a container of tables that are independent from tables in other schemas.  An example might be the Schema dev with a table called dog.  The Schema prod may also have a table dog. \n\nNote that if you see the error response \"Cannot complete request: User 'admin' not found\", you need to set the basic auth to the user and password you entered during the install process.  What the heck is basic auth?  Read our article on it here: https://harperdbhelp.zendesk.com/hc/en-us/articles/115010250207-Basic-Auth-with-Postman"
					},
					"response": []
				}
			]
		},
		{
			"name": "15. Custom Functions & components",
			"item": [
				{
					"name": "deploy_component github package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Github component deployed\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully deployed: deploy-test-gh\");",
									"});",
									"setTimeout(()=>{}, 15000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"deploy_component\",\n    \"project\": \"deploy-test-gh\",\n    \"package\": \"HarperDB/application-template\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "deploy_component using tar payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload component deployed\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully deployed: deploy-test-payload\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"deploy_component\",\n    \"project\": \"deploy-test-payload\",\n    \"payload\": \"n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "deploy_component using tar.gz payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload component deployed\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully deployed: deploy-test-payload-tar-gz, restarting HarperDB\");",
									"});",
									"setTimeout(()=>{}, 30000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"deploy_component\",\n    \"project\": \"deploy-test-payload-tar-gz\",\n    \"restart\": true,\n    \"payload\": \"H4sIAAh0mmYAA+08W2wk2VXtzWzYLVZipIgNCRK62Atjz7Sr3922w+xO9cPumumHp7s9fixhprrqdnfZ9eiph9vt0cBHQKwitFL4AJZEUVA+AsrPJoqUlQIB5QMkxEp8QISQCBCEeAuEIDy0Ujjn3uqHezxre3fsDdk+Y7u7bt3zvPeec8+5VSNGQucO0Wg0k0oR9pnmn9F4kn8GQGLJNPzLxKOxKInGEolkLERS5y9aKOS7nuKAKJqyr2uqre5RRzeMR/tBt1brbegEegw//5+AGBHvluRcoVIvnBsPsEc6mXzs+MdiqTiMfzITTWeSyTSOfzKViYdI9NwkGoP3+fiHnn7+B0JPhUJlRSXVOtkiAWBb6Fn4jYdCTy3BJ1w/tXs6klKjUePfEGPmHvwKE10u8fbQrVAootqmqHS7BhVN6ima4ikre+W87FHzFu13O47i0pxttXSNWip1GfrMF+FPJxS6egrcktKkhhvI8yH4cw1+ToF3hzqublsc70X4E4bV8ni8Bj3wQEyPWl5Jsdq+0qaI2ewauutFo5+feeoDcy/9yV88nSl++cbcS3/w7Xm8O/fSJ/6O4JdnnvvhH+MizsyMTHQEroyT+pmWQymxW0TtKE6b3r38Ic1WfROYKx4ITVq6Qd27ly93QQm4tJueolu61X7muR+NncAnP+Bz+blnJrrOTHQVBl1r1Dqp7w+GpvA9CGJkXTkoUkWjTuS84sAJ/j8eS0/6/3QiEQ2RgycuyTHwPvf/sXiGlOSsVMsV5TsF8UDxPOdsXu76tpV1la1KtJzP1nc2k7I0gNsFafRdOgZcIRZdInVgXdp+R6zP4n+EWDxxFlUnA8GYntLtvNQeKJEd0y17nJa5NqiZPK2aj7A9gzsW4tF3piKPkWMa5nal23J+y9zp72xutJvx7fZ2vNNRTc3YOpAaO2vLu9pmzGhatY62Zuw39aypbB4YamzpdqGYNVSrgm3723Bf2Ux1m6Yq57PuwXEz41iTFW4LsfTZTRaocVGBEmRcfkfmHtvOPGJz+TCykbi9kaiXbkrwvZjU+UyTD6/lU/1gRkm9O8XhBCyMmfDYZWYJsWT0zMYcF/IJ7mImd4JTeE9BPLeoP4KT4n80lZ7M/xLp2DT/uwgoyw1S0lVquVQQcna37+jtjkfm1QUSj0LALCoOuMZ8NkxkSxUFYZ06pu5iYCK6SzrUoc0+aTsKxGUtTI462zDxbKJYfTLpXIlCVGAlQE+vA2Rcu+X1FIdCZ40ormurugL0yDGumsx7HUpm6wHG7AJjolHFEHSL4L3BLdLTvY7te8ShrufoKtIIE91SDV9DGQa3Dd3UAw6IzvR3BSDqu6AByhkmpq3pLfykTK2u3wR/2AkTTUfSTd+DRhcbmSHDqEfEdohLDUMACjrIzXQdScf6oOhdNKgXmMjFll7HNo9qortCy3csYEkZjmaDyRjHXap62ILdW7Zh2D1UTbUtTUeN3BVBaMAtpWnvU6YLH17L9kBULgIOQHc0qsEtt6MYBmnSwGDAF8yrjKnjIHtYFJanKwbp2g7jN6kmzJhGsUDq1dXGplQrELlO1mvVO3K+kCezUh2uZ8NkU24UqxsNAj1qUqWxTaqrRKpsk1tyJR8mha31WqFeJ9WaIJfXS3IB2uRKrrSRlytrJAt4lSrMYRlmMhBtVAkyDEjJhToSKxcgQsOllJVLcmM7LKzKjQrSXK3WiETWpVpDzm2UpBpZ36itV+sFYJ8HshW5sloDLoVyodIQgSu0kcIduCD1olQqIStB2gDpaygfyVXXt2vyWrFBitVSvgCN2QJIJmVLBc4KlMqVJLkcJnmpLK0VGFYVqNQE7MalI5vFAjYhPwl+cg25WkE1ctVKowaXYdCy1hiibsr1QphINbmOBlmtVcthAc0JGFVGBPAqBU4FTU2OjAh0weuNemFIkOQLUglo1REZVRx0Ft9rbzWFJw1ixFU71FRE8OHdzv1jAt+7hxPifzQTfyT/j03rvxcDc3OkSDFYQnhQLAikLd2iLGh7ShPjLbh923cIpghNyApE0sCAQQ8UE7IHCBN2D7YBdg8JDJCJ1+/Ch4vfkAhEUohKArDC0MBuWorJerAG1oe3QEByu1SFYItxDOIi8AKxZukBRphZouwrusH6B9EeQkODodlw5YBcHnUsDEiO7dmqbbiiwBg2EKmCPG5wfjc4SfJAwHK3rq0QOU9udB3dVJw+JEFkZJhAr+Ae2YOb8ybMGwyPtkUXGAWUf4XUYTsAgs8dY08uIGZfbMPAN08M1VPaQ8wbuqXRAwi3QxKBPRiNMWyvo3hoft/QeJhmaMLDM+ZXYkTFPK8t9hXzXBZ/6DT7/9TE+k+losnp+r8ImOPrmc9Tvh75hPAdvice7NGxWqCrrE0kBUXtDHEUMg9bwQXAM7uwHCyPz03AMWwFd46wPIU53E5rsEd1jiEHW1SXjvBdNu9hBcOI0GD+6ypp+RbbxCuG7vXZmg9WF7of2J+3YD1ZHnDiiQI4iD56LuBEcBPNhREF9BgrxHN8SshcwDrgxfUvNhrr3K/okNU4LUWlTG7cEHOnAYpAUgHEVeoKQeCsszC6MqLpUEVzyRrevV0iPMq6PFlhUiMr3oo2HvjXCHe7kdFKF8FHMI1WyJWrgzB9BdgYtr3nBhZFhqyTgAJ0Fa+zQiLwbSjvfR/mNQ6Wgz6LZzq27bGuBFI4EErxDU/YdWuBZiuAXrJRh5vgdeuqo3c9TIR8NK7rwwRgwwyUdCfgw8kPeYK6IzMNlRg2ibsu4SEBhg38KqfNFBpHO1adYYeTFApDfrcHU8TzuiuRiEudfepEBtiL6LSFluJ64GBrNlp7hQQrwmCq86nEFA2GLegNzJgbZqFt0HgFxPE9e5FNNWdMZdY3chU0hkaujgiMHGrACoDMLMjgYKoykQKhJ6Qe3I0wclx2FzNXdSi0ghkgjA5rHQhvY3zQdAdSRQPWjQpWc3WYZCAKWmwFAk1zJCtcRK5eZXY37LZu4bdgAKalu+8/wOc/agUpXy6IpnZOPE7a/8fT0cn4H00mpvH/QuAUz3+EfjbEnv8IvX46kqPnPxjG5+D38kSXmVH7R0dnEQa4UdwmQDCkc+t17PjfD19jVv/p//z9p9+VnlM4FsbP/8/LD5y4/qOT6z+dysSm5/8XAW9/gjmxIK9fK8Z3dtjBY1ZdVrdX+fmikFp+3OniJIHJ5TzdUrzHIJ7bqh/BSfl/PJ2ZPP9LJzLT+H8RMDc84SPSKCUnDWp2ITeheHwEeYXOanlBG8vQmr5usGO0lwf4H5/HdMWFfKXX64kd1qo1Rd2OLIxn+65Itm2fF8fsnoWpEq8IOLRru7pnQybISoc4Lh5y6NqQhx9lOk6PHeQNtRBJwyZt6nF0PJM0FUilXB/SxD7w7SiQbr2sW3DbMCCRfFR6zVbdI+JjQyTAWBzcWAiTXkeHJBgVgfzqvq+re5BeabbFTx7JPatrkgCNLLbJAPPeyACOP6pRDE3fcoLjP56yoT16WCpk4g9MhueAvFTjsYLJoEozZkQUYkUQ7g34Mm4RTOUinh1BtovA9p4gzINl9RYjT7HgEaS7A+5hdmcgLuPqO1hpGRMQBuwoH/HegigIq0DZtPEA04LhM7l+ShNPXWGI2OAGw3R0EFlx59jBDhMXT5jBZJME2r6useNGNMNwqganl7yw83JQEzha4fr4/JEa6HBgg7oT5eVtnktjsaEDwhn8PHRy7ER+2vry0SMVZHC0ZQEX1Fj9h5UW9EEtjK83vG0qwOSYdcD7Q1N/vDQfUAuPV9C5KkEpH8expwANNG8PB3lUZYqApobG2PYHZWVcKwOVxqs2qND49cKofjbhJYaCjpWQBphEhc2BS2FIsacKftg29UMsG40tBixBqENTU0tjRnCnB5FPCkTwCOqe0qYwjsHD7k8cTtz/x2OT+X86MT3/uxDA469ZLCXOrpDZsZW3OFjHs2Hssc8fRsVOMTEqRnkrrHi2poM70mO2CCO3PubJOQU8m0NUXvudPfPx1RTeJYgRsa1758vjpPX/6PlfMpZITdf/RQAMPmzjVojIJ0IkOOCJHOcKpmvz+w+w/j++lzsPHic+/zN6/zeaSSTZ8z+J9HT9Xwicov4/82qI1f9nfu90JEf1f8SYwddW3pjo8oGg/YdCoQ+PqoX4ik/BUm3cNXD8D4dOcUYA/a7An9dCoczx7zWw90LuptSDBFVcfc/q7/sd6ie9tn4/vds99AHZ91qLSx+LJZLxWGZ5Kbl//9fZYL/wSuoF/Pz3O61LvTd/4gs/9Zlvf/nTv/3a737QaP3cVz7x9T988NkvXfrzb33zX3519bc+an29n369+Mtv/vOvLYrPh775xt4/fOMXyq985CPfzf/iH3/rburfPqn963e+uvepFy6Vfv5XUs9+9c6ffc41X3/xrUt/9Z3feBD+5H+I//Ob//TBP3rrT7/R/O4/lvU3P/PZG1uXficv/H3tRflv1qt/+SNvdX9p679eefWNn/zalue2nv/fVz/92l8bf/tOh30A4/X/8/IDJ6x/iPapifWfSWfS0/r/RUA8Q0xPN+n1WCYeSyxnMvGkGM8kY7GMEF+KnfbtppMW2PUlY8fMFluVm4q6ZFVv9c1Mf2e/t+PuWNei7UzmFk2lD7IVh8b8+Fbt/p7SdFKpipOV99yEa+ai/mo7v+mv7Xd79p2Knt3biUTrxWgl1aq0crd2qpG4F/drN6VauXNzO5ZrapvxW9nDZlO6FpEa7eX7q5mS7ERL+6ad7jXLkcpWbns/cr+xaVWsmylpU6ov1yTH3thN3UzGsuuJg90lVT7YXk7qVT+nZDaLtcOdThMU8XeSm4eGEI+nT/M21YlG+Z51KsLZToU0a03hp0LSnp7f2DvzqdCktxXSybfjPx4mrmtbNbPUaGfKjXK0vFtIVBvtqAAJxWNYH8GdcPrvx/2teG5efwQn+X/+/3+M+/9UJj59/uNCIHL16uMeAB/VbBexvHzkoTtLY49aW64evLTES8yCEDxVzWq7pNzPsbLu4JFCjoNVZtZbHD2U/UB4NhKZkAErvnbPCkrDZL1abwTFd0d4tmu73nxw/LGA6IjP3osCF9wZvN/Fqug6LHczeC0Ku38MOjvU8x2LuH6XOuIRWnD3IRNmWJQma4Uxxm3qzQ8ZBgLz18MGJzCBrk3awqMPzgmff5/gyggxbg8FcjUijMgphmuPHqYPhBjSHby3poyejGXmPGr6NYdSPDVoKM7a4dDuw4Hg9lbIbJEahh0mPdsxtB+fPU7NQOgHpB2QXCFXGBZH4udVGu0aNliAuvgEZp+f6ikOaR9eIQ+5ku/1TJ/CFKYwhSmMw/8BiDUKMABQAAA=\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "call component tar payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Greeting is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.greeting).to.equal(\"Hello world from a test for deploying a component with tar payload\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:9926/GreetingTar",
							"host": [
								"{{host}}"
							],
							"port": "9926",
							"path": [
								"GreetingTar"
							]
						}
					},
					"response": []
				},
				{
					"name": "call component tar.gz payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Greeting is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.greeting).to.equal(\"Hello world from deploy test payload tar gz\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:9926/GreetingTarGz",
							"host": [
								"{{host}}"
							],
							"port": "9926",
							"path": [
								"GreetingTarGz"
							]
						}
					},
					"response": []
				},
				{
					"name": "set_component_file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"set component file\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully set component: utils/test.js\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"set_component_file\",\n    \"project\": \"set-test\",\n    \"file\": \"utils/test.js\",\n    \"payload\": \"I am from inside a JS file\",\n    \"encoding\": \"utf8\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "get_component_file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"get component file\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"I am from inside a JS file\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"get_component_file\",\n    \"project\": \"set-test\",\n    \"file\": \"utils/test.js\",\n    \"encoding\": \"utf8\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "add_component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"add component\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully added project: add-test\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"add_component\",\n    \"project\": \"add-test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "package_component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"package component\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data).to.haveOwnProperty('project');",
									"    pm.expect(json_data).to.haveOwnProperty('payload');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"package_component\",\n    \"project\": \"add-test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "get_components",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"get components\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.entries.length).to.equal(5);",
									"    let gh_found = false;",
									"    let payload_found = false;",
									"    let add_test_found = false;",
									"    let set_test_found = false;",
									"    let deploy_tar_gz_found = false;",
									" console.log('json_data.entries', json_data.entries);",
									"    json_data.entries.forEach((e) => {",
									"        let name = e.name",
									"        if (name === 'deploy-test-gh') gh_found = true;",
									"        if (name === 'deploy-test-payload') payload_found = false;",
									"        if (name === 'add-test') add_test_found = true;",
									"        if (name === 'set-test') set_test_found = true;",
									"        if (name === 'deploy-test-payload-tar-gz' && e.entries.length > 3) deploy_tar_gz_found = true;",
									"    })",
									"",
									"    pm.expect(gh_found && !payload_found && add_test_found && set_test_found && deploy_tar_gz_found).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"get_components\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"drop component\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully dropped: add-test\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"drop_component\",\n    \"project\": \"add-test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "get_components after drop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"get components\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.entries.length).to.equal(4);",
									"    let gh_found = false;",
									"    let payload_found = false;",
									"    let set_test_found = false;",
									"    json_data.entries.forEach((e) => {",
									"        let name = e.name",
									"        if (name === 'deploy-test-gh') gh_found = true;",
									"        if (name === 'deploy-test-payload') payload_found = true;",
									"        if (name === 'set-test') set_test_found = true;",
									"    })",
									"",
									"    pm.expect(gh_found && payload_found && set_test_found).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"get_components\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_component set-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"drop component\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully dropped: set-test\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"drop_component\",\n    \"project\": \"set-test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "add custom function project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Custom function success message is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully added project: test_project\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_custom_function_project\",\n    \"project\": \"test_project\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "restart service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Restart service success message is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Restarting http_workers\");",
									"});",
									"",
									"// This timeout is here to give HDB time to restart before the next text is ran.",
									"setTimeout(() => {}, 60000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"http_workers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "get custom function status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status values are returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data).to.haveOwnProperty('port');",
									"    pm.expect(json_data).to.haveOwnProperty('directory');",
									"    pm.environment.set('cf_port', json_data.port);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"custom_functions_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "call custom function",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Table values are returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data).to.haveOwnProperty('greeting');",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:9926/Greeting",
							"host": [
								"{{host}}"
							],
							"port": "9926",
							"path": [
								"Greeting"
							]
						}
					},
					"response": []
				},
				{
					"name": "set custom function",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set function success message is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully updated custom function: test2.js\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"set_custom_function\",\n    \"project\": \"test_project\",\n    \"type\": \"routes\",\n    \"file\": \"test2\",\n    \"function_content\": \"hello world\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "get custom function",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Custom function set in previous test is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"hello world\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_custom_function\",\n    \"project\": \"test_project\",\n    \"type\": \"routes\",\n    \"file\": \"test2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop custom function",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Drop function success message is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully deleted custom function: test2.js\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_custom_function\",\n    \"project\": \"test_project\",\n    \"type\": \"routes\",\n    \"file\": \"test2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "confirm function was dropped",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"File does not exist error returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.error).to.equal(\"File does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_custom_function\",\n    \"project\": \"test_project\",\n    \"type\": \"routes\",\n    \"file\": \"test2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "get custom functions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Function object is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data).to.have.property('test_project');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_custom_functions\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop custom functions project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Function project deleted message is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.eql(\"Successfully deleted project: test_project\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_custom_function_project\",\n    \"project\": \"test_project\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "confirm project was dropped",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expected_obj = {",
									"    \"deploy-test-gh\": {",
									"        \"routes\": [],",
									"        \"helpers\": []",
									"    },",
									"    \"deploy-test-payload\": {",
									"        \"routes\": [],",
									"        \"helpers\": []",
									"    },",
									"    \"deploy-test-payload-tar-gz\": {",
									"        \"routes\": [],",
									"        \"helpers\": []",
									"    }",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty function object is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data).to.eql(expected_obj);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_custom_functions\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "deploy custom function",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Custom function deploy success message is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.equal(\"Successfully deployed: test-deploy\");",
									"});",
									"",
									"// Deploy will restart, wait for that to complete.",
									"setTimeout(()=>{}, 22000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"operation\": \"deploy_custom_function_project\",\n        \"project\": \"test-deploy\",\n        \"bypass_config\": true,\n        \"payload\": \"n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "confirm deploy worked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Deployed function is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data).to.haveOwnProperty(\"test-deploy\");",
									"    pm.expect(json_data[\"test-deploy\"][\"routes\"]).to.not.be.undefined;",
									"    pm.expect(json_data[\"test-deploy\"][\"routes\"][0]).to.equal('examples')",
									"    pm.expect(json_data[\"test-deploy\"][\"helpers\"]).to.not.be.undefined;",
									"    pm.expect(json_data[\"test-deploy\"][\"helpers\"][0]).to.equal('example')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_custom_functions\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop custom functions project deploy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Function project deleted message is returned\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.eql(\"Successfully deleted project: test-deploy\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_custom_function_project\",\n    \"project\": \"test-deploy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop deploy-test-payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Component dropped msg\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.eql(\"Successfully dropped: deploy-test-payload\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_component\",\n    \"project\": \"deploy-test-payload\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop test-deploy from config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Component dropped msg\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.eql(\"Successfully dropped: test-deploy\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_component\",\n    \"project\": \"test-deploy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop deploy-test-gh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Component dropped msg\", function () {",
									"    const json_data = pm.response.json();",
									"    pm.expect(json_data.message).to.eql(\"Successfully dropped: deploy-test-gh\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_component\",\n    \"project\": \"deploy-test-gh\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "16. Terminology Updates",
			"item": [
				{
					"name": "create_database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"database created\", function () {    \r",
									"    pm.expect(pm.response.json().message).to.eql(\"database 'tuckerdoodle' successfully created\");    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_database\",\n  \"schema\": \"tuckerdoodle\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_table todo with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table created\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"table 'tuckerdoodle.todo' successfully created.\");    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"database\":\"tuckerdoodle\",\n  \"table\":\"todo\",\n  \"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table done with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table created\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"table 'tuckerdoodle.done' successfully created.\");    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"database\":\"tuckerdoodle\",\n  \"table\":\"done\",\n  \"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table friends without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"database created\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"table 'data.friends' successfully created.\");    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"table\":\"friends\",\n  \"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_table frogs using primary_key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"database created\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"table 'data.frogs' successfully created.\");    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"table\":\"frogs\",\n  \"primary_key\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_attribute with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute created\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"attribute 'tuckerdoodle.todo.date' successfully created.\");    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 3000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_attribute\",\n  \"database\": \"tuckerdoodle\",\n  \"table\":\"todo\",\n  \"attribute\": \"date\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_attribute without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute created\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"attribute 'data.friends.name' successfully created.\");    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_attribute\",\n  \"table\":\"friends\",\n  \"attribute\": \"name\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_database with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"schema described\", function () {    ",
									"    pm.expect(pm.response.json()).to.haveOwnProperty('todo');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_database\",\n  \"database\": \"tuckerdoodle\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_database without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"schema described\", function () {    ",
									"    pm.expect(pm.response.json()).to.haveOwnProperty('friends');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_database\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_table with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table described\", function () {    ",
									"    pm.expect(pm.response.json().schema).to.equal(\"tuckerdoodle\");",
									"    pm.expect(pm.response.json().name).to.equal(\"todo\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_table\",\n  \"database\": \"tuckerdoodle\",\n  \"table\": \"todo\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_table without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table described\", function () {    ",
									"    pm.expect(pm.response.json().schema).to.equal(\"data\");",
									"    pm.expect(pm.response.json().name).to.equal(\"friends\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_table\",\n  \"table\": \"friends\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "insert with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"database\":\"tuckerdoodle\",\n\t\"table\":\"todo\",\n\t\"records\": [\n\t  {\n          \"id\": 1,\n          \"task\": \"Get bone\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "insert without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"table\":\"friends\",\n\t\"records\": [\n\t  {\n          \"id\": 1,\n          \"task\": \"Sheriff Woody\"\n\t  },\n    {\n          \"id\": 2,\n          \"task\": \"Mr. Potato Head\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "insert table frog setup for describe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"inserted 4 of 4 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"table\":\"frogs\",\n\t\"records\": [\n\t  {\n          \"id\": 1,\n          \"type\": \"bullfrog\"\n\t  },\n    {\n          \"id\": 2,\n          \"type\": \"toad\"\n\t  },\n        {\n          \"id\": 3,\n          \"type\": \"tree\"\n\t  },\n              {\n          \"id\": 4,\n          \"type\": \"wood\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "delete table frog setup for describe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"inserted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"1 of 1 record successfully deleted\");",
									"});",
									"",
									"setTimeout(() => {}, 1000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"table\":\"frogs\",\n    \"ids\": [2]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "describe_table frog confirm record count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table described\", function () {    ",
									"    pm.expect(pm.response.json().schema).to.equal(\"data\");",
									"    pm.expect(pm.response.json().name).to.equal(\"frogs\");",
									"    pm.expect(pm.response.json().record_count).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_table\",\n  \"table\": \"frogs\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"searched\", function () {    ",
									"    pm.expect(pm.response.json()[0].id).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_id\",\n\t\"table\":\"friends\",\n    \"ids\": [1],\n    \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search_by_hash with ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"searched\", function () {    ",
									"    pm.expect(pm.response.json()[0].id).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"table\":\"friends\",\n    \"ids\": [1],\n    \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "delete with ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"deleted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"1 of 1 record successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"table\":\"friends\",\n    \"ids\": [2]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"updated\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"updated 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"database\":\"tuckerdoodle\",\n\t\"table\":\"todo\",\n\t\"records\": [\n\t  {\n          \"id\": 1,\n          \"task\": \"Get extra large bone\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "update without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"updated\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"updated 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"table\":\"friends\",\n\t\"records\": [\n\t  {\n          \"id\": 1,\n          \"task\": \"Mr Sheriff Woody\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "upsert with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"upserted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"upserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"upsert\",\n\t\"database\":\"tuckerdoodle\",\n\t\"table\":\"todo\",\n\t\"records\": [\n\t  {\n          \"id\": 2,\n          \"task\": \"Chase cat\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "upsert without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"upserted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"upserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"upsert\",\n\t\"table\":\"friends\",\n\t\"records\": [\n\t  {\n          \"id\": 2,\n          \"name\": \"Mr Potato Head\"\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search_by_hash without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"searched\", function () {    ",
									"    pm.expect(pm.response.json()[0].id).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"table\":\"friends\",\n\t\"hash_values\": [1],\n    \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search_by_hash with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"searched\", function () {    ",
									"    pm.expect(pm.response.json()[0].id).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n    \"database\": \"tuckerdoodle\"\n,\t\"table\":\"todo\",\n\t\"hash_values\": [1],\n    \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search_by_value without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"searched\", function () {    ",
									"    pm.expect(pm.response.json()[0].id).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"table\":\"friends\",\n    \"search_attribute\": \"task\",\n    \"search_value\": \"*Sheriff Woody\",\n    \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search_by_value with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"searched\", function () {    ",
									"    pm.expect(pm.response.json()[0].id).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n    \"database\": \"tuckerdoodle\"\n,\t\"table\":\"todo\",\n    \"search_attribute\": \"task\",\n    \"search_value\": \"Get*\",\n    \"get_attributes\": [\"*\"]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search_by_conditions without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"searched\", function () {    ",
									"    pm.expect(pm.response.json()[0].id).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n\t\"table\":\"friends\",\n    \"get_attributes\": [\"*\"],\n    \"conditions\": [\n        {\n            \"search_attribute\": \"task\",\n            \"search_type\": \"equals\",\n            \"search_value\": \"Mr Sheriff Woody\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "search_by_conditions with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"searched\", function () {    ",
									"    pm.expect(pm.response.json()[0].id).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_conditions\",\n    \"database\": \"tuckerdoodle\",\n\t\"table\":\"todo\",\n    \"get_attributes\": [\"*\"],\n    \"conditions\": [\n        {\n            \"search_attribute\": \"task\",\n            \"search_type\": \"equals\",\n            \"search_value\": \"Get extra large bone\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "delete with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"deleted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"1 of 1 record successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"database\":\"tuckerdoodle\",\n\t\"table\":\"todo\",\n\t\"hash_values\": [1]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "delete without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"deleted\", function () {    ",
									"    pm.expect(pm.response.json().message).to.equal(\"1 of 1 record successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"table\":\"friends\",\n\t\"hash_values\": [1]\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_attribute with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute dropped\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"successfully deleted attribute 'date'\");    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 3000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_attribute\",\n  \"database\": \"tuckerdoodle\",\n  \"table\":\"todo\",\n  \"attribute\": \"date\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_attribute without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"attribute dropped\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"successfully deleted attribute 'name'\");    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"drop_attribute\",\n  \"table\":\"friends\",\n  \"attribute\": \"name\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_table with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table dropped\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"successfully deleted table 'tuckerdoodle.todo'\");    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n    \"database\": \"tuckerdoodle\",\n    \"table\": \"todo\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_database tuckerdoodle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"database dropped\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"successfully deleted 'tuckerdoodle'\");    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_database\",\n    \"database\": \"tuckerdoodle\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "create_database 'job_guy' for jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"database created\", function () {    \r",
									"    pm.expect(pm.response.json().message).to.eql(\"database 'job_guy' successfully created\");    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_database\",\n  \"database\": \"job_guy\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "create_table 'working' for jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table created\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"table 'job_guy.working' successfully created.\");    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_table\",\n  \"database\":\"job_guy\",\n  \"table\":\"working\",\n  \"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "delete_records_before with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"delete job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete_records_before\",\n\t\"database\":\"job_guy\",\n\t\"table\":\"working\",\n\t\"date\": \"2050-01-25T23:05:27.464\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "delete_records_before without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"delete job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});",
									"",
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete_records_before\",\n\t\"table\":\"friends\",\n\t\"date\": \"2050-01-25T23:05:27.464\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "delete_audit_logs_before with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"delete job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});",
									"",
									"setTimeout(()=>{}, 5000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete_audit_logs_before\",\n\t\"database\":\"job_guy\",\n\t\"table\":\"working\",\n\t\"timestamp\": 1690553291764\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "delete_audit_logs_before without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"delete job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});",
									"",
									"setTimeout(()=>{}, 5000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete_audit_logs_before\",\n\t\"table\":\"friends\",\n\t\"timestamp\": 1690553291764\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "csv_file_load with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_file_load\",\n    \"database\": \"job_guy\",\n\t\"table\":\"working\",\n    \"file_path\":\"{{files_location}}Suppliers.csv\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "csv_file_load without database error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().error).to.include(\"Table 'data.todo' does not exist\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_file_load\",\n\t\"table\":\"todo\",\n    \"file_path\":\"{{files_location}}Suppliers.csv\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "csv_file_load without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_file_load\",\n\t\"table\":\"friends\",\n    \"file_path\":\"{{files_location}}Suppliers.csv\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "csv_data_load without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_data_load\",\n\t\"table\":\"friends\",\n    \"data\": \"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "csv_data_load with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_data_load\",\n    \"database\": \"job_guy\",\n\t\"table\":\"working\",\n    \"data\": \"id,name,section,country,image\\n1,ENGLISH POINTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/001g07.jpg\\n2,ENGLISH SETTER,British and Irish Pointers and Setters,GREAT BRITAIN,http://www.fci.be/Nomenclature/Illustrations/002g07.jpg\\n3,KERRY BLUE TERRIER,Large and medium sized Terriers,IRELAND,\\n\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "csv_url_load without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"insert\",\n  \"table\":\"friends\",\n  \"csv_url\":\"https://harperdb-integration-test-data.s3.us-east-2.amazonaws.com/breeds.csv\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "csv_url_load with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"csv_url_load\",\n  \"action\": \"insert\",\n  \"database\": \"job_guy\",\n  \"table\":\"working\",\n  \"csv_url\":\"https://harperdb-integration-test-data.s3.us-east-2.amazonaws.com/breeds.csv\"\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "import_from_s3 without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"table\":\"friends\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/owners.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "import_from_s3 with database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"import_from_s3\",\n\t\"database\": \"job_guy\",\n    \"table\":\"working\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/owners.json\",\n        \"region\": \"us-east-2\"\n\t}\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Export to S3 search_by_hash with ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"export job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_to_s3\",\n\t\"format\":\"csv\",\n\t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{s3_key}}\",\n\t\t\"aws_secret_access_key\":\"{{s3_secret}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/test_export\",\n        \"region\": \"us-east-2\"\n\t},\n\t\"search_operation\":{\n        \"operation\":\"search_by_hash\",\n        \"table\":\"friends\",\n        \"ids\": [1],\n        \"get_attributes\": [\"*\"]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Export locally search_by_hash with ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"export job started\", function () {    ",
									"    pm.expect(pm.response.json().message).to.include(\"Starting job with id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic c2dvbGRiZXJnOnRlc3QxMjM0IQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"export_local\",\n\t\"path\":\"./\",\n\t\"filename\":\"test_export_integration_test\",\n\t\"format\":\"json\",\n\t\"search_operation\":{\n        \"operation\":\"search_by_hash\",\n        \"table\":\"friends\",\n        \"ids\": [1],\n        \"get_attributes\": [\"*\"]\n    }\n}\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_table without database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"table dropped\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"successfully deleted table 'data.friends'\");    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 3000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n    \"table\": \"friends\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_database data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"database dropped\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"successfully deleted 'data'\");    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_database\",\n    \"database\": \"data\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop_database job_guy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"database dropped\", function () {    ",
									"    pm.expect(pm.response.json().message).to.eql(\"successfully deleted 'job_guy'\");    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_database\",\n    \"database\": \"job_guy\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "17. Environment Clean Up",
			"item": [
				{
					"name": "drop schema northnwd",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"setTimeout(()=>{}, 1000)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"northnwd\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "confirm attribute count correct (disabled)",
					"event": [
						{
							"listen": "disable-test",
							"script": {
								"exec": [
									"// This code loops through the response from describe all and compares ",
									"// the attributes to expected result variable below. ",
									"// If you create tests that modify schema/table/attributes you should update ‘expected_result’",
									"let expected_result = {",
									"    \"dev\": {",
									"        \"invalid_attribute\": {",
									"            \"id\": \"0c4c779d-edc8-4163-8d2b-3a139b31279b\",",
									"            \"name\": \"invalid_attribute\",",
									"            \"hash_attribute\": \"id\",",
									"            \"schema\": \"dev\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"some_attribute\"",
									"                },",
									"                {",
									"                    \"attribute\": \"some_attribute2\"",
									"                },",
									"                {",
									"                    \"attribute\": \"id\"",
									"                },",
									"                {",
									"                    \"attribute\": \"some_attribute1\"",
									"                }",
									"            ]",
									"        },",
									"        \"AttributeDropTest\": {",
									"            \"id\": \"59f1b41a-edc6-42de-a90c-4535fd7ae5a3\",",
									"            \"name\": \"AttributeDropTest\",",
									"            \"hash_attribute\": \"hashid\",",
									"            \"schema\": \"dev\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"created_attribute\"",
									"                },",
									"                {",
									"                    \"attribute\": \"some_attribute\"",
									"                },",
									"                {",
									"                    \"attribute\": \"hashid\"",
									"                }",
									"            ]",
									"        },",
									"        \"remarks_blob\": {",
									"            \"id\": \"db5ae901-6109-456d-bd25-4abe55e14eb8\",",
									"            \"name\": \"remarks_blob\",",
									"            \"hash_attribute\": \"id\",",
									"            \"schema\": \"dev\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"remarks\"",
									"                },",
									"                {",
									"                    \"attribute\": \"id\"",
									"                },",
									"                {",
									"                    \"attribute\": \"length\"",
									"                }",
									"            ]",
									"        },",
									"        \"long_text\": {",
									"            \"id\": \"eb3e5ea0-2ec5-4a7a-a190-37b5ed6e2e64\",",
									"            \"name\": \"long_text\",",
									"            \"hash_attribute\": \"id\",",
									"            \"schema\": \"dev\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"remarks\"",
									"                },",
									"                {",
									"                    \"attribute\": \"id\"",
									"                }",
									"            ]",
									"        }",
									"    },",
									"    \"call\": {",
									"        \"aggr\": {",
									"            \"id\": \"a6f5eedb-4834-4dad-81e9-0899666e477e\",",
									"            \"name\": \"aggr\",",
									"            \"hash_attribute\": \"all\",",
									"            \"schema\": \"call\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"owner_name\"",
									"                },",
									"                {",
									"                    \"attribute\": \"dog_name\"",
									"                },",
									"                {",
									"                    \"attribute\": \"age\"",
									"                },",
									"                {",
									"                    \"attribute\": \"weight_lbs\"",
									"                },",
									"                {",
									"                    \"attribute\": \"adorable\"",
									"                },",
									"                {",
									"                    \"attribute\": \"all\"",
									"                },",
									"                {",
									"                    \"attribute\": \"breed_id\"",
									"                }",
									"            ]",
									"        }",
									"    },",
									"    \"test_delete_before\": {",
									"        \"address\": {",
									"            \"id\": \"cbbc9bf3-3649-4879-812d-348fd55dd608\",",
									"            \"name\": \"address\",",
									"            \"hash_attribute\": \"id\",",
									"            \"schema\": \"test_delete_before\",",
									"            \"residence\": null,",
									"            \"attributes\": [",
									"                {",
									"                    \"attribute\": \"address\"",
									"                },",
									"                {",
									"                    \"attribute\": \"id\"",
									"                }",
									"            ]",
									"        }",
									"    }",
									"};",
									"",
									"let json_data = pm.response.json();",
									"let attribute_found = true;",
									"let schema_northnwd_exists = false;",
									"for (let schema in expected_result) {",
									"    try {",
									"         if (schema === \"northnwd\") {",
									"        schema_northnwd_exists = true;",
									"        break;",
									"        }",
									"        for (let table in expected_result[schema]) {",
									"            let json_data_attr_array = json_data[schema][table][\"attributes\"].map(obj => obj.attribute);",
									"            expected_result[schema][table].attributes.forEach((value) => {",
									"                if (!json_data_attr_array.includes(value.attribute)) {",
									"                    attribute_found = false;",
									"                    console.log(`Attribute: ${value.attribute}`);",
									"                    console.log(`Searching schema: ${schema} and table: ${table}`);",
									"                }",
									"            });",
									"        }",
									"    } catch(err) {",
									"        console.log(err);",
									"    }",
									"}",
									"",
									"pm.test(\"Test northnwd schema does not exist\", function () {",
									"    pm.expect(schema_northnwd_exists).to.eql(false);",
									"});",
									"",
									"pm.test(\"Test attributes are as expected\", function () {",
									"    pm.expect(attribute_found).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "VALIDATION Check Schema not found.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Check Schema Not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.haveOwnProperty('northnwd')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "drop schema dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"dev\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "drop schema other",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"other\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "drop schema another",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"another\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "drop schema call",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"call\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "drop schema test_delete_before (disabled)",
					"event": [
						{
							"listen": "disable-test",
							"script": {
								"exec": [
									"tests[\"Delete Schema\"] = responseBody.has(\"successfully delete\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3Q="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"operation\": \"drop_schema\",\n     \"schema\": \"test_delete_before\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "18. Computed indexed properties",
			"item": [
				{
					"name": "Add component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully added project: computed');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_component\",\n    \"project\": \"computed\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Set Component File schema.graphql",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully set component: schema.graphql');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\": \"set_component_file\",\n  \"project\": \"computed\",\n  \"file\": \"schema.graphql\",\n  \"payload\": \"type Product @table @export { \\n\\t id: ID @primaryKey \\n\\t price: Float \\n\\t taxRate: Float \\n\\t totalPrice: Float @computed(from: \\\"price + (price * taxRate)\\\") @indexed \\n\\t notIndexedTotalPrice: Float @computed(from: \\\"price + (price * taxRate)\\\") \\n\\t jsTotalPrice: Float @computed @indexed \\n } \\n\\n\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Set Component File resources.js",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully set component: resources.js');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\": \"set_component_file\",\n  \"project\": \"computed\",\n  \"file\": \"resources.js\",\n  \"payload\": \"tables.Product.setComputedAttribute('jsTotalPrice', (record) => { \\n\\t return record.price + (record.price * record.taxRate); \\n }); \\n\\n\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart service and wait",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    //wait for 31 seconds",
									"    console.log('waiting for 31 seconds for the restart of services');",
									"    setTimeout(() => {}, 31000);",
									"    //retry request if needed with:",
									"    // pm.setNextRequest(pm.info.requestId);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Restarting');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"http_workers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('inserted 1 of 1 records');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"Product\",\n    \"records\": [\n        {\n            \"id\": \"1\",\n            \"price\": 100,\n            \"taxRate\": 0.19\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search for attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"1\");",
									"    pm.expect(jsonData[0].price).to.eql(100);",
									"    pm.expect(jsonData[0].taxRate).to.eql(0.19);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"search_by_value\",\n    \"schema\": \"data\",\n    \"table\": \"Product\",\n    \"search_attribute\": \"id\",\n    \"search_value\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search and get attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"1\");",
									"    pm.expect(jsonData[0].price).to.eql(100);",
									"    pm.expect(jsonData[0].taxRate).to.eql(0.19);",
									"",
									"    pm.expect(jsonData[0].totalPrice).to.eql(119);",
									"    pm.expect(jsonData[0].notIndexedTotalPrice).to.eql(119);",
									"    pm.expect(jsonData[0].jsTotalPrice).to.eql(119);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"search_by_value\",\n    \"schema\": \"data\",\n    \"table\": \"Product\",\n    \"search_attribute\": \"id\",\n    \"search_value\": \"1\",\n    \"get_attributes\": [\"id\", \"price\", \"taxRate\", \"totalPrice\", \"notIndexedTotalPrice\", \"jsTotalPrice\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Search REST id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"1\");",
									"    pm.expect(jsonData.price).to.eql(100);",
									"    pm.expect(jsonData.taxRate).to.eql(0.19);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:9926/Product/1",
							"host": [
								"{{host}}"
							],
							"port": "9926",
							"path": [
								"Product",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search REST id select",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"1\");",
									"    pm.expect(jsonData.price).to.eql(100);",
									"    pm.expect(jsonData.taxRate).to.eql(0.19);",
									"",
									"    pm.expect(jsonData.totalPrice).to.eql(119);",
									"    pm.expect(jsonData.notIndexedTotalPrice).to.eql(119);",
									"    pm.expect(jsonData.jsTotalPrice).to.eql(119);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:9926/Product/1?select(id,price,taxRate,totalPrice,notIndexedTotalPrice,jsTotalPrice)",
							"host": [
								"{{host}}"
							],
							"port": "9926",
							"path": [
								"Product",
								"1"
							],
							"query": [
								{
									"key": "select(id,price,taxRate,totalPrice,notIndexedTotalPrice,jsTotalPrice)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search REST attribute select",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"1\");",
									"    pm.expect(jsonData[0].price).to.eql(100);",
									"    pm.expect(jsonData[0].taxRate).to.eql(0.19);",
									"    ",
									"    pm.expect(jsonData[0].totalPrice).to.eql(119);",
									"    pm.expect(jsonData[0].notIndexedTotalPrice).to.eql(119);",
									"    pm.expect(jsonData[0].jsTotalPrice).to.eql(119);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:9926/Product/?jsTotalPrice=119&select(id,price,taxRate,totalPrice,notIndexedTotalPrice,jsTotalPrice)",
							"host": [
								"{{host}}"
							],
							"port": "9926",
							"path": [
								"Product",
								""
							],
							"query": [
								{
									"key": "jsTotalPrice",
									"value": "119"
								},
								{
									"key": "select(id,price,taxRate,totalPrice,notIndexedTotalPrice,jsTotalPrice)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search REST attribute 2 select",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"1\");",
									"    pm.expect(jsonData[0].price).to.eql(100);",
									"    pm.expect(jsonData[0].taxRate).to.eql(0.19);",
									"    ",
									"    pm.expect(jsonData[0].totalPrice).to.eql(119);",
									"    pm.expect(jsonData[0].notIndexedTotalPrice).to.eql(119);",
									"    pm.expect(jsonData[0].jsTotalPrice).to.eql(119);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:9926/Product/?totalPrice=119&select(id,price,taxRate,totalPrice,notIndexedTotalPrice,jsTotalPrice)",
							"host": [
								"{{host}}"
							],
							"port": "9926",
							"path": [
								"Product",
								""
							],
							"query": [
								{
									"key": "totalPrice",
									"value": "119"
								},
								{
									"key": "select(id,price,taxRate,totalPrice,notIndexedTotalPrice,jsTotalPrice)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check node message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('1 of 1 record successfully deleted');",
									"    pm.expect(response.deleted_hashes).to.eql(['1']);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"delete\",\n    \"table\": \"Product\",\n    \"ids\": [\"1\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain(`successfully deleted table 'data.Product'`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_table\",\n    \"table\": \"Product\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain(`successfully deleted 'data'`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"data\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully dropped: computed');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_component\",\n    \"project\": \"computed\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "19. GraphQL tests",
			"item": [
				{
					"name": "Add component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add node success message', () => {",
									"    const response = JSON.stringify(pm.response.json());",
									"    pm.expect(response).to.contain.oneOf(['Successfully added project', 'Project already exists']);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_component\",\n    \"project\": \"appGraphQL\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Set Component File schema.graphql",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully set component: schema.graphql');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\": \"set_component_file\",\n  \"project\": \"appGraphQL\",\n  \"file\": \"schema.graphql\",\n  \"payload\": \"type VariedProps @table @export { \\n\\t id: ID @primaryKey \\n\\t name: String @indexed \\n } \\n\\n type SimpleRecord @table @export { \\n\\t id: ID @primaryKey \\n\\t name: String @indexed \\n } \\n\\n type FourProp @table(audit: \\\"1d\\\", replicated: false) @export { \\n\\t id: ID @primaryKey \\n\\t name: String @indexed \\n\\t age: Int @indexed \\n\\t title: String \\n\\t birthday: Date @indexed \\n\\t ageInMonths: Int @computed @indexed \\n\\t nameTitle: Int @computed(from: \\\"name + ' ' + title\\\") \\n } \\n\\n type Related @table @export(rest: true, mqtt: false) { \\n\\t id: ID @primaryKey \\n\\t name: String @indexed \\n\\t otherTable: [SubObject] @relationship(to: relatedId) \\n\\t subObject: SubObject @relationship(from: \\\"subObjectId\\\") \\n\\t subObjectId: ID @indexed \\n } \\n\\n type ManyToMany @table @export(mqtt: true, rest: false) { \\n\\t id: ID @primaryKey \\n\\t name: String @indexed \\n\\t subObjectIds: [ID] @indexed \\n\\t subObjects: [SubObject] @relationship(from: \\\"subObjectIds\\\") \\n } \\n\\n type HasTimeStampsNoPK @table @export { \\n\\t created: Float @createdTime \\n\\t updated: Float @updatedTime \\n } \\n\\n type SomeObject { \\n\\t name: String \\n } \\n\\n type SubObject @table(audit: false) @export { \\n\\t id: ID @primaryKey \\n\\t subObject: SomeObject \\n\\t subArray: [SomeObject] \\n\\t any: Any \\n\\t relatedId: ID @indexed \\n\\t related: Related @relationship(from: \\\"relatedId\\\") \\n\\t manyToMany: [ManyToMany] @relationship(to: subObjectIds) \\n } \\n\\n type NestedIdObject @table @export {  \\n\\t id: [ID]! @primaryKey \\n\\t name: String \\n } \\n\\n type SimpleCache @table { \\n\\t id: ID @primaryKey \\n } \\n\\n type HasBigInt @table @export { \\n\\t id: BigInt @primaryKey \\n\\t name: String @indexed \\n\\t anotherBigint: BigInt \\n } \\n\\n type Conflicted1 @table @export(name: \\\"Conflicted\\\") { \\n\\t id: ID @primaryKey \\n } \\n\\n type Conflicted2 @table @export(name: \\\"Conflicted\\\") { \\n\\t id: ID @primaryKey \\n } \\n\\n\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Set Component File config.yaml",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully set component: config.yaml');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\": \"set_component_file\",\n  \"project\": \"appGraphQL\",\n  \"file\": \"config.yaml\",\n  \"payload\": \"rest: true\\ngraphqlSchema:\\n  files: '*.graphql'\\njsResource:\\n  files: resources.js\\nstatic:\\n  root: web\\n  files: web/**\\nroles:\\n  files: roles.yaml\\ngraphql: true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart service and wait",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    //wait for 31 seconds",
									"    console.log('waiting for 31 seconds for the restart of services');",
									"    setTimeout(() => {}, 31000);",
									"    //retry request if needed with:",
									"    // pm.setNextRequest(pm.info.requestId);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Restarting');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"http_workers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert one null into SubObject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('inserted 1 of 1 records');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"SubObject\",\n    \"records\": [\n\t    { \n            \"id\": \"0\",\n            \"relatedId\": \"1\",\n            \"any\": null\n        }\n\t]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert into table Related",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('inserted 5 of 5 records');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"Related\",\n    \"records\": [\n\t    { \n            \"id\": \"1\", \n            \"name\": \"name-1\",\n            \"nestedIdObjectId\": [\"a\", \"1\"],\n            \"subObjectId\": \"1\"\n        },\n       { \n            \"id\": \"2\", \n            \"name\": \"name-2\",\n            \"nestedIdObjectId\": [\"a\", \"2\"],\n            \"subObjectId\": \"2\"\n        },\n        { \n            \"id\": \"3\", \n            \"name\": \"name-3\",\n            \"nestedIdObjectId\": [\"a\", \"3\"],\n            \"subObjectId\": \"3\"\n        },\n        { \n            \"id\": \"4\", \n            \"name\": \"name-4\",\n            \"nestedIdObjectId\": [\"a\", \"4\"],\n            \"subObjectId\": \"4\"\n        },\n        { \n            \"id\": \"5\", \n            \"name\": \"name-5\",\n            \"nestedIdObjectId\": [\"a\", \"5\"],\n            \"subObjectId\": \"5\"\n        }\n]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert into table SubObject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('inserted 5 of 5 records');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"SubObject\",\n    \"records\": [\n\t    { \n            \"id\": \"1\", \n            \"relatedId\": \"1\",\n            \"any\": \"any-1\"\n        },\n       { \n            \"id\": \"2\", \n            \"relatedId\": \"2\",\n            \"any\": \"any-2\"\n        },\n        { \n            \"id\": \"3\", \n            \"relatedId\": \"3\",\n            \"any\": \"any-3\"\n        },\n        { \n            \"id\": \"4\", \n            \"relatedId\": \"4\",\n            \"any\": \"any-4\"\n        },\n        { \n            \"id\": \"5\", \n            \"relatedId\": \"5\",\n            \"any\": \"any-5\"\n        }\n]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Shorthand query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related.length).to.eql(5);",
									"    jsonData.data.Related.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i + 1).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{ Related { id name } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Named query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related.length).to.eql(5);",
									"    jsonData.data.Related.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i + 1).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query GetRelated { Related { id name } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Named query with operationName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related.length).to.eql(5);",
									"    jsonData.data.Related.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i + 1).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query GetRelated { Related { id, name } }\",\n    \"operationName\": \"GetRelated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Named query with operationName 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject.length).to.eql(6);",
									"    jsonData.data.SubObject.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query GetRelated { Related { id, name } } query GetSubObject { SubObject { id relatedId } }\",\n    \"operationName\": \"GetSubObject\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by primary key field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related[0].id).to.eql(\"1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{ Related(id: \\\"1\\\") { id name } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Multi resource query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data.Related.length).to.eql(5);",
									"    jsonData.data.Related.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i + 1).toString());",
									"    })",
									"",
									"    pm.expect(jsonData.data.SubObject.length).to.eql(6);",
									"    jsonData.data.SubObject.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{ Related { id name } SubObject { id relatedId } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by variable non null no default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related[0].id).to.eql(\"1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query Get($id: ID!) { Related(id: $id) { id name } }\",\n    \"variables\": {\n            \"id\": \"1\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by variable non null with default with var",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related[0].id).to.eql(\"1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query Get($id: ID! = \\\"1\\\") { Related(id: $id) { id name } }\",\n    \"variables\": {\n            \"id\": \"1\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by var nullable no default no var",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"0\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query Get($any: Any) { SubObject(any: $any) { id any } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by var nullable w default with var",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query Get($any: Any = \\\"any-1\\\") { SubObject(any: $any) { id any } }\",\n    \"variables\": { \"any\": \"any-2\"}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by var w default with null var",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"0\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query Get($any: Any = \\\"any-1\\\") { SubObject(any: $any) { id any } }\",\n    \"variables\": { \"any\": null}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by nested attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{ SubObject(related: { name: \\\"name-2\\\" }) { id any } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by multiple nested attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"query\": \"{ SubObject(any: \\\"any-1\\\", related: { name: \\\"name-1\\\" }) { id any } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by nested attribute primary key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{ SubObject(related: { id: \\\"2\\\" }) { id any } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by doubly nested attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"3\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{ SubObject(related: { subObject: { any: \\\"any-3\\\" } }) { id any } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by doubly nested attribute as var sub level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"3\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query Get($subObject: Any) { SubObject(related: { subObject: $subObject }) { id any } }\",\n    \"variables\": { \"subObject\": { \"any\": \"any-3\" } }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by doubly nested attribute as var top-level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"3\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query Get($related: Any) { SubObject(related: $related) { id any } }\",\n    \"variables\": { \"related\": { \"subObject\": { \"any\": \"any-3\" } } }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by nested attribute as var sub level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"query\": \"query Get($name: String) { SubObject(related: { name: $name }) { id any } }\",\n\t\"variables\": { \"name\": \"name-2\" }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query by nested attribute as var top level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.SubObject[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"query\": \"query Get($related: Any) { SubObject(related: $related) { id any } }\",\n\t\"variables\": { \"related\": { \"name\": \"name-2\" } }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query with top level fragment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related.length).to.eql(5);",
									"    jsonData.data.Related.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i + 1).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"query\": \"query Get { ...related } fragment related on Any { Related { id name } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query with top level nested fragment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related.length).to.eql(5);",
									"    jsonData.data.Related.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i + 1).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"query\": \"query Get { ...related } fragment related on Any { ...nested } fragment nested on Any { Related { id name } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query w top level fragment multi resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data.Related.length).to.eql(5);",
									"    jsonData.data.Related.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i + 1).toString());",
									"    })",
									"",
									"    pm.expect(jsonData.data.SubObject.length).to.eql(6);",
									"    jsonData.data.SubObject.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"query\": \"query Get { ...multiResourceFragment } fragment multiResourceFragment on Any { Related { id name } SubObject { id relatedId } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query with inline fragment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related[0].id).to.eql(\"1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"query\": \"query Get { Related(id: \\\"1\\\") { ...on Related { id name } } }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query with nested fragments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.Related[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"query\": \"query Get { Related(id: \\\"2\\\") { ...relatedFields otherTable { ...id } } } fragment relatedFields on Related { ...id name } fragment id on Any { id }\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{portRest}}/graphql",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "20. REST tests",
			"item": [
				{
					"name": "[rest] Named query Get Related",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(5);",
									"    jsonData.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i + 1).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/Related/?select(id,name)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"Related",
								""
							],
							"query": [
								{
									"key": "select(id,name)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Named query Get SubObject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message ids\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(6);",
									"    jsonData.forEach((row, i) => {",
									"        pm.expect(row.id).to.equal((i).toString());",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/SubObject/?select(id,relatedId)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"SubObject",
								""
							],
							"query": [
								{
									"key": "select(id,relatedId)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query by primary key field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/Related/?id==1&select(id,name)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"Related",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "=1"
								},
								{
									"key": "select(id,name)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query by variable non null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/Related/?id==2&select(id,name)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"Related",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "=2"
								},
								{
									"key": "select(id,name)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query by var nullable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/SubObject/?any==any-2&select(id,any)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"SubObject",
								""
							],
							"query": [
								{
									"key": "any",
									"value": "=any-2"
								},
								{
									"key": "select(id,any)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query by var with null var",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"0\");",
									"    pm.expect(jsonData[0].any).to.be.null;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/SubObject/?any==null&select(id,any)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"SubObject",
								""
							],
							"query": [
								{
									"key": "any",
									"value": "=null"
								},
								{
									"key": "select(id,any)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query by nested attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/SubObject/?related.name==name-2&select(id,any)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"SubObject",
								""
							],
							"query": [
								{
									"key": "related.name",
									"value": "=name-2"
								},
								{
									"key": "select(id,any)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query by multiple nested attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/SubObject/?any==any-2&related.name==name-2&select(id,any)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"SubObject",
								""
							],
							"query": [
								{
									"key": "any",
									"value": "=any-2"
								},
								{
									"key": "related.name",
									"value": "=name-2"
								},
								{
									"key": "select(id,any)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query by nested attribute primary key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/SubObject/?related.id==2&select(id,any)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"SubObject",
								""
							],
							"query": [
								{
									"key": "related.id",
									"value": "=2"
								},
								{
									"key": "select(id,any)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query by doubly nested attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/SubObject/?related.subObject.any==any-2&select(id,any)",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"SubObject",
								""
							],
							"query": [
								{
									"key": "related.subObject.any",
									"value": "=any-2"
								},
								{
									"key": "select(id,any)",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[rest] Query with nested fragments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check message id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"3\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{portRest}}/Related/?id==3",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"Related",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "=3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "21. Authentication Tests",
			"item": [
				{
					"name": "Describe all with valid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Describe all with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"tests[\"Login failed\"] = responseBody.has(\"Login failed\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "thisIsNotMyPassword",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Describe all with invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"tests[\"Login failed\"] = responseBody.has(\"Login failed\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "thisIsNotMyUsername",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Describe all with empty credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"tests[\"Must login\"] = responseBody.has(\"Must login\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Describe all with long credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"tests[\"Login failed\"] = responseBody.has(\"Login failed\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "sdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafksdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdj",
									"type": "string"
								},
								{
									"key": "username",
									"value": "sdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdjsdkafkjsdkljsakdj",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Describe all without auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// this is only for dev config, not prod\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"\r",
									"// this is only for prod config, not dev\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"tests[\"Must login\"] = responseBody.has(\"Must login\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Create auth token with valid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Get operation token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.haveOwnProperty('operation_token');\r",
									"    pm.expect(jsonData.operation_token).to.not.be.empty;\r",
									"    pm.environment.set('my_operation_token', jsonData.operation_token);\r",
									"    // console.log(pm.variables.get('my_operation_token'));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_authentication_tokens\",\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Describe all with valid auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.test(\"Check response not empty\", function () {\r",
									"//    pm.expect(pm.response.json()).to.not.be.empty;\r",
									"// });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{my_operation_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Create auth token with invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response\", function () {\r",
									"    var response = JSON.stringify(pm.response.json());\r",
									"    pm.expect(response).to.include(\"invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_authentication_tokens\",\n    \"username\": \"{{username}}\",\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Create auth token with invalid credentials 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response\", function () {\r",
									"    var response = JSON.stringify(pm.response.json());\r",
									"    pm.expect(response).to.include(\"invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_authentication_tokens\",\n    \"username\": \"\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Create auth token with invalid credentials 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response\", function () {\r",
									"    var response = JSON.stringify(pm.response.json());\r",
									"    pm.expect(response).to.include(\"invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_authentication_tokens\",\n    \"username\": \"wrongusername\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				},
				{
					"name": "Create auth token with empty credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response\", function () {\r",
									"    var response = JSON.stringify(pm.response.json());\r",
									"    pm.expect(response).to.include(\"invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_authentication_tokens\",\n    \"username\": \"\",\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						},
						"description": "This method is used to create a schema.  It like all other functions requires basic auth.  \n\nAttributes:\n\noperation (required) - must always be create_schema\n\nschema (required) - name of the schema you are creating"
					},
					"response": []
				}
			]
		},
		{
			"name": "22. OpenAPI",
			"item": [
				{
					"name": "Add component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add node success message', () => {",
									"    const response = JSON.stringify(pm.response.json());",
									"    pm.expect(response).to.contain.oneOf(['Successfully added project', 'Project already exists']);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_component\",\n    \"project\": \"myApp111\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart service and wait",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    //wait for 31 seconds",
									"    console.log('waiting for 31 seconds for the restart of services');",
									"    setTimeout(() => {}, 31000);",
									"    //retry request if needed with:",
									"    // pm.setNextRequest(pm.info.requestId);",
									"});",
									"",
									"pm.test('Check message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Restarting');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"http_workers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}"
						}
					},
					"response": []
				},
				{
					"name": "Get open api",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response message assertions\", () =>{",
									"     var jsonData = pm.response.json();",
									"",
									"     var openapi_text = JSON.stringify(jsonData.openapi);",
									"     pm.expect(openapi_text).to.not.be.empty;",
									"",
									"     pm.expect(jsonData.info.title).to.contain('HarperDB HTTP REST interface');",
									"     ",
									"     pm.expect(jsonData.paths).to.exist;",
									"     pm.expect(jsonData.paths).to.haveOwnProperty('/TableName/');",
									"     pm.expect(jsonData.paths).to.haveOwnProperty('/TableName/{id}');",
									"     pm.expect(jsonData.paths).to.haveOwnProperty('/Greeting/');",
									"     var paths_text = JSON.stringify(jsonData.paths);",
									"     pm.expect(paths_text).to.include('post');",
									"     pm.expect(paths_text).to.include('get');",
									"",
									"     pm.expect(jsonData.components).to.exist;",
									"     pm.expect(jsonData.components.schemas).to.exist;",
									"     pm.expect(jsonData.components.schemas.TableName).to.exist;",
									"     pm.expect(jsonData.components.schemas.Greeting).to.exist;",
									"     ",
									"     pm.expect(jsonData.components.securitySchemes).to.exist;",
									"     pm.expect(jsonData.components.securitySchemes.basicAuth).to.exist;",
									"     pm.expect(jsonData.components.securitySchemes.bearerAuth).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic SERCX0FETUlOOnJvb3QxOTg0"
							}
						],
						"url": {
							"raw": "{{host}}:{{portRest}}/openapi",
							"host": [
								"{{host}}"
							],
							"port": "{{portRest}}",
							"path": [
								"openapi"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "insert_timestamp",
			"value": "0"
		},
		{
			"key": "operation_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwic3VwZXJfdXNlciI6dHJ1ZSwiY2x1c3Rlcl91c2VyIjpmYWxzZSwiaWF0IjoxNjE2MDA4NjMwLCJleHAiOjE2MTYwOTUwMzAsInN1YiI6Im9wZXJhdGlvbiJ9.nZ2pk5ixPyzzhpI1LQJ0bF61ZFjHcCyq5geDBnPhW_763GgLQ7-dXhzn6yVVq890q1i8fDp0CWWvaE8ynz0_2oX0cHF1wPKein1rXVGZbR-Oo5LIUVXVW4GcZj6pnI7JFAhsmzMvfm_RmjyS7NefpJibCwP6wIrXGj3cY_L_e6aBc7QaXQ-TY5-040bjqzsJqHA_wrP-Ogt8UvnXrGwAhkReyz5dMhZW8Pp6oRVrm8iVrWQeb5XPwCFytFjlzHfRDGRXvbfOul9OOW08AwUhlYkF0C1-LQVXCrFyla25abVUbVoYIBdn5wnA0dZ3wYBtsskOP3niTTSWMDxp29zQ9wb3Urr5fqqlgPRNWEy5wt8K3p208aiQ2Haba7y2S9VEEYcqdoRzwOYWkVaYJAaTbrGTy5AU4y-a7QE_k3d-fll-DWVGQ5frKSGB1T8NmlT4kuIJI1_2v-pvcFKjpdq3eOhOYqhyCfoKf30Np1HOFhIiVw2PwLwpworvVg347ZtTeu7wAMu-Ayu9o4OwTGWBOYdBrJq66LpwpZWy565L916uo7UKWbVT-d-TsS7YGNos9FJ-5GY8H5_x6R3eQt96maNGckJWfl1ECrQ32zuzw6UzLH6Js9-87jBnYTUjtfY1OrJMkixi1aeua2e3Oi95JmSwPZoqsIAyy1GxdNmIOg8"
		},
		{
			"key": "refresh_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwic3VwZXJfdXNlciI6dHJ1ZSwiY2x1c3Rlcl91c2VyIjpmYWxzZSwiaWF0IjoxNjE2MDA4NjI5LCJleHAiOjE2MTg2MDA2MjksInN1YiI6InJlZnJlc2gifQ.lVZ6fNSfXKNrA34eocOEZt5WgqGyGXaxVQvrf61r8cE_DoIH2MKaG2li4sAoNUjW3OeXw60IkHYVNwXVXVvSR8BJW22yGGAl3cTSsSXuO2hNjEdptQJBMLpcghXkJmhftyDBq37ZXBjVb2n1kg_dGElr2e-ZoZOfBC2qrN7Lx3OKN1e5hdjNu5wbNhH9_MsgZl4jCLkHweyn57IYysLpI5-6zn9R_YyfUUJPwLxznYVJl5-xyW9s_gFiZEhH9ds89nTmUSC76rM4pVdivxuRX_IzAlCSFoMa3upQNolmr7jesFqcj-4PVyOFWhDHvE96oT4JXBrG3V602LB7l16uFiZUeCt2swi4OOnvp2hr5Ua0Atsh7Y1tZ3Ru7tR_EUzU1ky_KDQ-QL-cYC9mmjwwKj3ROK-tHjGZsR2J6Wz3kZiLYpmkaIcX2JsUGnK25xZrbumb0N2ZjOaWS103hbUl98viXDQan8bjg7DcVI9wyVWYFbUrctQ9--mFrzLyqI8k2i2MIXFoW6vAWKzz-YaWj47trJ5tS6zmU_Q9unxAdFvKqqvfUBBYBIWNBvvhXGNwFrdZFjyH8A2unuTG3T09jhoczWyWNuKYs_Vf1PgFhv3yjeO4MpXYIDGLayyEcj86kkkQmJkFd72zXpF_DOzFDhjmE1D341D3HYYDTImxooc"
		}
	]
}