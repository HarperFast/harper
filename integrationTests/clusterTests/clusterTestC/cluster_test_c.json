{
	"info": {
		"_postman_id": "a5629b6e-1a0c-4505-be9b-d4976e984abb",
		"name": "Cluster Test C",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7046690"
	},
	"item": [
		{
			"name": "Routes",
			"item": [
				{
					"name": "Add node 2 routes to node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes set messaged returned', () => {",
									"    const response = pm.response.json();",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set[0]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.skipped).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"server\": \"hub\",\n    \"routes\":[ {\"host\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 1 routes to node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes set messaged returned', () => {",
									"    const response = pm.response.json();",
									"    const node1_host = pm.environment.get('NODE1_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set[0]).to.eql({",
									"        'host': node1_host,",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.skipped).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"server\": \"hub\",\n    \"routes\":[ {\"host\": \"{{NODE1_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get routes returns routes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes are returned', () => {",
									"    const response = pm.response.json();",
									"    const node1_host = pm.environment.get('NODE1_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.hub[0]).to.eql({",
									"        'host': node1_host,",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.leaf).to.eql([])",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_get_routes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add duplicate leaf hub route node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes skipped messaged returned', () => {",
									"    const response = pm.response.json();",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set).to.eql([]);",
									"    pm.expect(response.skipped[0]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"server\": \"leaf\",\n    \"routes\":[ {\"host\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add leaf routes to node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes set messaged returned', () => {",
									"    const response = pm.response.json();",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set[0]).to.eql({",
									"        'host': \"1.11.22.11\",",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.skipped).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"server\": \"leaf\",\n    \"routes\":[ {\"host\": \"1.11.22.11\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get routes returns leaf routes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes are returned', () => {",
									"    const response = pm.response.json();",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.hub[0]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.leaf[0]).to.eql({",
									"        'host': '1.11.22.11',",
									"        'port': clustering_port",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_get_routes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confrim routes added to config node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes found in config', () => {",
									"    const response = pm.response.json();",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.clustering.hubServer.cluster.network.routes[0]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"",
									"    pm.expect(response.clustering.leafServer.network.routes[0]).to.eql({",
									"        'host': '1.11.22.11',",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_configuration\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete routes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes are deleted', () => {",
									"    const response = pm.response.json();",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully deleted');",
									"    pm.expect(response.deleted[0]).to.eql({",
									"        'host': '1.11.22.11',",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_delete_routes\",\n    \"routes\":[ {\"host\": \"1.11.22.11\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confrim routes removed from config node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Leaf routes are not there', () => {",
									"    const response = pm.response.json();",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.clustering.hubServer.cluster.network.routes[0]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"",
									"    pm.expect(response.clustering.leafServer.network.routes).to.be.null;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_configuration\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete all routes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes are deleted', () => {",
									"    const response = pm.response.json();",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully deleted');",
									"    pm.expect(response.deleted[0]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_delete_routes\",\n    \"routes\":[ {\"host\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete all routes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes are deleted', () => {",
									"    const response = pm.response.json();",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"    const node1_host = pm.environment.get('NODE1_HOST');",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully deleted');",
									"    pm.expect(response.deleted[0]).to.eql({",
									"        'host': node1_host,",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_delete_routes\",\n    \"routes\":[ {\"host\": \"{{NODE1_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction log",
			"item": [
				{
					"name": "Ceate schema 'tx_log_test' for tx log tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema 'tx_log_test' is created\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"schema 'tx_log_test' successfully created\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"tx_log_test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Ceate table 'chicken' for tx log tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Table 'chicken' is created\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'tx_log_test.chicken' successfully created.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert two records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Two records are inserted\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql({",
									"        \"message\": \"inserted 2 of 2 records\",",
									"        \"inserted_hashes\": [",
									"            1,",
									"            2",
									"        ],",
									"        \"skipped_hashes\": []",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"name\": \"Hen Solo\",\n            \"lays_eggs\": true,\n            \"age\": 2\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Cluck Vader\",\n            \"lays_eggs\": false,\n            \"age\": 1\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update one record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"One record is updated\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql({",
									"        \"message\": \"updated 1 of 1 records\",",
									"        \"update_hashes\": [",
									"            2",
									"        ],",
									"        \"skipped_hashes\": []",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"records\": [\n        {\n            \"id\": 2,\n            \"lays_eggs\": true\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete one record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"One record is deleted\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql({",
									"        \"message\": \"1 of 1 record successfully deleted\",",
									"        \"deleted_hashes\": [",
									"            2",
									"        ],",
									"        \"skipped_hashes\": []",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"delete\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"hash_values\": [2]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Read transaction log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test('Log has correct number of records', () => {",
									"    pm.expect(response.length).to.equal(3)",
									"})",
									"",
									"pm.test('Insert transaction log is correct', () => {",
									"    const insert_tx = response[0];",
									"    const record_1 = insert_tx.records[0];",
									"    const record_2 = insert_tx.records[1];",
									"",
									"    pm.expect(insert_tx.operation).to.equal('insert');",
									"    pm.expect(insert_tx.user).to.equal('admin');",
									"    pm.expect(insert_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(record_1.id).to.equal(1);",
									"    pm.expect(record_1.name).to.equal('Hen Solo');",
									"    pm.expect(record_1.lays_eggs).to.equal(true);",
									"    pm.expect(record_1.age).to.equal(2);",
									"    pm.expect(record_1).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_1).to.haveOwnProperty('__createdtime__')",
									"    pm.expect(record_2.id).to.equal(2);",
									"    pm.expect(record_2.name).to.equal('Cluck Vader');",
									"    pm.expect(record_2.lays_eggs).to.equal(false);",
									"    pm.expect(record_2.age).to.equal(1);",
									"    pm.expect(record_2).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_2).to.haveOwnProperty('__createdtime__')",
									"})",
									"",
									"pm.test('Update transaction log is correct', () => {",
									"    const update_tx = response[1];",
									"",
									"    pm.expect(update_tx.operation).to.equal('update');",
									"    pm.expect(update_tx.user).to.equal('admin');",
									"    pm.expect(update_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(update_tx.records[0].id).to.equal(2);",
									"    pm.expect(update_tx.records[0].lays_eggs).to.equal(true);",
									"    pm.expect(update_tx.records[0]).to.haveOwnProperty('__updatedtime__');",
									"})",
									"",
									"pm.test('Delete transaction log is correct', () => {",
									"    const delete_tx = response[2];",
									"",
									"    pm.expect(delete_tx.operation).to.equal('delete');",
									"    pm.expect(delete_tx.user).to.equal('admin');",
									"    pm.expect(delete_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(delete_tx.hash_values.length).to.equal(1);",
									"    pm.expect(delete_tx.hash_values[0]).to.equal(2)",
									"})",
									"",
									"// Save the timestamps to a var so they can be used by other tests.",
									"pm.environment.set('TX_LOG_TIMESTAMP_0', response[0].timestamp);",
									"pm.environment.set('TX_LOG_TIMESTAMP_1', response[1].timestamp);",
									"pm.environment.set('TX_LOG_TIMESTAMP_2', response[2].timestamp);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "TODO add tests with filtering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test('Log has correct number of records', () => {",
									"    pm.expect(response.length).to.equal(3)",
									"})",
									"",
									"pm.test('Insert transaction log is correct', () => {",
									"    const insert_tx = response[0];",
									"    const record_1 = insert_tx.records[0];",
									"    const record_2 = insert_tx.records[1];",
									"",
									"    pm.expect(insert_tx.operation).to.equal('insert');",
									"    pm.expect(insert_tx.user).to.equal('admin');",
									"    pm.expect(insert_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(record_1.id).to.equal(1);",
									"    pm.expect(record_1.name).to.equal('Hen Solo');",
									"    pm.expect(record_1.lays_eggs).to.equal(true);",
									"    pm.expect(record_1.age).to.equal(2);",
									"    pm.expect(record_1).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_1).to.haveOwnProperty('__createdtime__')",
									"    pm.expect(record_2.id).to.equal(2);",
									"    pm.expect(record_2.name).to.equal('Cluck Vader');",
									"    pm.expect(record_2.lays_eggs).to.equal(false);",
									"    pm.expect(record_2.age).to.equal(1);",
									"    pm.expect(record_2).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_2).to.haveOwnProperty('__createdtime__')",
									"})",
									"",
									"pm.test('Update transaction log is correct', () => {",
									"    const update_tx = response[1];",
									"",
									"    pm.expect(update_tx.operation).to.equal('update');",
									"    pm.expect(update_tx.user).to.equal('admin');",
									"    pm.expect(update_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(update_tx.records[0].id).to.equal(2);",
									"    pm.expect(update_tx.records[0].lays_eggs).to.equal(true);",
									"    pm.expect(update_tx.records[0]).to.haveOwnProperty('__updatedtime__');",
									"})",
									"",
									"pm.test('Delete transaction log is correct', () => {",
									"    const delete_tx = response[2];",
									"",
									"    pm.expect(delete_tx.operation).to.equal('delete');",
									"    pm.expect(delete_tx.user).to.equal('admin');",
									"    pm.expect(delete_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(delete_tx.hash_values.length).to.equal(1);",
									"    pm.expect(delete_tx.hash_values[0]).to.equal(2)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete tx log before partial delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('Job is started', () => {",
									"    pm.expect(response.message).to.include('Starting job with id')",
									"})",
									"",
									"pm.environment.set('JOB_ID', response.message.split(' ')[4]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"delete_transaction_logs_before\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"timestamp\": {{TX_LOG_TIMESTAMP_1}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get first delete job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm job response is correct', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].message).to.equal('Logs successfully deleted from transaction log.');",
									"    pm.expect(response[0].status).to.equal('COMPLETE');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confrim partial tx log records deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Log record was deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2)",
									"    pm.expect(response[0].operation).to.equal('update');",
									"    pm.expect(response[0].timestamp).to.equal(pm.environment.get('TX_LOG_TIMESTAMP_1'));",
									"    pm.expect(response[1].operation).to.equal('delete');",
									"    pm.expect(response[1].timestamp).to.equal(pm.environment.get('TX_LOG_TIMESTAMP_2'));",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete tx log before delete all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('Job is started', () => {",
									"    pm.expect(response.message).to.include('Starting job with id')",
									"})",
									"",
									"pm.environment.set('JOB_ID', response.message.split(' ')[4]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Increment timestamp 2 so that the test can use it to delete all the records.",
									"const timestamp = pm.environment.get('TX_LOG_TIMESTAMP_2');",
									"pm.environment.set('TX_LOG_TIMESTAMP_2', (timestamp + 1));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"delete_transaction_logs_before\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"timestamp\": {{TX_LOG_TIMESTAMP_2}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get second delete job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm job response is correct', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].message).to.equal('All logs successfully deleted from transaction log.');",
									"    pm.expect(response[0].status).to.equal('COMPLETE');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confrim all tx log records deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Transaction log is empty', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'tx_log_test'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema 'tx_log_test' is dropped\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted schema 'tx_log_test'\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"tx_log_test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unidirectional",
			"item": [
				{
					"name": "Add node 2 routes to node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes set messaged returned', () => {",
									"    const response = pm.response.json();",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set[0]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.skipped).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"server\": \"hub\",\n    \"routes\":[ {\"host\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 1 routes to node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes set messaged returned', () => {",
									"    const response = pm.response.json();",
									"    const node1_host = pm.environment.get('NODE1_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set[0]).to.eql({",
									"        'host': node1_host,",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.skipped).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"server\": \"hub\",\n    \"routes\":[ {\"host\": \"{{NODE1_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart clustering config node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restart message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('Restarting clustering config');",
									"});",
									"",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"clustering config\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart clustering config node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restart message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('Restarting clustering config');",
									"});",
									"",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"clustering config\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create schema 'radio' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restart message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('Restarting clustering config');",
									"});",
									"",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"clustering config\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'genre' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restart message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('Restarting clustering config');",
									"});",
									"",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"clustering config\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'artists' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restart message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('Restarting clustering config');",
									"});",
									"",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"clustering config\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 to node 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restart message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('Restarting clustering config');",
									"});",
									"",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"clustering config\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "http",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bidirectional",
			"item": []
		}
	]
}