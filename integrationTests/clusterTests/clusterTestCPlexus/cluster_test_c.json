{
	"info": {
		"_postman_id": "a26865ee-0b96-4dc0-a9d3-c8f47a725e47",
		"name": "Cluster Test C - Plexus",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38120670"
	},
	"item": [
		{
			"name": "Unidirectional",
			"item": [
				{
					"name": "Create schema 'radio' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Radio schema created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"database 'radio' successfully created\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"radio\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create schema 'radio' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Radio schema created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"database 'radio' successfully created\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"radio\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create schema 'listeners' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('listeners schema created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"database 'listeners' successfully created\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"listeners\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create schema 'listeners' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('listeners schema created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"database 'listeners' successfully created\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"listeners\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'radio.genre' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Genre table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'radio.genre' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"radio\",\n    \"table\": \"genre\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'radio.genre' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Genre table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'radio.genre' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"radio\",\n    \"table\": \"genre\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'radio.artists' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Artists table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'radio.artists' successfully created.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"radio\",\n    \"table\": \"artists\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'radio.artists' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Artists table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'radio.artists' successfully created.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"radio\",\n    \"table\": \"artists\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'listeners.address' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('address table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'listeners.address' successfully created.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"listeners\",\n    \"table\": \"address\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'listeners.address' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('address table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'listeners.address' successfully created.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"listeners\",\n    \"table\": \"address\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into listeners.address node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into listeners.address', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"listeners\",\n    \"table\":\"address\",\n    \"records\": [\n        {\n            \"name\":\"Kevin Bacon\",\n            \"street\":\"Footloose\",\n            \"id\":\"1\"\n        },\n        {\n            \"name\":\"Tom Cruise\",\n            \"street\":\"Maverick\",\n            \"id\":\"2\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 to node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Add node success message', () => {",
									"    const response = pm.response.json();",
									"    const node_host = pm.environment.get(\"NODE2_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.equal(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
									"});",
									"",
									"// give it some time to setup replication",
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE2_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    },\n    \"subscriptions\": [\n        {\n            \"schema\": \"radio\",\n            \"table\": \"genre\",\n            \"publish\": false,\n            \"subscribe\": true\n        },\n        {\n            \"schema\": \"listeners\",\n            \"table\": \"address\",\n            \"publish\": true,\n            \"subscribe\": false\n        },\n        {\n            \"schema\": \"radio\",\n            \"table\": \"head\",\n            \"subscribe\": true,\n            \"publish\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 1', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"    const hdb_port = parseInt(pm.environment.get('HDB_PORT'));",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.node_name).to.equal(node1_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node2_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"                {",
									"                    \"schema\": \"radio\",",
									"                    \"table\": \"genre\",",
									"                    \"publish\": false,",
									"                    \"subscribe\": true",
									"                },",
									"                {",
									"                    \"schema\": \"listeners\",",
									"                    \"table\": \"address\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": false",
									"                },",
									"                {",
									"                    \"schema\": \"radio\",",
									"                    \"table\": \"head\",",
									"                    \"subscribe\": true,",
									"                    \"publish\": true",
									"                }",
									"            ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"    const hdb_port = parseInt(pm.environment.get('HDB_PORT'));",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.node_name).to.equal(node2_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node1_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"                {",
									"                    \"schema\": \"radio\",",
									"                    \"table\": \"genre\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": false",
									"                },",
									"                {",
									"                    \"schema\": \"listeners\",",
									"                    \"table\": \"address\",",
									"                    \"publish\": false,",
									"                    \"subscribe\": true",
									"                },",
									"                {",
									"                    \"schema\": \"radio\",",
									"                    \"table\": \"head\",",
									"                    \"subscribe\": true,",
									"                    \"publish\": true",
									"                }",
									"            ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Check system.hdb_nodes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct node record on node 1', () => {",
									"    let response = pm.response.json()",
									"    response = response[0]",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"",
									"    pm.expect(response.name).to.equal(node2_name);",
									"    pm.expect(response.subscriptions.length).to.equal(3);",
									"    pm.expect(response.subscriptions).to.have.deep.members([",
									"            {",
									"                \"schema\": \"radio\",",
									"                \"table\": \"genre\",",
									"                \"publish\": false,",
									"                \"subscribe\": true",
									"            },",
									"            {",
									"                \"schema\": \"listeners\",",
									"                \"table\": \"address\",",
									"                \"publish\": true,",
									"                \"subscribe\": false",
									"            },",
									"            {",
									"                \"schema\": \"radio\",",
									"                \"table\": \"head\",",
									"                \"subscribe\": true,",
									"                \"publish\": true",
									"            }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Check system.hdb_nodes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct node record on node 2', () => {",
									"    let response = pm.response.json()",
									"    response = response[0]",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"",
									"    pm.expect(pm.response.json().length).to.equal(1)",
									"    pm.expect(response.name).to.equal(node1_name);",
									"    pm.expect(response.subscriptions.length).to.equal(3);",
									"    pm.expect(response.subscriptions).to.have.deep.members([",
									"            {",
									"                \"schema\": \"radio\",",
									"                \"table\": \"genre\",",
									"                \"publish\": true,",
									"                \"subscribe\": false",
									"            },",
									"            {",
									"                \"schema\": \"listeners\",",
									"                \"table\": \"address\",",
									"                \"publish\": false,",
									"                \"subscribe\": true",
									"            },",
									"            {",
									"                \"schema\": \"radio\",",
									"                \"table\": \"head\",",
									"                \"subscribe\": true,",
									"                \"publish\": true",
									"            }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema and tables node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node 1 has all the correct schema and tables', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.haveOwnProperty('radio');",
									"    pm.expect(response).to.haveOwnProperty('listeners');",
									"    pm.expect(response.radio).to.haveOwnProperty('artists');",
									"    pm.expect(response.radio).to.haveOwnProperty('genre');",
									"    pm.expect(response.listeners).to.haveOwnProperty('address');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_all\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema and tables node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node 2 has all the correct schema and tables', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.haveOwnProperty('radio');",
									"    pm.expect(response).to.haveOwnProperty('listeners');",
									"    pm.expect(response.radio).to.haveOwnProperty('artists');",
									"    pm.expect(response.radio).to.haveOwnProperty('genre');",
									"    pm.expect(response.listeners).to.haveOwnProperty('address');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_all\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Check pre-add node insert on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Address record on node 2', () => {",
									"    try {",
									"        const response = pm.response.json();",
									"        pm.expect(response.length).to.equal(2);",
									"        pm.expect(response[0]).to.haveOwnProperty('__createdtime__');",
									"        pm.expect(response[0]).to.haveOwnProperty('__updatedtime__');",
									"        pm.expect(response[1]).to.haveOwnProperty('__createdtime__');",
									"        pm.expect(response[1]).to.haveOwnProperty('__updatedtime__');",
									"",
									"        delete response[0]['__createdtime__'];",
									"        delete response[0]['__updatedtime__'];",
									"        delete response[1]['__createdtime__'];",
									"        delete response[1]['__updatedtime__'];",
									"",
									"        pm.expect(response).to.have.deep.members(",
									"            [",
									"",
									"                {",
									"                    \"id\": \"1\",",
									"                    \"name\": \"Kevin Bacon\",",
									"                    \"street\": \"Footloose\"",
									"                },",
									"                {",
									"                    \"id\": \"2\",",
									"                    \"name\": \"Tom Cruise\",",
									"                    \"street\": \"Maverick\"",
									"                }",
									"    ",
									"            ]",
									"        )",
									"        pm.environment.set('RETRY_COUNT', 0);",
									"    } catch (error) {",
									"        let retry_count = parseInt(pm.environment.get('RETRY_COUNT'));",
									"        const retry_count_max = parseInt(pm.environment.get('RETRY_COUNT_MAX'));",
									"        if (retry_count < retry_count_max) {",
									"            console.error(`Retry count ${retry_count} for test ${pm.info.requestName}`);",
									"            setTimeout(() => {}, 2000);",
									"            retry_count++",
									"            pm.environment.set('RETRY_COUNT', retry_count);",
									"            postman.setNextRequest(pm.info.requestId);",
									"        } else {",
									"            pm.environment.set('RETRY_COUNT', 0);",
									"            console.error(`\"${pm.info.requestName}\" reached max test retry`)",
									"            throw error",
									"        }",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"schema\":\"listeners\",\n\t\"table\":\"address\",\n\t\"search_attribute\":\"id\",\n\t\"search_value\":\"*\",\n\t\"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into radio.genre node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into radio.genre node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 3 of 3 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"radio\",\n    \"table\":\"genre\",\n    \"records\": [\n        {\n            \"type\":\"Rock\",\n            \"id\":\"1\"\n        },\n        {\n            \"type\":\"Jazz\",\n            \"id\":\"2\"\n        },\n        {\n            \"type\":\"Classical\",\n            \"id\":\"3\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records not in radio.genre node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('No records are on node 2 radio.genre', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.record_count).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_table\",\n    \"schema\":\"radio\",\n    \"table\":\"genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into radio.genre node 2 that exist on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into radio.genre node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 3 of 3 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"radio\",\n    \"table\":\"genre\",\n    \"records\": [\n        {\n            \"type\":\"Rock\",\n            \"id\":\"1\"\n        },\n        {\n            \"type\":\"Jazz\",\n            \"id\":\"2\"\n        },\n        {\n            \"type\":\"Classical\",\n            \"id\":\"3\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm no change radio.genre node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('No change to radio.genre node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.record_count).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_table\",\n    \"schema\":\"radio\",\n    \"table\":\"genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into radio.genre node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into radio.genre node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"radio\",\n    \"table\":\"genre\",\n    \"records\": [\n        {\n            \"type\":\"Hip hop\",\n            \"id\":\"4\"\n        },\n        {\n            \"type\":\"Electronic\",\n            \"id\":\"5\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm new records in radio.genre node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm all records on node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(5);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"1\",",
									"            \"type\": \"Rock\"",
									"        },",
									"        {",
									"            \"id\": \"2\",",
									"            \"type\": \"Jazz\"",
									"        },",
									"        {",
									"            \"id\": \"3\",",
									"            \"type\": \"Classical\"",
									"        },",
									"        {",
									"            \"id\": \"4\",",
									"            \"type\": \"Hip hop\"",
									"        },",
									"        {",
									"            \"id\": \"5\",",
									"            \"type\": \"Electronic\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update records radio.genre node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are update', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('updated 2 of 2 records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"records\": [\n\t  {\n\t    \"id\": \"1\",\n\t    \"type\": \"Jazzercise\"\n\t  },\n\t  {\n\t    \"id\": \"4\",\n\t    \"type\": \"Hip hop opopotamus\"\n\t  }\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records not update node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records not update node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(5);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"1\",",
									"            \"type\": \"Rock\"",
									"        },",
									"        {",
									"            \"id\": \"2\",",
									"            \"type\": \"Jazz\"",
									"        },",
									"        {",
									"            \"id\": \"3\",",
									"            \"type\": \"Classical\"",
									"        },",
									"        {",
									"            \"id\": \"4\",",
									"            \"type\": \"Hip hop\"",
									"        },",
									"        {",
									"            \"id\": \"5\",",
									"            \"type\": \"Electronic\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update records radio.genre node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are update', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('updated 2 of 2 records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"records\": [\n\t  {\n\t    \"id\": \"1\",\n\t    \"type\": \"Country\"\n\t  },\n\t  {\n\t    \"id\": \"4\",\n\t    \"type\": \"Opera\"\n\t  }\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records update node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records update node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(5);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"1\",",
									"            \"type\": \"Country\"",
									"        },",
									"        {",
									"            \"id\": \"2\",",
									"            \"type\": \"Jazz\"",
									"        },",
									"        {",
									"            \"id\": \"3\",",
									"            \"type\": \"Classical\"",
									"        },",
									"        {",
									"            \"id\": \"4\",",
									"            \"type\": \"Opera\"",
									"        },",
									"        {",
									"            \"id\": \"5\",",
									"            \"type\": \"Electronic\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Upsert records radio.genre node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are upserted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('upserted 1 of 1 records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"upsert\",\n\t\"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"records\": [\n\t  {\n\t    \"id\": \"6\",\n\t    \"type\": \"Hip hop opopotamus\"\n\t  }\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records not upserted node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records not upserted node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(5);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"1\",",
									"            \"type\": \"Country\"",
									"        },",
									"        {",
									"            \"id\": \"2\",",
									"            \"type\": \"Jazz\"",
									"        },",
									"        {",
									"            \"id\": \"3\",",
									"            \"type\": \"Classical\"",
									"        },",
									"        {",
									"            \"id\": \"4\",",
									"            \"type\": \"Opera\"",
									"        },",
									"        {",
									"            \"id\": \"5\",",
									"            \"type\": \"Electronic\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Upsert records radio.genre node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are upserted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('upserted 1 of 1 records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"upsert\",\n\t\"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"records\": [\n\t  {\n\t    \"id\": \"7\",\n\t    \"type\": \"Pop\"\n\t  }\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records upserted node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records upserted node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(7);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"1\",",
									"            \"type\": \"Country\"",
									"        },",
									"        {",
									"            \"id\": \"2\",",
									"            \"type\": \"Jazz\"",
									"        },",
									"        {",
									"            \"id\": \"3\",",
									"            \"type\": \"Classical\"",
									"        },",
									"        {",
									"            \"id\": \"4\",",
									"            \"type\": \"Opera\"",
									"        },",
									"        {",
									"            \"id\": \"5\",",
									"            \"type\": \"Electronic\"",
									"        },",
									"        {",
									"            \"id\": \"6\",",
									"            \"type\": \"Hip hop opopotamus\"",
									"        },",
									"        {",
									"            \"id\": \"7\",",
									"            \"type\": \"Pop\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records radio.genre node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('3 of 3 records successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n    \"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"hash_values\":[\"1\", \"2\", \"3\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records not deleted node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records not deleted node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(6);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"1\",",
									"            \"type\": \"Country\"",
									"        },",
									"        {",
									"            \"id\": \"2\",",
									"            \"type\": \"Jazz\"",
									"        },",
									"        {",
									"            \"id\": \"3\",",
									"            \"type\": \"Classical\"",
									"        },",
									"        {",
									"            \"id\": \"4\",",
									"            \"type\": \"Opera\"",
									"        },",
									"        {",
									"            \"id\": \"5\",",
									"            \"type\": \"Electronic\"",
									"        },",
									"        {",
									"        \"id\": \"7\",",
									"        \"type\": \"Pop\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records radio.genre node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('2 of 2 records successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n    \"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"hash_values\":[\"4\", \"5\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records deleted node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records deleted node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"6\",",
									"            \"type\": \"Hip hop opopotamus\"",
									"        },",
									"        {",
									"            \"id\": \"7\",",
									"            \"type\": \"Pop\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart node 1 to confirm records deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 4000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node 1 is restarted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Restarting');",
									"});",
									"",
									"// Give HDB time to restart.",
									"setTimeout(()=> {}, 10000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"restart\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 unchanged after restart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records deleted node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"6\",",
									"            \"type\": \"Hip hop opopotamus\"",
									"        },",
									"        {",
									"            \"id\": \"7\",",
									"            \"type\": \"Pop\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update node pub/sub false on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Update node successful message returned', () => {",
									"    const response = pm.response.json();",
									"        const node_host = pm.environment.get(\"NODE1_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.eql(`Successfully updated 'wss://${node_host}:${port}'`);",
									"});",
									"",
									"// give it some time to setup replication",
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    },\n    \"subscriptions\": [\n        {\n            \"schema\": \"radio\",\n            \"table\": \"genre\",\n            \"subscribe\": false,\n            \"publish\": false\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into radio.genre node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into radio.genre node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 3 of 3 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"radio\",\n    \"table\":\"genre\",\n    \"records\": [\n        {\n            \"type\":\"Hip hop\",\n            \"id\":\"8\"\n        },\n        {\n            \"type\":\"Electronic\",\n            \"id\":\"9\"\n        },\n        {\n            \"type\":\"Dance\",\n            \"id\":\"10\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 unchanged after update node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records unchanged node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"6\",",
									"            \"type\": \"Hip hop opopotamus\"",
									"        },",
									"        {",
									"            \"id\": \"7\",",
									"            \"type\": \"Pop\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update node pub/sub true on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Update node successful message returned', () => {",
									"    const response = pm.response.json();",
									"        const node_host = pm.environment.get(\"NODE1_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.eql(`Successfully updated 'wss://${node_host}:${port}'`);",
									"});",
									"",
									"// give it some time to setup replication",
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    },\n    \"subscriptions\": [\n        {\n            \"schema\": \"radio\",\n            \"table\": \"genre\",\n            \"subscribe\": true,\n            \"publish\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 2 changed after update true/true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records unchanged node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(5);",
									"    pm.expect(response).to.have.deep.members([",
									"    {",
									"        \"id\": \"6\",",
									"        \"type\": \"Hip hop opopotamus\"",
									"    },",
									"    {",
									"        \"id\": \"7\",",
									"        \"type\": \"Pop\"",
									"    },",
									"    {",
									"        \"id\": \"8\",",
									"        \"type\": \"Hip hop\"",
									"    },",
									"    {",
									"        \"id\": \"9\",",
									"        \"type\": \"Electronic\"",
									"    },",
									"    {",
									"        \"id\": \"10\",",
									"        \"type\": \"Dance\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update node pub/sub true/false on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Update node successful message returned', () => {",
									"    const response = pm.response.json();",
									"        const node_host = pm.environment.get(\"NODE2_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.eql(`Successfully updated 'wss://${node_host}:${port}'`);",
									"});",
									"",
									"// give it some time to setup replication",
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update_node\",\n    \"url\": \"wss://{{NODE2_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    },\n    \"subscriptions\": [\n        {\n            \"schema\": \"radio\",\n            \"table\": \"genre\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 1', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"    const hdb_port = parseInt(pm.environment.get('HDB_PORT'));",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.node_name).to.equal(node1_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node2_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"            {",
									"                \"schema\": \"radio\",",
									"                \"table\": \"genre\",",
									"                \"publish\": true,",
									"                \"subscribe\": false",
									"            },",
									"                            {",
									"                    \"schema\": \"listeners\",",
									"                    \"table\": \"address\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": false",
									"                },",
									"                {",
									"                    \"schema\": \"radio\",",
									"                    \"table\": \"head\",",
									"                    \"subscribe\": true,",
									"                    \"publish\": true",
									"                }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"    const hdb_port = parseInt(pm.environment.get('HDB_PORT'));",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.node_name).to.equal(node2_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node1_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"            {",
									"                \"schema\": \"radio\",",
									"                \"table\": \"genre\",",
									"                \"publish\": false,",
									"                \"subscribe\": true",
									"            },",
									"                     {",
									"                    \"schema\": \"listeners\",",
									"                    \"table\": \"address\",",
									"                    \"publish\": false,",
									"                    \"subscribe\": true",
									"                },",
									"                {",
									"                    \"schema\": \"radio\",",
									"                    \"table\": \"head\",",
									"                    \"subscribe\": true,",
									"                    \"publish\": true",
									"                }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into radio.genre node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into radio.genre node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"radio\",\n    \"table\":\"genre\",\n    \"records\": [\n        {\n            \"type\":\"Loud\",\n            \"id\":\"number1\"\n        },\n        {\n            \"type\":\"Jazz-a-tronic\",\n            \"id\":\"number2\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 2 updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm new records in table node 2', () => {",
									"    try {",
									"        const response = pm.response.json();",
									"        pm.expect(response.length).to.equal(7);",
									"        pm.expect(response).to.have.deep.members([",
									"            {",
									"                \"id\": \"6\",",
									"                \"type\": \"Hip hop opopotamus\"",
									"            },",
									"            {",
									"                \"id\": \"7\",",
									"                \"type\": \"Pop\"",
									"            },",
									"            {",
									"                \"id\": \"8\",",
									"                \"type\": \"Hip hop\"",
									"            },",
									"            {",
									"                \"id\": \"9\",",
									"                \"type\": \"Electronic\"",
									"            },",
									"            {",
									"                \"id\": \"10\",",
									"                \"type\": \"Dance\"",
									"            },",
									"            {",
									"                \"id\": \"number1\",",
									"                \"type\": \"Loud\"",
									"            },",
									"            {",
									"                \"id\": \"number2\",",
									"                \"type\": \"Jazz-a-tronic\"",
									"            }",
									"        ]);",
									"        pm.environment.set('RETRY_COUNT', 0);",
									"    } catch (error) {",
									"        let retry_count = parseInt(pm.environment.get('RETRY_COUNT'));",
									"        const retry_count_max = parseInt(pm.environment.get('RETRY_COUNT_MAX'));",
									"        if (retry_count < retry_count_max) {",
									"            console.error(`Retry count ${retry_count} for test ${pm.info.requestName}`);",
									"            setTimeout(() => {}, 2000);",
									"            retry_count++",
									"            pm.environment.set('RETRY_COUNT', retry_count);",
									"            postman.setNextRequest(pm.info.requestId);",
									"        } else {",
									"            pm.environment.set('RETRY_COUNT', 0);",
									"            console.error(`\"${pm.info.requestName}\" reached max test retry`)",
									"            throw error",
									"        }",
									"    }      ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete new records radio.genre node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('2 of 2 records successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n    \"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"hash_values\":[\"number1\", \"number2\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart node 2 to confirm records deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 6000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node 2 is restarted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('Restarting HarperDB. This may take up to 60 seconds.');",
									"});",
									"",
									"// Give HDB time to restart.",
									"setTimeout(()=> {}, 10000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"restart\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 2 same after restart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm new node 2 not changed after restart', () => {",
									"    try {",
									"        const response = pm.response.json();",
									"        pm.expect(response.length).to.equal(5);",
									"        pm.expect(response).to.have.deep.members([",
									"            {",
									"                \"id\": \"6\",",
									"                \"type\": \"Hip hop opopotamus\"",
									"            },",
									"            {",
									"                \"id\": \"7\",",
									"                \"type\": \"Pop\"",
									"            },",
									"            {",
									"                \"id\": \"8\",",
									"                \"type\": \"Hip hop\"",
									"            },",
									"            {",
									"                \"id\": \"9\",",
									"                \"type\": \"Electronic\"",
									"            },",
									"            {",
									"                \"id\": \"10\",",
									"                \"type\": \"Dance\"",
									"            }",
									"        ]);",
									"        pm.environment.set('RETRY_COUNT', 0);",
									"    } catch (error) {",
									"        let retry_count = parseInt(pm.environment.get('RETRY_COUNT'));",
									"        const retry_count_max = parseInt(pm.environment.get('RETRY_COUNT_MAX'));",
									"        if (retry_count < retry_count_max) {",
									"            console.error(`Retry count ${retry_count} for test ${pm.info.requestName}`);",
									"            setTimeout(() => {}, 2000);",
									"            retry_count++",
									"            pm.environment.set('RETRY_COUNT', retry_count);",
									"            postman.setNextRequest(pm.info.requestId);",
									"        } else {",
									"            pm.environment.set('RETRY_COUNT', 0);",
									"            console.error(`\"${pm.info.requestName}\" reached max test retry`)",
									"            throw error",
									"        }",
									"    }      ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get('NODE1_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node1_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE1_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 1 post-remove",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 1', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get('NODE1_NAME');",
									"    pm.expect(response.node_name).to.equal(node1_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 2 post-remove",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 2', () => {",
									"    const response = pm.response.json();",
									"    const node2_name = pm.environment.get('NODE2_NAME');",
									"    pm.expect(response.node_name).to.equal(node2_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 unchanged after remove",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records unchanged node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(7);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"6\",",
									"            \"type\": \"Hip hop opopotamus\"",
									"        },",
									"        {",
									"            \"id\": \"7\",",
									"            \"type\": \"Pop\"",
									"        },",
									"        {",
									"            \"id\": \"8\",",
									"            \"type\": \"Hip hop\"",
									"        },",
									"        {",
									"            \"id\": \"9\",",
									"            \"type\": \"Electronic\"",
									"        },",
									"        {",
									"            \"id\": \"10\",",
									"            \"type\": \"Dance\"",
									"        },",
									"        {",
									"            \"id\": \"number1\",",
									"            \"type\": \"Loud\"",
									"        },",
									"        {",
									"            \"id\": \"number2\",",
									"            \"type\": \"Jazz-a-tronic\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records radio.genre node 1 post remove node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('1 of 1 record successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n    \"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"hash_values\":[\"6\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 2 after node 1 change post remove node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm node 2 unchanged after remove node', () => {",
									"    try {",
									"        const response = pm.response.json();",
									"        pm.expect(response.length).to.equal(5);",
									"        pm.expect(response).to.have.deep.members([",
									"            {",
									"                \"id\": \"6\",",
									"                \"type\": \"Hip hop opopotamus\"",
									"            },",
									"            {",
									"                \"id\": \"7\",",
									"                \"type\": \"Pop\"",
									"            },",
									"            {",
									"                \"id\": \"8\",",
									"                \"type\": \"Hip hop\"",
									"            },",
									"            {",
									"                \"id\": \"9\",",
									"                \"type\": \"Electronic\"",
									"            },",
									"            {",
									"                \"id\": \"10\",",
									"                \"type\": \"Dance\"",
									"            }",
									"        ]);",
									"        pm.environment.set('RETRY_COUNT', 0);",
									"    } catch (error) {",
									"        let retry_count = parseInt(pm.environment.get('RETRY_COUNT'));",
									"        const retry_count_max = parseInt(pm.environment.get('RETRY_COUNT_MAX'));",
									"        if (retry_count < retry_count_max) {",
									"            console.error(`Retry count ${retry_count} for test ${pm.info.requestName}`);",
									"            setTimeout(() => {}, 2000);",
									"            retry_count++",
									"            pm.environment.set('RETRY_COUNT', retry_count);",
									"            postman.setNextRequest(pm.info.requestId);",
									"        } else {",
									"            pm.environment.set('RETRY_COUNT', 0);",
									"            console.error(`\"${pm.info.requestName}\" reached max test retry`)",
									"            throw error",
									"        }",
									"    }      ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records radio.genre node 2 post remove node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('3 of 3 records successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n    \"schema\":\"radio\",\n\t\"table\":\"genre\",\n\t\"hash_values\":[\"7\", \"8\", \"9\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 unchanged after delete post remove node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records unchanged node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(6);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"id\": \"7\",",
									"            \"type\": \"Pop\"",
									"        },",
									"        {",
									"            \"id\": \"8\",",
									"            \"type\": \"Hip hop\"",
									"        },",
									"        {",
									"            \"id\": \"9\",",
									"            \"type\": \"Electronic\"",
									"        },",
									"        {",
									"            \"id\": \"10\",",
									"            \"type\": \"Dance\"",
									"        },",
									"        {",
									"            \"id\": \"number1\",",
									"            \"type\": \"Loud\"",
									"        },",
									"        {",
									"            \"id\": \"number2\",",
									"            \"type\": \"Jazz-a-tronic\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select id, type from radio.genre\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'radio' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema radio dropped node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'radio'\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 1500)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"radio\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'listeners' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema listeners dropped node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'listeners'\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 1500)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"listeners\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'radio' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema radio dropped node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'radio'\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 1500)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"radio\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'listeners' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema listeners dropped node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'listeners'\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 1500)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"listeners\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Describe all node 1 no schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('node 1 has no schemas', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql({});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Describe all node 2 no schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('node 2 has no schemas', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql({});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"describe_all\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bidirectional",
			"item": [
				{
					"name": "Create schema 'dev' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Dev schema created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"database 'dev' successfully created\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"dev\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'fish' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Table dev.fish created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'dev.fish' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"dev\",\n    \"table\": \"fish\",\n    \"hash_attribute\": \"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'fish' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Table dev.fish created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'dev.fish' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"dev\",\n    \"table\": \"fish\",\n    \"hash_attribute\": \"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 to node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Add node success message', () => {",
									"    const response = pm.response.json();",
									"    const node_host = pm.environment.get(\"NODE2_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.equal(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE2_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    },\n    \"subscriptions\": [\n        {\n            \"schema\": \"dev\",\n            \"table\": \"fish\",\n            \"publish\": true,\n            \"subscribe\": true\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 1', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"    const hdb_port = parseInt(pm.environment.get('HDB_PORT'));",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.node_name).to.equal(node1_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node2_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"            {",
									"                \"schema\": \"dev\",",
									"                \"table\": \"fish\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"",
									"    pm.expect(response.node_name).to.equal(node2_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node1_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"            {",
									"                \"schema\": \"dev\",",
									"                \"table\": \"fish\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            }",
									"        ]",
									"    )",
									"",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into dev.fish node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into dev.fish node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"dev\",\n    \"table\":\"fish\",\n    \"records\": [\n        {\n            \"breed\":\"Koi\",\n            \"count\":\"1\"\n        },\n        {\n            \"breed\":\"Guppy\",\n            \"count\":\"2\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records inserted node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records inserted node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Koi\",",
									"            \"count\": \"1\"",
									"        },",
									"        {",
									"            \"breed\": \"Guppy\",",
									"            \"count\": \"2\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into dev.fish node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into dev.fish node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"dev\",\n    \"table\":\"fish\",\n    \"records\": [\n        {\n            \"breed\":\"Cod\",\n            \"count\":\"3\"\n        },\n        {\n            \"breed\":\"Tuna\",\n            \"count\":\"4\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records inserted node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records inserted node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(4);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Koi\",",
									"            \"count\": \"1\"",
									"        },",
									"        {",
									"            \"breed\": \"Guppy\",",
									"            \"count\": \"2\"",
									"        },",
									"        {",
									"            \"breed\": \"Cod\",",
									"            \"count\": \"3\"",
									"        },",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Upsert record into dev.fish node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Record upserted into dev.fish node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"upserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"upsert\",\n    \"schema\":\"dev\",\n    \"table\":\"fish\",\n    \"records\": [\n        {\n            \"breed\":\"Sea Bass\",\n            \"count\":\"5\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm record upserted node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm record upserted node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(5);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Koi\",",
									"            \"count\": \"1\"",
									"        },",
									"        {",
									"            \"breed\": \"Guppy\",",
									"            \"count\": \"2\"",
									"        },",
									"        {",
									"            \"breed\": \"Cod\",",
									"            \"count\": \"3\"",
									"        },",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        },",
									"        {",
									"            \"breed\": \"Sea Bass\",",
									"            \"count\": \"5\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Upsert record into dev.fish node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Record upserted into dev.fish node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"upserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"upsert\",\n    \"schema\":\"dev\",\n    \"table\":\"fish\",\n    \"records\": [\n        {\n            \"breed\":\"Wahoo\",\n            \"count\":\"5\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm record upserted node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm record upserted node 1', () => {",
									"    try {",
									"        const response = pm.response.json();",
									"        pm.expect(response.length).to.equal(5);",
									"        pm.expect(response).to.have.deep.members([",
									"            {",
									"                \"breed\": \"Koi\",",
									"                \"count\": \"1\"",
									"            },",
									"            {",
									"                \"breed\": \"Guppy\",",
									"                \"count\": \"2\"",
									"            },",
									"            {",
									"                \"breed\": \"Cod\",",
									"                \"count\": \"3\"",
									"            },",
									"            {",
									"                \"breed\": \"Tuna\",",
									"                \"count\": \"4\"",
									"            },",
									"            {",
									"                \"breed\": \"Wahoo\",",
									"                \"count\": \"5\"",
									"            }",
									"        ]);",
									"        pm.environment.set('RETRY_COUNT', 0);",
									"    } catch (err) {",
									"        let retry_count = parseInt(pm.environment.get('RETRY_COUNT'));",
									"\t\tconst retry_count_max = parseInt(pm.environment.get('RETRY_COUNT_MAX'));",
									"\t\tif (retry_count < retry_count_max) {",
									"\t\t\tconsole.error(`Retry count ${retry_count} for test ${pm.info.requestName}`);",
									"\t\t\tsetTimeout(() => {}, 2000);",
									"\t\t\tretry_count++;",
									"\t\t\tpm.environment.set('RETRY_COUNT', retry_count);",
									"\t\t\tpostman.setNextRequest(pm.info.requestId);",
									"\t\t} else {",
									"\t\t\tpm.environment.set('RETRY_COUNT', 0);",
									"\t\t\tconsole.error(`\"${pm.info.requestName}\" reached max test retry`);",
									"\t\t\tthrow error;",
									"\t\t}",
									"",
									"    }",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update record dev.fish node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Record update into dev.fish node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"updated 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"update\",\n    \"schema\":\"dev\",\n    \"table\":\"fish\",\n    \"records\": [\n        {\n            \"breed\":\"Mackerel\",\n            \"count\":\"1\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm record update node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm record updated node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(5);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Mackerel\",",
									"            \"count\": \"1\"",
									"        },",
									"        {",
									"            \"breed\": \"Guppy\",",
									"            \"count\": \"2\"",
									"        },",
									"        {",
									"            \"breed\": \"Cod\",",
									"            \"count\": \"3\"",
									"        },",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        },",
									"        {",
									"            \"breed\": \"Wahoo\",",
									"            \"count\": \"5\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update record dev.fish node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Record update into dev.fish node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"updated 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"update\",\n    \"schema\":\"dev\",\n    \"table\":\"fish\",\n    \"records\": [\n        {\n            \"breed\":\"Barracuda\",\n            \"count\":\"1\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm record update node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm record updated node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(5);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Barracuda\",",
									"            \"count\": \"1\"",
									"        },",
									"        {",
									"            \"breed\": \"Guppy\",",
									"            \"count\": \"2\"",
									"        },",
									"        {",
									"            \"breed\": \"Cod\",",
									"            \"count\": \"3\"",
									"        },",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        },",
									"        {",
									"            \"breed\": \"Wahoo\",",
									"            \"count\": \"5\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records dev.fish node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('2 of 2 records successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n    \"schema\":\"dev\",\n\t\"table\":\"fish\",\n\t\"hash_values\":[\"1\", \"2\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records deleted node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm record deleted node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(3);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Cod\",",
									"            \"count\": \"3\"",
									"        },",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        },",
									"        {",
									"            \"breed\": \"Wahoo\",",
									"            \"count\": \"5\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete records dev.fish node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records are deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('1 of 1 record successfully deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n    \"schema\":\"dev\",\n\t\"table\":\"fish\",\n\t\"hash_values\":[\"3\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records deleted node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm record updated node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        },",
									"        {",
									"            \"breed\": \"Wahoo\",",
									"            \"count\": \"5\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table 'fish' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Table dropped node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted table 'dev.fish'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\": \"dev\",\n    \"table\": \"fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm table not dropped node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm table fish node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        },",
									"        {",
									"            \"breed\": \"Wahoo\",",
									"            \"count\": \"5\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'fish' node 1 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Table dev.fish created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'dev.fish' successfully created.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"dev\",\n    \"table\": \"fish\",\n    \"hash_attribute\": \"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart node 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 4000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node 1 is restarted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal('Restarting HarperDB. This may take up to 60 seconds.');",
									"});",
									"",
									"// Give HDB time to restart.",
									"setTimeout(()=> {}, 10000)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"restart\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 unchanged after restart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 500', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('empty array', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table 'fish' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Table dropped node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted table 'dev.fish'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\": \"dev\",\n    \"table\": \"fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'fish' node 2 again **",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Table dev.fish created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'dev.fish' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"dev\",\n    \"table\": \"fish\",\n    \"hash_attribute\": \"count\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert records into dev.fish node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into dev.fish node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"dev\",\n    \"table\":\"fish\",\n    \"records\": [\n        {\n            \"breed\":\"Cod\",\n            \"count\":\"3\"\n        },\n        {\n            \"breed\":\"Tuna\",\n            \"count\":\"4\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records inserted node 1 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records inserted node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Cod\",",
									"            \"count\": \"3\"",
									"        },",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm records on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records inserted node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Cod\",",
									"            \"count\": \"3\"",
									"        },",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'dev' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema dev dropped node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'dev'\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"dev\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 2 unchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm records on node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"breed\": \"Cod\",",
									"            \"count\": \"3\"",
									"        },",
									"        {",
									"            \"breed\": \"Tuna\",",
									"            \"count\": \"4\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select breed, `count` from dev.fish\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'dev' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema dev dropped node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'dev'\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"dev\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get('NODE1_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node1_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\":\"{{NODE1_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bulk load",
			"item": [
				{
					"name": "Create schema 'incredible_bulk' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('incredible_bulk schema created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"database 'incredible_bulk' successfully created\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"incredible_bulk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create schema 'incredible_bulk' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('incredible_bulk schema created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"database 'incredible_bulk' successfully created\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"incredible_bulk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'incredible_bulk.pre_con1' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('pre_con1 table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'incredible_bulk.pre_con1' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"pre_con1\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'incredible_bulk.pre_con1' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('pre_con1 table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'incredible_bulk.pre_con1' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"pre_con1\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'incredible_bulk.pre_con2' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('pre_con2 table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'incredible_bulk.pre_con2' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"pre_con2\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'incredible_bulk.pre_con2' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('pre_con2 table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'incredible_bulk.pre_con2' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"pre_con2\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert 1200 row csv pre_con1 node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Job is started', () => {",
									"    const response = pm.response.json();",
									"    pm.environment.set('JOB_ID', response.message.split(' ')[4]);",
									"    pm.expect(response.message).to.include('Starting job with id');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"csv_file_load\",\n\t\"schema\": \"incredible_bulk\",\n\t\"table\": \"pre_con1\",\n\t\"file_path\": \"{{CSV_BASE_PATH}}/clusteringCsvs/dog_data.csv\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait for pre_con1 load to complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const test_name = 'Insert 1200 row csv pre_con1 node 1'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"const job_id = pm.environment.get('JOB_ID')",
									"if (response.length === 0) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find a job with id: ${job_id}`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const status = response[0].status;",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        request_count++",
									"        pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"        console.log(`Waiting for \"${test_name}\" to complete`);",
									"        setTimeout(() => {}, 2000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        pm.test(`\"${test_name}\" has completed`, () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"            console.log(response);",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received ERROR status`);",
									"        break;",
									"        ",
									"    default:",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received unknown status`);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert 1200 row csv pre_con2 node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Job is started', () => {",
									"    const response = pm.response.json();",
									"    pm.environment.set('JOB_ID', response.message.split(' ')[4]);",
									"    pm.expect(response.message).to.include('Starting job with id');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"csv_file_load\",\n\t\"schema\": \"incredible_bulk\",\n\t\"table\": \"pre_con2\",\n\t\"file_path\": \"{{CSV_BASE_PATH}}/clusteringCsvs/dog_data.csv\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait for pre_con2 load to complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const test_name = 'Insert 1200 row csv pre_con2 node 2'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"const job_id = pm.environment.get('JOB_ID')",
									"if (response.length === 0) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find a job with id: ${job_id}`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const status = response[0].status;",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        request_count++",
									"        pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"        console.log(`Waiting for \"${test_name}\" to complete`);",
									"        setTimeout(() => {}, 2000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        pm.test(`\"${test_name}\" has completed`, () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"            console.log(response);",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received ERROR status`);",
									"        break;",
									"        ",
									"    default:",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received unknown status`);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 to node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Add node success message', () => {",
									"    const response = pm.response.json();",
									"    const node_host = pm.environment.get(\"NODE2_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.equal(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"node_name\": \"{{NODE2_NAME}}\",\n    \"url\": \"wss://{{NODE2_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    },\n    \"subscriptions\": [\n        {\n            \"schema\": \"incredible_bulk\",\n            \"table\": \"pre_con1\",\n            \"publish\": true,\n            \"subscribe\": true\n        },\n        {\n            \"schema\": \"incredible_bulk\",\n            \"table\": \"pre_con2\",\n            \"publish\": true,\n            \"subscribe\": true\n        }\n    ]\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pre_con1 data on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('pre_con1 data on node 2', () => {",
									"    const response = pm.response.json();",
									"    if (!response.record_count) console.log(response);",
									"    pm.expect(response.record_count).to.equal(1200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"pre_con1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait and confirm pre_con2 data on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const expected_record_count = 1200;",
									"const test_name = 'Wait and confirm pre_con2 data on node 1'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"if (response.name === undefined) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find the table`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const record_count = response.record_count;",
									"if (record_count === expected_record_count) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.test(`\"${test_name}\" has completed`, () => {",
									"        pm.expect(record_count).to.equal(expected_record_count);",
									"        console.log(response);",
									"    });",
									"} else if (record_count < expected_record_count) {",
									"    request_count++",
									"    pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"    console.log(`Waiting for \"${test_name}\" to complete`);",
									"    setTimeout(() => {}, 2000);",
									"    postman.setNextRequest(pm.info.requestId);",
									"} else {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"    pm.expect.fail(`\"${test_name}\" receivedbad record_count`);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"pre_con2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table csv_data_load node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('csv_data_load table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'incredible_bulk.csv_data_load' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"csv_data_load\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table csv_file_load node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('csv_file_load table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'incredible_bulk.csv_file_load' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"csv_file_load\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table csv_url_load node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('csv_url_load table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'incredible_bulk.csv_url_load' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"csv_url_load\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table csv_s3_load node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('csv_s3_load table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'incredible_bulk.csv_s3_load' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"csv_s3_load\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Configure cluster node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Configure cluster success message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"Configure cluster complete.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"configure_cluster\",\n    \"connections\": [\n        {\n            \"node_name\": \"{{NODE1_NAME}}\",\n            \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n            \"verify_tls\": false,\n            \"authorization\": {\n                \"username\": \"{{USERNAME}}\",\n                \"password\": \"{{PASSWORD}}\"\n            },\n            \"subscriptions\": [\n                {\n                    \"schema\": \"incredible_bulk\",\n                    \"table\": \"csv_data_load\",\n                    \"publish\": true,\n                    \"subscribe\": true\n                },\n                {\n                    \"schema\": \"incredible_bulk\",\n                    \"table\": \"csv_file_load\",\n                    \"publish\": true,\n                    \"subscribe\": true\n                },\n                {\n                    \"schema\": \"incredible_bulk\",\n                    \"table\": \"csv_url_load\",\n                    \"publish\": true,\n                    \"subscribe\": true\n                },\n                {\n                    \"schema\": \"incredible_bulk\",\n                    \"table\": \"csv_s3_load\",\n                    \"publish\": true,\n                    \"subscribe\": true\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 1', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"",
									"    pm.expect(response.node_name).to.equal(node1_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node2_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"                        {",
									"                    \"schema\": \"incredible_bulk\",",
									"                    \"table\": \"pre_con1\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                },",
									"                {",
									"                    \"schema\": \"incredible_bulk\",",
									"                    \"table\": \"pre_con2\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                },",
									"            {",
									"                \"schema\": \"incredible_bulk\",",
									"                \"table\": \"csv_data_load\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            },",
									"            {",
									"                \"schema\": \"incredible_bulk\",",
									"                \"table\": \"csv_file_load\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            },",
									"            {",
									"                \"schema\": \"incredible_bulk\",",
									"                \"table\": \"csv_url_load\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            },",
									"            {",
									"                \"schema\": \"incredible_bulk\",",
									"                \"table\": \"csv_s3_load\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"",
									"    pm.expect(response.node_name).to.equal(node2_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node1_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"                       {",
									"                    \"schema\": \"incredible_bulk\",",
									"                    \"table\": \"pre_con1\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                },",
									"                {",
									"                    \"schema\": \"incredible_bulk\",",
									"                    \"table\": \"pre_con2\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                },",
									"            {",
									"                \"schema\": \"incredible_bulk\",",
									"                \"table\": \"csv_data_load\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            },",
									"            {",
									"                \"schema\": \"incredible_bulk\",",
									"                \"table\": \"csv_file_load\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            },",
									"            {",
									"                \"schema\": \"incredible_bulk\",",
									"                \"table\": \"csv_url_load\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            },",
									"            {",
									"                \"schema\": \"incredible_bulk\",",
									"                \"table\": \"csv_s3_load\",",
									"                \"publish\": true,",
									"                \"subscribe\": true",
									"            }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Csv data load node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Job is started', () => {",
									"    const response = pm.response.json();",
									"    pm.environment.set('JOB_ID', response.message.split(' ')[4]);",
									"    pm.expect(response.message).to.include('Starting job with id');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"csv_data_load\",\n\t\"schema\": \"incredible_bulk\",\n\t\"table\": \"csv_data_load\",\n\t\"data\": \"license_type,breed,color,dog_name,owner_zip,expiration_year,valid_date,id\\nDog Individual Spayed Female,165,WHITE,CHLOE,15090,2017,12/15/2016 9:58,1\\nDog Senior Citizen or Disability Spayed Female,240,WHITE/BLACK/BROWN,CHALUPA,15120,2017,3/23/2017 14:32,2\\nDog Individual Spayed Female,181,YELLOW,MIA,15133,2017,2/28/2017 10:59,3\\nDog Individual Male,80,BLACK/BROWN/GREY,CODY,15108,2017,2/9/2017 13:40,4\\nDog Individual Spayed Female,80,BLACK,SOPHIE,15108,2017,2/9/2017 13:40,5\\nDog Senior Citizen or Disability Neutered Male,212,SPOTTED,MAX,15228,2017,1/4/2017 15:49,6\\nDog Individual Female,188,TAN,SHELBY,15241,2017,12/15/2016 8:37,7\\nDog Individual Spayed Female,139,TAN,SHELBY,15241,2017,12/15/2016 8:37,8\\nDog Individual Spayed Female,107,BLACK/TAN,ARWEN,15218,2017,1/3/2017 13:12,9\\nDog Individual Spayed Female,274,GREY,RILEY,15202,2017,1/4/2017 8:39,10\\nDog Senior Citizen or Disability Neutered Male,70,BLACK,LUKE,15014,2017,,11\\nDog Senior Citizen or Disability Neutered Male,198,BLACK,LUKE,15014,2017,,12\\nDog Senior Citizen or Disability Male,233,BLACK,LUKE,15014,2017,12/29/2016 12:14,13\\nDog Senior Citizen or Disability Duplicate,94,BLACK,LUKE,15014,2017,3/20/2017 13:10,14\\nDog Individual Neutered Male,180,BLACK/BROWN,TELLER,15146,2017,2/10/2017 13:32,15\\nDog Individual Neutered Male,100,WHITE/TAN,JACK,15146,2017,2/10/2017 13:32,16\\nDog Senior Citizen or Disability Neutered Male,137,WHITE/GREY,MAX,15129,2017,12/12/2016 11:09,17\\nDog Senior Citizen or Disability Neutered Male,193,WHITE,BAILEY,15236,2017,12/15/2016 14:50,18\\nDog Senior Citizen or Disability Spayed Female,328,WHITE/BLACK,RAKEISHA,15025,2017,12/19/2016 15:13,19\\nDog Senior Citizen or Disability Spayed Female,314,WHITE/TAN,ZEEBA,15025,2017,12/19/2016 15:13,20\\nDog Individual Neutered Male,116,WHITE/BROWN,TYSON,15221,2017,12/20/2016 14:59,21\\nDog Individual Spayed Female,109,BLACK,DAISY,15147,2017,2/22/2017 14:26,22\\nDog Individual Neutered Male,301,BRINDLE,LUIGI,15017,2017,2/13/2017 15:02,23\\nDog Senior Citizen or Disability Spayed Female,240,WHITE/BLACK,TIA,15235,2017,2/8/2017 15:41,24\\nDog Individual Neutered Male,271,BLACK,BUSTER,15024,2017,12/20/2016 8:44,25\\nDog Individual Neutered Male,65,SPOTTED,MAX,15122,2017,,26\\nDog Senior Citizen or Disability Neutered Male,259,WHITE,BAILEY,15146,2017,12/15/2016 16:01,27\\nDog Individual Neutered Male,145,BLACK/BROWN,LOUIE,15239,2017,1/17/2017 9:11,28\\nDog Individual Neutered Male,331,GOLD,TANNER,15101,2017,1/4/2017 15:57,29\\nDog Individual Spayed Female,156,SPOTTED,LEXI,15044,2017,12/12/2016 9:35,30\\nDog Senior Citizen or Disability Neutered Male,311,WHITE,CHARLIE,15143,2017,12/12/2016 9:18,31\\nDog Senior Citizen or Disability Male,21,BLACK,PEPE' LE PU,15238,2017,1/9/2017 14:20,32\\nDog Individual Spayed Female,253,WHITE/BLACK,BELLE,15065,2017,1/6/2017 9:24,33\\nDog Individual Spayed Female,169,WHITE/BROWN,POOKIE,15137,2017,12/16/2016 8:40,34\\nDog Senior Citizen or Disability Spayed Female,286,WHITE/BROWN,POOKIE,15137,2017,12/16/2016 8:40,35\\nDog Individual Neutered Male,162,BLACK/TAN,VEGAS,15236,2017,3/24/2017 8:38,36\\nDog Senior Citizen or Disability Spayed Female,221,RED,RUBY,15216,2017,12/28/2016 16:31,37\\nDog Senior Citizen or Disability Male,97,BLACK,GRISWALD,15148,2017,12/28/2016 16:31,38\\nDog Senior Citizen or Disability Spayed Female,120,WHITE/BROWN,SKYLER,15137,2017,12/14/2016 9:08,39\\nDog Individual Male,267,WHITE/BLACK,STORM,15122,2017,3/6/2017 13:54,40\\nDog Individual Spayed Female,42,WHITE/TAN,BONNIE,15237,2017,12/22/2016 8:56,41\\nDog Senior Citizen or Disability Spayed Female,48,WHITE/TAN,BONNIE,15237,2017,12/22/2016 8:56,42\\nDog Senior Citizen or Disability Female,328,WHITE/TAN,BONNIE,15237,2017,1/24/2017 14:51,43\\nDog Individual Spayed Female,195,CREAM,MUFFIN,15243,2017,1/5/2017 10:04,44\\nDog Individual Neutered Male,261,YELLOW,BUCK,15101,2017,12/16/2016 16:25,45\\nDog Senior Citizen or Disability Spayed Female,293,SPOTTED,MITZE,15034,2017,3/22/2017 15:19,46\\nDog Senior Citizen or Disability Spayed Female,331,BLACK/BROWN,KAYLA,15120,2017,12/22/2016 16:28,47\\nDog Individual Neutered Male,16,WHITE/BLACK,FINNEY,15147,2017,1/5/2017 16:35,48\\nDog Individual Neutered Male,137,BLACK/TAN/WHITE,OTIS,15221,2017,1/18/2017 9:06,49\\nDog Individual Neutered Male,279,BLACK,BEAR,15024,2017,1/17/2017 11:26,50\\nDog Individual Neutered Male,35,WHITE/BROWN,BRADY,15065,2017,12/30/2016 11:15,51\\nDog Individual Neutered Male,264,WHITE/BLACK/BROWN,LARS,15229,2017,12/12/2016 9:35,52\\nDog Individual Female,156,WHITE/BLACK,LACEY,15146,2017,1/19/2017 15:56,53\\nDog Individual Neutered Male,192,WHITE,MACKENZIE,15126,2017,12/30/2016 15:41,54\\nDog Senior Citizen or Disability Spayed Female,266,WHITE,LISA,15037,2017,12/28/2016 16:14,55\\nDog Senior Citizen or Disability Neutered Male,331,BLACK,SAMSON,15084,2017,1/5/2017 12:50,56\\nDog Individual Neutered Male,58,BLACK,KODY,15102,2017,1/12/2017 16:34,57\\nDog Senior Citizen or Disability Male,195,WHITE/BLACK,TARGET,15237,2017,1/11/2017 14:40,58\\nDog Senior Citizen or Disability Spayed Female,238,WHITE/BLACK,EDWINA,15237,2017,1/11/2017 14:40,59\\nDog Individual Spayed Female,211,WHITE/YELLOW,WEEGIE,15044,2017,12/12/2016 13:35,60\\nDog Senior Citizen or Disability Spayed Female,285,WHITE/YELLOW,WEEGIE,15044,2017,12/12/2016 13:35,61\\nDog Senior Citizen or Disability Female,27,BROWN,LULA,15239,2017,1/10/2017 15:54,62\\nDog Senior Citizen or Disability Spayed Female,316,WHEATON,CASHELL,15101,2017,12/30/2016 8:55,63\\nDog Individual Spayed Female,223,BLACK,ROSEBUD,15071,2017,1/26/2017 14:44,64\\nDog Senior Citizen or Disability Neutered Male,79,WHITE/BLACK,MOLMARK,15143,2017,1/10/2017 16:18,65\\nDog Individual Neutered Male,310,WHITE/BLACK,MOLMARK,15143,2017,12/22/2016 8:40,66\\nDog Individual Spayed Female,124,WHITE/BLACK/BROWN,MAGGIE,15037,2017,3/27/2017 14:51,67\\nDog Individual Neutered Male,124,RED,ALI,15241,2017,12/2/2016 8:42,68\\nDog Individual Spayed Female,111,BLACK,MINNIE,15218,2017,12/29/2016 15:14,69\\nDog Senior Citizen or Disability Spayed Female,316,SPOTTED,TINA,15147,2017,2/27/2017 13:03,70\\nDog Individual Neutered Male,298,WHITE,BAXTER,15229,2017,3/27/2017 12:26,71\\nDog Senior Citizen or Disability Spayed Female,243,WHITE/BLACK/BROWN,PEBBLES,15234,2017,12/20/2016 8:54,72\\nDog Senior Citizen or Disability Spayed Female,173,WHITE/BROWN,HEIDI,15243,2017,12/13/2016 13:52,73\\nDog Individual Neutered Male,100,BLACK,BODIE,15228,2017,12/7/2016 16:19,74\\nDog Individual Female,173,SABLE,KASI,15084,2017,3/3/2017 15:09,75\\nDog Individual Neutered Male,130,WHITE/BLACK,OSCAR,15106,2017,12/13/2016 13:52,76\\nDog Individual Neutered Male,6,SPOTTED,BRADY,15106,2017,12/6/2016 15:29,77\\nDog Individual Spayed Female,242,WHITE,MAGGIE,15108,2017,12/15/2016 16:07,78\\nDog Individual Spayed Female,330,MULTI,IZZIE,15136,2017,2/22/2017 15:37,79\\nDog Individual Neutered Male,162,MULTI,CUTTER,15122,2017,1/12/2017 16:34,80\\nDog Individual Spayed Female,57,WHITE,HEMI,15045,2017,12/9/2016 10:27,81\\nDog Individual Spayed Female,206,WHITE/BLACK/BROWN,ROXY,15116,2017,2/17/2017 9:54,82\\nDog Senior Citizen or Disability Spayed Female,158,BLACK,NOOKIE,15209,2017,12/14/2016 9:08,83\\nDog Senior Citizen or Disability Neutered Male,175,GOLD,SONNY,15209,2017,12/14/2016 9:08,84\\nDog Senior Citizen or Disability Neutered Male,286,BRINDLE,DUSTY,15137,2017,12/28/2016 16:31,85\\nDog Senior Citizen or Disability Spayed Female,1,BLACK/TAN,LUCY,15135,2017,12/27/2016 15:22,86\\nDog Individual Spayed Female,321,RED,TEDDIE,15063,2017,1/30/2017 10:57,87\\nDog Senior Citizen or Disability Spayed Female,202,BLACK/BROWN,ABBY,15112,2017,1/3/2017 8:51,88\\nDog Individual Neutered Male,120,WHITE,JERRY,15116,2017,1/4/2017 9:01,89\\nDog Individual Neutered Male,18,BLACK/BROWN,DANNY,15120,2017,1/25/2017 10:03,90\\nDog Individual Neutered Male,281,SPOTTED,BRINKLEY,15237,2017,1/11/2017 14:40,91\\nDog Individual Male,223,BLACK/TAN,GIZMO,15136,2017,12/15/2016 16:01,92\\nDog Individual Spayed Female,283,BROWN,SCOOTER,15136,2017,12/14/2016 13:54,93\\nDog Senior Citizen or Disability Spayed Female,156,BLACK,LADY,15143,2017,1/4/2017 15:14,94\\nDog Individual Male,287,WHITE,CHANCE,15239,2017,2/3/2017 15:54,95\\nDog Individual Female,23,WHITE,JULIE,15239,2017,2/3/2017 15:54,96\\nDog Individual Male,196,SILVER,RUGER,15026,2017,2/2/2017 9:43,97\\nDog Senior Citizen or Disability Spayed Female,336,BLACK/TAN/WHITE,PEGGY SUE,15235,2017,1/6/2017 14:42,98\\nDog Individual Spayed Female,172,0,ROSIE,15223,2017,12/12/2016 15:32,99\\nDog Senior Citizen or Disability Spayed Female,276,BLACK,MOLLIE,15102,2017,12/28/2016 16:13,100\\nDog Individual Spayed Female,340,BLACK,DUCHESS,15210,2017,12/6/2016 8:45,101\\nDog Senior Citizen or Disability Neutered Male,237,TAN,DYIKE,15209,2017,1/17/2017 14:56,102\\nDog Senior Citizen or Disability Male,226,SPOTTED,MAX,15071,2017,12/16/2016 9:29,103\\nDog Individual Male,242,BLACK/BROWN,ANGEL,15235,2017,12/7/2016 9:57,104\\nDog Senior Citizen or Disability Spayed Female,117,BRINDLE,MAGGIE,15236,2017,2/16/2017 16:23,105\\nDog Individual Spayed Female,84,BLUE,ZOIYA,15235,2017,12/12/2016 13:35,106\\nDog Senior Citizen or Disability Spayed Female,304,TAN,ANNABELLE,15205,2017,1/12/2017 10:27,107\\nDog Individual Neutered Male,333,SPOTTED,PIPPIN,15090,2017,12/14/2016 16:17,108\\nDog Individual Spayed Female,62,CREAM,SNICKERS,15065,2017,12/13/2016 16:04,109\\nDog Individual Spayed Female,176,YELLOW,JADE,15220,2017,12/28/2016 16:31,110\\nDog Individual Neutered Male,50,BLACK,JORDAN,15146,2017,2/15/2017 14:40,111\\nDog Senior Citizen or Disability Neutered Male,322,MULTI,HAMMER,15071,2017,1/9/2017 11:07,112\\nDog Senior Citizen or Disability Neutered Male,215,BLACK/TAN,LUKE,15237,2017,1/3/2017 14:03,113\\nDog Individual Spayed Female,127,BLONDE,BAILEY,15044,2017,1/5/2017 15:51,114\\nDog Individual Spayed Female,311,BLACK/BROWN,ZENA,15147,2017,2/22/2017 9:14,115\\nDog Senior Citizen or Disability Neutered Male,101,WHITE/BROWN,AMATSUMIKOTO,15215,2017,2/22/2017 9:14,116\\nDog Senior Citizen or Disability Spayed Female,82,WHITE/BLACK,TRIXIE,15227,2017,12/14/2016 16:16,117\\nDog Senior Citizen or Disability Neutered Male,330,YELLOW,BRIDGER,15238,2017,12/15/2016 11:13,118\\nDog Senior Citizen or Disability Spayed Female,225,WHITE/BROWN,SHY,15216,2017,12/15/2016 12:09,119\\nDog Individual Neutered Male,337,BROWN,OTIS,15133,2017,1/25/2017 10:03,120\\nDog Senior Citizen or Disability Male,336,BLACK,BLACK TOP,15147,2017,2/13/2017 15:02,121\\nDog Senior Citizen or Disability Female,260,WHITE,SOPHIE,15122,2017,3/6/2017 9:42,122\\nDog Individual Spayed Female,311,WHITE/BLACK,NIKKI,15147,2017,12/22/2016 8:56,123\\nDog Individual Spayed Female,242,WHITE/BLACK,NIKKI,15147,2017,2/1/2017 15:03,124\\nDog Senior Citizen or Disability Neutered Male,309,BLACK,CJ,15137,2017,12/30/2016 8:29,125\\nDog Individual Spayed Female,122,BRINDLE,HANNAH,15104,2017,12/21/2016 8:35,126\\nDog Senior Citizen or Disability Spayed Female,81,BRINDLE,HANNAH,15104,2017,12/21/2016 8:35,127\\nDog Senior Citizen or Disability Spayed Female,207,BLACK/TAN,SASSY,15024,2017,12/21/2016 10:03,128\\nDog Senior Citizen or Disability Neutered Male,137,MULTI,JACK,15209,2017,12/14/2016 16:17,129\\nDog Individual Spayed Female,250,BRINDLE,SYDNEY,15143,2017,12/16/2016 8:25,130\\nDog Individual Spayed Female,88,BROWN,SNICKERS,15147,2017,2/13/2017 11:54,131\\nDog Senior Citizen or Disability Spayed Female,339,BEIGE,GINGER,15146,2017,12/12/2016 13:35,132\\nDog Individual Neutered Male,136,RED,BEAU,15234,2017,1/5/2017 12:45,133\\nDog Individual Neutered Male,50,WHITE/BROWN,MONTY,15146,2017,1/19/2017 15:56,134\\nDog Senior Citizen or Disability Neutered Male,249,GOLD,JORDI,15238,2017,1/19/2017 15:57,135\\nDog Senior Citizen or Disability Spayed Female,142,BLACK,GYPSY,15236,2017,12/16/2016 16:26,136\\nDog Individual Spayed Female,268,BROWN,GYPSY,15037,2017,2/24/2017 15:28,137\\nDog Individual Neutered Male,135,BROWN,BUSTER,15235,2017,1/19/2017 15:57,138\\nDog Senior Citizen or Disability Female,315,BLACK,APRIL VIOLET,15129,2017,1/13/2017 12:48,139\\nDog Senior Citizen or Disability Female,286,SILVER,SILVER KAMEO,15229,2017,1/6/2017 14:42,140\\nDog Senior Citizen or Disability Neutered Male,193,WHITE/BROWN,GROMMET,15133,2017,12/22/2016 8:56,141\\nDog Individual Spayed Female,288,WHITE/BLACK/BROWN,REMI,15017,2017,2/9/2017 10:55,142\\nDog Individual Spayed Female,269,WHITE/BLACK/BROWN,EL,15135,2017,3/3/2017 10:51,143\\nDog Individual Neutered Male,242,BEIGE,CHARLIE,15236,2017,12/15/2016 9:57,144\\nDog Individual Male,220,RED,WINSTON,15057,2017,2/21/2017 12:06,145\\nDog Senior Citizen or Disability Male,254,MULTI,JACK,15057,2017,1/17/2017 15:35,146\\nDog Senior Citizen or Disability Spayed Female,239,BLACK/BROWN,MAGGIE,15057,2017,1/17/2017 15:35,147\\nDog Individual Female,219,BLACK/RED,LAYLA,15132,2017,1/25/2017 16:04,148\\nDog Individual Neutered Male,300,BLACK/TAN,TANNAR,15120,2017,12/8/2016 10:09,149\\nDog Individual Spayed Female,200,GREY,TRALEE,15126,2017,1/30/2017 13:52,150\\nDog Individual Neutered Male,7,WHITE/BROWN,MOOT,15238,2017,12/13/2016 15:53,151\\nDog Individual Spayed Female,169,BLACK/TAN,KATIE,15332,2017,2/24/2017 15:28,152\\nDog Individual Spayed Female,61,BROWN,HANNAH,15143,2017,2/10/2017 8:37,153\\nDog Individual Male,13,BLACK,BARON,15143,2017,12/8/2016 8:33,154\\nDog Individual Neutered Male,22,WHITE/BLACK/BROWN,FRED,15239,2017,12/13/2016 15:24,155\\nDog Individual Spayed Female,219,BLACK,LIBBY,15108,2017,2/15/2017 15:53,156\\nDog Individual Neutered Male,160,WHITE/YELLOW,PEPSI,15071,2017,2/3/2017 15:52,157\\nDog Individual Spayed Female,138,BLACK,MACIE,15106,2017,3/20/2017 15:02,158\\nDog Senior Citizen or Disability Neutered Male,42,WHITE/BLACK,KENO,15137,2017,1/18/2017 15:34,159\\nDog Senior Citizen or Disability Neutered Male,146,BLACK/TAN/WHITE,ROCKY,15229,2017,12/7/2016 16:19,160\\nDog Individual Spayed Female,189,BLACK,GIGI,15102,2017,12/16/2016 8:40,161\\nDog Individual Neutered Male,331,WHITE,BAILEY,15227,2017,1/12/2017 9:36,162\\nDog Individual Spayed Female,82,CREAM,PRINCESS,15227,2017,1/3/2017 8:52,163\\nDog Individual Neutered Male,69,RED,TITO,15116,2017,,164\\nDog Individual Spayed Female,186,WHITE,SADIE,15227,2017,1/12/2017 9:36,165\\nDog Senior Citizen or Disability Spayed Female,172,TAN,MANDY,15144,2017,2/13/2017 16:12,166\\nDog Senior Citizen or Disability Neutered Male,10,WHITE,STEWART,15102,2017,1/20/2017 9:00,167\\nDog Senior Citizen or Disability Male,309,WHITE/BLACK/BROWN,MALCOLM,15218,2017,2/21/2017 12:06,168\\nDog Senior Citizen or Disability Neutered Male,51,WHITE,ROBBIE,15102,2017,3/7/2017 16:09,169\\nDog Individual License - FREE,207,BLACK/FAWN,RICO,15122,2017,1/4/2017 14:13,170\\nDog Individual Neutered Male,136,BLACK,ACE,15221,2017,3/21/2017 13:20,171\\nDog Individual Neutered Male,249,WHITE,FROSTY,15037,2017,2/13/2017 16:12,172\\nDog Individual Spayed Female,139,BROWN,LUCY,15014,2017,1/24/2017 10:13,173\\nDog Individual Spayed Female,45,WHITE,FLUFFY,15237,2017,1/9/2017 16:02,174\\nDog Individual Neutered Male,337,BUFF,BAILEY,15056,2017,3/6/2017 16:02,175\\nDog Senior Citizen or Disability Neutered Male,69,APRICOT,BUDDY,15221,2017,1/18/2017 9:06,176\\nDog Individual Spayed Female,158,BROWN,PUCK,15108,2017,3/20/2017 13:48,177\\nDog Individual Spayed Female,32,WHITE/BLACK/BROWN,PEBBLES,15216,2017,12/29/2016 15:15,178\\nDog Individual Spayed Female,269,WHITE/BLACK/BROWN,PEBBLES,15216,2017,1/30/2017 10:57,179\\nDog Senior Citizen or Disability Spayed Female,143,WHITE,BUTTONS,15049,2017,12/15/2016 16:07,180\\nDog Senior Citizen or Disability Spayed Female,310,BLACK/BROWN,JUSTICE,15234,2017,12/19/2016 8:49,181\\nDog Individual Spayed Female,30,CREAM,MOU ROE,15142,2017,1/3/2017 8:39,182\\nDog Senior Citizen or Disability Spayed Female,285,CREAM,MOU ROE,15142,2017,1/3/2017 8:39,183\\nDog Senior Citizen or Disability Spayed Female,177,WHITE/BROWN,SUMMER RAIN,15243,2017,12/20/2016 8:45,184\\nDog Individual Neutered Male,78,BLACK/BROWN,SMOKY,15239,2017,3/27/2017 12:26,185\\nDog Senior Citizen or Disability Spayed Female,20,BLACK/BROWN,HANNAH,15237,2017,12/8/2016 10:09,186\\nDog Individual Neutered Male,340,BROWN,BUDDY BEAR,15034,2017,2/21/2017 12:06,187\\nDog Individual Spayed Female,319,BLACK/BROWN,GRACIE,15237,2017,1/5/2017 9:18,188\\nDog Individual Spayed Female,63,BLACK,MAY I,15101,2017,12/30/2016 12:15,189\\nDog Individual Spayed Female,19,BLACK/FAWN,MALING,15131,2017,12/22/2016 8:56,190\\nDog Senior Citizen or Disability Spayed Female,124,WHITE,MISTY,15241,2017,12/13/2016 10:51,191\\nDog Senior Citizen or Disability Neutered Male,153,WHITE/APRICOT,KOALA,15044,2017,1/4/2017 15:49,192\\nDog Senior Citizen or Disability Spayed Female,296,WHITE,BRIDGET,15234,2017,12/5/2016 8:43,193\\nDog Senior Citizen or Disability Neutered Male,113,GREY,BAXTER,15236,2017,1/3/2017 14:03,194\\nDog Senior Citizen or Disability Neutered Male,265,GREY,BAXTER,15236,2017,1/3/2017 14:03,195\\nDog Individual Neutered Male,308,WHITE/BLACK/BROWN,SCHULTZ,15065,2017,3/20/2017 8:26,196\\nDog Senior Citizen or Disability Neutered Male,326,SALT/PEPPER,FRITZIE,15116,2017,1/10/2017 16:33,197\\nDog Individual Spayed Female,155,BLACK/BROWN,SPECK,15017,2017,3/24/2017 14:22,198\\nDog Senior Citizen or Disability Spayed Female,242,BLACK/BROWN,LUCIA,15122,2017,3/7/2017 8:41,199\\nDog Individual Neutered Male,1,MULTI,BAXTER,15235,2017,2/7/2017 16:05,200\\nDog Individual Neutered Male,212,BLACK/TAN,BOGEY,15065,2017,3/20/2017 8:26,201\\nDog Individual Male,117,WHITE,JACK,15137,2017,12/7/2016 8:49,202\\nDog Senior Citizen or Disability Neutered Male,117,YELLOW,CABOT,15223,2017,12/13/2016 15:54,203\\nDog Individual Male,297,BLACK,HARLEY,15239,2017,1/27/2017 12:25,204\\nDog Individual Neutered Male,240,WHITE/BLACK,YODA,15238,2017,12/15/2016 16:01,205\\nDog Individual Neutered Male,295,BLACK,PETEY,15108,2017,12/14/2016 9:07,206\\nDog Individual Spayed Female,132,WHITE/BLACK/BROWN,BAILEY,15084,2017,1/6/2017 15:04,207\\nDog Senior Citizen or Disability Neutered Male,86,WHITE,MAXWELL,15216,2017,2/3/2017 16:13,208\\nDog Senior Citizen or Disability Spayed Female,100,BLACK/BROWN,PEBBLES,15088,2017,12/13/2016 14:16,209\\nDog Individual Spayed Female,333,GOLD,RILEY,15143,2017,2/27/2017 14:52,210\\nDog Senior Citizen or Disability Female,100,WHITE/BROWN,BAMBI,15088,2017,12/13/2016 14:16,211\\nDog Individual Spayed Female,99,WHITE,ABBY,15014,2017,1/10/2017 15:55,212\\nDog Senior Citizen or Disability Spayed Female,317,BLACK/BROWN,DAISY,15024,2017,2/2/2017 9:43,213\\nDog Individual Spayed Female,25,WHITE/BLACK/BROWN,BETTY,15227,2017,12/15/2016 14:50,214\\nDog Senior Citizen or Disability Spayed Female,306,YELLOW,MISTY,15104,2017,12/14/2016 9:07,215\\nDog Individual Neutered Male,1,MULTI,JAKE,15101,2017,1/4/2017 15:56,216\\nDog Senior Citizen or Disability Spayed Female,135,MULTI,ABIGAIL,15202,2017,12/9/2016 10:27,217\\nDog Individual Neutered Male,197,SPOTTED,BECKER,15202,2017,1/19/2017 13:48,218\\nDog Senior Citizen or Disability Neutered Male,313,BLACK/TAN,TEDDY,15132,2017,2/6/2017 11:09,219\\nDog Senior Citizen or Disability Neutered Male,132,WHITE,MAC,15101,2017,1/5/2017 9:18,220\\nDog Senior Citizen or Disability Spayed Female,30,BUFF,LUCY,15146,2017,2/3/2017 15:54,221\\nDog Individual Male,220,MULTI,BILLY,15122,2017,2/10/2017 9:55,222\\nDog Individual Spayed Female,320,WHITE/RED,CHLOE,15238,2017,12/14/2016 8:41,223\\nDog Senior Citizen or Disability Spayed Female,277,WHITE,MOLLY,15101,2017,12/14/2016 13:54,224\\nDog Individual Neutered Male,257,WHITE,ROMEO,15025,2017,2/1/2017 14:35,225\\nDog Individual Neutered Male,147,WHITE/BLACK,DAKOTA,15202,2017,1/3/2017 14:04,226\\nDog Individual Spayed Female,7,WHITE,BELL,15239,2017,1/19/2017 8:44,227\\nDog Individual Spayed Female,243,WHITE/BLACK,FRANKIE,15238,2017,12/14/2016 8:41,228\\nDog Individual Neutered Male,205,WHITE/BLACK/BROWN,PAYTON,15215,2017,12/14/2016 8:41,229\\nDog Individual Spayed Female,38,SPOTTED,LOLA,15101,2017,12/7/2016 16:19,230\\nDog Individual Spayed Female,54,WHITE/BROWN,SOPHIE,15135,2017,2/17/2017 15:08,231\\nDog Individual Male,299,BLACK/TAN,BUSTER,15133,2017,1/4/2017 15:49,232\\nDog Senior Citizen or Disability Spayed Female,211,WHITE,CAMMI NICOLE,15122,2017,12/23/2016 8:44,233\\nDog Individual Spayed Female,122,BROWN,KANGA,15236,2017,1/9/2017 9:11,234\\nDog Individual Spayed Female,206,BLACK/BROWN,LADY BUG,15102,2017,1/11/2017 14:10,235\\nDog Individual Spayed Female,88,WHITE/RED,SUKI,15017,2017,2/15/2017 15:53,236\\nDog Individual Spayed Female,60,MULTI,JENNY,15234,2017,1/3/2017 14:03,237\\nDog Individual Spayed Female,187,BLONDE,SANDY,15229,2017,12/9/2016 14:53,238\\nDog Individual Male,315,BLACK/TAN,JACKSON,15024,2017,2/7/2017 13:02,239\\nDog Individual License Duplicate,130,GOLD,DEXTER,15147,2017,2/27/2017 10:20,240\\nDog Individual Spayed Female,237,BLACK,MAGGIE,15122,2017,12/30/2016 11:47,241\\nDog Individual Neutered Male,331,FAWN,JAKE,15228,2017,12/29/2016 16:05,242\\nDog Individual Spayed Female,55,BLACK/GOLD,CHUNK,15136,2017,1/5/2017 9:18,243\\nDog Senior Citizen or Disability Neutered Male,243,MULTI,WILLIE,15205,2017,1/5/2017 16:35,244\\nDog Individual Spayed Female,96,SPOTTED,DAISY,15143,2017,2/15/2017 9:10,245\\nDog Individual Spayed Female,4,WHITE/BLACK,FLOSSIE,15215,2017,3/22/2017 8:39,246\\nDog Senior Citizen or Disability Spayed Female,337,BLACK,FRANKIE,15236,2017,1/9/2017 16:01,247\\nDog Individual Neutered Male,207,SPOTTED,MACEO,15237,2017,1/9/2017 11:07,248\\nDog Senior Citizen or Disability Neutered Male,200,BLACK,ROXI,15132,2017,12/12/2016 16:16,249\\nDog Senior Citizen or Disability Neutered Male,216,APRICOT,BUDDY,15235,2017,12/15/2016 12:28,250\\nDog Individual Neutered Male,66,BLACK/BROWN,TRIXIE,15221,2017,2/9/2017 14:48,251\\nDog Individual Neutered Male,228,WHITE,COCONUT,15136,2017,2/15/2017 8:41,252\\nDog Individual Spayed Female,184,BLACK/GREY,LEXI,15024,2017,12/29/2016 15:14,253\\nDog Senior Citizen or Disability Neutered Male,13,MULTI,REX,15102,2017,1/3/2017 8:52,254\\nDog Senior Citizen or Disability Spayed Female,107,RED,ROXIE,15143,2017,12/29/2016 15:33,255\\nDog Individual Spayed Female,304,BLACK/BROWN,HEIDI,15137,2017,1/23/2017 13:33,256\\nDog Individual Female,321,WHITE/APRICOT,MISSY,15227,2017,2/1/2017 14:35,257\\nDog Senior Citizen or Disability Neutered Male,254,YELLOW,HOGAN,15229,2017,12/30/2016 8:29,258\\nDog Senior Citizen or Disability Spayed Female,158,BLACK/BROWN,LADY CC,15147,2017,12/7/2016 9:57,259\\nDog Senior Citizen or Disability Neutered Male,231,GOLD,ROCKY,15216,2017,12/15/2016 11:27,260\\nDog Senior Citizen or Disability Spayed Female,210,BROWN,COCO,15084,2017,2/17/2017 14:49,261\\nDog Individual Female,239,BLACK,PRESSCHESS,15221,2017,1/23/2017 8:42,262\\nDog Individual Neutered Male,118,BLACK,BUDDY,15106,2017,1/20/2017 15:56,263\\nDog Senior Citizen or Disability Neutered Male,106,WHITE/BLACK,SHIBUI,15139,2017,1/13/2017 9:49,264\\nDog Senior Citizen or Disability Spayed Female,52,WHITE/TAN,RY-LEE,15137,2017,1/5/2017 11:21,265\\nDog Senior Citizen or Disability Neutered Male,7,SPOTTED,KRAMER,15024,2017,1/18/2017 9:07,266\\nDog Individual Spayed Female,327,BLACK,BELLA,15243,2017,12/14/2016 16:17,267\\nDog Individual Neutered Male,33,OTHER,BOWSER,15235,2017,2/28/2017 16:01,268\\nDog Senior Citizen or Disability Spayed Female,309,BROWN,LUCY,15084,2017,2/17/2017 14:49,269\\nDog Individual Spayed Female,265,BLACK/BROWN,SHARLETTE,15137,2017,1/23/2017 13:33,270\\nDog Senior Citizen or Disability Neutered Male,167,BLACK,TOBY,15037,2017,12/13/2016 16:03,271\\nDog Individual Neutered Male,263,WHITE/BLACK,HARLEY,15210,2017,1/18/2017 8:43,272\\nDog Senior Citizen or Disability Male,111,BLACK/BROWN,HUMPFREY,15025,2017,1/3/2017 10:07,273\\nDog Individual Female,312,WHITE/BLACK/BROWN,SHILOH,15236,2017,3/10/2017 14:42,274\\nDog Senior Citizen or Disability Spayed Female,287,WHITE/BLACK,ANGEL,15071,2017,12/14/2016 12:23,275\\nDog Senior Citizen or Disability Neutered Male,129,WHITE/BLACK,JACK,15037,2017,12/19/2016 8:21,276\\nDog Senior Citizen or Disability Neutered Male,221,MULTI,MAX,15035,2017,2/1/2017 14:35,277\\nDog Individual Neutered Male,272,WHITE/BLACK,MILO,15044,2017,2/23/2017 16:07,278\\nDog Individual Neutered Male,226,MULTI,CHIEF,15037,2017,12/5/2016 8:52,279\\nDog Individual Neutered Male,3,BROWN,ISAAC,15144,2017,2/21/2017 12:06,280\\nDog Individual Spayed Female,319,YELLOW,HALLE,15102,2017,1/6/2017 14:43,281\\nDog Senior Citizen or Disability Neutered Male,91,BLACK,DASH,15037,2017,1/23/2017 11:53,282\\nDog Senior Citizen or Disability Spayed Female,112,BLACK,LILY,15102,2017,12/15/2016 10:16,283\\nDog Senior Citizen or Disability Neutered Male,155,BLACK,KNUTE,15102,2017,12/16/2016 9:08,284\\nDog Individual Spayed Female,161,WHITE/BLACK/BROWN,JULIE,15116,2017,2/6/2017 12:09,285\\nDog Senior Citizen or Disability Spayed Female,260,WHITE/BLACK,TRIXI,15234,2017,1/3/2017 10:07,286\\nDog Senior Citizen or Disability Spayed Female,243,BLACK/BROWN,JENNA,15126,2017,12/13/2016 8:34,287\\nDog Individual Spayed Female,293,WHITE/BROWN,ROXY,15214,2017,2/10/2017 15:41,288\\nDog Senior Citizen or Disability Spayed Female,111,WHITE/BLACK,SASSIE,15071,2017,12/16/2016 16:25,289\\nDog Senior Citizen or Disability Neutered Male,160,BEIGE,TYSON,15147,2017,12/19/2016 8:21,290\\nDog Senior Citizen or Disability Neutered Male,81,WHITE/BROWN,MOSES,15090,2017,1/6/2017 15:17,291\\nDog Senior Citizen or Disability Spayed Female,161,BLACK,MATTIE,15236,2017,12/20/2016 15:38,292\\nDog Individual Spayed Female,210,YELLOW,TAFFY,15145,2017,12/14/2016 16:17,293\\nDog Senior Citizen or Disability Spayed Female,185,SPOTTED,BUTTONS,15209,2017,12/9/2016 10:27,294\\nDog Individual Neutered Male,58,WHITE/TAN,BULLIE,15112,2017,2/6/2017 16:20,295\\nDog Senior Citizen or Disability Spayed Female,177,BROWN,BENJI,15116,2017,12/29/2016 15:33,296\\nDog Senior Citizen or Disability Spayed Female,264,BROWN,NAOMI SKYY,15129,2017,1/3/2017 16:34,297\\nDog Individual Spayed Female,241,BLACK/GREY,FRANCESKA,15110,2017,1/4/2017 10:10,298\\nDog Senior Citizen or Disability Male,228,MULTI,MICKEY,15084,2017,1/27/2017 12:25,299\\nDog Individual Spayed Female,278,MULTI,MOLLIE,15221,2017,1/30/2017 10:57,300\\nDog Individual Spayed Female,284,BROWN,SHEBA,15108,2017,1/27/2017 10:36,301\\nDog Senior Citizen or Disability Spayed Female,141,RED,AIMEE,15237,2017,1/11/2017 14:40,302\\nDog Individual Spayed Female,137,YELLOW,PRINCESS,15202,2017,12/8/2016 8:33,303\\nDog Individual Spayed Female,268,BLACK,MALLORY,15102,2017,1/19/2017 14:45,304\\nDog Senior Citizen or Disability Spayed Female,93,BLACK/GREY,ZUZU,15102,2017,12/14/2016 12:24,305\\nDog Senior Citizen or Disability Male,178,RED,EARL,15143,2017,2/6/2017 16:20,306\\nDog Senior Citizen or Disability Spayed Female,179,YELLOW,CARLY,15238,2017,2/8/2017 14:10,307\\nDog Individual Spayed Female,294,BLACK,BRUIN,15108,2017,12/7/2016 9:57,308\\nDog Senior Citizen or Disability Neutered Male,110,SILVER,HARRY,15146,2017,1/18/2017 8:43,309\\nDog Senior Citizen or Disability Spayed Female,264,BROWN,CAPTAIN,15218,2017,12/14/2016 8:40,310\\nDog Individual Spayed Female,178,BROWN,CAPTAIN,15218,2017,12/14/2016 8:40,311\\nDog Senior Citizen or Disability Spayed Female,95,RED,JASMINE,15108,2017,1/3/2017 8:58,312\\nDog Individual Spayed Female,246,WHITE/BLACK,ZOEY,15015,2017,12/23/2016 8:44,313\\nDog Individual Female,84,BRINDLE,SOLE`,15238,2017,1/3/2017 10:08,314\\nDog Senior Citizen or Disability Spayed Female,89,CREAM,TWISTER,15239,2017,12/16/2016 15:21,315\\nDog Individual Spayed Female,230,YELLOW,SYDNEY,15237,2017,2/2/2017 9:43,316\\nDog Individual Spayed Female,16,BLACK/BROWN,SQUEAKER,15132,2017,12/14/2016 8:41,317\\nDog Senior Citizen or Disability Spayed Female,266,TAN,PAYTON,15035,2017,1/24/2017 9:02,318\\nDog Individual Male,284,WHITE/RED,CESAR,15243,2017,3/27/2017 12:26,319\\nDog Individual Neutered Male,32,GOLD,MAX,15084,2017,1/23/2017 10:52,320\\nDog Individual Male,333,BLACK,TEDDY,15209,2017,1/24/2017 16:31,321\\nDog Individual Female,197,ORANGE,RAZZI,15238,2017,3/8/2017 15:53,322\\nDog Individual Male,325,WHITE/BLACK/BROWN,BANDIT,15044,2017,1/26/2017 14:44,323\\nDog Individual Female,118,BLACK/BROWN,ADDISON,15235,2017,3/10/2017 8:19,324\\nDog Senior Citizen or Disability Spayed Female,254,WHITE/BROWN,CASSIE,15044,2017,1/6/2017 14:43,325\\nDog Individual Spayed Female,132,MULTI,ANGEL,15137,2017,11/30/2016 15:47,326\\nDog Senior Citizen or Disability Spayed Female,88,WHITE/BLACK/BROWN,DIANA,15044,2017,12/23/2016 8:44,327\\nDog Individual Neutered Male,128,BROWN,ROCKO,15046,2017,12/21/2016 8:35,328\\nDog Senior Citizen or Disability Neutered Male,245,BLACK,TEDDY,15221,2017,12/14/2016 12:23,329\\nDog Individual Spayed Female,140,BLACK/TAN,ABBY,15146,2017,1/18/2017 8:42,330\\nDog Individual Neutered Male,210,BRINDLE,HARLEY,15234,2017,12/8/2016 10:09,331\\nDog Individual Spayed Female,200,WHITE/TAN,MISTY,15116,2017,1/20/2017 9:00,332\\nDog Individual Spayed Female,244,WHITE/TAN,MISTY,15116,2017,2/13/2017 16:12,333\\nDog Individual Neutered Male,210,RED,BRIGGS,15236,2017,3/27/2017 14:51,334\\nDog Individual Neutered Male,178,BLACK/TAN,BOO,15120,2017,3/8/2017 11:37,335\\nDog Individual Neutered Male,195,BROWN,BRUNO,15235,2017,12/12/2016 8:53,336\\nDog Senior Citizen or Disability Neutered Male,103,WHITE/BLACK,BENTON,15024,2017,12/20/2016 8:54,337\\nDog Senior Citizen or Disability Male,211,WHITE/BLACK,BENTON,15024,2017,12/20/2016 8:54,338\\nDog Individual Spayed Female,28,SPOTTED,SHEA,15044,2017,1/5/2017 16:35,339\\nDog Senior Citizen or Disability Neutered Male,260,BLACK/BROWN,CODY,15071,2017,1/13/2017 12:48,340\\nDog Individual Spayed Female,6,WHITE/BLACK,GORDITA,15239,2017,12/16/2016 13:25,341\\nDog Individual Spayed Female,333,GREY,DAKOTA,15136,2017,2/2/2017 9:43,342\\nDog Senior Citizen or Disability Spayed Female,298,BROWN,MAGGIE,15065,2017,2/6/2017 11:09,343\\nDog Senior Citizen or Disability Neutered Male,223,BLACK,CODY,15090,2017,1/3/2017 8:51,344\\nDog Individual Spayed Female,330,BROWN,COCO,15037,2017,3/14/2017 16:06,345\\nDog Individual Neutered Male,59,BROWN,COSMO,15108,2017,3/13/2017 11:49,346\\nDog Individual Spayed Female,11,GOLD,BELLA,15122,2017,1/17/2017 9:44,347\\nDog Senior Citizen or Disability Spayed Female,48,APRICOT,PRECIOUS,15132,2017,12/8/2016 16:26,348\\nDog Senior Citizen or Disability Spayed Female,80,BROWN,K.C.,15137,2017,1/26/2017 14:40,349\\nDog Individual Spayed Female,306,SABLE,ANNIE,15238,2017,2/27/2017 12:31,350\\nDog Individual Neutered Male,198,WHITE,ZIGGY,15237,2017,12/30/2016 8:30,351\\nDog Senior Citizen or Disability Spayed Female,52,WHITE/BLACK/BROWN,MAGGIE,15063,2017,12/14/2016 9:07,352\\nDog Senior Citizen or Disability Spayed Female,38,BLACK/BROWN,LADYBUG,15120,2017,1/12/2017 9:36,353\\nDog Senior Citizen or Disability Neutered Male,303,BLACK,BRODY,15137,2017,12/21/2016 8:35,354\\nDog Senior Citizen or Disability Spayed Female,81,MULTI,TILLY,15241,2017,12/15/2016 11:27,355\\nDog Individual Male,191,BLACK,LAZER,15102,2017,12/12/2016 13:35,356\\nDog Individual Male,11,SPOTTED,MANDINGO,15243,2017,12/23/2016 14:48,357\\nDog Individual Neutered Male,149,SPOTTED,MANDINGO,15243,2017,12/23/2016 14:48,358\\nDog Senior Citizen or Disability Neutered Male,110,WHITE/RED,TEDDY,15112,2017,12/23/2016 13:35,359\\nDog Senior Citizen or Disability Spayed Female,321,WHITE/BLACK,TERI,15101,2017,12/13/2016 15:53,360\\nDog Senior Citizen or Disability Spayed Female,139,BLACK,MOLLY,15101,2017,1/4/2017 15:56,361\\nDog Senior Citizen or Disability Neutered Male,90,BUFF,SPENSER,15106,2017,12/20/2016 11:16,362\\nDog Senior Citizen or Disability Spayed Female,311,WHITE/BROWN,CHLOE,15239,2017,12/12/2016 16:17,363\\nDog Individual Spayed Female,307,GOLD,MAGGIE,15137,2017,3/22/2017 11:56,364\\nDog Individual Neutered Male,118,BLACK,TOMA,15237,2017,3/16/2017 15:52,365\\nDog Individual Neutered Male,94,WHITE,POKY,15108,2017,1/5/2017 12:50,366\\nDog Individual Neutered Male,83,CREAM,CLAUDE,15102,2017,3/1/2017 13:29,367\\nDog Senior Citizen or Disability Spayed Female,215,BUFF,SARAH,15143,2017,12/14/2016 12:39,368\\nDog Senior Citizen or Disability Neutered Male,311,GOLD,WINSTON,15024,2017,1/23/2017 9:45,369\\nDog Individual Spayed Female,286,SPOTTED,MALLORY,15017,2017,2/8/2017 11:37,370\\nDog Senior Citizen or Disability Neutered Male,187,WHITE/BROWN,COCOA,15120,2017,12/28/2016 16:31,371\\nDog Individual Neutered Male,218,BROWN,SMOKEY,15044,2017,12/16/2016 15:42,372\\nDog Senior Citizen or Disability Neutered Male,305,WHITE/TAN,CHIPS,15024,2017,1/23/2017 9:45,373\\nDog Senior Citizen or Disability Spayed Female,139,TRI-COLOR,LADY,15126,2017,12/14/2016 8:40,374\\nDog Senior Citizen or Disability Neutered Male,211,WHITE,BLESS,15136,2017,3/15/2017 14:08,375\\nDog Senior Citizen or Disability Male,153,BLACK/BROWN,TOSOX,15209,2017,12/22/2016 8:40,376\\nDog Senior Citizen or Disability Neutered Male,39,BUFF,DOVER,15024,2017,1/23/2017 9:45,377\\nDog Senior Citizen or Disability Neutered Male,2,WHITE/BLACK,CINDERS,15024,2017,1/23/2017 9:45,378\\nDog Senior Citizen or Disability Spayed Female,27,WHITE/BROWN,SHADOW,15037,2017,3/1/2017 14:29,379\\nDog Senior Citizen or Disability Spayed Female,196,WHITE/BROWN,MISTY,15037,2017,3/1/2017 14:29,380\\nDog Individual Spayed Female,327,BLACK,BELLA,15241,2017,2/22/2017 11:37,381\\nDog Senior Citizen or Disability Spayed Female,192,WHITE/BROWN,SHELBY,15243,2017,1/9/2017 16:38,382\\nDog Individual Spayed Female,285,BLACK,LUCY,15122,2017,12/5/2016 8:36,383\\nDog Senior Citizen or Disability Neutered Male,177,WHITE/BLACK,BLAISE,15239,2017,12/13/2016 14:16,384\\nDog Senior Citizen or Disability Neutered Male,210,WHITE/BROWN,ATLAS,15122,2017,12/15/2016 10:16,385\\nDog Individual Spayed Female,190,BLACK,EMEE,15044,2017,12/14/2016 16:17,386\\nDog Senior Citizen or Disability Spayed Female,35,WHITE/BLACK,BELLA,15220,2017,1/3/2017 14:04,387\\nDog Individual Spayed Female,94,BLACK,MAGGIE,15065,2017,12/22/2016 8:56,388\\nDog Senior Citizen or Disability Neutered Male,54,WHITE/BLACK/BROWN,LEON,15132,2017,1/10/2017 10:04,389\\nDog Individual Spayed Female,268,BLACK/BROWN,ZOEY,15234,2017,1/26/2017 15:54,390\\nDog Senior Citizen or Disability Spayed Female,116,GOLD,MAI LIN,15102,2017,2/17/2017 14:49,391\\nDog Senior Citizen or Disability Spayed Female,143,WHITE/BROWN,SALLY,15237,2017,12/22/2016 8:40,392\\nDog Senior Citizen or Disability Neutered Male,1,RED/BROWN,OLLIE,15237,2017,12/22/2016 16:28,393\\nDog Individual Male,307,WHITE/BLACK/BROWN,BUDDY,15223,2017,3/28/2017 8:44,394\\nDog Senior Citizen or Disability Neutered Male,239,BLACK,ZACH,15235,2017,1/25/2017 16:23,395\\nDog Senior Citizen or Disability Neutered Male,203,MULTI,PRANCER,15214,2017,3/10/2017 15:21,396\\nDog Individual Spayed Female,163,WHITE/LIVER,MAGGIE,15146,2017,1/26/2017 16:04,397\\nDog Senior Citizen or Disability Neutered Male,271,BLACK,BANDIT,15112,2017,1/9/2017 9:11,398\\nDog Individual Spayed Female,28,SPOTTED,ELOISE,15202,2017,3/6/2017 8:45,399\\nDog Individual Neutered Male,132,SPOTTED,MEMPHIS,15102,2017,1/18/2017 14:57,400\\nDog Senior Citizen or Disability Spayed Female,157,WHITE,POLOMA,15101,2017,2/13/2017 16:01,401\\nDog Individual Spayed Female,51,BLACK,ANGEL,15071,2017,1/4/2017 15:49,402\\nDog Senior Citizen or Disability Spayed Female,152,BEIGE,FOXY,15136,2017,1/19/2017 15:56,403\\nDog Individual Spayed Female,332,GOLD,KYLIE,15235,2017,3/15/2017 8:44,404\\nDog Individual Neutered Male,60,BLACK/BROWN,BAILEY,15205,2017,12/16/2016 8:40,405\\nDog Senior Citizen or Disability Neutered Male,211,BROWN,FOSTER,15015,2017,2/28/2017 9:24,406\\nDog Senior Citizen or Disability Neutered Male,98,BLACK/GREY,MAX,15037,2017,1/13/2017 9:50,407\\nDog Individual Neutered Male,63,WHITE/BLACK,BUDDY,15102,2017,1/3/2017 10:08,408\\nDog Individual Spayed Female,334,BROWN,SCARLETT,15237,2017,3/24/2017 15:12,409\\nDog Individual Spayed Female,123,SABLE/WHITE,JENNY,15136,2017,1/18/2017 13:42,410\\nDog Senior Citizen or Disability Spayed Female,139,WHITE/BLACK/GREY,SHEBA,15017,2017,2/13/2017 16:01,411\\nDog Senior Citizen or Disability Neutered Male,116,WHITE,HARRY,15221,2017,1/9/2017 16:02,412\\nDog Senior Citizen or Disability Neutered Male,144,MULTI,BUZZ,15122,2017,12/12/2016 12:59,413\\nDog Individual License Duplicate,185,WHITE/TAN,FRANCO,15025,2017,2/8/2017 15:41,414\\nDog Senior Citizen or Disability Male,120,SPOTTED,CHAMP,15065,2017,3/22/2017 13:19,415\\nDog Individual Spayed Female,178,MERLE,JUNO,15228,2017,1/5/2017 12:50,416\\nDog Individual Spayed Female,116,WHITE/APRICOT,SHEBA,15237,2017,12/28/2016 11:18,417\\nDog Senior Citizen or Disability Neutered Male,77,WHITE,PEP,15025,2017,1/10/2017 11:00,418\\nDog Individual Spayed Female,289,WHITE/BLACK,LYNDI,15101,2017,12/23/2016 9:12,419\\nDog Individual Spayed Female,69,WHITE/BLACK,LYNDI,15101,2017,12/22/2016 8:56,420\\nDog Senior Citizen or Disability Neutered Male,147,RED,OTTO,15229,2017,12/9/2016 11:17,421\\nDog Individual Spayed Female,284,APRICOT,PRINCESS GABRIELLE,15136,2017,2/3/2017 8:37,422\\nDog Individual Neutered Male,331,MULTI,CHARLIE,15102,2017,1/3/2017 8:57,423\\nDog Senior Citizen or Disability Neutered Male,58,WHITE/BROWN,OLLIE,15116,2017,1/9/2017 16:01,424\\nDog Individual Neutered Male,154,BROWN,RUFFY,15122,2017,1/25/2017 9:04,425\\nDog Individual Neutered Male,163,BLACK,SAMMY,15025,2017,12/16/2016 9:08,426\\nDog Individual Neutered Male,97,WHITE/BEIGE,HOOCH,15235,2017,2/13/2017 16:01,427\\nDog Individual Neutered Male,243,WHITE/BLACK,BUDDY,15146,2017,12/28/2016 12:11,428\\nDog Individual Neutered Male,172,MULTI,SCHROEDER,15102,2017,3/9/2017 15:02,429\\nDog Senior Citizen or Disability Neutered Male,275,WHITE,TORNADO,15037,2017,2/15/2017 15:03,430\\nDog Individual Neutered Male,164,BROWN,COCO,15218,2017,2/17/2017 15:08,431\\nDog Senior Citizen or Disability Spayed Female,331,BLACK,BAILEY,15108,2017,12/14/2016 12:39,432\\nDog Senior Citizen or Disability Neutered Male,152,TAN,SPIKE,15129,2017,12/7/2016 12:14,433\\nDog Individual Neutered Male,253,SPOTTED,CISCO,15209,2017,12/30/2016 8:29,434\\nDog Senior Citizen or Disability Neutered Male,92,SPOTTED,CISCO,15209,2017,12/30/2016 8:29,435\\nDog Individual Male,53,BLACK,TAZ,15044,2017,2/7/2017 15:06,436\\nDog Individual Female,125,BROWN,ANNABELL,15236,2017,2/22/2017 9:14,437\\nDog Individual Spayed Female,341,BLACK/BROWN,COCOA,15241,2017,1/13/2017 16:25,438\\nDog Individual Male,249,SPOTTED,DOZER,15205,2017,1/23/2017 13:33,439\\nDog Individual Spayed Female,212,BLACK,TETSU,15236,2017,3/15/2017 12:07,440\\nDog Senior Citizen or Disability Neutered Male,117,BROWN,BAKER,15220,2017,12/19/2016 15:40,441\\nDog Individual Neutered Male,19,WHITE/BLACK,GUNNIE,15057,2017,1/27/2017 9:19,442\\nDog Senior Citizen or Disability Neutered Male,7,BLACK,BUDDY,15101,2017,12/22/2016 8:56,443\\nDog Individual Neutered Male,340,CREAM,FEZZIK,15212,2017,1/13/2017 9:50,444\\nDog Senior Citizen or Disability Spayed Female,146,WHITE/BROWN,LULUBELLE,15090,2017,1/12/2017 16:34,445\\nDog Senior Citizen or Disability Spayed Female,48,WHITE/BROWN,LULUBELLE,15090,2017,1/27/2017 14:54,446\\nDog Individual Female,199,WHITE/BLACK/BROWN,LILY MAY,15084,2017,2/10/2017 8:37,447\\nDog Individual Spayed Female,152,GREY,STORM,15037,2017,12/2/2016 8:42,448\\nDog Individual Spayed Female,316,BLACK,ROXY,15215,2017,1/4/2017 8:38,449\\nDog Individual Neutered Male,38,BLACK/BROWN,CARMEL,15234,2017,1/12/2017 9:36,450\\nDog Individual Spayed Female,308,BROWN,CRICKET,15137,2017,3/27/2017 14:51,451\\nDog Senior Citizen or Disability Neutered Male,154,RED/BRINDLE,KEEGAN,15238,2017,12/22/2016 8:56,452\\nDog Senior Citizen or Disability Neutered Male,33,BRINDLE,RILEY,15238,2017,12/22/2016 8:56,453\\nDog Individual Neutered Male,293,BRINDLE,RILEY,15238,2017,12/22/2016 8:56,454\\nDog Senior Citizen or Disability Spayed Female,304,BLACK/BROWN,BELLA,15102,2017,1/26/2017 10:04,455\\nDog Individual Spayed Female,53,BLACK,ROXY,15116,2017,1/9/2017 15:26,456\\nDog Individual Spayed Female,272,WHITE/BLACK,TIPPIE,15148,2017,12/15/2016 9:58,457\\nDog Senior Citizen or Disability Male,275,BROWN,GUS,15065,2017,1/5/2017 15:51,458\\nDog Individual Neutered Male,324,SPOTTED,OZZY,15235,2017,2/28/2017 16:02,459\\nDog Senior Citizen or Disability Neutered Male,76,BLACK,LORD TOBIUS,15146,2017,1/3/2017 8:52,460\\nDog Senior Citizen or Disability Spayed Female,60,GOLD,ABBIE,15235,2017,12/23/2016 9:12,461\\nDog Individual Spayed Female,81,BLACK/TAN,EFFI,15132,2017,1/6/2017 15:17,462\\nDog Senior Citizen or Disability Neutered Male,118,BLACK/BROWN,LUKE,15120,2017,1/3/2017 14:03,463\\nDog Individual Spayed Female,64,BLACK/TAN,SOPHIE,15235,2017,2/8/2017 8:49,464\\nDog Senior Citizen or Disability Spayed Female,33,BUFF,SALLY,15120,2017,12/29/2016 12:21,465\\nDog Individual Spayed Female,214,WHITE/BLACK,CHLOE,15214,2017,2/17/2017 9:03,466\\nDog Individual Male,34,MULTI,JACKSON,15143,2017,2/10/2017 13:32,467\\nDog Senior Citizen or Disability Spayed Female,26,BROWN,CHESSIE,15084,2017,1/4/2017 13:13,468\\nDog Senior Citizen or Disability Neutered Male,332,BLACK,JOHNATHAN,15071,2017,12/21/2016 8:44,469\\nDog Individual Neutered Male,333,BLACK/GREY,PACO,15136,2017,3/6/2017 13:54,470\\nDog Senior Citizen or Disability Neutered Male,145,TAN,NOMAR,15235,2017,2/23/2017 11:00,471\\nDog Individual Neutered Male,308,BLACK,CHARLIE,15143,2017,1/6/2017 14:43,472\\nDog Individual Spayed Female,46,WHITE,SUGAR,15131,2017,1/13/2017 12:49,473\\nDog Senior Citizen or Disability Neutered Male,191,BLACK,BAMBAM WILY,15090,2017,1/3/2017 8:51,474\\nDog Senior Citizen or Disability Spayed Female,177,WHITE/BROWN,GINGER,15228,2017,12/9/2016 9:00,475\\nDog Individual Neutered Male,332,WHITE/BLACK,SHADOW,15228,2017,3/17/2017 15:48,476\\nDog Individual Spayed Female,17,WHITE/LIVER,DOTTIE,15143,2017,12/13/2016 15:53,477\\nDog Senior Citizen or Disability Spayed Female,125,WHITE/LIVER,DOTTIE,15143,2017,12/28/2016 16:13,478\\nDog Senior Citizen or Disability Male,129,WHITE,DERVISH,15241,2017,12/16/2016 15:21,479\\nDog Individual Spayed Female,213,WHITE/BLACK,LILLY,15228,2017,12/16/2016 15:21,480\\nDog Individual Neutered Male,280,RED/BROWN,STEVIE SKY,15065,2017,1/17/2017 12:33,481\\nDog Individual Spayed Female,65,BROWN,CHLOE,15037,2017,1/11/2017 14:29,482\\nDog Individual Male,41,WHITE/BLACK/BROWN,BUDDY,15235,2017,12/9/2016 8:58,483\\nDog Senior Citizen or Disability Neutered Male,25,WHITE,ZUES,15235,2017,12/12/2016 13:35,484\\nDog Senior Citizen or Disability Male,184,SPOTTED,MAX A MILLION,15237,2017,1/4/2017 9:01,485\\nDog Individual Spayed Female,235,BRINDLE,PRINCESS,15223,2017,12/13/2016 13:52,486\\nDog Individual Spayed Female,182,BROWN,TESSA,15090,2017,1/18/2017 15:35,487\\nDog Senior Citizen or Disability Neutered Male,318,BLACK,RICO,15122,2017,12/9/2016 14:53,488\\nDog Individual Neutered Male,81,BLACK,TORO,15237,2017,12/9/2016 14:53,489\\nDog Senior Citizen or Disability Neutered Male,309,WHITE/BROWN,PEPPY,15122,2017,12/9/2016 8:58,490\\nDog Individual Spayed Female,226,BROWN,HALEY,15227,2017,12/21/2016 12:04,491\\nDog Individual Female,40,BLACK/BROWN,DAISY,15146,2017,1/6/2017 11:42,492\\nDog Individual Spayed Female,110,WHITE,ZOE,15133,2017,3/24/2017 15:13,493\\nDog Senior Citizen or Disability Spayed Female,97,WHITE/BLACK,GIZMET,15136,2017,12/14/2016 8:40,494\\nDog Individual Neutered Male,157,WHITE/BROWN,JACK,15129,2017,1/5/2017 8:35,495\\nDog Individual Male,211,BLACK,DAN,15136,2017,2/21/2017 12:06,496\\nDog Individual Neutered Male,1,FAWN,CHESSIE,15101,2017,1/23/2017 13:32,497\\nDog Senior Citizen or Disability Male,165,BROWN/TAN,TEDDIE,15147,2017,1/23/2017 9:46,498\\nDog Individual Neutered Male,167,WHITE/BLACK,DOMINO,15228,2017,12/30/2016 8:29,499\\nDog Individual Spayed Female,296,WHITE/TAN,HALEY,15237,2017,1/23/2017 15:05,500\\nDog Senior Citizen or Disability Neutered Male,320,BLACK/BROWN,ROCKY,15146,2017,3/6/2017 8:45,501\\nDog Individual Spayed Female,108,TAN,MADDIE,15136,2017,12/7/2016 16:19,502\\nDog Individual Neutered Male,41,BLACK,ROCCO,15235,2017,1/18/2017 16:11,503\\nDog Senior Citizen or Disability Spayed Female,155,WHITE/BLACK/BROWN,BELLA,15108,2017,12/13/2016 10:51,504\\nDog Individual Neutered Male,15,SPOTTED,OLIVER,15237,2017,12/8/2016 10:10,505\\nDog Individual Male,119,BROWN,GUNNER,15129,2017,12/28/2016 16:14,506\\nDog Individual Neutered Male,63,BROWN,PINTO,15108,2017,12/15/2016 16:07,507\\nDog Senior Citizen or Disability Spayed Female,126,SPOTTED,ANGEL,15037,2017,12/13/2016 14:17,508\\nDog Individual Neutered Male,29,WHITE/BLACK,ZENTU,15237,2017,11/30/2016 16:02,509\\nDog Senior Citizen or Disability Neutered Male,285,WHITE/BLACK,ZENTU,15237,2017,11/30/2016 16:02,510\\nDog Individual Spayed Female,217,WHITE,MOLLY,15218,2017,3/21/2017 13:57,511\\nDog Individual Neutered Male,230,CHOCOLATE,MURPHY,15237,2017,12/14/2016 9:08,512\\nDog Individual Male,144,WHITE,MOCHA,15129,2017,2/17/2017 14:49,513\\nDog Individual Spayed Female,241,BROWN,LUCKY,15090,2017,1/11/2017 11:06,514\\nDog Individual Spayed Female,198,YELLOW,LAYLA,15238,2017,12/12/2016 16:17,515\\nDog Senior Citizen or Disability Male,298,BRINDLE,GIZMO,15239,2017,12/14/2016 12:40,516\\nDog Senior Citizen or Disability Spayed Female,112,BLACK,ROXI,15071,2017,12/27/2016 12:38,517\\nDog Individual Spayed Female,235,BLACK/BROWN,ANNE,15147,2017,1/11/2017 11:06,518\\nDog Individual Spayed Female,189,WHITE/GREY,GRETTA,15106,2017,1/17/2017 9:11,519\\nDog Individual Neutered Male,114,BLACK,ERNIE,15243,2017,1/9/2017 11:07,520\\nDog Individual Spayed Female,147,BLACK/FAWN,BUFFY,15045,2017,12/19/2016 15:58,521\\nDog Senior Citizen or Disability Spayed Female,257,BRINDLE,ABBY,15241,2017,12/15/2016 9:58,522\\nDog Individual Spayed Female,290,BLACK,PUCK,15101,2017,3/6/2017 15:29,523\\nDog Senior Citizen or Disability Neutered Male,264,BROWN,BOOMER,15108,2017,1/31/2017 8:46,524\\nDog Individual Spayed Female,182,WHITE/TAN,BONNIE,15234,2017,1/17/2017 9:11,525\\nDog Senior Citizen or Disability Spayed Female,120,TAN,WILLOW,15136,2017,3/20/2017 8:41,526\\nDog Senior Citizen or Disability Neutered Male,140,ORANGE/WHITE,PUMPKIN,15106,2017,1/6/2017 14:42,527\\nDog Individual Neutered Male,305,WHITE/BLACK/BROWN,BULLET,15147,2017,2/9/2017 13:40,528\\nDog Individual Spayed Female,101,WHITE,HALLEY,15241,2017,,529\\nDog Senior Citizen or Disability Spayed Female,60,WHITE/LIVER,DAISEY,15044,2017,1/24/2017 10:13,530\\nDog Senior Citizen or Disability Neutered Male,258,BROWN,TEDDY,15236,2017,12/13/2016 8:47,531\\nDog Individual Neutered Male,73,MULTI,CHIP,15234,2017,12/13/2016 8:47,532\\nDog Senior Citizen or Disability Spayed Female,49,BLACK,IRIS,15057,2017,1/6/2017 11:42,533\\nDog Individual Spayed Female,99,WHITE,GABBY,15057,2017,1/30/2017 10:57,534\\nDog Senior Citizen or Disability Spayed Female,74,BLACK,MUSHIE,15137,2017,12/12/2016 15:32,535\\nDog Senior Citizen or Disability Spayed Female,297,BLACK,MUSHIE,15137,2017,12/12/2016 15:32,536\\nDog Individual Neutered Male,138,WHITE,BUD,15202,2017,2/1/2017 9:20,537\\nDog Senior Citizen or Disability Neutered Male,263,SPOTTED,TUCKER,15120,2017,12/28/2016 16:31,538\\nDog Individual Neutered Male,288,BLACK/TAN,DARGO,15235,2017,3/22/2017 15:19,539\\nDog Senior Citizen or Disability Neutered Male,5,BLACK,CASEY,15056,2017,2/23/2017 16:07,540\\nDog Senior Citizen or Disability Spayed Female,193,WHITE/BLACK,SHASTA,15227,2017,12/9/2016 8:58,541\\nDog Individual Spayed Female,260,BLACK,TAMMY,15108,2017,1/11/2017 15:44,542\\nDog Senior Citizen or Disability Male,10,BLACK/RED,CHASE,15017,2017,1/17/2017 12:33,543\\nDog Senior Citizen or Disability Spayed Female,283,RED,GINGER,15239,2017,1/23/2017 13:32,544\\nDog Individual Neutered Male,223,WHITE,RUSTY,15221,2017,3/9/2017 15:02,545\\nDog Senior Citizen or Disability Spayed Female,59,MULTI,DAISY,15116,2017,12/16/2016 10:36,546\\nDog Individual Male,257,SPOTTED,MAX,15239,2017,2/2/2017 9:43,547\\nDog Individual Spayed Female,291,MULTI,HANNA,15108,2017,1/5/2017 16:35,548\\nDog Senior Citizen or Disability Spayed Female,198,MULTI,HANNA,15108,2017,1/5/2017 16:35,549\\nDog Individual Spayed Female,224,BLACK,BISCUIT,15044,2017,1/11/2017 14:39,550\\nDog Individual Male,24,BLACK,BULLET HEAD,15084,2017,12/6/2016 16:07,551\\nDog Senior Citizen or Disability Male,203,BLACK,BULLET HEAD,15084,2017,12/6/2016 16:07,552\\nDog Individual License Duplicate,198,WHITE/BLACK,MILO,15131,2017,2/24/2017 9:17,553\\nDog Individual Female,178,TAN,CUDDLES,15140,2017,12/21/2016 12:04,554\\nDog Senior Citizen or Disability Spayed Female,211,BLACK,MANDY,15148,2017,2/10/2017 15:41,555\\nDog Individual Spayed Female,333,WHITE/BLACK/BROWN,ANNABELL,15071,2017,12/12/2016 16:16,556\\nDog Senior Citizen or Disability Spayed Female,63,WHITE,MINDY,15238,2017,2/3/2017 10:09,557\\nDog Individual Neutered Male,196,GOLD,HUNTER,15239,2017,1/9/2017 16:01,558\\nDog Individual Spayed Female,239,BROWN,BISCUIT,15228,2017,12/8/2016 10:10,559\\nDog Senior Citizen or Disability Neutered Male,294,WHITE,LITTLE GUY,15044,2017,12/9/2016 8:58,560\\nDog Individual Spayed Female,272,BLACK/BROWN,BOOBOO,15044,2017,1/3/2017 13:12,561\\nDog Individual Neutered Male,311,GREY,SMOKEY,15146,2017,1/18/2017 8:42,562\\nDog Individual Spayed Female,34,TAN,JOSIE,15238,2017,1/5/2017 9:17,563\\nDog Senior Citizen or Disability Spayed Female,48,TAN,JOSIE,15238,2017,12/20/2016 8:44,564\\nDog Senior Citizen or Disability Neutered Male,119,YELLOW,PAYTON,15090,2017,1/13/2017 16:25,565\\nDog Individual Neutered Male,293,WHITE,JAKE,15129,2017,1/13/2017 12:48,566\\nDog Senior Citizen or Disability Neutered Male,196,BLACK,BEN,15129,2017,2/15/2017 11:25,567\\nDog Individual Spayed Female,149,BLACK,MIDNIGHT,15133,2017,12/14/2016 16:17,568\\nDog Individual Neutered Male,126,BROWN,CHALUPA,15116,2017,1/12/2017 9:36,569\\nDog Senior Citizen or Disability Spayed Female,46,BROWN,BAILEY,15129,2017,2/23/2017 10:05,570\\nDog Individual Neutered Male,218,WHITE,SPUNKY,15221,2017,2/21/2017 15:57,571\\nDog Individual Neutered Male,58,BLACK/BROWN,VINO,15236,2017,2/17/2017 14:49,572\\nDog Senior Citizen or Disability Spayed Female,291,BLUE/GOLD,YODI,15137,2017,12/19/2016 8:48,573\\nDog Individual Spayed Female,135,WHITE/BLACK,ANGEL,15236,2017,1/4/2017 8:39,574\\nDog Individual Neutered Male,8,SPOTTED,SPIKE,15235,2017,1/6/2017 11:41,575\\nDog Individual Neutered Male,209,BLONDE,OLIVER,15215,2017,3/10/2017 13:58,576\\nDog Individual Spayed Female,69,WHITE/TAN,PEANUT,15020,2017,1/9/2017 16:01,577\\nDog Individual Spayed Female,140,BLACK,SADIE,15234,2017,12/19/2016 8:49,578\\nDog Individual Neutered Male,192,WHITE/BROWN,SAMMY,15237,2017,12/27/2016 12:38,579\\nDog Individual Spayed Female,291,WHITE/LIVER,LEXIE,15136,2017,1/19/2017 15:56,580\\nDog Senior Citizen or Disability Neutered Male,322,WHITE/BLACK/BROWN,TOBY,15146,2017,1/6/2017 9:07,581\\nDog Senior Citizen or Disability Spayed Female,133,WHITE/BLACK,BOBO,15108,2017,12/8/2016 10:02,582\\nDog Individual Spayed Female,94,BLACK,EMMI,15090,2017,1/9/2017 16:38,583\\nDog Senior Citizen or Disability Spayed Female,75,BLACK/BROWN,SADIE,15228,2017,12/20/2016 8:44,584\\nDog Individual Neutered Male,43,WHITE,PIERRE,15122,2017,1/23/2017 9:46,585\\nDog Individual Male,240,WHITE/BLACK/BROWN,HENRY,15120,2017,3/24/2017 12:44,586\\nDog Individual Neutered Male,191,YELLOW,BEAR,15044,2017,12/30/2016 15:41,587\\nDog Individual Neutered Male,68,YELLOW,DUGAN,15209,2017,2/10/2017 15:41,588\\nDog Individual Neutered Male,85,BROWN,BENNINGTON,15237,2017,12/16/2016 10:45,589\\nDog Individual Spayed Female,69,SPOTTED,KATIE,15229,2017,2/24/2017 15:28,590\\nDog Individual Neutered Male,113,BLACK,HUCKLEBERRY,15101,2017,2/13/2017 8:36,591\\nDog Individual Male,290,BROWN,JACK SIR,15044,2017,2/15/2017 15:53,592\\nDog Individual Spayed Female,144,WHITE/BLACK/BROWN,MISSY,15131,2017,12/8/2016 10:09,593\\nDog Senior Citizen or Disability Neutered Male,160,BROWN,KOBE,15227,2017,12/15/2016 14:50,594\\nDog Senior Citizen or Disability Spayed Female,109,BLACK,CHIPPER,15146,2017,2/10/2017 13:32,595\\nDog Senior Citizen or Disability Neutered Male,175,WHITE/BLACK,RILEY,15044,2017,1/12/2017 14:57,596\\nDog Individual Spayed Female,90,SPOTTED,LIBBY,15108,2017,12/16/2016 13:25,597\\nDog Individual Neutered Male,17,WHITE,DUSTY,15101,2017,2/14/2017 15:19,598\\nDog Individual Spayed Female,74,WHITE,FIFI,15122,2017,1/23/2017 9:46,599\\nDog Individual Neutered Male,203,BLACK,SAMMEE BLUE,15205,2017,1/3/2017 14:04,600\\nDog Individual Spayed Female,201,GOLD,LEXIE,15223,2017,1/26/2017 16:04,601\\nDog Individual Male,22,BLACK/BROWN,KUJO,15037,2017,2/21/2017 12:09,602\\nDog Senior Citizen or Disability Spayed Female,2,WHITE/BLACK,NEIKO,15102,2017,2/22/2017 11:34,603\\nDog Individual Neutered Male,299,WHITE/BLACK,KIRBY,15216,2017,3/6/2017 12:47,604\\nDog Individual Female,146,WHITE/BLACK/BROWN,BELL,15143,2017,1/12/2017 9:36,605\\nDog Individual Neutered Male,212,BLACK,DISCO,15221,2017,12/6/2016 11:40,606\\nDog Individual Spayed Female,18,WHITE/BLACK,APRIL,15102,2017,3/9/2017 12:58,607\\nDog Individual Male,186,CREAM,SHABU,15025,2017,2/28/2017 8:44,608\\nDog Individual Neutered Male,246,WHITE/BROWN,RUSTY,15106,2017,12/30/2016 13:28,609\\nDog Individual Spayed Female,212,WHITE/BROWN,LILLIE CHOBY,15235,2017,12/16/2016 8:40,610\\nDog Senior Citizen or Disability Spayed Female,276,WHITE/BROWN,LILLIE CHOBY,15235,2017,12/16/2016 8:40,611\\nDog Senior Citizen or Disability Neutered Male,2,BLACK,ROCCO,15238,2017,12/13/2016 8:34,612\\nDog Senior Citizen or Disability Spayed Female,138,WHITE,BANDI,15235,2017,1/6/2017 16:03,613\\nDog Senior Citizen or Disability Spayed Female,104,BROWN,PRETTY GIRL,15202,2017,12/16/2016 15:21,614\\nDog Senior Citizen or Disability Spayed Female,76,MULTI,MIMI,15216,2017,12/13/2016 14:00,615\\nDog Individual Spayed Female,309,BLACK,CHINOOK,15024,2017,1/30/2017 10:57,616\\nDog Individual Spayed Female,52,GOLD,MOLLY,15205,2017,12/13/2016 14:16,617\\nDog Senior Citizen or Disability Neutered Male,265,BLONDE,LUKE,15143,2017,1/6/2017 14:42,618\\nDog Individual Spayed Female,100,WHITE/BROWN,SCUPPERS,15228,2017,12/8/2016 16:26,619\\nDog Individual Spayed Female,269,BROWN,MYA,16046,2017,1/17/2017 9:11,620\\nDog Individual Neutered Male,276,BLUE/GOLD,CURIOUS,15057,2017,12/5/2016 8:53,621\\nDog Senior Citizen or Disability Spayed Female,74,BRINDLE,WENDY,15239,2017,3/16/2017 13:51,622\\nDog Individual Spayed Female,228,WHITE/BLACK/BROWN,LAYDEE,15133,2017,3/6/2017 13:54,623\\nDog Individual Spayed Female,284,WHITE/TAN,FOXY LADY,15212,2017,1/24/2017 11:41,624\\nDog Individual Female,133,WHITE,DIAMOND,15235,2017,1/19/2017 15:57,625\\nDog Senior Citizen or Disability Neutered Male,319,SPOTTED,ROCKY,15101,2017,12/29/2016 14:19,626\\nDog Individual Spayed Female,28,CINNAMON,JOSIE MAE,15025,2017,12/9/2016 14:53,627\\nDog Individual Spayed Female,293,WHITE,KACEY,15236,2017,12/29/2016 15:14,628\\nDog Individual Spayed Female,298,WHITE/BLACK,SADIE,15122,2017,1/30/2017 16:33,629\\nDog Individual Spayed Female,67,BROWN,STITCH,15108,2017,1/13/2017 9:50,630\\nDog Individual Neutered Male,229,BLACK/BROWN,PETE,15037,2017,12/7/2016 13:38,631\\nDog Senior Citizen or Disability Spayed Female,28,WHITE/BROWN,SAMANTHA,15216,2017,12/30/2016 15:40,632\\nDog Individual Neutered Male,56,WHITE/BLACK/GREY,BUDDY,15236,2017,2/23/2017 15:04,633\\nDog Senior Citizen or Disability Neutered Male,164,WHITE,DAKOTA,15216,2017,12/30/2016 15:40,634\\nDog Individual Spayed Female,217,BROWN,LILY FLOWER,15237,2017,12/15/2016 10:16,635\\nDog Individual Neutered Male,225,BLACK,SAMMY,15101,2017,12/22/2016 8:56,636\\nDog Individual Neutered Male,297,BLACK/GOLD,ZEUS,15133,2017,2/24/2017 10:51,637\\nDog Individual Spayed Female,253,BLACK/BROWN,CINDERS,15025,2017,1/24/2017 16:31,638\\nDog Senior Citizen or Disability Spayed Female,203,BLACK/BROWN,CINDERS,15025,2017,1/24/2017 16:31,639\\nDog Individual Neutered Male,267,WHITE,FOX,15226,2017,1/9/2017 9:11,640\\nDog Individual Neutered Male,103,BLACK,BEAR,15133,2017,1/10/2017 15:54,641\\nDog Senior Citizen or Disability Spayed Female,230,BLACK,BAILEY,15226,2017,1/9/2017 11:07,642\\nDog Individual Spayed Female,265,MULTI,DUSTY,15102,2017,2/3/2017 15:54,643\\nDog Senior Citizen or Disability Spayed Female,322,WHITE/TAN,ABBY,15227,2017,1/17/2017 14:56,644\\nDog Senior Citizen or Disability Spayed Female,103,WHITE,MOLLY,15235,2017,3/24/2017 15:13,645\\nDog Individual Neutered Male,298,ORANGE/WHITE,TRACKER,15102,2017,2/14/2017 16:10,646\\nDog Senior Citizen or Disability Spayed Female,143,BROWN,LENA,15227,2017,12/13/2016 15:54,647\\nDog Individual Spayed Female,59,GOLD,ALLIE,15084,2017,1/12/2017 10:27,648\\nDog Individual Neutered Male,173,BLACK,RUFUS,15221,2017,1/3/2017 11:57,649\\nDog Senior Citizen or Disability Spayed Female,159,FAWN,ELLA,15101,2017,1/5/2017 12:50,650\\nDog Senior Citizen or Disability Neutered Male,329,SALT/PEPPER,OWEN,15220,2017,1/17/2017 9:44,651\\nDog Senior Citizen or Disability Spayed Female,112,WHITE/BLACK,JILL FALCON SPI,15082,2017,1/11/2017 14:40,652\\nDog Individual Neutered Male,201,GREY,DUSTY,15101,2017,12/14/2016 9:08,653\\nDog Individual Spayed Female,214,MULTI,SARAH,15143,2017,12/14/2016 16:17,654\\nDog Senior Citizen or Disability Spayed Female,300,BLACK,BELLA,15143,2017,1/4/2017 10:10,655\\nDog Individual Spayed Female,32,SABLE,DORI,15101,2017,12/16/2016 15:21,656\\nDog Individual Neutered Male,297,BLACK,SHAMUS,15227,2017,1/30/2017 8:34,657\\nDog Senior Citizen or Disability Neutered Male,3,FAWN,PORKY,15024,2017,3/6/2017 16:28,658\\nDog Individual Spayed Female,175,MULTI,HANNAH,15101,2017,1/23/2017 10:52,659\\nDog Senior Citizen or Disability Male,150,WHITE/BLACK,PARKER,15044,2017,1/6/2017 14:42,660\\nDog Individual Spayed Female,278,BROWN,SPIKE,15139,2017,1/4/2017 15:04,661\\nDog Individual Spayed Female,165,BRINDLE,SADIE,15237,2017,1/4/2017 9:01,662\\nDog Senior Citizen or Disability Neutered Male,36,WHITE/YELLOW,TYLER,15235,2017,12/21/2016 8:35,663\\nDog Individual Spayed Female,121,BLACK/BROWN,JOURNEY,15146,2017,12/16/2016 9:08,664\\nDog Individual Neutered Male,279,BLACK,BUZZ,15024,2017,2/2/2017 9:43,665\\nDog Senior Citizen or Disability Spayed Female,12,GOLD,SADIE,15215,2017,12/15/2016 9:58,666\\nDog Senior Citizen or Disability Spayed Female,48,WHITE,ANNEY,15144,2017,12/16/2016 8:40,667\\nDog Senior Citizen or Disability Neutered Male,272,SABLE,TEDDY,15146,2017,12/19/2016 15:40,668\\nDog Individual Neutered Male,329,BLACK/BROWN,LEVI,15101,2017,12/29/2016 8:43,669\\nDog Individual Spayed Female,166,BROWN,ROSEY,15218,2017,3/7/2017 16:02,670\\nDog Senior Citizen or Disability Spayed Female,76,WHITE,MAYA,15015,2017,12/13/2016 10:52,671\\nDog Individual Spayed Female,327,BLACK,HAILEY,15106,2017,12/13/2016 15:53,672\\nDog Senior Citizen or Disability Spayed Female,178,BLACK,HAILEY,15106,2017,12/13/2016 15:53,673\\nDog Individual Neutered Male,265,SPOTTED,BUSTER,15238,2017,1/5/2017 16:35,674\\nDog Senior Citizen or Disability Neutered Male,173,SPOTTED,BUSTER,15238,2017,1/5/2017 16:36,675\\nDog Senior Citizen or Disability Neutered Male,49,WHITE,BISCUIT,15065,2017,12/14/2016 12:39,676\\nDog Senior Citizen or Disability Neutered Male,135,BROWN,INDIANA,15101,2017,1/5/2017 15:51,677\\nDog Senior Citizen or Disability Spayed Female,308,WHITE,SHELBY,15235,2017,12/7/2016 16:27,678\\nDog Individual Neutered Male,7,WHITE/BLACK,PUCK,15143,2017,1/13/2017 9:49,679\\nDog Individual Female,291,WHITE,CHAMP PENNY,15145,2017,1/24/2017 9:02,680\\nDog Senior Citizen or Disability Neutered Male,214,BLACK/BROWN,BUDDY,15108,2017,12/16/2016 16:25,681\\nDog Individual Spayed Female,335,WHITE,SNOWBALL,15101,2017,1/17/2017 12:33,682\\nDog Senior Citizen or Disability Female,262,BEIGE,CHLOE,15236,2017,12/9/2016 8:58,683\\nDog Senior Citizen or Disability Spayed Female,265,BEIGE,CHLOE,15236,2017,12/9/2016 8:58,684\\nDog Individual Neutered Male,208,BROWN,FRITZ,15102,2017,3/7/2017 16:09,685\\nDog Individual Neutered Male,320,WHITE/BLACK,SHADOW,15131,2017,12/28/2016 8:43,686\\nDog Senior Citizen or Disability Spayed Female,258,RED,PENNY,15090,2017,12/5/2016 16:06,687\\nDog Senior Citizen or Disability Neutered Male,208,GREY,BODIE,15235,2017,2/22/2017 11:07,688\\nDog Senior Citizen or Disability Neutered Male,329,SPOTTED,CHARLIE,15102,2017,1/13/2017 16:25,689\\nDog Individual Neutered Male,255,BRINDLE,DIGGER,15116,2017,1/3/2017 8:40,690\\nDog Senior Citizen or Disability Spayed Female,196,WHITE/BLACK,PRECIOUS,15071,2017,2/3/2017 15:52,691\\nDog Senior Citizen or Disability Spayed Female,297,TAN,SADIE,15108,2017,12/21/2016 10:03,692\\nDog Individual Spayed Female,122,BLACK,LICORICE,15101,2017,12/19/2016 8:21,693\\nDog Individual Spayed Female,109,BROWN,LADY (MUFFY),15243,2017,12/9/2016 8:58,694\\nDog Individual Neutered Male,117,BLACK/BROWN,DEUCE,15142,2017,12/19/2016 8:49,695\\nDog Senior Citizen or Disability Neutered Male,132,BLACK/BROWN,DEUCE,15142,2017,12/19/2016 8:49,696\\nDog Individual Neutered Male,214,BLACK,WINCHESTER,15202,2017,1/30/2017 10:57,697\\nDog Individual Neutered Male,109,SPOTTED,BARKLEY,15037,2017,12/22/2016 16:28,698\\nDog Senior Citizen or Disability Spayed Female,294,WHITE,YUKI,15227,2017,1/11/2017 11:06,699\\nDog Individual Spayed Female,235,BROWN,MOLLY,15223,2017,1/4/2017 15:56,700\\nDog Individual Spayed Female,328,BLACK,SHADOW,15024,2017,1/5/2017 9:18,701\\nDog Individual Spayed Female,232,TRI-COLOR,DAISY,15071,2017,12/8/2016 10:09,702\\nDog Individual Neutered Male,263,WHITE,CHICO,15146,2017,1/30/2017 8:43,703\\nDog Individual Spayed Female,258,BLACK/BROWN,SARA,15102,2017,1/3/2017 8:58,704\\nDog Senior Citizen or Disability Neutered Male,35,WHITE,BUTTONS,15133,2017,12/9/2016 8:58,705\\nDog Individual Neutered Male,315,SPOTTED,JAKE,15216,2017,1/19/2017 15:03,706\\nDog Senior Citizen or Disability Neutered Male,293,RED,FULTON,15116,2017,12/8/2016 8:33,707\\nDog Individual Spayed Female,272,BLACK,CHOPPER,15223,2017,12/30/2016 8:55,708\\nDog Individual Neutered Male,159,BLONDE,BUDDY,15239,2017,2/16/2017 8:37,709\\nDog Senior Citizen or Disability Neutered Male,197,WHITE/BLACK,BENJI,15126,2017,12/22/2016 8:56,710\\nDog Senior Citizen or Disability Spayed Female,299,BLACK,ZOE,15238,2017,12/15/2016 9:58,711\\nDog Senior Citizen or Disability Spayed Female,97,WHITE/BLACK,IZZY,15241,2017,12/22/2016 16:27,712\\nDog Individual Spayed Female,26,WHITE,NIKKI WALSH,15017,2017,3/24/2017 8:38,713\\nDog Individual Spayed Female,148,OTHER,SHALIE WALSH,15017,2017,3/24/2017 8:38,714\\nDog Individual Spayed Female,322,OTHER,SHALIE WALSH,15017,2017,3/24/2017 8:38,715\\nDog Senior Citizen or Disability Spayed Female,20,BROWN,GINGER,15025,2017,12/14/2016 9:08,716\\nDog Senior Citizen or Disability Neutered Male,311,BLACK/BROWN,DINGO,15209,2017,12/14/2016 9:08,717\\nDog Senior Citizen or Disability Male,32,RED,RED,15071,2017,1/4/2017 15:56,718\\nDog Individual Neutered Male,225,SPOTTED,LOGAN,15126,2017,12/28/2016 16:13,719\\nDog Individual Neutered Male,84,BLACK/BROWN,JAVA,15241,2017,12/22/2016 8:56,720\\nDog Individual Spayed Female,311,TAN,LULU,15006,2017,12/8/2016 13:00,721\\nDog Individual Neutered Male,134,BLACK,WALTER,15237,2017,1/25/2017 16:03,722\\nDog Individual Neutered Male,8,YELLOW,MAX,15237,2017,12/13/2016 13:52,723\\nDog Individual Female,272,BLACK,ASHLEY,15236,2017,1/3/2017 10:08,724\\nDog Senior Citizen or Disability Neutered Male,340,BLACK/BROWN,BUTCH,15202,2017,12/7/2016 12:11,725\\nDog Senior Citizen or Disability Neutered Male,83,SPOTTED,QUID,15228,2017,12/14/2016 8:41,726\\nDog Individual Neutered Male,165,BROWN,MAX MARSHALL,15202,2017,1/18/2017 9:07,727\\nDog Senior Citizen or Disability Neutered Male,139,WHITE/BLACK,MAX,15025,2017,12/15/2016 16:01,728\\nDog Individual Spayed Female,75,WHITE/BROWN,BO BO,15140,2017,1/27/2017 10:24,729\\nDog Individual Male,336,WHITE/BLACK,LUCKY,15108,2017,2/14/2017 8:38,730\\nDog Senior Citizen or Disability Neutered Male,240,BLACK/TAN,QUIGLEY,15237,2017,2/21/2017 11:01,731\\nDog Individual Neutered Male,45,BROWN,ROWDY,15108,2017,12/19/2016 15:28,732\\nDog Individual Male,193,WHITE/TAN,HARLEY,15202,2017,12/14/2016 15:09,733\\nDog Individual Neutered Male,138,BLACK/BROWN,FALCON,15209,2017,2/3/2017 15:52,734\\nDog Senior Citizen or Disability Neutered Male,293,BRINDLE,DUKE,15131,2017,12/13/2016 8:34,735\\nDog Individual Male,152,YELLOW,MONTY,15218,2017,1/6/2017 15:18,736\\nDog Senior Citizen or Disability Male,170,WHITE/BROWN,BERNARD,15223,2017,12/13/2016 16:04,737\\nDog Individual Spayed Female,318,BLACK,MISTY,15025,2017,12/12/2016 9:35,738\\nDog Individual Spayed Female,55,BLACK,MING,15133,2017,1/18/2017 16:11,739\\nDog Individual Spayed Female,233,BRINDLE,MOLSON,15133,2017,1/18/2017 16:11,740\\nDog Individual Male,318,WHITE,LUCKY,15227,2017,12/16/2016 16:25,741\\nDog Individual Neutered Male,344,BRINDLE,BEAR,15236,2017,2/17/2017 9:03,742\\nDog Senior Citizen or Disability Neutered Male,38,SPOTTED,PEANUT,15084,2017,1/6/2017 15:49,743\\nDog Individual Neutered Male,190,TAN,MURPHY,15139,2017,12/19/2016 8:49,744\\nDog Individual Neutered Male,238,RED/BRINDLE,ROCKY,15236,2017,1/12/2017 16:34,745\\nDog Senior Citizen or Disability Neutered Male,126,RED/BRINDLE,ROCKY,15236,2017,1/12/2017 16:34,746\\nDog Senior Citizen or Disability Neutered Male,200,BLACK/TAN,EISTIEN,15236,2017,1/12/2017 16:34,747\\nDog Individual Neutered Male,63,BLACK,REX,15136,2017,12/13/2016 13:52,748\\nDog Senior Citizen or Disability Spayed Female,237,BLACK,KATIE,15018,2017,12/20/2016 8:44,749\\nDog Individual Male,254,WHITE/YELLOW,DAKOTA,15037,2017,1/10/2017 16:19,750\\nDog Senior Citizen or Disability Neutered Male,160,BLACK/BROWN,RAMBO,15131,2017,12/7/2016 16:27,751\\nDog Individual Spayed Female,48,BLACK/BROWN,SADIE,15132,2017,1/23/2017 13:33,752\\nDog Individual Neutered Male,194,BROWN,ROCKY,15243,2017,2/7/2017 16:05,753\\nDog Senior Citizen or Disability Neutered Male,219,BLACK/BROWN,ROSCOE,15090,2017,12/22/2016 16:28,754\\nDog Individual Neutered Male,50,BLACK/BROWN,ROSCOE,15090,2017,12/22/2016 16:28,755\\nDog Individual Spayed Female,109,WHITE,LIZZY,15037,2017,3/21/2017 9:41,756\\nDog Individual Spayed Female,219,BLACK,BAYLEE,15131,2017,12/15/2016 9:58,757\\nDog Senior Citizen or Disability Neutered Male,261,MULTI,KEYES,15044,2017,1/3/2017 14:04,758\\nDog Individual Neutered Male,320,WHITE/TAN,BUBBA,15104,2017,12/19/2016 15:41,759\\nDog Individual Neutered Male,291,BROWN,SAMSON,15044,2017,2/3/2017 15:53,760\\nDog Senior Citizen or Disability Male,333,BLACK,BLACK,15147,2017,12/29/2016 14:05,761\\nDog Individual Spayed Female,93,SPOTTED,LAUREL,15238,2017,12/13/2016 8:34,762\\nDog Individual Neutered Male,278,BROWN,ROWLF,15215,2017,1/5/2017 9:17,763\\nDog Individual Male,150,BLACK,MAX,15120,2017,3/3/2017 9:11,764\\nDog Individual Neutered Male,186,CREAM,ROCKY,15108,2017,2/22/2017 15:41,765\\nDog Senior Citizen or Disability Spayed Female,181,MULTI,ABBEY,15135,2017,12/29/2016 15:15,766\\nDog Senior Citizen or Disability Spayed Female,231,BLACK/FAWN,CHLOE,15147,2017,12/14/2016 9:08,767\\nDog Senior Citizen or Disability Spayed Female,54,BLACK,GABBIE,15238,2017,1/4/2017 8:38,768\\nDog Senior Citizen or Disability Neutered Male,269,BROWN,NEMO,15147,2017,1/4/2017 8:38,769\\nDog Senior Citizen or Disability Neutered Male,319,BROWN,EINSTEIN,15135,2017,1/9/2017 16:02,770\\nDog Individual Neutered Male,333,BLUE,CUJO,15025,2017,2/28/2017 8:44,771\\nDog Senior Citizen or Disability Neutered Male,301,BLACK,BUDDY,15102,2017,12/28/2016 8:42,772\\nDog Individual Spayed Female,321,FAWN,TARA,15090,2017,1/4/2017 8:38,773\\nDog Individual Female,49,WHITE,NICKY,15145,2017,1/24/2017 9:02,774\\nDog Individual Male,93,WHITE,CHAMP DREAMER,15145,2017,1/24/2017 9:02,775\\nDog Senior Citizen or Disability Spayed Female,277,BLACK,KANDY,15106,2017,2/24/2017 15:19,776\\nDog Individual Spayed Female,149,WHITE/BROWN,ZOEY,15241,2017,12/7/2016 8:49,777\\nDog Senior Citizen or Disability Spayed Female,258,MULTI,SOPHIA,15084,2017,2/17/2017 14:49,778\\nDog Senior Citizen or Disability Spayed Female,38,BLONDE,CHOO-LYNN,15135,2017,12/12/2016 16:17,779\\nDog Senior Citizen or Disability Male,38,BLACK/RED,KENO,15017,2017,1/17/2017 12:33,780\\nDog Senior Citizen or Disability Spayed Female,203,BLACK,MADDIE,15238,2017,1/4/2017 8:38,781\\nDog Senior Citizen or Disability Spayed Female,101,SPOTTED,LADY,15136,2017,1/9/2017 16:01,782\\nDog Senior Citizen or Disability Spayed Female,185,OTHER,GWEN,15235,2017,2/10/2017 8:37,783\\nDog Senior Citizen or Disability Neutered Male,167,WHITE/BROWN,GEORGE,15120,2017,1/12/2017 9:57,784\\nDog Senior Citizen or Disability Spayed Female,106,MULTI,BEYONCEE,15110,2017,2/21/2017 15:46,785\\nDog Individual Neutered Male,61,GOLD,ZIG ZAG,15102,2017,1/13/2017 12:48,786\\nDog Senior Citizen or Disability Neutered Male,60,MULTI,TOBY,15057,2017,1/25/2017 13:30,787\\nDog Senior Citizen or Disability Neutered Male,272,BLACK,ZACK,15044,2017,2/2/2017 12:05,788\\nDog Senior Citizen or Disability Spayed Female,305,BRINDLE,PEPPER,15236,2017,12/19/2016 15:58,789\\nDog Individual Spayed Female,136,BROWN,BENTLEE,15044,2017,3/6/2017 16:28,790\\nDog Individual Spayed Female,26,BROWN,MISSY,15102,2017,12/15/2016 16:07,791\\nDog Individual Neutered Male,157,BLACK/BROWN,SEBASTIAN,15132,2017,3/22/2017 13:19,792\\nDog Individual Male,112,BLACK,COAL,15084,2017,1/9/2017 16:02,793\\nDog Individual Spayed Female,198,WHITE/BROWN,ANNABELLE,15045,2017,1/3/2017 14:04,794\\nDog Individual Neutered Male,43,BLACK,TOBY,15205,2017,1/4/2017 9:01,795\\nDog Individual Neutered Male,47,WHITE,MURRAY,15239,2017,2/7/2017 8:39,796\\nDog Individual Spayed Female,320,BLACK/CREAM,CHEMUHK,15084,2017,1/13/2017 8:45,797\\nDog Senior Citizen or Disability Neutered Male,5,RED,SAMMY,15131,2017,3/15/2017 10:30,798\\nDog Senior Citizen or Disability Neutered Male,200,BLACK/BROWN,BREWTIS,15143,2017,12/8/2016 13:00,799\\nDog Senior Citizen or Disability Spayed Female,46,WHITE/BROWN,SUNNY,15221,2017,12/28/2016 16:31,800\\nDog Senior Citizen or Disability Spayed Female,124,WHITE/BLACK,BABY,15209,2017,12/15/2016 10:16,801\\nDog Individual Neutered Male,168,SABLE,PIPER,16046,2017,12/30/2016 8:55,802\\nDog Senior Citizen or Disability Female,123,WHITE/BROWN,MORGAN,15243,2017,2/21/2017 11:35,803\\nDog Senior Citizen or Disability Male,172,WHITE/BROWN,MERL,15243,2017,2/21/2017 11:35,804\\nDog Senior Citizen or Disability Male,203,WHITE/BROWN,CAPT,15243,2017,2/21/2017 11:35,805\\nDog Senior Citizen or Disability Female,21,WHITE/BROWN,GRETA,15243,2017,2/21/2017 11:35,806\\nDog Senior Citizen or Disability Female,80,WHITE/BROWN,CIN,15243,2017,2/21/2017 11:35,807\\nDog Individual Neutered Male,21,BLUE,SNICKERS,15108,2017,12/16/2016 16:25,808\\nDog Individual Spayed Female,190,GREY,BELLA,15236,2017,12/14/2016 16:17,809\\nDog Individual Female,47,GOLD,BRANDI,15221,2017,1/30/2017 10:52,810\\nDog Senior Citizen or Disability Neutered Male,44,BUFF,BUDDY,15102,2017,12/22/2016 16:27,811\\nDog Individual Neutered Male,25,BUFF,BUDDY,15102,2017,12/22/2016 16:27,812\\nDog Individual Neutered Male,197,APRICOT,RUSTY HALL,15034,2017,12/5/2016 8:52,813\\nDog Senior Citizen or Disability Neutered Male,30,APRICOT,RUSTY HALL,15034,2017,12/5/2016 8:52,814\\nDog Senior Citizen or Disability Neutered Male,114,BROWN,SAMMY,15215,2017,12/13/2016 8:34,815\\nDog Individual Female,82,BLACK/BROWN,SNICKERS,15044,2017,12/12/2016 16:17,816\\nDog Senior Citizen or Disability Spayed Female,177,WHITE/BLACK,MS. BAILEY,15243,2017,12/12/2016 9:35,817\\nDog Senior Citizen or Disability Neutered Male,278,WHITE/BLACK/BROWN,BOSCOE,15106,2017,12/12/2016 9:34,818\\nDog Senior Citizen or Disability Spayed Female,165,WHITE,SADIE,15237,2017,12/16/2016 10:45,819\\nDog Individual Spayed Female,100,BROWN,BRIDGET,15065,2017,1/27/2017 13:22,820\\nDog Senior Citizen or Disability Spayed Female,115,WHITE/BLACK,SASSIE,15205,2017,12/7/2016 8:49,821\\nDog Senior Citizen or Disability Neutered Male,329,RED,BAXTER,15116,2017,1/13/2017 12:48,822\\nDog Senior Citizen or Disability Male,62,SILVER,ROCCO,15063,2017,1/18/2017 16:11,823\\nDog Individual Male,56,BROWN,MORGAN,15238,2017,12/1/2016 8:52,824\\nDog Individual Neutered Male,340,BROWN,MORGAN,15238,2017,12/1/2016 8:52,825\\nDog Senior Citizen or Disability Spayed Female,108,WHITE/BLACK,TILLY,15145,2017,2/23/2017 16:07,826\\nDog Individual Neutered Male,312,BLACK,BIG BEN,15065,2017,12/23/2016 13:35,827\\nDog Individual Neutered Male,113,BLACK/BROWN,JACKSON,15129,2017,12/28/2016 15:34,828\\nDog Individual Spayed Female,71,RED,POOH,15017,2017,2/3/2017 14:02,829\\nDog Senior Citizen or Disability Neutered Male,281,MULTI,MAX,15126,2017,12/14/2016 9:27,830\\nDog Individual Spayed Female,228,WHITE/BROWN,ROXY,15024,2017,12/2/2016 13:28,831\\nDog Individual Neutered Male,315,BROWN,TOBY,15146,2017,1/31/2017 9:14,832\\nDog Senior Citizen or Disability Neutered Male,221,WHITE/BLACK,KINISH,15136,2017,2/3/2017 15:52,833\\nDog Senior Citizen or Disability Spayed Female,195,WHITE/BROWN,KATIE,15239,2017,12/29/2016 15:14,834\\nDog Individual Spayed Female,92,GOLD,KACIE,15108,2017,3/17/2017 15:48,835\\nDog Individual Neutered Male,73,BROWN,DAKOTA,15126,2017,1/9/2017 16:01,836\\nDog Senior Citizen or Disability Neutered Male,20,SPOTTED,FELIX,15122,2017,12/23/2016 9:12,837\\nDog Senior Citizen or Disability Spayed Female,245,BROWN,PENNY,15228,2017,12/29/2016 15:14,838\\nDog Individual Neutered Male,140,WHITE/BLACK,SCHNAPPS,15102,2017,12/15/2016 12:28,839\\nDog Senior Citizen or Disability Spayed Female,38,WHITE/BLACK,ABBY,15235,2017,2/10/2017 12:27,840\\nDog Senior Citizen or Disability Male,11,WHITE,RYAN,15205,2017,11/30/2016 12:54,841\\nDog Senior Citizen or Disability Spayed Female,136,BLACK/BROWN,CASSIE,15146,2017,12/8/2016 16:26,842\\nDog Individual Spayed Female,131,WHITE,LILY,15220,2017,1/23/2017 9:45,843\\nDog Individual Spayed Female,181,BROWN,DAISY,15220,2017,1/23/2017 9:45,844\\nDog Individual Neutered Male,56,BLACK/BROWN,BAILEY,15090,2017,12/7/2016 15:42,845\\nDog Senior Citizen or Disability Spayed Female,88,BLACK,SNIFFLES,15237,2017,2/2/2017 9:43,846\\nDog Individual Female,97,WHITE/BLACK/BROWN,BRANDY,15236,2017,1/6/2017 11:42,847\\nDog Individual Neutered Male,269,BLACK,THUNDER,15243,2017,1/5/2017 8:35,848\\nDog Senior Citizen or Disability Neutered Male,135,WHITE/BLACK,PARIS,15237,2017,1/10/2017 15:55,849\\nDog Senior Citizen or Disability Spayed Female,247,SPOTTED,AUTUMN,15108,2017,1/4/2017 14:13,850\\nDog Senior Citizen or Disability Neutered Male,100,BLACK/TAN,MICKEY,15205,2017,12/14/2016 8:41,851\\nDog Individual Neutered Male,309,RED,REGGIE,15140,2017,1/24/2017 16:31,852\\nDog Senior Citizen or Disability Spayed Female,335,WHITE/BROWN,SAGE,15238,2017,12/14/2016 16:16,853\\nDog Senior Citizen or Disability Neutered Male,108,BLACK/BROWN,ULEE,15238,2017,12/14/2016 16:16,854\\nDog Individual Neutered Male,101,WHITE,BRUISER,15017,2017,2/8/2017 11:37,855\\nDog Individual Spayed Female,173,BLACK/BROWN,GIA,15243,2017,1/13/2017 16:25,856\\nDog Individual Neutered Male,237,APRICOT,RUSTY,15017,2017,12/27/2016 12:38,857\\nDog Senior Citizen or Disability Spayed Female,91,WHITE,MOLLY,15143,2017,1/13/2017 16:25,858\\nDog Individual Spayed Female,25,RED,GYPSY,15236,2017,2/17/2017 9:54,859\\nDog Senior Citizen or Disability Neutered Male,186,WHITE/BROWN,RINGO,15235,2017,1/10/2017 16:19,860\\nDog Individual Spayed Female,19,BROWN,JASMINE,15221,2017,1/12/2017 9:36,861\\nDog Individual Spayed Female,330,WHITE,LILY,15205,2017,1/24/2017 9:02,862\\nDog Senior Citizen or Disability Spayed Female,343,BROWN,MAXIE,15235,2017,1/26/2017 14:44,863\\nDog Individual Spayed Female,123,MULTI,XENA,15065,2017,2/10/2017 16:17,864\\nDog Individual Spayed Female,153,BLUE,LIZZIE,15237,2017,12/27/2016 12:38,865\\nDog Senior Citizen or Disability Spayed Female,119,BLACK,JO-JO,15129,2017,2/15/2017 14:01,866\\nDog Individual Neutered Male,103,OTHER,DAKOTA,15122,2017,12/12/2016 16:17,867\\nDog Senior Citizen or Disability Spayed Female,264,BLACK,MARGOT,15238,2017,1/11/2017 11:06,868\\nDog Individual Neutered Male,73,TAN,JACK,15126,2017,12/15/2016 8:37,869\\nDog Individual Spayed Female,150,BLACK,LILY,15101,2017,12/15/2016 14:50,870\\nDog Individual Spayed Female,261,WHITE,LUCY,15147,2017,2/23/2017 11:00,871\\nDog Senior Citizen or Disability Spayed Female,240,WHITE,LUCY,15147,2017,2/23/2017 11:00,872\\nDog Individual Spayed Female,238,BRINDLE,ROSEBUD,15243,2017,3/13/2017 11:49,873\\nDog Senior Citizen or Disability Neutered Male,125,BLACK,ROCKY II,15143,2017,3/7/2017 16:09,874\\nDog Individual Neutered Male,303,BLACK,BINGO JACKSON,15202,2017,3/2/2017 8:47,875\\nDog Individual Neutered Male,323,BLACK/BROWN,BOSCO,15238,2017,1/6/2017 9:07,876\\nDog Senior Citizen or Disability Neutered Male,8,BLACK/BROWN,BOSCO,15238,2017,1/6/2017 9:07,877\\nDog Individual Neutered Male,103,WHITE/TAN,AJAY,15037,2017,1/9/2017 9:10,878\\nDog Individual Neutered Male,188,GOLD,JAKE,15238,2017,1/26/2017 8:35,879\\nDog Individual Male,5,WHITE,CODY,15243,2017,2/1/2017 9:20,880\\nDog Senior Citizen or Disability Spayed Female,273,APRICOT,CARMELA,15216,2017,1/30/2017 13:52,881\\nDog Individual Spayed Female,129,WHITE/BLACK,MISTY,15220,2017,12/30/2016 11:15,882\\nDog Individual Neutered Male,257,BRINDLE,BULLET,15035,2017,12/7/2016 9:57,883\\nDog Senior Citizen or Disability Neutered Male,173,WHITE,CHARLEY,15101,2017,2/8/2017 9:10,884\\nDog Individual Spayed Female,136,CREAM,PRINCESS,15229,2017,1/12/2017 14:57,885\\nDog Senior Citizen or Disability Spayed Female,158,WHITE/BLACK,KAYLA,15108,2017,2/10/2017 15:17,886\\nDog Senior Citizen or Disability Spayed Female,218,WHITE/FAWN,LIBBY,15122,2017,2/15/2017 15:54,887\\nDog Senior Citizen or Disability Neutered Male,316,BROWN,RUSTY,15120,2017,2/21/2017 15:46,888\\nDog Senior Citizen or Disability Neutered Male,233,TAN,ROCKY,15120,2017,2/21/2017 15:46,889\\nDog Individual Male,178,WHITE/BLACK,DEITZ,15215,2017,3/23/2017 10:04,890\\nDog Senior Citizen or Disability Spayed Female,151,WHITE,SUZE,15102,2017,3/1/2017 8:41,891\\nDog Individual Spayed Female,127,BLACK,MANDY LOGAN,15101,2017,3/2/2017 15:12,892\\nDog Senior Citizen or Disability Spayed Female,225,WHITE/TAN,MADDIE,15205,2017,1/18/2017 14:57,893\\nDog Individual Spayed Female,251,CHOCOLATE,MOCHA,15071,2017,12/14/2016 13:54,894\\nDog Individual Spayed Female,250,SPOTTED,BRANDY,15037,2017,12/22/2016 16:28,895\\nDog Individual Neutered Male,37,WHITE,SIMBA,15147,2017,2/17/2017 9:54,896\\nDog Senior Citizen or Disability Neutered Male,150,BLACK/TAN,MIKEY,15239,2017,3/6/2017 9:40,897\\nDog Individual Spayed Female,140,SPOTTED,ATHENA,15235,2017,1/24/2017 13:30,898\\nDog Senior Citizen or Disability Spayed Female,289,BLACK,KYLIE,15146,2017,12/28/2016 15:34,899\\nDog Senior Citizen or Disability Neutered Male,21,BLACK,OSCAR,15235,2017,1/20/2017 16:31,900\\nDog Individual Spayed Female,240,BLACK,COCKTAIL,15235,2017,1/5/2017 15:51,901\\nDog Individual Neutered Male,141,BLACK,RIVER,15205,2017,2/27/2017 12:31,902\\nDog Individual Spayed Female,98,BLACK,BELLE,15238,2017,12/8/2016 10:09,903\\nDog Senior Citizen or Disability Neutered Male,110,BLACK/SILVER,WOLFIE,15101,2017,1/6/2017 9:07,904\\nDog Individual Spayed Female,300,BLACK/BROWN,MARIO,15146,2017,12/7/2016 16:27,905\\nDog Individual Spayed Female,49,BLACK/BROWN,SIERRA,15044,2017,1/6/2017 15:17,906\\nDog Individual Neutered Male,97,BLACK,SHADOW,15076,2017,2/8/2017 14:10,907\\nDog Individual Neutered Male,59,BROWN,OZZY,15102,2017,1/5/2017 9:18,908\\nDog Senior Citizen or Disability Neutered Male,134,BROWN,OZZY,15102,2017,1/5/2017 9:18,909\\nDog Senior Citizen or Disability Spayed Female,340,SPOTTED,PEPSI,15227,2017,1/6/2017 9:09,910\\nDog Individual Spayed Female,126,BROWN,ANGEL,15065,2017,1/10/2017 10:04,911\\nDog Senior Citizen or Disability Neutered Male,230,BLACK/BROWN,JACK,15215,2017,12/29/2016 12:21,912\\nDog Individual Neutered Male,63,BLACK,PETE,15044,2017,1/9/2017 14:20,913\\nDog Individual Spayed Female,160,BROWN,GRACIE,15227,2017,2/24/2017 14:59,914\\nDog Individual Female,116,BLACK/BROWN,NAKITA,15025,2017,1/6/2017 15:49,915\\nDog Individual Spayed Female,298,WHITE/BLACK,DARLA,15017,2017,,916\\nDog Individual Spayed Female,105,WHITE/BLACK,DARLA,15017,2017,2/3/2017 16:13,917\\nDog Senior Citizen or Disability Male,16,BLACK/BROWN,DUKE,15209,2017,2/1/2017 9:20,918\\nDog Individual Neutered Male,77,WHITE/BLACK,DRIZZLE,15223,2017,3/8/2017 13:38,919\\nDog Senior Citizen or Disability Neutered Male,232,BLACK/TAN,PISTOL,15102,2017,1/19/2017 12:48,920\\nDog Individual Spayed Female,193,SPOTTED,ABBY,15202,2017,1/17/2017 14:56,921\\nDog Individual Neutered Male,197,YELLOW,LABATT BLUE,15243,2017,2/21/2017 15:57,922\\nDog Senior Citizen or Disability Neutered Male,274,BLACK,TEDDY,15116,2017,1/6/2017 11:41,923\\nDog Individual Spayed Female,170,WHITE/TAN,SPOTS,15209,2017,2/15/2017 15:55,924\\nDog Individual Female,23,FAWN,ISYSIS,15145,2017,2/3/2017 8:40,925\\nDog Individual Spayed Female,46,FAWN,ISYSIS,15145,2017,2/3/2017 8:40,926\\nDog Individual Spayed Female,144,WHITE/BLACK/BROWN,L BOW BOW,15137,2017,1/6/2017 15:17,927\\nDog Individual Spayed Female,292,WHITE,CAPPY,15220,2017,1/11/2017 11:05,928\\nDog Individual Spayed Female,317,BLACK,HAILEY,15126,2017,2/10/2017 10:59,929\\nDog Individual Neutered Male,310,BLACK,LEO,15243,2017,12/8/2016 10:09,930\\nDog Senior Citizen or Disability Spayed Female,114,BROWN,HENNIE,15104,2017,1/20/2017 10:11,931\\nDog Individual Spayed Female,19,BLACK,NALA,15218,2017,3/21/2017 13:20,932\\nDog Individual Spayed Female,168,BLACK,HARLEY REILLY,15239,2017,2/10/2017 11:03,933\\nDog Individual Neutered Male,263,BLACK/TAN,HERCULES,15238,2017,1/25/2017 16:23,934\\nDog Individual Neutered Male,303,BLACK,TOBY,15136,2017,12/16/2016 15:21,935\\nDog Individual Neutered Male,132,WHITE/BLACK,BIG GUY,15104,2017,3/22/2017 8:38,936\\nDog Individual Spayed Female,67,BLACK,HARLEY,15024,2017,1/31/2017 10:36,937\\nDog Senior Citizen or Disability Neutered Male,247,GREY,DEXTER,15139,2017,,938\\nDog Senior Citizen or Disability Neutered Male,83,GREY,DEXTER,15139,2017,2/14/2017 15:05,939\\nDog Senior Citizen or Disability Spayed Female,77,BLACK/TAN,KATIE,15235,2017,1/12/2017 14:57,940\\nDog Individual Neutered Male,170,BLACK,KOHL,15216,2017,1/19/2017 15:56,941\\nDog Individual Spayed Female,26,WHITE/BLACK,MANDY,15126,2017,1/5/2017 15:12,942\\nDog Senior Citizen or Disability Spayed Female,270,BROWN,RIGBY,15101,2017,1/5/2017 15:51,943\\nDog Individual Neutered Male,181,GOLD,JAKE,15227,2017,1/10/2017 11:21,944\\nDog Individual Spayed Female,52,WHITE,ZIEMA,15220,2017,2/17/2017 12:33,945\\nDog Individual Female,109,WHITE/BLACK/BROWN,DAISY,15037,2017,12/14/2016 16:17,946\\nDog Senior Citizen or Disability Spayed Female,302,WHITE,BROOKE,15146,2017,1/6/2017 15:17,947\\nDog Individual Spayed Female,254,BLACK,OUBOO,15071,2017,1/6/2017 11:41,948\\nDog Individual Neutered Male,7,BROWN,IKE,15237,2017,1/20/2017 15:56,949\\nDog Senior Citizen or Disability Neutered Male,29,WHITE,AMOS,15216,2017,1/25/2017 9:04,950\\nDog Senior Citizen or Disability Spayed Female,132,BROWN,SUGAR,15228,2017,12/14/2016 16:17,951\\nDog Individual Spayed Female,154,WHITE,CARLIE,15084,2017,1/23/2017 9:45,952\\nDog Individual Male,83,BLONDE,PEACHES,15133,2017,1/25/2017 10:03,953\\nDog Senior Citizen or Disability Neutered Male,19,BLACK,BUDDY,15108,2017,1/20/2017 13:33,954\\nDog Individual Male,342,BROWN,ZEKE,15145,2017,2/28/2017 9:24,955\\nDog Senior Citizen or Disability Spayed Female,89,BLACK/BROWN,WENDY,15116,2017,2/9/2017 16:08,956\\nDog Individual Male,166,WHITE/BLACK,SCOOTER,15235,2017,,957\\nDog Individual Male,48,WHITE/BLACK,SCOOTER,15235,2017,1/30/2017 16:33,958\\nDog Individual Spayed Female,170,SABLE,MISTY BLUE,15145,2017,1/17/2017 8:41,959\\nDog Senior Citizen or Disability Female,238,WHITE/BLACK/BROWN,TAZ,15108,2017,1/10/2017 16:19,960\\nDog Individual Spayed Female,148,BUFF,ZOEY,15090,2017,12/22/2016 15:36,961\\nDog Senior Citizen or Disability Spayed Female,212,BLACK,VICKI,15237,2017,1/4/2017 15:56,962\\nDog Senior Citizen or Disability Neutered Male,101,BLACK,SCOOBY,15102,2017,12/28/2016 16:13,963\\nDog Individual Spayed Female,183,BLACK,HANNAH,15229,2017,1/11/2017 15:44,964\\nDog Senior Citizen or Disability Neutered Male,198,BROWN,BUSTER,15205,2017,1/9/2017 16:02,965\\nDog Individual Neutered Male,39,WHITE/BROWN,SMOKEY,15101,2017,1/20/2017 16:32,966\\nDog Individual Neutered Male,62,BLACK/BROWN,TEDDY,15037,2017,3/1/2017 14:29,967\\nDog Individual Neutered Male,28,WHITE/TAN,BOOMER,15221,2017,1/9/2017 9:10,968\\nDog Senior Citizen or Disability Neutered Male,249,BROWN,PADDY,15227,2017,1/6/2017 9:09,969\\nDog Individual Neutered Male,215,BROWN,NOTTINGHAM,15146,2017,12/1/2016 13:49,970\\nDog Individual Male,242,BLACK/TAN/WHITE,PATCHES,15136,2017,2/3/2017 15:54,971\\nDog Individual Spayed Female,237,BLACK/BROWN,RAIN,15237,2017,1/6/2017 11:42,972\\nDog Individual Neutered Male,86,BLACK,TANGO,15228,2017,12/6/2016 11:33,973\\nDog Individual Spayed Female,219,WHITE/BLACK,TRIXIE,15146,2017,2/17/2017 11:51,974\\nDog Individual Spayed Female,155,BLACK/BROWN,BIZZO,15065,2017,1/9/2017 16:38,975\\nDog Senior Citizen or Disability Spayed Female,288,BLACK/BROWN,BIZZO,15065,2017,1/9/2017 16:38,976\\nDog Senior Citizen or Disability Neutered Male,75,WHITE,WILLIAM CHARLES,15238,2017,1/17/2017 9:11,977\\nDog Senior Citizen or Disability Male,57,BROWN,SEMINOLE WARRIOR,15110,2017,3/22/2017 11:21,978\\nDog Senior Citizen or Disability Male,45,BROWN,SEMINOLE WARRIOR,15110,2017,3/14/2017 8:47,979\\nDog Individual Neutered Male,283,BLACK,ROOSEVELT,15218,2017,2/15/2017 14:01,980\\nDog Senior Citizen or Disability Spayed Female,259,BLACK,ZOE,15056,2017,2/27/2017 13:21,981\\nDog Senior Citizen or Disability Neutered Male,340,WHITE/BLACK/BROWN,CASEY,15129,2017,2/15/2017 8:41,982\\nDog Individual Spayed Female,149,BLACK/BROWN,LAURA ASHLEY,15122,2017,12/9/2016 10:27,983\\nDog Individual Spayed Female,157,BLACK WITH WHITE,MADDY,15025,2017,3/21/2017 13:05,984\\nDog Individual Spayed Female,204,BLACK,MAZDA,15116,2017,1/6/2017 11:42,985\\nDog Individual Spayed Female,20,RED,LACY,15102,2017,1/12/2017 11:46,986\\nDog Individual Neutered Male,81,WHITE/BLACK,MIDNIGHT,15108,2017,2/2/2017 11:22,987\\nDog Individual Spayed Female,197,BLACK,LIZIE,15205,2017,12/2/2016 10:59,988\\nDog Individual Spayed Female,75,SPOTTED,SPARKY,15126,2017,12/21/2016 8:44,989\\nDog Individual Spayed Female,328,BLACK,ROSIE,15129,2017,1/13/2017 12:48,990\\nDog Senior Citizen or Disability Neutered Male,19,BLACK/BROWN,KHAN,15147,2017,12/12/2016 13:34,991\\nDog Individual Spayed Female,82,YELLOW,SONNI,15122,2017,1/17/2017 12:33,992\\nDog Individual Neutered Male,331,WHITE/BLACK,IVAN,15065,2017,1/10/2017 16:34,993\\nDog Individual Male,316,BROWN,UNCLE BOB,15044,2017,1/10/2017 16:19,994\\nDog Individual Spayed Female,262,WHITE/BLACK/BROWN,SHELBY,15223,2017,3/6/2017 8:45,995\\nDog Individual Spayed Female,216,WHITE/BLACK/BROWN,BELLA,15133,2017,3/24/2017 12:44,996\\nDog Individual Neutered Male,24,BLACK,CHUMLY,15227,2017,1/25/2017 16:03,997\\nDog Individual Neutered Male,148,BROWN,LUCKY,15108,2017,12/28/2016 16:14,998\\nDog Individual Neutered Male,59,BROWN,LIGHTENING,15108,2017,12/28/2016 16:14,999\\nDog Individual Spayed Female,203,BROWN,DAISY,15108,2017,12/28/2016 16:14,1000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait for csv_data_load to complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const test_name = 'Csv data load node 2'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"const job_id = pm.environment.get('JOB_ID')",
									"if (response.length === 0) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find a job with id: ${job_id}`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const status = response[0].status;",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        request_count++",
									"        pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"        console.log(`Waiting for \"${test_name}\" to complete`);",
									"        setTimeout(() => {}, 2000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        pm.test(`\"${test_name}\" has completed`, () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"            console.log(response);",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received ERROR status`);",
									"        break;",
									"        ",
									"    default:",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received unknown status`);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait and confirm csv_data_load data on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const expected_record_count = 1000;",
									"const test_name = 'Wait and confirm csv_data_load data on node 1'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"if (response.name === undefined) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find the table`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const record_count = response.record_count;",
									"if (record_count === expected_record_count) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.test(`\"${test_name}\" has completed`, () => {",
									"        pm.expect(record_count).to.equal(expected_record_count);",
									"        console.log(response);",
									"    });",
									"} else if (record_count < expected_record_count) {",
									"    request_count++",
									"    pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"    console.log(`Waiting for \"${test_name}\" to complete`);",
									"    setTimeout(() => {}, 2000);",
									"    postman.setNextRequest(pm.info.requestId);",
									"} else {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"    pm.expect.fail(`\"${test_name}\" receivedbad record_count`);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"csv_data_load\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Csv file load node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Job is started', () => {",
									"    const response = pm.response.json();",
									"    pm.environment.set('JOB_ID', response.message.split(' ')[4]);",
									"    pm.expect(response.message).to.include('Starting job with id');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"csv_file_load\",\n\t\"schema\": \"incredible_bulk\",\n\t\"table\": \"csv_file_load\",\n    \"file_path\": \"{{CSV_BASE_PATH}}/200000.csv\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait for csv_file_load to complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const test_name = 'Csv file load node 1'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"const job_id = pm.environment.get('JOB_ID')",
									"if (response.length === 0) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find a job with id: ${job_id}`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const status = response[0].status;",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        request_count++",
									"        pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"        console.log(`Waiting for \"${test_name}\" to complete`);",
									"        setTimeout(() => {}, 8000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        pm.test(`\"${test_name}\" has completed`, () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"            console.log(response);",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received ERROR status`);",
									"        break;",
									"        ",
									"    default:",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received unknown status`);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait and confirm csv_file_load data on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const expected_record_count = 200000;",
									"const test_name = 'Wait and confirm csv_file_load data on node 2'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"if (response.name === undefined) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find the table`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const record_count = response.record_count;",
									"if (record_count === expected_record_count) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.test(`\"${test_name}\" has completed`, () => {",
									"        pm.expect(record_count).to.equal(expected_record_count);",
									"        console.log(response);",
									"    });",
									"} else if (record_count < expected_record_count) {",
									"    request_count++",
									"    pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"    console.log(`Waiting for \"${test_name}\" to complete`);",
									"    setTimeout(() => {}, 20000);",
									"    postman.setNextRequest(pm.info.requestId);",
									"} else {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"    pm.expect.fail(`\"${test_name}\" receivedbad record_count`);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"csv_file_load\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Csv url load node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Job is started', () => {",
									"    const response = pm.response.json();",
									"    pm.environment.set('JOB_ID', response.message.split(' ')[4]);",
									"    pm.expect(response.message).to.include('Starting job with id');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"csv_url_load\",\n\t\"schema\": \"incredible_bulk\",\n\t\"table\": \"csv_url_load\",\n    \"csv_url\": \"https://harperdb-integration-test-data.s3.us-east-2.amazonaws.com/breeds.csv\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait for csv_url_load to complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const test_name = 'Csv url load node 2'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"const job_id = pm.environment.get('JOB_ID')",
									"if (response.length === 0) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find a job with id: ${job_id}`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const status = response[0].status;",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        request_count++",
									"        pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"        console.log(`Waiting for \"${test_name}\" to complete`);",
									"        setTimeout(() => {}, 2000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        pm.test(`\"${test_name}\" has completed`, () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"            console.log(response);",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received ERROR status`);",
									"        break;",
									"        ",
									"    default:",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received unknown status`);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait and confirm csv_url_load data on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const expected_record_count = 350;",
									"const test_name = 'Wait and confirm csv_url_load data on node 1'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"if (response.name === undefined) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find the table`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const record_count = response.record_count;",
									"if (record_count === expected_record_count) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.test(`\"${test_name}\" has completed`, () => {",
									"        pm.expect(record_count).to.equal(expected_record_count);",
									"        console.log(response);",
									"    });",
									"} else if (record_count < expected_record_count) {",
									"    request_count++",
									"    pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"    console.log(`Waiting for \"${test_name}\" to complete`);",
									"    setTimeout(() => {}, 2000);",
									"    postman.setNextRequest(pm.info.requestId);",
									"} else {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"    pm.expect.fail(`\"${test_name}\" receivedbad record_count`);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"csv_url_load\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Csv s3 load node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Job is started', () => {",
									"    const response = pm.response.json();",
									"    pm.environment.set('JOB_ID', response.message.split(' ')[4]);",
									"    pm.expect(response.message).to.include('Starting job with id');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"import_from_s3\",\n\t\"schema\": \"incredible_bulk\",\n\t\"table\": \"csv_s3_load\",\n    \t\"s3\":{\n\t\t\"aws_access_key_id\":\"{{S3_KEY}}\",\n\t\t\"aws_secret_access_key\":\"{{S3_SECRET}}\",\n\t\t\"bucket\":\"harperdb-integration-test-data\",\n\t\t\"key\":\"non_public_folder/dogs.csv\",\n        \"region\": \"us-east-2\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait for csv_s3_load to complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const test_name = 'Csv s3 load node 1'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"const job_id = pm.environment.get('JOB_ID')",
									"if (response.length === 0) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find a job with id: ${job_id}`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const status = response[0].status;",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        request_count++",
									"        pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"        console.log(`Waiting for \"${test_name}\" to complete`);",
									"        setTimeout(() => {}, 2000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        pm.test(`\"${test_name}\" has completed`, () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"            console.log(response);",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received ERROR status`);",
									"        break;",
									"        ",
									"    default:",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received unknown status`);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait and confirm csv_s3_load data on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const expected_record_count = 12;",
									"const test_name = 'Wait and confirm csv_s3_load data on node 2'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"if (response.name === undefined) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find the table`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const record_count = response.record_count;",
									"if (record_count === expected_record_count) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.test(`\"${test_name}\" has completed`, () => {",
									"        pm.expect(record_count).to.equal(expected_record_count);",
									"        console.log(response);",
									"    });",
									"} else if (record_count < expected_record_count) {",
									"    request_count++",
									"    pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"    console.log(`Waiting for \"${test_name}\" to complete`);",
									"    setTimeout(() => {}, 2000);",
									"    postman.setNextRequest(pm.info.requestId);",
									"} else {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"    pm.expect.fail(`\"${test_name}\" receivedbad record_count`);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_table\",\n    \"schema\": \"incredible_bulk\",\n    \"table\": \"csv_s3_load\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert large record into csv_s3_load node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into csv_s3_load node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\":\"insert\",\n\t\"schema\": \"incredible_bulk\",\n\t\"table\": \"csv_s3_load\",\n    \"records\": [\n    {\n      \"id\": 88,\n      \"remarks\": \"RIVERFRONT LIFESTYLE! New dock, new roof and new appliances. For sale fully furnished. Beautiful custom-built 2-story home with pool. Panoramic river views and open floor plan -- great for entertaining. Hardwood floors flow throughout. Enjoy sunsets over the St. Johns from covered lanai or family room with wood-burning fireplace. Large back yard, dock, boat lift, kayak area...endless lifestyle options for fishing, boating or just chilling. Spacious master suite includes seating area with gas fireplace. Additional bedroom or office, pool bath, and laundry room on 1st floor. Upstairs loft area, perfect for a game room, plus two bedrooms with upgraded baths in each. Kitchen features stainless steel appliances, granite countertops, cooking island, and walk-in pantry. 3-car garage with abundant Come see the kitchen remodel and new wood flooring.  Custom built by Howard White in 2007, this immaculate Deerwood home enjoys a view of the 18th fairway. From the moment you step into the foyer, you will be impressed with the bright, open floor plan. The Master suite features a large en suite bath with his and hers custom closets. The kitchen features high-end appliances,cabinetry and granite countertops. Retreat upstairs to an expansive library with cherry bookshelves. Additional bedrooms are spacious with large walk-in closets for extra storage. Plantation shutters throughout. Relax in the large hot tub/small pool with lounge chair shelf and fountain. Side entry 3 car garage is connected by a breezeway to home. Portion of back yard fenced for small dog. This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.  This amazing home includes impressive Brazilian hardwood floors, plantation shutters throughout, granite countertops, triple tray and wood beam ceilings and so much more.  Builder's touches include 24'' tiles, rounded corner walls, 5'' baseboards, 10 ft. ceilings, in-wall vacuum system and many more unique upgrades.  There are extensive custom touches on this property from the mailbox to the unique 3000 sq. ft. two level 3-stall barn with tons of storage space.Make this stunning traditional two story red brick house your forever home. Custom built in 2004, this home is spacious enough for large gatherings and cozy enough for small get togethers. Located on a large corner lot with side entry four car garage and fenced backyard, this home has it all inside and out. Inviting foyer is flanked by formal living room and dining room with wood floors, crown molding, and large windows. Large eat-in kitchen with custom made Pine Cottage cabinets, granite countertops, and stainless steel appliances is conveniently located next to family room. Separate downstairs flex space with attached full bath currently used as a playroom could be used as a 5th bedroom/guest or mother-in-law suite (no closet, but one could be easily added.) A beautiful waterfront home located on a deep water canal providing quick access to the St. Johns River and ocean. Spacious and open, the downstairs is perfect for both family activities and entertaining. Central to this is a large kitchen with extensive granite countertops, upgraded appliances, separate island and an adjacent laundry room. A great room with fireplace flows into Florida & game rooms which overlook the canal. From the leaded glass front door, the extensive crown molding, to the hardwood, marble and tile flooring, there are numerous upgrades throughout the house. Outside, a large backyard includes three separate patios surrounded by tropical landscaping maintained by automatic sprinklers. Along the concrete bulkhead, there are docks, davits and a 9,000lb. boat lift w Remote. Walk inside this Perfect Family Home and make it your own. Spacious Foyer opens to formal living room. Family room features brick fireplace, wet bar, and sliding glass doors to beautiful patio and lushly landscapped backyard. Recently updated Kitchen boasts granite countertops, abundance of cabinets with pull out drawers and breakfast nook. Large Master Suite offers multiple closets, separate vanities,walk-in shower and garden tub. Spacious room sizes and storage throughout.Bedroom and Bath arrangements were built for today's living and convenience.  Walk to neighborhood parks. A rated Hendricks Elementary also a walk or bike ride away. Pretty median treed street filled with homes of the era dead ending to riverfront homes. Wow! Pow! This one will knock you over! Like New! Meticulously cared for David Weekley home with all the bells and whistles! Telescoping sliders Open onto huge screened brick paver lanai with massive fireplace at end. Open concept floor plan has hardwood floors in all common areas, 3 way split bedroom plan, also has a study, formal dining room, sunroom, breakfast room - plenty of storage space, and room to spread out. Kitchen features a gorgeous large island, granite countertops, walk in pantry and upgraded stainless appliances lanai overlooks the park like, almost 1/2 acre fully fenced backyard with creek and preserve behind. Gated community no through traffic. Front view is a lake with fountain Heart of Mandarin.  If I could, I would buy this one myself! Rare opportunity to own a home on fabulous Heaven Trees road! OPEN HOUSE Saturday 4/28 from 2 - 5! This beautiful brick home is move in ready! This home offers abundant living space with light filled rooms and hardwood floors. The kitchen features a gas range, double ovens, and granite countertops. Enjoy the expansive backyard with complete privacy. Owners have made several improvements including: New A/C 6/16, New Electric Box and Circuit Breakers 11/16, Front Septic Tank and Drainage Field Replaced 8/16, Back Septic Tank Improvements 4/18, New Hot Water Heater 5/14, New Soft Water Treatment System 7/12, Wet Bar installed in Family Room with beverage cooler, ice maker; and more. Please note: Fogged window in Sunroom is being replaced! Wow! Spectacular opportunity to live in a charming, yet spacious, brick home in one the most highly desirable communities, Ortega Forest. This beautifully updated, one-story, pool home will be a beautiful place to make memories. The home features a large eat-in kitchen that has been fully renovated with custom cabinetry, granite countertops and upgraded, stainless appliances. A formal living and huge dining room are located at the front of the home. The family room/den features a gorgeous wood burning fireplace and overlooks the sparkling pool and backyard. The living and sleeping areas are separated. The large master bedroom features sizable his/her closets. The master and guest baths are renovated with custom cabinetry and marble countertops. Lovely updated home in desired gated community.  Large corner lot with new paver circular driveway. Great first impression entryway to open floor plan with warm wood floors. Separate Dining room, huge Family room with gas fireplace and custom mantel, and sitting or casual eating area. Spacious Kitchen with quartz countertops, stainless steel appliances, gas range, and breakfast bar. Large laundry room between garage and kitchen. Split bedrooms with private Master Bedroom overlooking fenced, landscaped backyard and screened lanai. Master Bath has granite countertops, double sinks, wood grain tile floors, tub and separate shower. Two guest Bedrooms and Bath opposite the master along with a 4th Bedroom or Bonus room upstairs with another full Bath. Close to Beaches and Shopping!\"\n    }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm long record inserted node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const long_text = \"RIVERFRONT LIFESTYLE! New dock, new roof and new appliances. For sale fully furnished. Beautiful custom-built 2-story home with pool. Panoramic river views and open floor plan -- great for entertaining. Hardwood floors flow throughout. Enjoy sunsets over the St. Johns from covered lanai or family room with wood-burning fireplace. Large back yard, dock, boat lift, kayak area...endless lifestyle options for fishing, boating or just chilling. Spacious master suite includes seating area with gas fireplace. Additional bedroom or office, pool bath, and laundry room on 1st floor. Upstairs loft area, perfect for a game room, plus two bedrooms with upgraded baths in each. Kitchen features stainless steel appliances, granite countertops, cooking island, and walk-in pantry. 3-car garage with abundant Come see the kitchen remodel and new wood flooring.  Custom built by Howard White in 2007, this immaculate Deerwood home enjoys a view of the 18th fairway. From the moment you step into the foyer, you will be impressed with the bright, open floor plan. The Master suite features a large en suite bath with his and hers custom closets. The kitchen features high-end appliances,cabinetry and granite countertops. Retreat upstairs to an expansive library with cherry bookshelves. Additional bedrooms are spacious with large walk-in closets for extra storage. Plantation shutters throughout. Relax in the large hot tub/small pool with lounge chair shelf and fountain. Side entry 3 car garage is connected by a breezeway to home. Portion of back yard fenced for small dog. This custom built dream home is stunningly gorgeous!  It is a 5+ acres luxury equestrian property with access to Jennings State Forest from your backyard, no need to trailer your horses anywhere for a beautifully scenic peaceful ride.  This amazing home includes impressive Brazilian hardwood floors, plantation shutters throughout, granite countertops, triple tray and wood beam ceilings and so much more.  Builder's touches include 24'' tiles, rounded corner walls, 5'' baseboards, 10 ft. ceilings, in-wall vacuum system and many more unique upgrades.  There are extensive custom touches on this property from the mailbox to the unique 3000 sq. ft. two level 3-stall barn with tons of storage space.Make this stunning traditional two story red brick house your forever home. Custom built in 2004, this home is spacious enough for large gatherings and cozy enough for small get togethers. Located on a large corner lot with side entry four car garage and fenced backyard, this home has it all inside and out. Inviting foyer is flanked by formal living room and dining room with wood floors, crown molding, and large windows. Large eat-in kitchen with custom made Pine Cottage cabinets, granite countertops, and stainless steel appliances is conveniently located next to family room. Separate downstairs flex space with attached full bath currently used as a playroom could be used as a 5th bedroom/guest or mother-in-law suite (no closet, but one could be easily added.) A beautiful waterfront home located on a deep water canal providing quick access to the St. Johns River and ocean. Spacious and open, the downstairs is perfect for both family activities and entertaining. Central to this is a large kitchen with extensive granite countertops, upgraded appliances, separate island and an adjacent laundry room. A great room with fireplace flows into Florida & game rooms which overlook the canal. From the leaded glass front door, the extensive crown molding, to the hardwood, marble and tile flooring, there are numerous upgrades throughout the house. Outside, a large backyard includes three separate patios surrounded by tropical landscaping maintained by automatic sprinklers. Along the concrete bulkhead, there are docks, davits and a 9,000lb. boat lift w Remote. Walk inside this Perfect Family Home and make it your own. Spacious Foyer opens to formal living room. Family room features brick fireplace, wet bar, and sliding glass doors to beautiful patio and lushly landscapped backyard. Recently updated Kitchen boasts granite countertops, abundance of cabinets with pull out drawers and breakfast nook. Large Master Suite offers multiple closets, separate vanities,walk-in shower and garden tub. Spacious room sizes and storage throughout.Bedroom and Bath arrangements were built for today's living and convenience.  Walk to neighborhood parks. A rated Hendricks Elementary also a walk or bike ride away. Pretty median treed street filled with homes of the era dead ending to riverfront homes. Wow! Pow! This one will knock you over! Like New! Meticulously cared for David Weekley home with all the bells and whistles! Telescoping sliders Open onto huge screened brick paver lanai with massive fireplace at end. Open concept floor plan has hardwood floors in all common areas, 3 way split bedroom plan, also has a study, formal dining room, sunroom, breakfast room - plenty of storage space, and room to spread out. Kitchen features a gorgeous large island, granite countertops, walk in pantry and upgraded stainless appliances lanai overlooks the park like, almost 1/2 acre fully fenced backyard with creek and preserve behind. Gated community no through traffic. Front view is a lake with fountain Heart of Mandarin.  If I could, I would buy this one myself! Rare opportunity to own a home on fabulous Heaven Trees road! OPEN HOUSE Saturday 4/28 from 2 - 5! This beautiful brick home is move in ready! This home offers abundant living space with light filled rooms and hardwood floors. The kitchen features a gas range, double ovens, and granite countertops. Enjoy the expansive backyard with complete privacy. Owners have made several improvements including: New A/C 6/16, New Electric Box and Circuit Breakers 11/16, Front Septic Tank and Drainage Field Replaced 8/16, Back Septic Tank Improvements 4/18, New Hot Water Heater 5/14, New Soft Water Treatment System 7/12, Wet Bar installed in Family Room with beverage cooler, ice maker; and more. Please note: Fogged window in Sunroom is being replaced! Wow! Spectacular opportunity to live in a charming, yet spacious, brick home in one the most highly desirable communities, Ortega Forest. This beautifully updated, one-story, pool home will be a beautiful place to make memories. The home features a large eat-in kitchen that has been fully renovated with custom cabinetry, granite countertops and upgraded, stainless appliances. A formal living and huge dining room are located at the front of the home. The family room/den features a gorgeous wood burning fireplace and overlooks the sparkling pool and backyard. The living and sleeping areas are separated. The large master bedroom features sizable his/her closets. The master and guest baths are renovated with custom cabinetry and marble countertops. Lovely updated home in desired gated community.  Large corner lot with new paver circular driveway. Great first impression entryway to open floor plan with warm wood floors. Separate Dining room, huge Family room with gas fireplace and custom mantel, and sitting or casual eating area. Spacious Kitchen with quartz countertops, stainless steel appliances, gas range, and breakfast bar. Large laundry room between garage and kitchen. Split bedrooms with private Master Bedroom overlooking fenced, landscaped backyard and screened lanai. Master Bath has granite countertops, double sinks, wood grain tile floors, tub and separate shower. Two guest Bedrooms and Bath opposite the master along with a 4th Bedroom or Bonus room upstairs with another full Bath. Close to Beaches and Shopping!\"",
									"",
									"pm.test('Confirm records inserted node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].remarks).to.equal(long_text);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select remarks from incredible_bulk.csv_s3_load where id = 88\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'incredible_bulk' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('incredible_bulk schema deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'incredible_bulk'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 3000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"incredible_bulk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'incredible_bulk' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('incredible_bulk schema deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'incredible_bulk'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 3000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"incredible_bulk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 1', () => {",
									"    const response = pm.response.json();",
									"    const node2_name = pm.environment.get('NODE2_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node2_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\":\"{{NODE2_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Four node",
			"item": [
				{
					"name": "Create table 'frog' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('frog table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'four.frog' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"four\",\n    \"table\": \"frog\",\n    \"hash_attribute\": \"name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'frog' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('frog table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'four.frog' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"four\",\n    \"table\": \"frog\",\n    \"hash_attribute\": \"name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'frog' node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('frog table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'four.frog' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"four\",\n    \"table\": \"frog\",\n    \"hash_attribute\": \"name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'frog' node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('frog table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'four.frog' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"four\",\n    \"table\": \"frog\",\n    \"hash_attribute\": \"name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'bird' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('bird table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'four.bird' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"four\",\n    \"table\": \"bird\",\n    \"hash_attribute\": \"name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'bird' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('bird table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'four.bird' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"four\",\n    \"table\": \"bird\",\n    \"hash_attribute\": \"name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'bird' node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('bird table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'four.bird' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"four\",\n    \"table\": \"bird\",\n    \"hash_attribute\": \"name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'bird' node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('bird table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'four.bird' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"four\",\n    \"table\": \"bird\",\n    \"hash_attribute\": \"name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Configure cluster node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Configure cluster success message', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get('NODE1_NAME');",
									"    const node3_name = pm.environment.get('NODE3_NAME');",
									"    const node4_name = pm.environment.get('NODE4_NAME');",
									"    const node1_host = pm.environment.get('NODE1_HOST');",
									"    const node3_host = pm.environment.get('NODE3_HOST');",
									"    const node4_host = pm.environment.get('NODE4_HOST');",
									"    const port = pm.environment.get('REPLICATION_PORT')",
									"",
									"    const expected_result = {",
									"    \"message\": \"Configure cluster complete.\",",
									"    \"connections\": [",
									"        {",
									"            \"node_name\": node1_name,",
									"            \"response\": `Successfully added 'wss://${node1_host}:${port}' to cluster`",
									"        },",
									"        {",
									"            \"node_name\": node3_name,",
									"            \"response\": `Successfully added 'wss://${node3_host}:${port}' to cluster`",
									"        },",
									"        {",
									"            \"node_name\": node4_name,",
									"            \"response\": `Successfully added 'wss://${node4_host}:${port}' to cluster`",
									"        }",
									"    ]",
									"    }",
									"    pm.expect(response).to.eql(expected_result);",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"configure_cluster\",\n    \"connections\": [\n         {\n            \"node_name\": \"{{NODE1_NAME}}\",\n            \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n            \"verify_tls\": false,\n            \"authorization\": {\n                \"username\": \"{{USERNAME}}\",\n                \"password\": \"{{PASSWORD}}\"\n            },\n            \"subscriptions\": [\n                {\n                    \"schema\": \"four\",\n                    \"table\": \"frog\",\n                    \"publish\": true,\n                    \"subscribe\": true\n                },\n                {\n                    \"schema\": \"four\",\n                    \"table\": \"bird\",\n                    \"publish\": true,\n                    \"subscribe\": true\n                }\n            ]\n        },\n        {\n            \"node_name\": \"{{NODE3_NAME}}\",\n            \"url\": \"wss://{{NODE3_HOST}}:{{REPLICATION_PORT}}\",\n            \"verify_tls\": false,\n            \"authorization\": {\n                \"username\": \"{{USERNAME}}\",\n                \"password\": \"{{PASSWORD}}\"\n            },\n            \"subscriptions\": [\n                {\n                    \"schema\": \"four\",\n                    \"table\": \"frog\",\n                    \"publish\": false,\n                    \"subscribe\": true\n                },\n                {\n                    \"schema\": \"four\",\n                    \"table\": \"bird\",\n                    \"publish\": true,\n                    \"subscribe\": true\n                }\n            ]\n        },\n        {\n            \"node_name\": \"{{NODE4_NAME}}\",\n            \"url\": \"wss://{{NODE4_HOST}}:{{REPLICATION_PORT}}\",\n            \"verify_tls\": false,\n            \"authorization\": {\n                \"username\": \"{{USERNAME}}\",\n                \"password\": \"{{PASSWORD}}\"\n            },\n            \"subscriptions\": [\n                {\n                    \"schema\": \"four\",\n                    \"table\": \"frog\",\n                    \"publish\": true,\n                    \"subscribe\": false\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node4_name = pm.environment.get(\"NODE4_NAME\");",
									"    const node3_name = pm.environment.get(\"NODE3_NAME\");",
									"    pm.expect(response.connections.length).to.equal(3);",
									"",
									"    response.connections.forEach((node) => {",
									"        if (node.name === node1_name) {",
									"            pm.expect(node.subscriptions).to.have.deep.members([",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"frog\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                },",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"bird\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                }",
									"            ])",
									"        } else if (node.name === node3_name) {",
									"            pm.expect(node.subscriptions).to.have.deep.members([",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"frog\",",
									"                    \"publish\": false,",
									"                    \"subscribe\": true",
									"                },",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"bird\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                }",
									"            ])",
									"        } else if (node.name === node4_name) {",
									"            pm.expect(node.subscriptions).to.have.deep.members([",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"frog\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": false",
									"                }",
									"            ])",
									"        } else {",
									"            pm.expect.fail('Cluster status node 2 check recievied unknown node');",
									"        }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 1', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get(\"NODE1_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"",
									"    pm.expect(response.node_name).to.equal(node1_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node2_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"frog\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                },",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"bird\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 4', () => {",
									"    const response = pm.response.json();",
									"    const node4_name = pm.environment.get(\"NODE4_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"",
									"    pm.expect(response.node_name).to.equal(node4_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node2_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"frog\",",
									"                    \"publish\": false,",
									"                    \"subscribe\": true",
									"                }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Cluster status node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct cluster status node 3', () => {",
									"    const response = pm.response.json();",
									"    const node3_name = pm.environment.get(\"NODE3_NAME\");",
									"    const node2_name = pm.environment.get(\"NODE2_NAME\");",
									"    const connection = response.connections[0];",
									"",
									"    pm.expect(response.node_name).to.equal(node3_name);",
									"    pm.expect(response.is_enabled).to.equal(true);",
									"    pm.expect(response.connections.length).to.equal(1);",
									"    pm.expect(connection.name).to.equal(node2_name);",
									"    pm.expect(connection.subscriptions).to.have.deep.members([",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"frog\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": false",
									"                },",
									"                {",
									"                    \"schema\": \"four\",",
									"                    \"table\": \"bird\",",
									"                    \"publish\": true,",
									"                    \"subscribe\": true",
									"                }",
									"        ]",
									"    )",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert bird node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into four.bird node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"four\",\n    \"table\": \"bird\",\n    \"records\": [\n        {\n            \"type\":\"Owl\",\n            \"name\":\"1\"\n        },\n        {\n            \"type\":\"Penguin\",\n            \"name\":\"2\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 bird insert on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm bird insert on node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Owl\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Penguin\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.bird\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 bird insert not on node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm bird insert not on node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from four.bird\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 bird insert not on node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm bird insert not on node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from four.bird\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert frog node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into four.frog node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"four\",\n    \"table\": \"frog\",\n    \"records\": [\n        {\n            \"type\":\"Bullfrog\",\n            \"name\":\"1\"\n        },\n        {\n            \"type\":\"Gray treefrog\",\n            \"name\":\"2\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 frog insert on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert on node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Bullfrog\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Gray treefrog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 frog insert not on node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert not on node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 frog insert not on node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert not on node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.record_count).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_table\",\n\t\"schema\": \"four\",\n    \"table\": \"frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert bird node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into four.bird node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 2 of 2 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"four\",\n    \"table\": \"bird\",\n    \"records\": [\n        {\n            \"type\":\"Chicken\",\n            \"name\":\"3\"\n        },\n        {\n            \"type\":\"Crow\",\n            \"name\":\"4\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 4 bird insert not on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm bird insert not on node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Owl\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Penguin\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.bird\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 4 bird insert not on node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm bird insert not on node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from four.bird\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 4 bird insert not on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm bird insert not on node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Owl\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Penguin\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.bird\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert frog node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into four.frog node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"four\",\n    \"table\": \"frog\",\n    \"records\": [\n        {\n            \"type\":\"Leopard frog\",\n            \"name\":\"3\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 4 frog insert not on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert not on node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Bullfrog\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Gray treefrog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 4 frog insert not on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert not on node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Bullfrog\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Gray treefrog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 4 frog insert not on node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert not on node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert frog node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into four.frog node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"four\",\n    \"table\": \"frog\",\n    \"records\": [\n        {\n            \"type\":\"Poison Dart frog\",\n            \"name\":\"4\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 3 insert not on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert not on node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Bullfrog\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Gray treefrog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 3 insert on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert on node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(3);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Bullfrog\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Gray treefrog\"",
									"        },",
									"        {",
									"            \"name\": \"4\",",
									"            \"type\": \"Poison Dart frog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 3 insert not on node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert not on node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(1);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"3\",",
									"            \"type\": \"Leopard frog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert frog node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into four.frog node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"four\",\n    \"table\": \"frog\",\n    \"records\": [\n        {\n            \"type\":\"Pickerel frog\",\n            \"name\":\"5\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 2 insert on node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert on node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"3\",",
									"            \"type\": \"Leopard frog\"",
									"        },",
									"        {",
									"            \"name\": \"5\",",
									"            \"type\": \"Pickerel frog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 2 insert on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert on node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(3);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"1\",",
									"            \"type\": \"Bullfrog\"",
									"        },",
									"        {",
									"            \"name\": \"2\",",
									"            \"type\": \"Gray treefrog\"",
									"        },",
									"        {",
									"            \"name\": \"5\",",
									"            \"type\": \"Pickerel frog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 2 insert not on node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm frog insert not on node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(1);",
									"    pm.expect(response).to.have.deep.members([",
									"        {",
									"            \"name\": \"4\",",
									"            \"type\": \"Poison Dart frog\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select name, type from four.frog\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get('NODE1_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node1_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\":\"{{NODE1_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 2', () => {",
									"    const response = pm.response.json();",
									"    const node3_name = pm.environment.get('NODE3_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node3_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\":\"{{NODE3_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 2', () => {",
									"    const response = pm.response.json();",
									"    const node4_name = pm.environment.get('NODE4_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node4_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\":\"{{NODE4_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema four node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('four schema deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'four'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"four\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema four node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('four schema deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'four'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"four\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema four node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('four schema deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'four'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"four\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema four node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('four schema deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'four'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"four\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Plexus",
			"item": [
				{
					"name": "Create table 'plexus' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('plexus table created', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'data.plexus' successfully created.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"table\": \"plexus\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 target node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Add node success message', () => {",
									"    const response = pm.response.json();",
									"    const node_host = pm.environment.get(\"NODE1_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.equal(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
									"});",
									"",
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm node 1 table replicated to node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm node 1 table replicated to node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.name).to.equal('plexus');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"describe_table\",\n    \"table\": \"plexus\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 3 target node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Add node success message', () => {",
									"    const response = pm.response.json();",
									"    const node_host = pm.environment.get(\"NODE2_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.eql(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
									"});",
									"",
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE2_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm hdb_nodes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Three records in hdb_nodes node-1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(3)",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm hdb_nodes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Three records in hdb_nodes node-2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(3)",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm hdb_nodes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Three records in hdb_nodes node-3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(3)",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert plexus node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"plexus\",\n    \"records\": [\n        {\n            \"id\":\"1\",\n            \"test\":\"this is a good test of strength\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert plexus node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"plexus\",\n    \"records\": [\n        {\n            \"id\":\"2\",\n            \"test\":\"will these sentences stand the test of time?\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert plexus node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"plexus\",\n    \"records\": [\n        { \n            \"id\":\"3\",\n            \"test\":\"his job is to test for air and water pollution\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"this is a good test of strength\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"will these sentences stand the test of time?\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"his job is to test for air and water pollution\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"this is a good test of strength\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"will these sentences stand the test of time?\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"his job is to test for air and water pollution\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"this is a good test of strength\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"will these sentences stand the test of time?\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"his job is to test for air and water pollution\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 4 target node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Add node success message', () => {",
									"    const response = pm.response.json();",
									"    const node_host = pm.environment.get(\"NODE1_HOST\");",
									"    const port = pm.environment.get(\"REPLICATION_PORT\");",
									"    pm.expect(response.message).to.equal(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
									"});",
									"",
									"setTimeout(()=>{}, 2000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm hdb_nodes node 1 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Four records in hdb_nodes node-1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(4)",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm hdb_nodes node 2 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Four records in hdb_nodes node-2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(4)",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm hdb_nodes node 3 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Four records in hdb_nodes node-3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(4)",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm hdb_nodes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Four records in hdb_nodes node-4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(4)",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update plexus node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records updated plexus node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"updated 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update\",\n    \"table\": \"plexus\",\n    \"records\": [\n        {\n            \"id\":\"1\",\n            \"test\":\"Other than the test drive, it was the first time he had driven it.\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update plexus node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records updated plexus node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"updated 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update\",\n    \"table\": \"plexus\",\n    \"records\": [\n        {\n            \"id\":\"2\",\n            \"test\":\"Sure, as long as there won't be a test\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update plexus node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records updated plexus node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"updated 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update\",\n    \"table\": \"plexus\",\n    \"records\": [\n        {\n            \"id\":\"3\",\n            \"test\":\"A DNA test would start around five hundred bucks.\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert plexus node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"plexus\",\n    \"records\": [\n        { \n            \"id\":\"4\",\n            \"test\":\"He wishes to test me!\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert node 1 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"Other than the test drive, it was the first time he had driven it.\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"Sure, as long as there won't be a test\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"A DNA test would start around five hundred bucks.\"",
									"    },",
									"    { ",
									"        \"id\":\"4\",",
									"        \"test\":\"He wishes to test me!\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert node 2 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"Other than the test drive, it was the first time he had driven it.\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"Sure, as long as there won't be a test\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"A DNA test would start around five hundred bucks.\"",
									"    },",
									"    { ",
									"        \"id\":\"4\",",
									"        \"test\":\"He wishes to test me!\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert node 3 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"Other than the test drive, it was the first time he had driven it.\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"Sure, as long as there won't be a test\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"A DNA test would start around five hundred bucks.\"",
									"    },",
									"    { ",
									"        \"id\":\"4\",",
									"        \"test\":\"He wishes to test me!\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"Other than the test drive, it was the first time he had driven it.\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"Sure, as long as there won't be a test\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"A DNA test would start around five hundred bucks.\"",
									"    },",
									"    { ",
									"        \"id\":\"4\",",
									"        \"test\":\"He wishes to test me!\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Replicated deploy_component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('valid response', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include(`Successfully deployed`);",
									"    pm.expect(response.replicated.length).to.equal(3);",
									"    pm.expect(response.replicated[0].message).include(`Successfully deployed`);",
									"    pm.expect(response.replicated[1].message).include(`Successfully deployed`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"deploy_component\",\n    \"project\": \"deploy-test-payload-tar-gz\",\n    \"replicated\": true,\n    \"payload\": \"H4sIAAh0mmYAA+08W2wk2VXtzWzYLVZipIgNCRK62Atjz7Sr3922w+xO9cPumumHp7s9fixhprrqdnfZ9eiph9vt0cBHQKwitFL4AJZEUVA+AsrPJoqUlQIB5QMkxEp8QISQCBCEeAuEIDy0Ujjn3uqHezxre3fsDdk+Y7u7bt3zvPeec8+5VSNGQucO0Wg0k0oR9pnmn9F4kn8GQGLJNPzLxKOxKInGEolkLERS5y9aKOS7nuKAKJqyr2uqre5RRzeMR/tBt1brbegEegw//5+AGBHvluRcoVIvnBsPsEc6mXzs+MdiqTiMfzITTWeSyTSOfzKViYdI9NwkGoP3+fiHnn7+B0JPhUJlRSXVOtkiAWBb6Fn4jYdCTy3BJ1w/tXs6klKjUePfEGPmHvwKE10u8fbQrVAootqmqHS7BhVN6ima4ikre+W87FHzFu13O47i0pxttXSNWip1GfrMF+FPJxS6egrcktKkhhvI8yH4cw1+ToF3hzqublsc70X4E4bV8ni8Bj3wQEyPWl5Jsdq+0qaI2ewauutFo5+feeoDcy/9yV88nSl++cbcS3/w7Xm8O/fSJ/6O4JdnnvvhH+MizsyMTHQEroyT+pmWQymxW0TtKE6b3r38Ic1WfROYKx4ITVq6Qd27ly93QQm4tJueolu61X7muR+NncAnP+Bz+blnJrrOTHQVBl1r1Dqp7w+GpvA9CGJkXTkoUkWjTuS84sAJ/j8eS0/6/3QiEQ2RgycuyTHwPvf/sXiGlOSsVMsV5TsF8UDxPOdsXu76tpV1la1KtJzP1nc2k7I0gNsFafRdOgZcIRZdInVgXdp+R6zP4n+EWDxxFlUnA8GYntLtvNQeKJEd0y17nJa5NqiZPK2aj7A9gzsW4tF3piKPkWMa5nal23J+y9zp72xutJvx7fZ2vNNRTc3YOpAaO2vLu9pmzGhatY62Zuw39aypbB4YamzpdqGYNVSrgm3723Bf2Ux1m6Yq57PuwXEz41iTFW4LsfTZTRaocVGBEmRcfkfmHtvOPGJz+TCykbi9kaiXbkrwvZjU+UyTD6/lU/1gRkm9O8XhBCyMmfDYZWYJsWT0zMYcF/IJ7mImd4JTeE9BPLeoP4KT4n80lZ7M/xLp2DT/uwgoyw1S0lVquVQQcna37+jtjkfm1QUSj0LALCoOuMZ8NkxkSxUFYZ06pu5iYCK6SzrUoc0+aTsKxGUtTI462zDxbKJYfTLpXIlCVGAlQE+vA2Rcu+X1FIdCZ40ormurugL0yDGumsx7HUpm6wHG7AJjolHFEHSL4L3BLdLTvY7te8ShrufoKtIIE91SDV9DGQa3Dd3UAw6IzvR3BSDqu6AByhkmpq3pLfykTK2u3wR/2AkTTUfSTd+DRhcbmSHDqEfEdohLDUMACjrIzXQdScf6oOhdNKgXmMjFll7HNo9qortCy3csYEkZjmaDyRjHXap62ILdW7Zh2D1UTbUtTUeN3BVBaMAtpWnvU6YLH17L9kBULgIOQHc0qsEtt6MYBmnSwGDAF8yrjKnjIHtYFJanKwbp2g7jN6kmzJhGsUDq1dXGplQrELlO1mvVO3K+kCezUh2uZ8NkU24UqxsNAj1qUqWxTaqrRKpsk1tyJR8mha31WqFeJ9WaIJfXS3IB2uRKrrSRlytrJAt4lSrMYRlmMhBtVAkyDEjJhToSKxcgQsOllJVLcmM7LKzKjQrSXK3WiETWpVpDzm2UpBpZ36itV+sFYJ8HshW5sloDLoVyodIQgSu0kcIduCD1olQqIStB2gDpaygfyVXXt2vyWrFBitVSvgCN2QJIJmVLBc4KlMqVJLkcJnmpLK0VGFYVqNQE7MalI5vFAjYhPwl+cg25WkE1ctVKowaXYdCy1hiibsr1QphINbmOBlmtVcthAc0JGFVGBPAqBU4FTU2OjAh0weuNemFIkOQLUglo1REZVRx0Ft9rbzWFJw1ixFU71FRE8OHdzv1jAt+7hxPifzQTfyT/j03rvxcDc3OkSDFYQnhQLAikLd2iLGh7ShPjLbh923cIpghNyApE0sCAQQ8UE7IHCBN2D7YBdg8JDJCJ1+/Ch4vfkAhEUohKArDC0MBuWorJerAG1oe3QEByu1SFYItxDOIi8AKxZukBRphZouwrusH6B9EeQkODodlw5YBcHnUsDEiO7dmqbbiiwBg2EKmCPG5wfjc4SfJAwHK3rq0QOU9udB3dVJw+JEFkZJhAr+Ae2YOb8ybMGwyPtkUXGAWUf4XUYTsAgs8dY08uIGZfbMPAN08M1VPaQ8wbuqXRAwi3QxKBPRiNMWyvo3hoft/QeJhmaMLDM+ZXYkTFPK8t9hXzXBZ/6DT7/9TE+k+losnp+r8ImOPrmc9Tvh75hPAdvice7NGxWqCrrE0kBUXtDHEUMg9bwQXAM7uwHCyPz03AMWwFd46wPIU53E5rsEd1jiEHW1SXjvBdNu9hBcOI0GD+6ypp+RbbxCuG7vXZmg9WF7of2J+3YD1ZHnDiiQI4iD56LuBEcBPNhREF9BgrxHN8SshcwDrgxfUvNhrr3K/okNU4LUWlTG7cEHOnAYpAUgHEVeoKQeCsszC6MqLpUEVzyRrevV0iPMq6PFlhUiMr3oo2HvjXCHe7kdFKF8FHMI1WyJWrgzB9BdgYtr3nBhZFhqyTgAJ0Fa+zQiLwbSjvfR/mNQ6Wgz6LZzq27bGuBFI4EErxDU/YdWuBZiuAXrJRh5vgdeuqo3c9TIR8NK7rwwRgwwyUdCfgw8kPeYK6IzMNlRg2ibsu4SEBhg38KqfNFBpHO1adYYeTFApDfrcHU8TzuiuRiEudfepEBtiL6LSFluJ64GBrNlp7hQQrwmCq86nEFA2GLegNzJgbZqFt0HgFxPE9e5FNNWdMZdY3chU0hkaujgiMHGrACoDMLMjgYKoykQKhJ6Qe3I0wclx2FzNXdSi0ghkgjA5rHQhvY3zQdAdSRQPWjQpWc3WYZCAKWmwFAk1zJCtcRK5eZXY37LZu4bdgAKalu+8/wOc/agUpXy6IpnZOPE7a/8fT0cn4H00mpvH/QuAUz3+EfjbEnv8IvX46kqPnPxjG5+D38kSXmVH7R0dnEQa4UdwmQDCkc+t17PjfD19jVv/p//z9p9+VnlM4FsbP/8/LD5y4/qOT6z+dysSm5/8XAW9/gjmxIK9fK8Z3dtjBY1ZdVrdX+fmikFp+3OniJIHJ5TzdUrzHIJ7bqh/BSfl/PJ2ZPP9LJzLT+H8RMDc84SPSKCUnDWp2ITeheHwEeYXOanlBG8vQmr5usGO0lwf4H5/HdMWFfKXX64kd1qo1Rd2OLIxn+65Itm2fF8fsnoWpEq8IOLRru7pnQybISoc4Lh5y6NqQhx9lOk6PHeQNtRBJwyZt6nF0PJM0FUilXB/SxD7w7SiQbr2sW3DbMCCRfFR6zVbdI+JjQyTAWBzcWAiTXkeHJBgVgfzqvq+re5BeabbFTx7JPatrkgCNLLbJAPPeyACOP6pRDE3fcoLjP56yoT16WCpk4g9MhueAvFTjsYLJoEozZkQUYkUQ7g34Mm4RTOUinh1BtovA9p4gzINl9RYjT7HgEaS7A+5hdmcgLuPqO1hpGRMQBuwoH/HegigIq0DZtPEA04LhM7l+ShNPXWGI2OAGw3R0EFlx59jBDhMXT5jBZJME2r6useNGNMNwqganl7yw83JQEzha4fr4/JEa6HBgg7oT5eVtnktjsaEDwhn8PHRy7ER+2vry0SMVZHC0ZQEX1Fj9h5UW9EEtjK83vG0qwOSYdcD7Q1N/vDQfUAuPV9C5KkEpH8expwANNG8PB3lUZYqApobG2PYHZWVcKwOVxqs2qND49cKofjbhJYaCjpWQBphEhc2BS2FIsacKftg29UMsG40tBixBqENTU0tjRnCnB5FPCkTwCOqe0qYwjsHD7k8cTtz/x2OT+X86MT3/uxDA469ZLCXOrpDZsZW3OFjHs2Hssc8fRsVOMTEqRnkrrHi2poM70mO2CCO3PubJOQU8m0NUXvudPfPx1RTeJYgRsa1758vjpPX/6PlfMpZITdf/RQAMPmzjVojIJ0IkOOCJHOcKpmvz+w+w/j++lzsPHic+/zN6/zeaSSTZ8z+J9HT9Xwicov4/82qI1f9nfu90JEf1f8SYwddW3pjo8oGg/YdCoQ+PqoX4ik/BUm3cNXD8D4dOcUYA/a7An9dCoczx7zWw90LuptSDBFVcfc/q7/sd6ie9tn4/vds99AHZ91qLSx+LJZLxWGZ5Kbl//9fZYL/wSuoF/Pz3O61LvTd/4gs/9Zlvf/nTv/3a737QaP3cVz7x9T988NkvXfrzb33zX3519bc+an29n369+Mtv/vOvLYrPh775xt4/fOMXyq985CPfzf/iH3/rburfPqn963e+uvepFy6Vfv5XUs9+9c6ffc41X3/xrUt/9Z3feBD+5H+I//Ob//TBP3rrT7/R/O4/lvU3P/PZG1uXficv/H3tRflv1qt/+SNvdX9p679eefWNn/zalue2nv/fVz/92l8bf/tOh30A4/X/8/IDJ6x/iPapifWfSWfS0/r/RUA8Q0xPN+n1WCYeSyxnMvGkGM8kY7GMEF+KnfbtppMW2PUlY8fMFluVm4q6ZFVv9c1Mf2e/t+PuWNei7UzmFk2lD7IVh8b8+Fbt/p7SdFKpipOV99yEa+ai/mo7v+mv7Xd79p2Knt3biUTrxWgl1aq0crd2qpG4F/drN6VauXNzO5ZrapvxW9nDZlO6FpEa7eX7q5mS7ERL+6ad7jXLkcpWbns/cr+xaVWsmylpU6ov1yTH3thN3UzGsuuJg90lVT7YXk7qVT+nZDaLtcOdThMU8XeSm4eGEI+nT/M21YlG+Z51KsLZToU0a03hp0LSnp7f2DvzqdCktxXSybfjPx4mrmtbNbPUaGfKjXK0vFtIVBvtqAAJxWNYH8GdcPrvx/2teG5efwQn+X/+/3+M+/9UJj59/uNCIHL16uMeAB/VbBexvHzkoTtLY49aW64evLTES8yCEDxVzWq7pNzPsbLu4JFCjoNVZtZbHD2U/UB4NhKZkAErvnbPCkrDZL1abwTFd0d4tmu73nxw/LGA6IjP3osCF9wZvN/Fqug6LHczeC0Ku38MOjvU8x2LuH6XOuIRWnD3IRNmWJQma4Uxxm3qzQ8ZBgLz18MGJzCBrk3awqMPzgmff5/gyggxbg8FcjUijMgphmuPHqYPhBjSHby3poyejGXmPGr6NYdSPDVoKM7a4dDuw4Hg9lbIbJEahh0mPdsxtB+fPU7NQOgHpB2QXCFXGBZH4udVGu0aNliAuvgEZp+f6ikOaR9eIQ+5ku/1TJ/CFKYwhSmMw/8BiDUKMABQAAA=\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Replicated drop_component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('valid response', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include(`Successfully dropped`);",
									"    pm.expect(response.replicated.length).to.equal(3);",
									"    pm.expect(response.replicated[0].message).include(`Successfully dropped`);",
									"    pm.expect(response.replicated[1].message).include(`Successfully dropped`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\": \"drop_component\",\n    \"project\": \"deploy-test-payload-tar-gz\",\n    \"replicated\": true}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 1 on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 2', () => {",
									"    const response = pm.response.json();",
									"    const node1_name = pm.environment.get('NODE1_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node1_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE1_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert after remove node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 1', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"plexus\",\n    \"records\": [\n        {\n            \"id\":\"1-remove\",\n            \"test\":\"this is a good test of remove_node\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert not on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records not inserted into plexus node 2', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"Other than the test drive, it was the first time he had driven it.\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"Sure, as long as there won't be a test\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"A DNA test would start around five hundred bucks.\"",
									"    },",
									"    { ",
									"        \"id\":\"4\",",
									"        \"test\":\"He wishes to test me!\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert not on node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records not inserted into plexus node 3', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"Other than the test drive, it was the first time he had driven it.\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"Sure, as long as there won't be a test\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"A DNA test would start around five hundred bucks.\"",
									"    },",
									"    { ",
									"        \"id\":\"4\",",
									"        \"test\":\"He wishes to test me!\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert not on node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records not inserted into plexus node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"Other than the test drive, it was the first time he had driven it.\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"Sure, as long as there won't be a test\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"A DNA test would start around five hundred bucks.\"",
									"    },",
									"    { ",
									"        \"id\":\"4\",",
									"        \"test\":\"He wishes to test me!\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert after remove node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Records inserted into plexus node 4', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"inserted 1 of 1 records\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"table\": \"plexus\",\n    \"records\": [\n        { \n            \"id\":\"4-remove\",\n            \"test\":\"He wishes to remove_node!\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm insert not on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node-1 unchanged', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql([",
									"    {",
									"        \"id\": \"1\",",
									"        \"test\": \"Other than the test drive, it was the first time he had driven it.\"",
									"    },",
									"    {",
									"        \"id\": \"2\",",
									"        \"test\": \"Sure, as long as there won't be a test\"",
									"    },",
									"    {",
									"        \"id\": \"3\",",
									"        \"test\": \"A DNA test would start around five hundred bucks.\"",
									"    },",
									"    { ",
									"        \"id\":\"4\",",
									"        \"test\":\"He wishes to test me!\"",
									"    },",
									"    {",
									"        \"id\": \"1-remove\",",
									"        \"test\": \"this is a good test of remove_node\"",
									"    }",
									"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select id, test from data.plexus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 3 on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 2', () => {",
									"    const response = pm.response.json();",
									"    const node3_name = pm.environment.get('NODE3_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node3_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE3_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 4 on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node is removed from node 2', () => {",
									"    const response = pm.response.json();",
									"    const node4_name = pm.environment.get('NODE4_NAME');",
									"    pm.expect(response.message).to.equal(`Successfully removed '${node4_name}' from cluster`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE4_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 2 on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE2_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 3 on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE3_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 4 on node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE4_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 2 on node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE2_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 4 on node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE4_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 2 on node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE2_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 2 on node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE2_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop DB data node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('database deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'data'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_database\",\n    \"database\": \"data\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop DB data node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('database deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'data'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_database\",\n    \"database\": \"data\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop DB data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('database deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'data'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_database\",\n    \"database\": \"data\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop DB data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('database deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'data'\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_database\",\n    \"database\": \"data\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Plexus Replicated Components",
			"item": [
				{
					"name": "Add nodes",
					"item": [
						{
							"name": "Add node 2 target node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Add node success message', () => {",
											"    const response = pm.response.json();",
											"    const node_host = pm.environment.get(\"NODE1_HOST\");",
											"    const port = pm.environment.get(\"REPLICATION_PORT\");",
											"    pm.expect(response.message).to.equal(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
											"});",
											"",
											"setTimeout(()=>{}, 2000)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Add node 3 target node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Add node success message', () => {",
											"    const response = pm.response.json();",
											"    const node_host = pm.environment.get(\"NODE2_HOST\");",
											"    const port = pm.environment.get(\"REPLICATION_PORT\");",
											"    pm.expect(response.message).to.eql(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
											"});",
											"",
											"setTimeout(()=>{}, 2000)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE2_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Add node 4 target node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Add node success message', () => {",
											"    const response = pm.response.json();",
											"    const node_host = pm.environment.get(\"NODE1_HOST\");",
											"    const port = pm.environment.get(\"REPLICATION_PORT\");",
											"    pm.expect(response.message).to.equal(`Successfully added 'wss://${node_host}:${port}' to cluster`);",
											"});",
											"",
											"setTimeout(()=>{}, 2000)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"verify_tls\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Confirm hdb_nodes node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Four records in hdb_nodes node-4', () => {",
											"    const response = pm.response.json();",
											" console.log('response', response);",
											"    // pm.expect(response.length).to.equal(4);",
											" ",
											"    pm.expect(response.find(el => el.name === pm.environment.get(\"NODE1_NAME\"))).to.exist;",
											"    pm.expect(response.find(el => el.name === pm.environment.get(\"NODE2_NAME\"))).to.exist;",
											"    pm.expect(response.find(el => el.name === pm.environment.get(\"NODE3_NAME\"))).to.exist;",
											"    pm.expect(response.find(el => el.name === pm.environment.get(\"NODE4_NAME\"))).to.exist;",
											"",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"sql\",\n    \"sql\": \"select * from system.hdb_nodes\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add component",
					"item": [
						{
							"name": "Replicated add_component",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(`Successfully added project: my-component`);",
											"    pm.expect(response.replicated.length).to.equal(3);",
											"    pm.expect(response.replicated[0].message).include(`Successfully added project: my-component`);",
											"    pm.expect(response.replicated[1].message).include(`Successfully added project: my-component`);",
											"    pm.expect(response.replicated[2].message).include(`Successfully added project: my-component`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"add_component\",\n    \"project\": \"my-component\",\n    \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get components",
					"item": [
						{
							"name": "Get Components node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"my-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"my-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"my-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"my-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Drop added component",
					"item": [
						{
							"name": "Replicated drop added component",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(`Successfully dropped: my-component`);",
											"    pm.expect(response.replicated.length).to.equal(3);",
											"    pm.expect(response.replicated[0].message).include(`Successfully dropped: my-component`);",
											"    pm.expect(response.replicated[1].message).include(`Successfully dropped: my-component`);",
											"    pm.expect(response.replicated[2].message).include(`Successfully dropped: my-component`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"drop_component\",\n    \"project\": \"my-component\",\n    \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get components",
					"item": [
						{
							"name": "Get Components node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.not.include('\"name\":\"my-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.not.include('\"name\":\"my-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.not.include('\"name\":\"my-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.not.include('\"name\":\"my-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Set Component File",
					"item": [
						{
							"name": "Replicated Set Component File node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include('Successfully set component: test111.js');",
											"    pm.expect(response.replicated[0].message).to.include('Successfully set component: test111.js');",
											"    pm.expect(response.replicated[1].message).to.include('Successfully set component: test111.js');",
											"    pm.expect(response.replicated[2].message).to.include('Successfully set component: test111.js');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"set_component_file\",\n  \"project\": \"my-component2\",\n  \"file\": \"test111.js\",\n  \"payload\": \"console.log('hello world')\",\n  \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Component File node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(\"console.log('hello world')\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"get_component_file\",\n  \"project\": \"my-component2\",\n  \"file\": \"test111.js\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Component File node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(\"console.log('hello world')\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"get_component_file\",\n  \"project\": \"my-component2\",\n  \"file\": \"test111.js\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Component File node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(\"console.log('hello world')\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"get_component_file\",\n  \"project\": \"my-component2\",\n  \"file\": \"test111.js\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Component File node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(\"console.log('hello world')\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"get_component_file\",\n  \"project\": \"my-component2\",\n  \"file\": \"test111.js\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Replicated drop component2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(`Successfully dropped: my-component`);",
											"    pm.expect(response.replicated.length).to.equal(3);",
											"    pm.expect(response.replicated[0].message).include(`Successfully dropped: my-component`);",
											"    pm.expect(response.replicated[1].message).include(`Successfully dropped: my-component`);",
											"    pm.expect(response.replicated[2].message).include(`Successfully dropped: my-component`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"drop_component\",\n    \"project\": \"my-component2\",\n    \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deploy tar component",
					"item": [
						{
							"name": "Replicated deploy tar component",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(`Successfully deployed: deploy-test-payload-tar-gz`);",
											"    pm.expect(response.replicated.length).to.equal(3);",
											"    pm.expect(response.replicated[0].message).include(`Successfully deployed: deploy-test-payload-tar-gz`);",
											"    pm.expect(response.replicated[1].message).include(`Successfully deployed: deploy-test-payload-tar-gz`);",
											"    pm.expect(response.replicated[2].message).include(`Successfully deployed: deploy-test-payload-tar-gz`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"deploy_component\",\n    \"project\": \"deploy-test-payload-tar-gz\",\n    \"replicated\": true,\n    \"payload\": \"H4sIAAh0mmYAA+08W2wk2VXtzWzYLVZipIgNCRK62Atjz7Sr3922w+xO9cPumumHp7s9fixhprrqdnfZ9eiph9vt0cBHQKwitFL4AJZEUVA+AsrPJoqUlQIB5QMkxEp8QISQCBCEeAuEIDy0Ujjn3uqHezxre3fsDdk+Y7u7bt3zvPeec8+5VSNGQucO0Wg0k0oR9pnmn9F4kn8GQGLJNPzLxKOxKInGEolkLERS5y9aKOS7nuKAKJqyr2uqre5RRzeMR/tBt1brbegEegw//5+AGBHvluRcoVIvnBsPsEc6mXzs+MdiqTiMfzITTWeSyTSOfzKViYdI9NwkGoP3+fiHnn7+B0JPhUJlRSXVOtkiAWBb6Fn4jYdCTy3BJ1w/tXs6klKjUePfEGPmHvwKE10u8fbQrVAootqmqHS7BhVN6ima4ikre+W87FHzFu13O47i0pxttXSNWip1GfrMF+FPJxS6egrcktKkhhvI8yH4cw1+ToF3hzqublsc70X4E4bV8ni8Bj3wQEyPWl5Jsdq+0qaI2ewauutFo5+feeoDcy/9yV88nSl++cbcS3/w7Xm8O/fSJ/6O4JdnnvvhH+MizsyMTHQEroyT+pmWQymxW0TtKE6b3r38Ic1WfROYKx4ITVq6Qd27ly93QQm4tJueolu61X7muR+NncAnP+Bz+blnJrrOTHQVBl1r1Dqp7w+GpvA9CGJkXTkoUkWjTuS84sAJ/j8eS0/6/3QiEQ2RgycuyTHwPvf/sXiGlOSsVMsV5TsF8UDxPOdsXu76tpV1la1KtJzP1nc2k7I0gNsFafRdOgZcIRZdInVgXdp+R6zP4n+EWDxxFlUnA8GYntLtvNQeKJEd0y17nJa5NqiZPK2aj7A9gzsW4tF3piKPkWMa5nal23J+y9zp72xutJvx7fZ2vNNRTc3YOpAaO2vLu9pmzGhatY62Zuw39aypbB4YamzpdqGYNVSrgm3723Bf2Ux1m6Yq57PuwXEz41iTFW4LsfTZTRaocVGBEmRcfkfmHtvOPGJz+TCykbi9kaiXbkrwvZjU+UyTD6/lU/1gRkm9O8XhBCyMmfDYZWYJsWT0zMYcF/IJ7mImd4JTeE9BPLeoP4KT4n80lZ7M/xLp2DT/uwgoyw1S0lVquVQQcna37+jtjkfm1QUSj0LALCoOuMZ8NkxkSxUFYZ06pu5iYCK6SzrUoc0+aTsKxGUtTI462zDxbKJYfTLpXIlCVGAlQE+vA2Rcu+X1FIdCZ40ormurugL0yDGumsx7HUpm6wHG7AJjolHFEHSL4L3BLdLTvY7te8ShrufoKtIIE91SDV9DGQa3Dd3UAw6IzvR3BSDqu6AByhkmpq3pLfykTK2u3wR/2AkTTUfSTd+DRhcbmSHDqEfEdohLDUMACjrIzXQdScf6oOhdNKgXmMjFll7HNo9qortCy3csYEkZjmaDyRjHXap62ILdW7Zh2D1UTbUtTUeN3BVBaMAtpWnvU6YLH17L9kBULgIOQHc0qsEtt6MYBmnSwGDAF8yrjKnjIHtYFJanKwbp2g7jN6kmzJhGsUDq1dXGplQrELlO1mvVO3K+kCezUh2uZ8NkU24UqxsNAj1qUqWxTaqrRKpsk1tyJR8mha31WqFeJ9WaIJfXS3IB2uRKrrSRlytrJAt4lSrMYRlmMhBtVAkyDEjJhToSKxcgQsOllJVLcmM7LKzKjQrSXK3WiETWpVpDzm2UpBpZ36itV+sFYJ8HshW5sloDLoVyodIQgSu0kcIduCD1olQqIStB2gDpaygfyVXXt2vyWrFBitVSvgCN2QJIJmVLBc4KlMqVJLkcJnmpLK0VGFYVqNQE7MalI5vFAjYhPwl+cg25WkE1ctVKowaXYdCy1hiibsr1QphINbmOBlmtVcthAc0JGFVGBPAqBU4FTU2OjAh0weuNemFIkOQLUglo1REZVRx0Ft9rbzWFJw1ixFU71FRE8OHdzv1jAt+7hxPifzQTfyT/j03rvxcDc3OkSDFYQnhQLAikLd2iLGh7ShPjLbh923cIpghNyApE0sCAQQ8UE7IHCBN2D7YBdg8JDJCJ1+/Ch4vfkAhEUohKArDC0MBuWorJerAG1oe3QEByu1SFYItxDOIi8AKxZukBRphZouwrusH6B9EeQkODodlw5YBcHnUsDEiO7dmqbbiiwBg2EKmCPG5wfjc4SfJAwHK3rq0QOU9udB3dVJw+JEFkZJhAr+Ae2YOb8ybMGwyPtkUXGAWUf4XUYTsAgs8dY08uIGZfbMPAN08M1VPaQ8wbuqXRAwi3QxKBPRiNMWyvo3hoft/QeJhmaMLDM+ZXYkTFPK8t9hXzXBZ/6DT7/9TE+k+losnp+r8ImOPrmc9Tvh75hPAdvice7NGxWqCrrE0kBUXtDHEUMg9bwQXAM7uwHCyPz03AMWwFd46wPIU53E5rsEd1jiEHW1SXjvBdNu9hBcOI0GD+6ypp+RbbxCuG7vXZmg9WF7of2J+3YD1ZHnDiiQI4iD56LuBEcBPNhREF9BgrxHN8SshcwDrgxfUvNhrr3K/okNU4LUWlTG7cEHOnAYpAUgHEVeoKQeCsszC6MqLpUEVzyRrevV0iPMq6PFlhUiMr3oo2HvjXCHe7kdFKF8FHMI1WyJWrgzB9BdgYtr3nBhZFhqyTgAJ0Fa+zQiLwbSjvfR/mNQ6Wgz6LZzq27bGuBFI4EErxDU/YdWuBZiuAXrJRh5vgdeuqo3c9TIR8NK7rwwRgwwyUdCfgw8kPeYK6IzMNlRg2ibsu4SEBhg38KqfNFBpHO1adYYeTFApDfrcHU8TzuiuRiEudfepEBtiL6LSFluJ64GBrNlp7hQQrwmCq86nEFA2GLegNzJgbZqFt0HgFxPE9e5FNNWdMZdY3chU0hkaujgiMHGrACoDMLMjgYKoykQKhJ6Qe3I0wclx2FzNXdSi0ghkgjA5rHQhvY3zQdAdSRQPWjQpWc3WYZCAKWmwFAk1zJCtcRK5eZXY37LZu4bdgAKalu+8/wOc/agUpXy6IpnZOPE7a/8fT0cn4H00mpvH/QuAUz3+EfjbEnv8IvX46kqPnPxjG5+D38kSXmVH7R0dnEQa4UdwmQDCkc+t17PjfD19jVv/p//z9p9+VnlM4FsbP/8/LD5y4/qOT6z+dysSm5/8XAW9/gjmxIK9fK8Z3dtjBY1ZdVrdX+fmikFp+3OniJIHJ5TzdUrzHIJ7bqh/BSfl/PJ2ZPP9LJzLT+H8RMDc84SPSKCUnDWp2ITeheHwEeYXOanlBG8vQmr5usGO0lwf4H5/HdMWFfKXX64kd1qo1Rd2OLIxn+65Itm2fF8fsnoWpEq8IOLRru7pnQybISoc4Lh5y6NqQhx9lOk6PHeQNtRBJwyZt6nF0PJM0FUilXB/SxD7w7SiQbr2sW3DbMCCRfFR6zVbdI+JjQyTAWBzcWAiTXkeHJBgVgfzqvq+re5BeabbFTx7JPatrkgCNLLbJAPPeyACOP6pRDE3fcoLjP56yoT16WCpk4g9MhueAvFTjsYLJoEozZkQUYkUQ7g34Mm4RTOUinh1BtovA9p4gzINl9RYjT7HgEaS7A+5hdmcgLuPqO1hpGRMQBuwoH/HegigIq0DZtPEA04LhM7l+ShNPXWGI2OAGw3R0EFlx59jBDhMXT5jBZJME2r6useNGNMNwqganl7yw83JQEzha4fr4/JEa6HBgg7oT5eVtnktjsaEDwhn8PHRy7ER+2vry0SMVZHC0ZQEX1Fj9h5UW9EEtjK83vG0qwOSYdcD7Q1N/vDQfUAuPV9C5KkEpH8expwANNG8PB3lUZYqApobG2PYHZWVcKwOVxqs2qND49cKofjbhJYaCjpWQBphEhc2BS2FIsacKftg29UMsG40tBixBqENTU0tjRnCnB5FPCkTwCOqe0qYwjsHD7k8cTtz/x2OT+X86MT3/uxDA469ZLCXOrpDZsZW3OFjHs2Hssc8fRsVOMTEqRnkrrHi2poM70mO2CCO3PubJOQU8m0NUXvudPfPx1RTeJYgRsa1758vjpPX/6PlfMpZITdf/RQAMPmzjVojIJ0IkOOCJHOcKpmvz+w+w/j++lzsPHic+/zN6/zeaSSTZ8z+J9HT9Xwicov4/82qI1f9nfu90JEf1f8SYwddW3pjo8oGg/YdCoQ+PqoX4ik/BUm3cNXD8D4dOcUYA/a7An9dCoczx7zWw90LuptSDBFVcfc/q7/sd6ie9tn4/vds99AHZ91qLSx+LJZLxWGZ5Kbl//9fZYL/wSuoF/Pz3O61LvTd/4gs/9Zlvf/nTv/3a737QaP3cVz7x9T988NkvXfrzb33zX3519bc+an29n369+Mtv/vOvLYrPh775xt4/fOMXyq985CPfzf/iH3/rburfPqn963e+uvepFy6Vfv5XUs9+9c6ffc41X3/xrUt/9Z3feBD+5H+I//Ob//TBP3rrT7/R/O4/lvU3P/PZG1uXficv/H3tRflv1qt/+SNvdX9p679eefWNn/zalue2nv/fVz/92l8bf/tOh30A4/X/8/IDJ6x/iPapifWfSWfS0/r/RUA8Q0xPN+n1WCYeSyxnMvGkGM8kY7GMEF+KnfbtppMW2PUlY8fMFluVm4q6ZFVv9c1Mf2e/t+PuWNei7UzmFk2lD7IVh8b8+Fbt/p7SdFKpipOV99yEa+ai/mo7v+mv7Xd79p2Knt3biUTrxWgl1aq0crd2qpG4F/drN6VauXNzO5ZrapvxW9nDZlO6FpEa7eX7q5mS7ERL+6ad7jXLkcpWbns/cr+xaVWsmylpU6ov1yTH3thN3UzGsuuJg90lVT7YXk7qVT+nZDaLtcOdThMU8XeSm4eGEI+nT/M21YlG+Z51KsLZToU0a03hp0LSnp7f2DvzqdCktxXSybfjPx4mrmtbNbPUaGfKjXK0vFtIVBvtqAAJxWNYH8GdcPrvx/2teG5efwQn+X/+/3+M+/9UJj59/uNCIHL16uMeAB/VbBexvHzkoTtLY49aW64evLTES8yCEDxVzWq7pNzPsbLu4JFCjoNVZtZbHD2U/UB4NhKZkAErvnbPCkrDZL1abwTFd0d4tmu73nxw/LGA6IjP3osCF9wZvN/Fqug6LHczeC0Ku38MOjvU8x2LuH6XOuIRWnD3IRNmWJQma4Uxxm3qzQ8ZBgLz18MGJzCBrk3awqMPzgmff5/gyggxbg8FcjUijMgphmuPHqYPhBjSHby3poyejGXmPGr6NYdSPDVoKM7a4dDuw4Hg9lbIbJEahh0mPdsxtB+fPU7NQOgHpB2QXCFXGBZH4udVGu0aNliAuvgEZp+f6ikOaR9eIQ+5ku/1TJ/CFKYwhSmMw/8BiDUKMABQAAA=\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get components",
					"item": [
						{
							"name": "Get Components node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"deploy-test-payload-tar-gz\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"deploy-test-payload-tar-gz\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"deploy-test-payload-tar-gz\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"deploy-test-payload-tar-gz\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Drop deployed tar component",
					"item": [
						{
							"name": "Replicated drop deployed tar component",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(`Successfully dropped`);",
											"    pm.expect(response.replicated.length).to.equal(3);",
											"    pm.expect(response.replicated[0].message).include(`Successfully dropped`);",
											"    pm.expect(response.replicated[1].message).include(`Successfully dropped`);",
											"    pm.expect(response.replicated[2].message).include(`Successfully dropped`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"drop_component\",\n    \"project\": \"deploy-test-payload-tar-gz\",\n    \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deploy git component",
					"item": [
						{
							"name": "Replicated deploy git component",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"console.log(response)",
											"    const componentName = 'my-git-component';",
											"    pm.expect(response.message).to.include(`Successfully deployed: ${componentName}`);",
											"    pm.expect(response.replicated.length).to.equal(3);",
											"    pm.expect(response.replicated[0].message).include(`Successfully deployed: ${componentName}`);",
											"    pm.expect(response.replicated[1].message).include(`Successfully deployed: ${componentName}`);",
											"    pm.expect(response.replicated[2].message).include(`Successfully deployed: ${componentName}`);",
											"});",
											"setTimeout(()=>{}, 31000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\": \"deploy_component\",\n    \"project\": \"my-git-component\",\n    \"package\": \"HarperDB/application-template\",\n    \"restart\": true,\n    \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get components",
					"item": [
						{
							"name": "Get Components node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"my-git-component\"');",
											"    pm.expect(entries_text).to.include('\"name\":\"schema.graphql\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"my-git-component\"');",
											"    pm.expect(entries_text).to.include('\"name\":\"schema.graphql\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"my-git-component\"');",
											"    pm.expect(entries_text).to.include('\"name\":\"schema.graphql\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.include('\"name\":\"my-git-component\"');",
											"    pm.expect(entries_text).to.include('\"name\":\"schema.graphql\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Call component",
					"item": [
						{
							"name": "Get Component File node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include('TableName @table');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"get_component_file\",\n  \"project\": \"my-git-component\",\n  \"file\": \"schema.graphql\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Insert data node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.equal('inserted 2 of 2 records');",
											"});",
											"",
											"setTimeout(()=>{}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"insert\",\n    \"schema\":\"data\",\n    \"table\":\"TableName\",\n    \"records\": [\n        {\n            \"id\": \"1\",\n            \"name\":\"Harper\"\n        },\n        {\n            \"id\": \"2\",\n            \"name\":\"Rex\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Select data node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response[0].name).to.equal('Harper');",
											"    pm.expect(response[1].name).to.equal('Rex');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from data.TableName\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Select data node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response[0].name).to.equal('Harper');",
											"    pm.expect(response[1].name).to.equal('Rex');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from data.TableName\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Select data node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response[0].name).to.equal('Harper');",
											"    pm.expect(response[1].name).to.equal('Rex');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from data.TableName\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Select data node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response[0].name).to.equal('Harper');",
											"    pm.expect(response[1].name).to.equal('Rex');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from data.TableName\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Drop deployed git component",
					"item": [
						{
							"name": "Replicated drop deployed git component",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include(`Successfully dropped`);",
											"    pm.expect(response.replicated.length).to.equal(3);",
											"    pm.expect(response.replicated[0].message).include(`Successfully dropped`);",
											"    pm.expect(response.replicated[1].message).include(`Successfully dropped`);",
											"    pm.expect(response.replicated[2].message).include(`Successfully dropped`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"drop_component\",\n    \"project\": \"my-git-component\",\n    \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SSH Keys",
					"item": [
						{
							"name": "Replicated Add ssh key node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include('Added ssh key');",
											"    pm.expect(response.replicated[0].message).to.include('Added ssh key');",
											"    pm.expect(response.replicated[1].message).to.include('Added ssh key');",
											"    pm.expect(response.replicated[2].message).to.include('Added ssh key');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"add_ssh_key\",\n  \"name\": \"harperdb-private-component\",\n  \"key\": \"-----BEGIN OPENSSH PRIVATE KEY-----\\nthis\\nis\\na\\nfake\\nkey\\n-----END OPENSSH PRIVATE KEY-----\",\n  \"host\": \"harperdb-private-component.github.com\",\n  \"hostname\": \"github.com\",\n  \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "List ssh keys node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response[0].name).to.equal('harperdb-private-component');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"list_ssh_keys\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "List ssh keys node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response[0].name).to.equal('harperdb-private-component');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"list_ssh_keys\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "List ssh keys node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response[0].name).to.equal('harperdb-private-component');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"list_ssh_keys\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "List ssh keys node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response[0].name).to.equal('harperdb-private-component');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"list_ssh_keys\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Replicated Delete ssh key node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include('Deleted ssh key');",
											"    pm.expect(response.replicated[0].message).to.include('Deleted ssh key');",
											"    pm.expect(response.replicated[1].message).to.include('Deleted ssh key');",
											"    pm.expect(response.replicated[2].message).to.include('Deleted ssh key');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"operation\": \"delete_ssh_key\",\n  \"name\": \"harperdb-private-component\",\n  \"replicated\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Drop schema 'data'",
					"item": [
						{
							"name": "Drop schema 'data' node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Schema dropped node 1', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.equal(\"successfully deleted 'data'\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 1500)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"data\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop schema 'data' node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Schema dropped node 1', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.equal(\"successfully deleted 'data'\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 1500)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"data\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop schema 'data' node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Schema dropped node 1', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.equal(\"successfully deleted 'data'\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 1500)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"data\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Drop schema 'data' node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Schema dropped node 1', () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.equal(\"successfully deleted 'data'\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=>{}, 1500)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operation\":\"drop_schema\",\n    \"schema\":\"data\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get components",
					"item": [
						{
							"name": "Get Components node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.not.include('\"name\":\"my-git-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.not.include('\"name\":\"my-git-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.not.include('\"name\":\"my-git-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Get Components node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('valid response', () => {",
											"    const response = pm.response.json();",
											"    const entries_text = JSON.stringify(response.entries);",
											"    pm.expect(entries_text).to.not.include('\"name\":\"my-git-component\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\": \"get_components\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove nodes",
					"item": [
						{
							"name": "Remove node 1 on node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Node is removed from node 2', () => {",
											"    const response = pm.response.json();",
											"    const node1_name = pm.environment.get('NODE1_NAME');",
											"    pm.expect(response.message).to.equal(`Successfully removed '${node1_name}' from cluster`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE1_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 3 on node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Node is removed from node 2', () => {",
											"    const response = pm.response.json();",
											"    const node3_name = pm.environment.get('NODE3_NAME');",
											"    pm.expect(response.message).to.equal(`Successfully removed '${node3_name}' from cluster`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE3_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 4 on node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Node is removed from node 2', () => {",
											"    const response = pm.response.json();",
											"    const node4_name = pm.environment.get('NODE4_NAME');",
											"    pm.expect(response.message).to.equal(`Successfully removed '${node4_name}' from cluster`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE4_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 2 on node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE2_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 3 on node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE3_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 4 on node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE4_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE1_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 2 on node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE2_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE2_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 4 on node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE4_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 2 on node 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE2_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE3_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						},
						{
							"name": "Remove node 2 on node 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{USERNAME}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"node_name\": \"{{NODE2_NAME}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
									"protocol": "https",
									"host": [
										"{{NODE4_HOST}}"
									],
									"port": "{{HDB_PORT}}"
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Clean up routes",
			"item": [
				{
					"name": "Set config delete all routes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Config set message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"Configuration successfully set. You must restart HarperDB for new config settings to take effect.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"set_configuration\",\n    \"replication_routes\":[]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Set config delete all routes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Config set message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"Configuration successfully set. You must restart HarperDB for new config settings to take effect.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"set_configuration\",\n    \"replication_routes\":[]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Set config delete all routes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Config set message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"Configuration successfully set. You must restart HarperDB for new config settings to take effect.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"set_configuration\",\n    \"replication_routes\":[]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Set config delete all routes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Config set message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"Configuration successfully set. You must restart HarperDB for new config settings to take effect.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"set_configuration\",\n    \"replication_routes\":[]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE4_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE4_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node 2 restarted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include(\"Restarting\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node 1 restarted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"Restarting HarperDB. This may take up to 60 seconds.\")",
									"});",
									"",
									"setTimeout(()=>{}, 10000)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Routes",
			"item": [
				{
					"name": "Add node 1 routes to node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes set message returned', () => {",
									"    const response = pm.response.json();",
									"    const node1_host = pm.environment.get('NODE1_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set[0]).to.eql({",
									"        'host': node1_host,",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.skipped).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"routes\":[ {\"host\": \"{{NODE1_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 routes to node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes set message returned', () => {",
									"    const response = pm.response.json();",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set).to.eql([",
									"        \"wss://127.0.0.9:9999\",",
									"        {",
									"            \"host\": node2_host,",
									"            \"port\": clustering_port",
									"        },",
									"        {",
									"            \"hostname\": node2_host,",
									"            \"port\": clustering_port",
									"        }",
									"    ]);",
									"    pm.expect(response.skipped).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"routes\":[ \"wss://127.0.0.9:9999\", {\"host\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}}, {\"hostname\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart all nodes, from node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Node 2 restarted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include(\"Restarting\")",
									"    pm.expect(response.job_id).to.include(\"-\")",
									"});",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 10000);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart_service\",\n    \"service\": \"http_workers\",    \"replicated\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get routes returns routes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes are returned', () => {",
									"    const response = pm.response.json();",
									"console.log(response);",
									"    const node1_host = pm.environment.get('NODE1_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    pm.expect(response[0]).to.eql({",
									"        'host': node1_host,",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_get_routes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add duplicate route node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes skipped message returned', () => {",
									"    const response = pm.response.json();",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully set');",
									"    pm.expect(response.set).to.eql([]);",
									"    pm.expect(response.skipped[0]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_set_routes\",\n    \"routes\":[ {\"host\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm routes added to config node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes found in config', () => {",
									"    const response = pm.response.json();",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"    pm.expect(response.replication.routes[0]).to.eql(\"wss://127.0.0.9:9999\")",
									"",
									"    pm.expect(response.replication.routes[1]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"",
									"    pm.expect(response.replication.routes[2]).to.eql({",
									"        'hostname': node2_host,",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_configuration\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete routes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes are deleted', () => {",
									"    const response = pm.response.json();",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully deleted');",
									"    pm.expect(response.deleted[1]).to.eql({",
									"        'host': node2_host,",
									"        'port': clustering_port",
									"    });",
									"    pm.expect(response.deleted[2]).to.eql({",
									"        'hostname': node2_host,",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_delete_routes\",\n    \"routes\":[ \"wss://127.0.0.9:9999\", {\"host\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}}, {\"hostname\": \"{{NODE2_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restart message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"Restarting HarperDB. This may take up to 60 seconds.\");",
									"});",
									"",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 10000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm routes removed from config node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('routes are not there', () => {",
									"    const response = pm.response.json();",
									"    const node2_host = pm.environment.get('NODE2_HOST');",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"",
									"    let route_found = false;",
									"    response.replication.routes.forEach((r) => {",
									"        if (r.host === node2_host) route_found = true",
									"    })",
									"",
									"",
									"    pm.expect(route_found).to.be.false",
									"    ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_configuration\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete all routes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Routes are deleted', () => {",
									"    const response = pm.response.json();",
									"    const clustering_port = parseInt(pm.environment.get('CLUSTERING_PORT'));",
									"    const node1_host = pm.environment.get('NODE1_HOST');",
									"",
									"    pm.expect(response.message).to.equal('cluster routes successfully deleted');",
									"    pm.expect(response.deleted[0]).to.eql({",
									"        'host': node1_host,",
									"        'port': clustering_port",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"cluster_delete_routes\",\n    \"routes\":[ {\"host\": \"{{NODE1_HOST}}\", \"port\": {{CLUSTERING_PORT}}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Restart node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restart message returned', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"Restarting HarperDB. This may take up to 60 seconds.\");",
									"});",
									"",
									"// Wait for the restart complete",
									"setTimeout(()=>{}, 10000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"restart\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction log",
			"item": [
				{
					"name": "Create schema 'tx_log_test' for tx log tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema 'tx_log_test' is created\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"database 'tx_log_test' successfully created\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_schema\",\n    \"schema\": \"tx_log_test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'chicken' for tx log tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Table 'chicken' is created\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"table 'tx_log_test.chicken' successfully created.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"hash_attribute\": \"id\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert two records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Two records are inserted\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql({",
									"        \"message\": \"inserted 2 of 2 records\",",
									"        \"inserted_hashes\": [",
									"            1,",
									"            2",
									"        ],",
									"        \"skipped_hashes\": []",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"name\": \"Hen Solo\",\n            \"lays_eggs\": true,\n            \"age\": 2\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Cluck Vader\",\n            \"lays_eggs\": false,\n            \"age\": 1\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Update one record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"One record is updated\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql({",
									"        \"message\": \"updated 1 of 1 records\",",
									"        \"update_hashes\": [",
									"            2",
									"        ],",
									"        \"skipped_hashes\": []",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"update\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"records\": [\n        {\n            \"id\": 2,\n            \"lays_eggs\": true\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete one record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"One record is deleted\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.eql({",
									"        \"message\": \"1 of 1 record successfully deleted\",",
									"        \"deleted_hashes\": [",
									"            2",
									"        ],",
									"        \"skipped_hashes\": []",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"delete\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"hash_values\": [2]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Read tx log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// get response minus the schema definitions",
									"const response = pm.response.json()",
									"",
									"pm.test('Log has correct number of records', () => {",
									"    pm.expect(response.length).to.equal(3)",
									"})",
									"const user = pm.environment.get('USERNAME')",
									"",
									"pm.test('Insert transaction log is correct', () => {",
									"    const insert_tx = response[0];",
									"    const record_1 = insert_tx.records[0];",
									"    const record_2 = insert_tx.records[1];",
									"",
									"    pm.expect(insert_tx.operation).to.equal('insert');",
									"    pm.expect(insert_tx.user_name).to.equal(user);",
									"    pm.expect(insert_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(record_1.id).to.equal(1);",
									"    pm.expect(record_1.name).to.equal('Hen Solo');",
									"    pm.expect(record_1.lays_eggs).to.equal(true);",
									"    pm.expect(record_1.age).to.equal(2);",
									"    pm.expect(record_1).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_1).to.haveOwnProperty('__createdtime__')",
									"    pm.expect(record_2.id).to.equal(2);",
									"    pm.expect(record_2.name).to.equal('Cluck Vader');",
									"    pm.expect(record_2.lays_eggs).to.equal(false);",
									"    pm.expect(record_2.age).to.equal(1);",
									"    pm.expect(record_2).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_2).to.haveOwnProperty('__createdtime__')",
									"})",
									"",
									"pm.test('Update transaction log is correct', () => {",
									"    const update_tx = response[1];",
									"",
									"    pm.expect(update_tx.operation).to.equal('update');",
									"    pm.expect(update_tx.user_name).to.equal(user);",
									"    pm.expect(update_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(update_tx.records[0].id).to.equal(2);",
									"    pm.expect(update_tx.records[0].lays_eggs).to.equal(true);",
									"    pm.expect(update_tx.records[0]).to.haveOwnProperty('__updatedtime__');",
									"})",
									"",
									"pm.test('Delete transaction log is correct', () => {",
									"    const delete_tx = response[2];",
									"    pm.expect(delete_tx.operation).to.equal('delete');",
									"    pm.expect(delete_tx.user_name).to.equal(user);",
									"    pm.expect(delete_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(delete_tx.hash_values.length).to.equal(1);",
									"    pm.expect(delete_tx.hash_values[0]).to.equal(2)",
									"})",
									"",
									"// Save the timestamps to a var so they can be used by other tests.",
									"pm.environment.set('TX_LOG_TIMESTAMP_0', response[0].timestamp);",
									"pm.environment.set('TX_LOG_TIMESTAMP_1', response[1].timestamp);",
									"pm.environment.set('TX_LOG_TIMESTAMP_2', response[2].timestamp);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Read tx log limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test('One record is returned', () => {",
									"    pm.expect(response.length).to.equal(1)",
									"})",
									"",
									"pm.test('One record returned is correct', () => {",
									"    const resp = response[0];",
									"",
									"    pm.expect(resp.operation).to.equal('insert');",
									"    pm.expect(resp.hash_values).to.eql([1, 2])",
									"     pm.expect(resp.records.length).to.eql(2)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"database\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"limit\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Read tx log to",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// remove schema_define events",
									"const response = pm.response.json();",
									"",
									"pm.test('Read log returns two insert logs', () => {",
									"    pm.expect(response.length).to.equal(1)",
									"})",
									"",
									"pm.test('Read log returns one upsert log', () => {",
									"    const insert_tx = response[0];",
									"    const record_1 = insert_tx.records[0];",
									"    const record_2 = insert_tx.records[1];",
									"    const user = pm.environment.get('USERNAME')",
									"",
									"    pm.expect(insert_tx.operation).to.equal('insert');",
									"    pm.expect(insert_tx.user_name).to.equal(user);",
									"    pm.expect(insert_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(record_1.id).to.equal(1);",
									"    pm.expect(record_1.name).to.equal('Hen Solo');",
									"    pm.expect(record_1.lays_eggs).to.equal(true);",
									"    pm.expect(record_1.age).to.equal(2);",
									"    pm.expect(record_1).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_1).to.haveOwnProperty('__createdtime__')",
									"    pm.expect(record_2.id).to.equal(2);",
									"    pm.expect(record_2.name).to.equal('Cluck Vader');",
									"    pm.expect(record_2.lays_eggs).to.equal(false);",
									"    pm.expect(record_2.age).to.equal(1);",
									"    pm.expect(record_2).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_2).to.haveOwnProperty('__createdtime__')",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"to\": {{TX_LOG_TIMESTAMP_1}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Read tx log from",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test('From returns two records', () => {",
									"    pm.expect(response.length).to.equal(2)",
									"})",
									"",
									"const user = pm.environment.get('USERNAME')",
									"",
									"pm.test('Update transaction log is correct', () => {",
									"    const update_tx = response[0];",
									"",
									"    pm.expect(update_tx.operation).to.equal('update');",
									"    pm.expect(update_tx.user_name).to.equal(user);",
									"    pm.expect(update_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(update_tx.records[0].id).to.equal(2);",
									"    pm.expect(update_tx.records[0].lays_eggs).to.equal(true);",
									"    pm.expect(update_tx.records[0]).to.haveOwnProperty('__updatedtime__');",
									"})",
									"",
									"pm.test('Delete transaction log is correct', () => {",
									"    const delete_tx = response[1];",
									"",
									"    pm.expect(delete_tx.operation).to.equal('delete');",
									"    pm.expect(delete_tx.user_name).to.equal(user);",
									"    pm.expect(delete_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(delete_tx.hash_values.length).to.equal(1);",
									"    pm.expect(delete_tx.hash_values[0]).to.equal(2)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"from\": {{TX_LOG_TIMESTAMP_1}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Read tx log from and to",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test('From and to return two messages', () => {",
									"    pm.expect(response.length).to.equal(2)",
									"})",
									"",
									"const user = pm.environment.get('USERNAME')",
									"",
									"pm.test('Read from and to is correct', () => {",
									"    const insert_tx = response[0];",
									"    const record_1 = insert_tx.records[0];",
									"    const record_2 = insert_tx.records[1];",
									"",
									"    pm.expect(insert_tx.operation).to.equal('insert');",
									"    pm.expect(insert_tx.user_name).to.equal(user);",
									"    pm.expect(insert_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(record_1.id).to.equal(1);",
									"    pm.expect(record_1.name).to.equal('Hen Solo');",
									"    pm.expect(record_1.lays_eggs).to.equal(true);",
									"    pm.expect(record_1.age).to.equal(2);",
									"    pm.expect(record_1).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_1).to.haveOwnProperty('__createdtime__')",
									"    pm.expect(record_2.id).to.equal(2);",
									"    pm.expect(record_2.name).to.equal('Cluck Vader');",
									"    pm.expect(record_2.lays_eggs).to.equal(false);",
									"    pm.expect(record_2.age).to.equal(1);",
									"    pm.expect(record_2).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_2).to.haveOwnProperty('__createdtime__')",
									"})",
									"",
									"pm.test('Update transaction log is correct', () => {",
									"    const update_tx = response[1];",
									"",
									"    pm.expect(update_tx.operation).to.equal('update');",
									"    pm.expect(update_tx.user_name).to.equal(user);",
									"    pm.expect(update_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(update_tx.records[0].id).to.equal(2);",
									"    pm.expect(update_tx.records[0].lays_eggs).to.equal(true);",
									"    pm.expect(update_tx.records[0]).to.haveOwnProperty('__updatedtime__');",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"from\": {{TX_LOG_TIMESTAMP_0}},\n    \"to\": {{TX_LOG_TIMESTAMP_2}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Read tx log from, to and limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"const user = pm.environment.get('USERNAME')",
									"",
									"pm.test('From, to and limit return one message', () => {",
									"    pm.expect(response.length).to.equal(1)",
									"})",
									"",
									"pm.test('Read from, to and limit is correct', () => {",
									"    const insert_tx = response[0];",
									"    const record_1 = insert_tx.records[0];",
									"    const record_2 = insert_tx.records[1];",
									"",
									"    pm.expect(insert_tx.operation).to.equal('insert');",
									"    pm.expect(insert_tx.user_name).to.equal(user);",
									"    pm.expect(insert_tx).to.haveOwnProperty('timestamp');",
									"    pm.expect(record_1.id).to.equal(1);",
									"    pm.expect(record_1.name).to.equal('Hen Solo');",
									"    pm.expect(record_1.lays_eggs).to.equal(true);",
									"    pm.expect(record_1.age).to.equal(2);",
									"    pm.expect(record_1).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_1).to.haveOwnProperty('__createdtime__')",
									"    pm.expect(record_2.id).to.equal(2);",
									"    pm.expect(record_2.name).to.equal('Cluck Vader');",
									"    pm.expect(record_2.lays_eggs).to.equal(false);",
									"    pm.expect(record_2.age).to.equal(1);",
									"    pm.expect(record_2).to.haveOwnProperty('__updatedtime__')",
									"    pm.expect(record_2).to.haveOwnProperty('__createdtime__')",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"from\": {{TX_LOG_TIMESTAMP_0}},\n    \"to\": {{TX_LOG_TIMESTAMP_1}},\n    \"limit\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete tx log before partial delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('Job is started', () => {",
									"    pm.expect(response.message).to.include('Starting job with id')",
									"})",
									"",
									"pm.environment.set('JOB_ID', response.message.split(' ')[4]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"delete_transaction_logs_before\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"timestamp\": {{TX_LOG_TIMESTAMP_1}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait for delete tx log before partial delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const test_name = 'Delete tx log before partial delete'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"const job_id = pm.environment.get('JOB_ID')",
									"if (response.length === 0) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find a job with id: ${job_id}`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const status = response[0].status;",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        request_count++",
									"        pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"        console.log(`Waiting for \"${test_name}\" to complete`);",
									"        setTimeout(() => {}, 2000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        pm.test(`\"${test_name}\" has completed`, () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received ERROR status`);",
									"        break;",
									"        ",
									"    default:",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received unknown status`);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get first delete job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm job response is correct', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].type).to.equal('delete_transaction_logs_before');",
									"    pm.expect(response[0].status).to.equal('COMPLETE');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm partial tx log records deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Log record was deleted', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(2)",
									"    pm.expect(response[0].operation).to.equal('update');",
									"    pm.expect(response[0].timestamp).to.equal(pm.environment.get('TX_LOG_TIMESTAMP_1'));",
									"    pm.expect(response[1].operation).to.equal('delete');",
									"    pm.expect(response[1].timestamp).to.equal(pm.environment.get('TX_LOG_TIMESTAMP_2'));",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete tx log before delete all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('Job is started', () => {",
									"    pm.expect(response.message).to.include('Starting job with id')",
									"})",
									"",
									"pm.environment.set('JOB_ID', response.message.split(' ')[4]);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Increment timestamp 2 so that the test can use it to delete all the records.",
									"const timestamp = pm.environment.get('TX_LOG_TIMESTAMP_2');",
									"pm.environment.set('TX_LOG_TIMESTAMP_2', (timestamp + 1000));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"delete_transaction_logs_before\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\",\n    \"timestamp\": {{TX_LOG_TIMESTAMP_2}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Wait for delete tx log before delete all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const test_name = 'Delete tx log before delete all'",
									"let request_count = pm.environment.get('JOB_STATUS_COUNT');",
									"const response = pm.response.json();",
									"const job_id = pm.environment.get('JOB_ID')",
									"if (response.length === 0) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    pm.expect.fail(`\"${test_name}\" was unable to find a job with id: ${job_id}`)",
									"}",
									"",
									"if (request_count > pm.environment.get('JOB_STATUS_RETRY_MAX')) {",
									"    pm.environment.set('JOB_STATUS_COUNT', 0);",
									"    console.error(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"    pm.expect.fail(`\"${test_name}\" exceeded the max retry threshold for waiting for a job to complete.`);",
									"}",
									"",
									"const status = response[0].status;",
									"switch(status){",
									"    case 'IN_PROGRESS':",
									"        request_count++",
									"        pm.environment.set('JOB_STATUS_COUNT', request_count);",
									"        console.log(`Waiting for \"${test_name}\" to complete`);",
									"        setTimeout(() => {}, 2000);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        break;",
									"",
									"    case 'COMPLETE':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        pm.test(`\"${test_name}\" has completed`, () => {",
									"            pm.expect(status).to.equal('COMPLETE');",
									"            console.log(response);",
									"        });",
									"        break;",
									"",
									"    case 'ERROR':",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received ERROR status`);",
									"        break;",
									"        ",
									"    default:",
									"        pm.environment.set('JOB_STATUS_COUNT', 0);",
									"        console.error(`\"${test_name}\" response: ${JSON.stringify(response)}`)",
									"        pm.expect.fail(`\"${test_name}\" received unknown status`);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get second delete job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Confirm job response is correct', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].type).to.equal('delete_transaction_logs_before');",
									"    pm.expect(response[0].status).to.equal('COMPLETE');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"get_job\",\n    \"id\": \"{{JOB_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm all tx log records deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Transaction log is empty', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.equal(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"read_transaction_log\",\n    \"schema\": \"tx_log_test\",\n    \"table\": \"chicken\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema 'tx_log_test'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema 'tx_log_test' is dropped\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.equal(\"successfully deleted 'tx_log_test'\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_schema\",\n    \"schema\": \"tx_log_test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sharding",
			"item": [
				{
					"name": "Add node 2 to 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully added');",
									"    pm.expect(response.message).to.contain('to cluster');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"subcribe\": true,\n    \"publish\": true,\n    \"rejectUnauthorized\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 to 1 subs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully added');",
									"    pm.expect(response.message).to.contain('to cluster');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"rejectUnauthorized\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    },\n    \"subscriptions\": [\n    {\n        \"database\": \"data\",\n        \"table\": \"fish\",\n        \"publish\": true,\n        \"subscribe\": true\n    }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 3 to 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully added');",
									"    pm.expect(response.message).to.contain('to cluster');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"subcribe\": true,\n    \"publish\": true,\n    \"rejectUnauthorized\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 3 to 1 subs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('Successfully added');",
									"    pm.expect(response.message).to.not.contain('an error');",
									"    pm.expect(response.message).to.contain('to cluster');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"url\": \"wss://{{NODE1_HOST}}:{{REPLICATION_PORT}}\",\n    \"rejectUnauthorized\": false,\n    \"authorization\": {\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    },\n    \"subscriptions\": [\n    {\n        \"database\": \"data\",\n        \"table\": \"fish\",\n        \"publish\": true,\n        \"subscribe\": true\n    }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table 'fish' node1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain(`table 'data.fish' successfully created`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"create_table\",\n    \"table\": \"fish\",\n    \"primary_key\": \"id\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert node1 'fish' replicate node2 headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('inserted 1 of 1 records');",
									"    pm.expect(response.inserted_hashes[0]).to.eql(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Replicate-To",
								"value": "{{NODE2_NAME}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"replicateTo\": [\"{{NODE2_NAME}}\"],\n    \"table\": \"fish\",\n    \"records\": [\n        {\n            \"id\": 1,\n            \"name\": \"Mullet\",\n            \"type\": [1, 2, 3]\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Insert node1 'fish' replicate node2 headers confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain('inserted 1 of 1 records');",
									"    pm.expect(response.inserted_hashes[0]).to.eql(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"insert\",\n    \"replicateTo\": [\"{{NODE2_NAME}}\"],\n    \"replicatedConfirmation\": 1,\n    \"table\": \"fish\",\n    \"records\": [\n        {\n            \"id\": 2,\n            \"name\": \"Trout\"\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get all 'fish' node1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"replicateFrom\":false,\n\t\"table\":\"fish\",\n\t\"search_attribute\":\"id\",\n\t\"search_value\":\"*\",\n\t\"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get all 'fish' node2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"replicateFrom\":false,\n\t\"table\":\"fish\",\n\t\"search_attribute\":\"id\",\n\t\"search_value\":\"*\",\n\t\"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Get all 'fish' node3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.length).to.equal(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_value\",\n\t\"replicateFrom\":false,\n\t\"table\":\"fish\",\n\t\"search_attribute\":\"id\",\n\t\"search_value\":\"*\",\n\t\"get_attributes\":[\"*\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete table 'fish' node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain(`successfully deleted table 'data.fish'`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_table\",\n    \"table\": \"fish\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE1_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE1_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete table 'fish' node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain(`successfully deleted table 'data.fish'`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_table\",\n    \"table\": \"fish\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE2_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE2_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				},
				{
					"name": "Delete table 'fish' node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Check response message', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.contain(`successfully deleted table 'data.fish'`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{USERNAME}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"drop_table\",\n    \"table\": \"fish\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{NODE3_HOST}}:{{HDB_PORT}}",
							"protocol": "https",
							"host": [
								"{{NODE3_HOST}}"
							],
							"port": "{{HDB_PORT}}"
						}
					},
					"response": []
				}
			]
		}
	]
}