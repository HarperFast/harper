{
	"info": {
		"_postman_id": "e2edb2fd-974d-4b78-8ccb-ce46bee2e3cc",
		"name": "Six Node Clustering Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add Nodes",
			"item": [
				{
					"name": "Add node 1 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node4_name}}\",\n    \"host\": \"{{node4_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{bear_schema}}:{{temp_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm cluster status node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b99ff-f4a6-4c23-b26e-c53f79861e85",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node_name = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.status.outbound_connections[0].node_name).to.be.eql(node_name);\r",
									"    pm.expect()\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"cluster_status\"\n}\n"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 2 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node4_name}}\",\n    \"host\": \"{{node4_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{bear_schema}}:{{press_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm cluster status node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b99ff-f4a6-4c23-b26e-c53f79861e85",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node_name = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.status.outbound_connections[0].node_name).to.be.eql(node_name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"cluster_status\"\n}\n"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 3 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node4_name}}\",\n    \"host\": \"{{node4_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{bear_schema}}:{{rpm_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm cluster status node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b99ff-f4a6-4c23-b26e-c53f79861e85",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node_name = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.status.outbound_connections[0].node_name).to.be.eql(node_name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"cluster_status\"\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 4 to 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node6_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node6_name}}\",\n    \"host\": \"{{node6_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{bear_schema}}:{{temp_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        },\n        {\n            \"channel\": \"{{bear_schema}}:{{press_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        },\n        {\n            \"channel\": \"{{bear_schema}}:{{rpm_table}}\",\n            \"subscribe\": false,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 4 to 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node5_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node5_name}}\",\n    \"host\": \"{{node5_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{con_schema}}:{{con_rpm_table}}\",\n            \"subscribe\": true,\n            \"publish\": true\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Add node 5 to 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node3_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully added ${node} to manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operation\": \"add_node\",\n    \"name\": \"{{node3_name}}\",\n    \"host\": \"{{node3_host}}\",\n    \"port\": \"{{clustering_port}}\",\n    \"subscriptions\": [\n        {\n            \"channel\": \"{{con_schema}}:{{con_rpm_table}}\",\n            \"subscribe\": true,\n            \"publish\": false\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Add Schemas And Tables",
			"item": [
				{
					"name": "Create schema bearing node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"schema bearing successfully created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema bearing node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    try {\r",
									"        pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(true);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table temperature node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"table bearing.temperature successfully created.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table pressure node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"table bearing.pressure successfully created.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{press_table}}\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table rpm node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"table bearing.rpm successfully created.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{rpm_table}}\",\n\t\"hash_attribute\": \"id\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm all tables node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tables have been propagated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bearing.hasOwnProperty(\"temperature\")).to.be.eql(true);\r",
									"    pm.expect(jsonData.bearing.hasOwnProperty(\"pressure\")).to.be.eql(true);\r",
									"    pm.expect(jsonData.bearing.hasOwnProperty(\"rpm\")).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create schema conversion node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"schema conversion successfully created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\":\"create_schema\",\n  \"schema\": \"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm schema conversion node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been propagated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"conversion\")).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Create table conversion.rpm node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"table conversion.rpm successfully created.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"create_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"hash_attribute\": \"rpm\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "73aa3d77-31f5-4545-af1d-d21ce89819b4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "476d6371-8410-4d07-9566-b1808301df29",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Add Records",
			"item": [
				{
					"name": "noSQL insert temperature data node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data added successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 6 of 6 records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"records\": [\n\t  {\n\t  \t\"id\": 1,\n\t  \t\"sensorData1\": 34,\n\t  \t\"sensorData2\": 54\n\t  },\n\t  {\n\t  \t\"id\": 2,\n\t  \t\"sensorData1\": 25,\n\t  \t\"sensorData2\": 77\n\t  },\n\t  {\n\t  \t\"id\": 3,\n\t  \t\"sensorData1\": 90,\n\t  \t\"sensorData2\": 78\n\t  },\n\t  {\n\t  \t\"id\": 4,\n\t  \t\"sensorData1\": 33,\n\t  \t\"sensorData2\": 54\n\t  },\n\t  {\n\t  \t\"id\": 5,\n\t  \t\"sensorData1\": 76,\n\t  \t\"sensorData2\": 12\n\t  },\n\t  {\n\t  \t\"id\": 6,\n\t  \t\"sensorData1\": 11,\n\t  \t\"sensorData2\": 12\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature data node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(6);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(6);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A no temperature data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A attributes node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"sensorData1\", \"sensorData2\", \"id\", '__createdtime__', '__updatedtime__' ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL insert temperature data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data added successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 3 of 3 records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"records\": [\n\t  {\n\t  \t\"id\": 34,\n\t  \t\"sensorData1\": 34,\n\t  \t\"sensorData2\": 54\n\t  },\n\t  {\n\t  \t\"id\": 35,\n\t  \t\"sensorData1\": 25,\n\t  \t\"sensorData2\": 77\n\t  },\n\t  {\n\t  \t\"id\": 36,\n\t  \t\"sensorData1\": 90,\n\t  \t\"sensorData2\": 78\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature data node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(6);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(9);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(9);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B no temperature data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL insert pressure data node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data added successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 5 of 5 records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\": \"INSERT INTO {{bear_schema}}.{{press_table}} (id, psi) VALUES(11, '123'), (22, '145'), (44, '208'), (55, '310'), (88, '333')\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure data node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(5);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(5);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm no pressure data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\" ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\" ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\" ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\" ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\" ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm pressure attributes node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"psi\", \"id\" ]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "CSV data load rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.includes(\"Starting job with id\")).to.be.eql(true);\r",
									"    \r",
									"    eval(pm.globals.get(\"function:getJobIdCSVct\"))(jsonData, null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_data_load\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"action\": \"insert\",\n\t\"table\":\"{{rpm_table}}\",\n\t\"transact_to_cluster\": true,\n\t\"data\":\"id,inner_race, outer_race\\n1, 1234, 800\\n2, 1456, 834\\n3, 1241, 799\\n4, 1314, 788\\n6, 1234, 810\\n8, 1233, 679\\n9, 1321, 788\\n10, 1234, 756\\n11, 1222, 844\\n12, 1231, 801\\n18, 1134, 808\\n19, 1266, 889\\n20, 1888 879\\n21, 1998, 899\\n\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Check csv data load complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test Job Found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    ",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    ",
									"    let status = jsonData[0].status;",
									"    ",
									"    switch(status){",
									"        case 'ERROR':",
									"            console.log(jsonData[0]);",
									"            console.log(\"Error checking CSV data load job.\")",
									"            if(pm.environment.get(\"next_request_ct\")){",
									"                postman.setNextRequest(pm.environment.get(\"next_request_ct\"));",
									"            }",
									"            pm.expect(status).to.not.eql('ERROR');",
									"            break;",
									"        case 'COMPLETE':",
									"            console.log(jsonData[0]);",
									"            if(pm.environment.get(\"next_request_ct\")){",
									"                postman.setNextRequest(pm.environment.get(\"next_request_ct\"));",
									"            }",
									"           ",
									"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
									"            break;",
									"        case '0':",
									"        case 0:",
									"        case 'IN_PROGRESS':",
									"            console.log('in progress, checking again');",
									"            postman.setNextRequest('Check csv data load complete');",
									"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
									"            break;",
									"        default:",
									"            postman.setNextRequest('Check csv data load complete');",
									"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
									"            break;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id_ct}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(14);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm rpm data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(14);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm rpm data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(14);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm no rpm data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "CSV file load conv rpm node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.includes(\"Starting job with id\")).to.be.eql(true);\r",
									"    \r",
									"    eval(pm.globals.get(\"function:getJobIdCSVFilect\"))(jsonData, null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"csv_file_load\",\n\t\"action\": \"insert\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"transact_to_cluster\": true,\n\t\"file_path\":\"{{con_rpm_csv_file}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Check file load complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test Job Found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    ",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    ",
									"    let status = jsonData[0].status;",
									"    ",
									"    switch(status){",
									"        case 'ERROR':",
									"            console.log(jsonData[0]);",
									"            console.log(\"Error checking CSV file load job.\")",
									"            if(pm.environment.get(\"next_request_ct\")){",
									"                postman.setNextRequest(pm.environment.get(\"next_request_ct\"));",
									"            }",
									"            pm.expect(status).to.not.eql('ERROR');",
									"            break;",
									"        case 'COMPLETE':",
									"            console.log(jsonData[0]);",
									"            if(pm.environment.get(\"next_request_ct\")){",
									"                postman.setNextRequest(pm.environment.get(\"next_request_ct\"));",
									"            }",
									"           ",
									"            pm.expect(status).to.be.oneOf(['COMPLETE', 'ERROR']);",
									"            setTimeout(()=>{}, 500);",
									"            break;",
									"        case '0':",
									"        case 0:",
									"        case 'IN_PROGRESS':",
									"            console.log('in progress, checking again');",
									"            postman.setNextRequest('Check file load complete');",
									"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0']);",
									"            break;",
									"        default:",
									"            postman.setNextRequest('Check file load complete');",
									"            pm.expect(status).to.be.oneOf(['IN_PROGRESS', 0, '0', 'ERROR', 'COMPLETE']);",
									"            break;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"get_job\",\n\t\"id\": \"{{job_id_ct}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(1000);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(1000);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm no conv rpm data node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL insert conv rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data added successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"inserted 2 of 2 records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"insert\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"records\": [\n\t  {\n\t  \t\"rpm\": 11,\n\t  \t\"rad_hr\": \"undefined\",\n\t  \t\"hz\": \"Test\"\n\t  },\n\t  {\n\t  \t\"rpm\": 21,\n\t  \t\"hz\": \"null\",\n\t  \t\"rad_hr\": 199\n\t  }\n\t]\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"rad_hr\": null,\r",
									"        \"hz\": \"Test\",\r",
									"        \"rad_min\": null\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"rad_hr\": 199,\r",
									"        \"hz\": null,\r",
									"        \"rad_min\": null\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(row=>{\r",
									"        delete row.__createdtime__;\r",
									"        delete row.__updatedtime__;\r",
									"    });\r",
									"    \r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"rad_hr\": null,\r",
									"        \"rad_min\": null,\r",
									"        \"hz\": \"Test\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"rad_hr\": 199,\r",
									"        \"rad_min\": null,\r",
									"        \"hz\": null\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(row=>{\r",
									"        delete row.__createdtime__;\r",
									"        delete row.__updatedtime__;\r",
									"    });\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{con_schema}}.{{con_rpm_table}} where rpm = 11 or rpm = 21\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm data node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"rad_hr\": null,\r",
									"        \"rad_min\": null,\r",
									"        \"hz\": \"Test\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"rad_hr\": 199,\r",
									"        \"rad_min\": null,\r",
									"        \"hz\": null\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(row=>{\r",
									"        delete row.__createdtime__;\r",
									"        delete row.__updatedtime__;\r",
									"    });\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{con_schema}}.{{con_rpm_table}} where rpm = 11 or rpm = 21\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f597ec0d-2e0b-42a3-864e-a722f57ba9c5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "93a23085-d016-4e9f-8d3f-6d1b7b072791",
						"type": "text/javascript",
						"exec": [
							"postman.setGlobalVariable(\"function:getJobIdCSVct\", (jsonData, next_req)=>{",
							"    let id_index = jsonData.message.indexOf('id ');",
							"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
							"    pm.environment.set(\"job_id_ct\", parsedId);",
							"    pm.environment.set(\"next_request_ct\", next_req);",
							"    postman.setNextRequest(\"Check csv data load complete\");",
							"});",
							"",
							"postman.setGlobalVariable(\"function:getJobIdCSVFilect\", (jsonData, next_req)=>{",
							"    let id_index = jsonData.message.indexOf('id ');",
							"    let parsedId = jsonData.message.substr(id_index + 3, jsonData.message.length);",
							"    pm.environment.set(\"job_id_ct\", parsedId);",
							"    pm.environment.set(\"next_request_ct\", next_req);",
							"    postman.setNextRequest(\"Check file load complete\");",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update Records",
			"item": [
				{
					"name": "noSQL update temperature node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"updated 2 of 2 records\",\r",
									"    \"skipped_hashes\": [],\r",
									"    \"update_hashes\": [\r",
									"        1,\r",
									"        3\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of updated records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"records\": [\n\t  {\n\t    \"id\": 1,\n\t\t\"sensorData1\": 122,\n\t  \t\"sensorData2\": \"test\"\n\t  },\n\t\t{\n\t    \"id\": 3,\n\t    \"sensorData1\": \"null\",\n\t    \"sensorData2\": 351,\n\t    \"extraAttribute\": \"harper\"\n\t  }\n\t]\n}\n\n"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"id\": 1,\r",
									"        \"sensorData1\": 122,\r",
									"        \"sensorData2\": \"test\"\r",
									"    },\r",
									"    {\r",
									"        \"id\": 3,\r",
									"        \"sensorData1\": null,\r",
									"        \"sensorData2\": 351\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\",\n\t\"hash_values\":[1,3],\n\t\"get_attributes\": [\"id\", \"sensorData1\", \"sensorData2\"]\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"id\": 1,\r",
									"        \"sensorData1\": 122,\r",
									"        \"sensorData2\": \"test\"\r",
									"    },\r",
									"    {\r",
									"        \"id\": 3,\r",
									"        \"sensorData1\": null,\r",
									"        \"sensorData2\": 351\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Records match expected result\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\",\n\t\"hash_values\":[1,3],\n\t\"get_attributes\": [\"id\", \"sensorData1\", \"sensorData2\"]\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update temp attributes node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"sensorData1\", \"sensorData2\", \"extraAttribute\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.temperature.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL update pressure node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"updated 1 of 1 records\",\r",
									"    \"skipped_hashes\": [],\r",
									"    \"update_hashes\": [\r",
									"        22\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of updated records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"update {{bear_schema}}.{{press_table}} set psiUPDATE = 'fault' where id = 22\"\n}\n"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"psiUPDATE\": \"fault\",\r",
									"        \"psi\": 145,\r",
									"        \"id\": 22\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    delete jsonData[0].__createdtime__;\r",
									"    delete jsonData[0].__updatedtime__;\r",
									"    \r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{bear_schema}}.{{press_table}} where id = 22\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"psiUPDATE\": \"fault\",\r",
									"        \"psi\": 145,\r",
									"        \"id\": 22\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    delete jsonData[0].__createdtime__;\r",
									"    delete jsonData[0].__updatedtime__;\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{bear_schema}}.{{press_table}} where id = 22\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"psiUPDATE\": \"fault\",\r",
									"        \"psi\": 145,\r",
									"        \"id\": 22\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    delete jsonData[0].__createdtime__;\r",
									"    delete jsonData[0].__updatedtime__;\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select * from {{bear_schema}}.{{press_table}} where id = 22\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm SQL update pressure attributes node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_attributes = [ \"id\", \"psi\", \"psiUPDATE\", '__createdtime__', '__updatedtime__' ];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Describe all shows propagated attributes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        let value_found;\r",
									"        jsonData.bearing.pressure.attributes.forEach((attr_obj) =>{\r",
									"            if(!expected_attributes.includes(attr_obj.attribute)) {\r",
									"                 value_found = false;\r",
									"            }\r",
									"        });\r",
									"        pm.expect(value_found).to.not.be.false;\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL update conv rpm node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"updated 2 of 2 records\",\r",
									"    \"skipped_hashes\": [],\r",
									"    \"update_hashes\": [\r",
									"        11,\r",
									"        21\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of updated records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"records\": [\n\t  {\n\t    \"rpm\": 11,\n\t    \"hz\": \"update\"\n\n\t  },\n\t  {\n\t    \"rpm\": 21,\n\t    \"hz\": \"update\"\n\t  }\n\t]\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"update\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"update\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"update\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"update\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"update\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"update\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL update conv rpm node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"updated 2 of 2 records\",\r",
									"    \"skipped_hashes\": [],\r",
									"    \"update_hashes\": [\r",
									"        11,\r",
									"        21\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of updated records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"update\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\":\"{{con_rpm_table}}\",\n\t\"records\": [\n\t  {\n\t    \"rpm\": 11,\n\t    \"hz\": \"harper\"\n\n\t  },\n\t  {\n\t    \"rpm\": 21,\n\t    \"hz\": \"alby\"\n\t  }\n\t]\n}\n\n"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 4 B",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"harper\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"alby\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL update node 5 B",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"harper\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"alby\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Updated record exists as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm noSQL no update node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = [\r",
									"    {\r",
									"        \"rpm\": 11,\r",
									"        \"hz\": \"update\"\r",
									"    },\r",
									"    {\r",
									"        \"rpm\": 21,\r",
									"        \"hz\": \"update\"\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Records not updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData).to.eql(expected_result);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"search_by_hash\",\n\t\"schema\": \"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\",\n\t\"hash_values\":[11,21],\n\t\"get_attributes\": [\"rpm\", \"hz\"]\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete Records",
			"item": [
				{
					"name": "noSQL delete  temperature records node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"2 of 2 records successfully deleted\",\r",
									"    \"deleted_hashes\": [\r",
									"        1,\r",
									"        2\r",
									"    ],\r",
									"    \"skipped_hashes\": []\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"For expected delete response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"hash_values\":[1,2]\n}\n"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature records delete node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature records delete node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(7);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm A temperature records delete node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(7);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "noSQL delete  temperature record node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"2 of 2 records successfully deleted\",\r",
									"    \"deleted_hashes\": [\r",
									"        34,\r",
									"        35\r",
									"    ],\r",
									"    \"skipped_hashes\": []\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"For expected delete response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"delete\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\":\"{{temp_table}}\",\n\t\"hash_values\":[34, 35]\n}\n"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature records delete node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature records delete node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(7);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm B temperature records delete node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(4);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{bear_schema}}.{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "SQL delete conv rpm records node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"let expected_result = {\r",
									"    \"message\": \"1 of 1 record successfully deleted\",\r",
									"    \"deleted_hashes\": [\r",
									"        11\r",
									"    ],\r",
									"    \"skipped_hashes\": []\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"For expected delete response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected_result);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"DELETE FROM {{con_schema}}.{{con_rpm_table}} WHERE rpm = 11\"\n}\n"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm records delete node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(1);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm records delete node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(1001);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm conv rpm records delete node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of records\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    try {\r",
									"        pm.expect(jsonData[0][\"COUNT(*)\"]).to.be.eql(0);\r",
									"    } catch (error) {\r",
									"        eval(pm.globals.get(\"function:retryRequest\"))(request, error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"sql\",\n\t\"sql\":\"select count(*) from {{con_schema}}.{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Remove Nodes",
			"item": [
				{
					"name": "Remove node 1 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node4_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 2 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node4_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 3 to 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node4_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node4_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 4 to 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node6_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node6_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 4 to 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node5_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node5_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Remove node 5 to 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Node successfully removed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var node = pm.variables.get(\"node3_name\");\r",
									"    pm.expect(jsonData.message).to.be.eql(`successfully removed ${node} from manifest`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"remove_node\",\n\t\"name\":\"{{node3_name}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d8cd78ef-4d09-4515-8699-b681f1e21737",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "89a897e2-88fc-4af2-9b6d-a9e97ee51906",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Drop Schemas And Tables",
			"item": [
				{
					"name": "Drop table temp node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.temperature\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.temperature\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.temperature\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.temperature\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.temperature\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table temp node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.temperature\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{temp_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.pressure\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.pressure\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.pressure\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.pressure\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.pressure\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table pressure node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.pressure\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{press_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table rpm node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table bearing.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{bear_schema}}\",\n\t\"table\": \"{{rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table conversion.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table conversion.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table conversion.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table conversion.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table conversion.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop table conv rpm node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Table successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted table conversion.rpm\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_table\",\n\t\"schema\":\"{{con_schema}}\",\n\t\"table\": \"{{con_rpm_table}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema bearing\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema bearing\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema bearing\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema bearing\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema bearing\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema bearing node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema bearing\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{bear_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Confirm dropped schema node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema has been dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hasOwnProperty(\"bearing\")).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"describe_all\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema conversion\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node1_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node1_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema conversion\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node2_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node2_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema conversion\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node3_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node3_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema conversion\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node4_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node4_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema conversion\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node5_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node5_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				},
				{
					"name": "Drop schema conversion node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6858e9a6-09d5-4b1a-a559-50ef8e63dccb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema successfully dropped\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.eql(\"successfully deleted schema conversion\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password_ct}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username_ct}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operation\":\"drop_schema\",\n\t\"schema\":\"{{con_schema}}\"\n}"
						},
						"url": {
							"raw": "http://{{node6_host}}:{{node_port}}",
							"protocol": "http",
							"host": [
								"{{node6_host}}"
							],
							"port": "{{node_port}}"
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "641adb01-0501-4be6-a850-9f9847559659",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "635f9f46-1b61-420c-989d-712be99e97f4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "22f2bdb2-83ee-4372-a893-329f3995a769",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f205302e-9417-4026-a0c3-fb5168069093",
				"type": "text/javascript",
				"exec": [
					"// Retries a request a set amount of times with an incrementing timeout in-between retries. ",
					"// This function is only called when a test fails. If the test fails more than the retry limit the error is thrown.",
					"postman.setGlobalVariable(\"function:retryRequest\", (request, error) => {",
					"    let current_attempt = pm.environment.get('current_attempt');",
					"    let current_request = pm.environment.get('current_request');",
					"    let retry_limit = pm.environment.get('retry_limit');",
					"    let retry_delay_const = pm.environment.get('retry_delay_const');",
					"    let retry_delay = pm.environment.get('retry_delay');",
					"    ",
					"    console.log(`### Request: ${request.name} was resent due to failing with the error: ${error} ###`);",
					"    ",
					"    //If this is the first time this function is called for current request, reset environment variables.",
					"    if (current_request !== request.name) {",
					"        pm.environment.set('retry_delay', retry_delay_const);",
					"        retry_delay = pm.environment.get('retry_delay');",
					"        pm.environment.set('current_attempt', 0);",
					"        current_attempt = pm.environment.get('current_attempt');",
					"        pm.environment.set('current_request', request.name);",
					"        current_request = pm.environment.get('current_request');",
					"    }",
					"    ",
					"    if (current_attempt < retry_limit) {",
					"        postman.setNextRequest(request.name);",
					"        pm.environment.set('current_attempt', (parseInt(current_attempt) + 1));",
					"        pm.environment.set('retry_delay', 500 + (250 * current_attempt));",
					"        setTimeout(() => {}, retry_delay);",
					"    } else {",
					"        throw error;",
					"    }",
					"});"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}