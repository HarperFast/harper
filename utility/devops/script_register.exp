#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Dec  6 23:38:17 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don
#exp_internal 1
set rootdir [lindex $argv 0];
puts "the root: $rootdir"

if { $rootdir eq ""} {
    puts "True";
    cd /opt/harperdb/bin
} else {
    puts "False";
    cd $rootdir/bin
}


puts ""

set timeout -1
spawn ./linux-harperdb register
match_max 100000
expect "*"
send -- "harperdb.io\r"
expect -re "\[a-zA-Z0-9]{41}"

set env(FingerPrint) $expect_out(0,string)
set registerID $spawn_id
puts "\n****DOES THIS MATCH GENERATED Finger Print above:   $env(FingerPrint)******\n"
puts "\nSpawn ID  $spawn_id\n"


set theLic [exec bash -c "curl --silent -X POST http://13.59.172.79:61183/register -H 'authorization: Basic emFjaGFyeUBoYXJwZXJkYi5pbzpIYXJwZXJEQkAxMjM0ISE=' -H 'cache-control: no-cache' -H 'content-type: application/json' -H 'postman-token: ddc42364-f4c8-4597-1f11-0960064b2bf6' -d '{\"fingerprint\": \"$env(FingerPrint)\",\"company\":\"harperdb.io\",\"exp_date\":\"2040-09-11\"}'"]

puts "lic: $theLic"
#expect -re "\[a-zA-Z0-9]{79}"
#set licensekey $expect_out(0,string)
#puts "\nthe LicenseKey: $licensekey\n"
#close $expect_out(spawn_id)
#set $spawn_id $registerID
#set $expect_out(spawn_id) $registerID
#puts "\nthe spawn id $spawn_id ***  $expect_out(spawn_id)"

send "$theLic\r"
expect "*"
puts "\n******THE END $expect_out(0,string)******\n"
expect eof
